// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.commons.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.commons.AccordionRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Accordion
jQuery.sap.declare("sap.ui.commons.AccordionRenderer");

/**
 * @class
 * @static
 */
sap.ui.commons.AccordionRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oAccordion An object representation of the control that should be rendered
 */
sap.ui.commons.AccordionRenderer.render = function(oRenderManager, oAccordion){

	// convenience variable
	var rm = oRenderManager;


	// write the HTML into the render manager
	rm.write("<div");
	rm.writeControlData(oAccordion);

	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute('role', 'tablist');
	}

	rm.addClass("sapUiAcd");
	rm.addStyle("width", oAccordion.getWidth());
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">"); // SPAN element

	rm.write("<div id='" + oAccordion.getId()+ "-dropTarget" + "' style='width:"+ oAccordion.getWidth() +"' tabIndex='-1' class='sapUiAcd-droptarget'></div>");

	var aSections = oAccordion.getSections();
	var aDefaultSections = oAccordion.getOpenedSectionsId().split(",");

	for(var i=0;i<aSections.length;i++){

		// Open the section if the section is part of the default opened section
		if(oAccordion.bInitialRendering){

			if(jQuery.inArray(aSections[i].getId(),aDefaultSections)!= -1){
				aSections[i]._setCollapsed(false);
			}
			else{
				aSections[i]._setCollapsed(true);
			}

	   }

	   sap.ui.commons.AccordionRenderer.renderSection(rm, aSections[i]);

	}

	rm.write('<SPAN id="' + oAccordion.getId() + '-Descr" style="visibility: hidden; display: none;">');
	rm.write(oAccordion.rb.getText("ACCORDION_DSC"));
	rm.write('</SPAN>');

	rm.write("</div>");

	oAccordion.bInitialRendering = false;

};


sap.ui.commons.AccordionRenderer.renderSection = function(oRenderManager, oControl) {

	var rm = oRenderManager;
	var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();

	var heightSet = sap.ui.commons.AccordionSection._isSizeSet(oControl.getMaxHeight());
	var widthSet = sap.ui.commons.AccordionSection._isSizeSet(oControl.getParent().getWidth());

	// root element and classes
	rm.write("<div");
	rm.writeElementData(oControl);
	rm.addClass("sapUiAcdSection");

	if(oControl.getParent().isLastSection(oControl)){
		rm.addClass("sapUiAcdSectionLast");
	}

	rm.addStyle("width", oControl.getParent().getWidth());
	if (!oControl.getCollapsed()) {
		rm.addStyle("height", oControl.getMaxHeight());
	} else {
		rm.addClass("sapUiAcdSectionColl");
	}

	rm.addClass("sapUiAcdSectionArea");

	if (!heightSet) {
		rm.addClass("sapUiAcdSectionFlexHeight");
	}
	if (!oControl.getEnabled()) {
		rm.addClass("sapUiAcdSectionDis");
	}

	rm.writeClasses();
	rm.writeStyles();

	// header
	rm.write("><div class='sapUiAcdSectionHdr'");
	if (oControl.getEnabled()) {
		rm.write(" tabindex='0'");
	}
	rm.writeAttribute("id", oControl.getId() + "-hdr");
	if (accessibility) {
		rm.writeAttribute('role', 'tab');
		rm.writeAttribute("aria-labelledby", oControl.getId() + "-lbl");
		rm.writeAttribute("aria-describedby", oControl.getParent().getId() + "-Descr");
		if (oControl.getEnabled()) {
			if (oControl.getCollapsed()) {
				rm.writeAttribute("aria-expanded", "false");
			} else {
				rm.writeAttribute("aria-expanded", "true");
			}
		}
	}
	rm.write(">");

	rm.write("<div ");
	rm.writeAttribute("id", oControl.getId() + "-trgt");
	rm.write(">");

	rm.write("<span id='" + oControl.getId() + "-hdrL'>");

	if (oControl.getEnabled()){
		rm.write("<a id='" + oControl.getId() + "-minL' class='sapUiAcdSectionMinArrow' href='javascript:void(0)' title='Collapse/Expand'");
	}else{
		rm.write("<a id='" + oControl.getId() + "-minL' class='sapUiAcdSectionMinArrow sapUiAcdCursorText' href='javascript:void(0)' title='Collapse/Expand'");
	}

	rm.write(" tabindex='-1' ");

	if (accessibility) {

		rm.writeAttribute("aria-labelledby", oControl.getId() + "-lbl");

		//Is the section opened --> selected in this case
		if (oControl.getCollapsed()) {
			rm.writeAttribute("aria-selected", "false");
		} else {
			rm.writeAttribute("aria-selected", "true");
		}
		//Disabled --> Unavailable annoucement
		if (oControl.getEnabled()) {
			rm.writeAttribute("aria-disabled", "false");
			if (!!!sap.ui.Device.browser.internet_explorer) {
				rm.writeAttribute("aria-grabbed", "false");
			}
		}
		else{
			rm.writeAttribute("aria-disabled", "true");
			if (!!!sap.ui.Device.browser.internet_explorer) {
				rm.writeAttribute("aria-grabbed", "");
			}
		}

	}
	rm.write("></a>");

	// label
	rm.write("<span tabindex='-1' id='" + oControl.getId() + "-lbl' class='sapUiAcdSectionLabel'");

	if (oControl.getCollapsed()) {
		rm.writeAttribute("aria-selected", "false");
		rm.addStyle("font-weight", "normal");
		rm.writeStyles();
	} else {
		rm.writeAttribute("aria-selected", "true");
		rm.addStyle("font-weight", "bold");
		rm.writeStyles();
	}

	if (accessibility) {

		rm.writeAttribute("role", "heading");
		rm.writeAttribute("aria-labelledby", oControl.getId() + "-lbl");
		rm.writeAttribute("tabindex", "0");

		if (oControl.getEnabled()) {
			rm.writeAttribute("aria-disabled", "false");
		}
		else{
			rm.writeAttribute("aria-disabled", "true");
		}
	}

	rm.write(">");

	rm.writeEscaped(oControl.getTitle());
	rm.write("</span>");
	rm.write("</span>");

	rm.write("</div></div>");

	// everything below the header is only rendered initially if not collapsed - saves performance and Panel just re-renders later on expand
	if (!oControl.getCollapsed()) {

		// Content area
		rm.write("<div class='sapUiAcdSectionCont' tabindex='-1' id='" + oControl.getId() + "-cont'");
		if (heightSet && widthSet) {
			rm.write(" style='position:absolute;'");
		} else {
			rm.write(" style='position:relative;top:0px;'"); // for IE7, when Panel contains relatively positioned elements
		}

		if ( sap.ui.getCore().getConfiguration().getAccessibility()){
			rm.writeAttribute('role', 'tabpanel');
		}

		rm.write(">");

		// Content (child controls)
		var oControls = oControl.getContent(),
		iLength = oControls.length;
		for (var i=0;i<iLength;i++) {
			rm.renderControl(oControls[i]);
		}
		rm.write("</div>");

	}
	// End of Panel
	rm.write("</div>");
};
}; // end of sap/ui/commons/AccordionRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ApplicationHeaderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.ApplicationHeader
jQuery.sap.declare("sap.ui.commons.ApplicationHeaderRenderer");

/**
 * @class ApplicationHeader renderer.
 * @static
 */
sap.ui.commons.ApplicationHeaderRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oAppHeader an object representation of the control that should be rendered
 */
sap.ui.commons.ApplicationHeaderRenderer.render = function(oRenderManager, oAppHeader){

	if (!this.initializationDone){
		oAppHeader.initControls();
		oAppHeader.initializationDone = true;
	}

	var appHeaderId = oAppHeader.getId();

	//Write the HTML into the render manager
	oRenderManager.write("<header");
	oRenderManager.writeControlData(oAppHeader);
	oRenderManager.addClass("sapUiAppHdr");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	//Welcome and logoff areas
	oRenderManager.write("<div id=\"" + appHeaderId + "-appHeaderWelcomeLogoffAreas\" class=\"sapUiAppHdrWelcomeLogoffArea sapUiInverted-CTX\">");
	this.renderWelcomeAndLogoffAreas(oRenderManager, oAppHeader);
	oRenderManager.write("</div>"); //End welcome and logout areas

	//Logo area
	oRenderManager.write("<div id=\"" + appHeaderId + "-logoArea\" class=\"sapUiAppHdrLogo\">");
	this.renderLogoArea(oRenderManager,oAppHeader);
	oRenderManager.write("</div>");

	oRenderManager.write("</header>");

};

/**
 * Renders the HTML for the logo area (Logo src and text if any)
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oAppHeader an object representation of the control that should be rendered
 */
sap.ui.commons.ApplicationHeaderRenderer.renderLogoArea = function(oRenderManager, oAppHeader){

	//Add the logo, but first set the source to the right path
	var sSrc = oAppHeader.getLogoSrc();
	if(!sSrc){
		jQuery.sap.require("sap.ui.core.theming.Parameters");
		sSrc = sap.ui.core.theming.Parameters._getThemeImage(); // theme logo
	}
	if(!sSrc){
		sSrc = sap.ui.resource("sap.ui.commons", "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/applicationheader/SAPLogo.png");
	}
	
	oAppHeader.oLogo.setSrc(sSrc);
	oRenderManager.renderControl(oAppHeader.oLogo);

	//Insert the logo text if any provided by application
	if (oAppHeader.getLogoText() != ""){
		oAppHeader.oLogoText.setText(oAppHeader.getLogoText());
		oAppHeader.oLogoText.setTooltip(oAppHeader.getLogoText());
		oRenderManager.renderControl(oAppHeader.oLogoText);
	}

};

/**
 * Renders the HTML for the welcome and logoff areas
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oAppHeader an object representation of the control that should be rendered
 */
sap.ui.commons.ApplicationHeaderRenderer.renderWelcomeAndLogoffAreas = function(oRenderManager, oAppHeader){

	var appHeaderId = oAppHeader.getId();

	//Check if the Welcome text is requested
	if (oAppHeader.getDisplayWelcome()){

		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

		var padding = sap.ui.getCore().getConfiguration().getRTL() ? "padding-left" : "padding-right";

		//Add the user name if provided
		if (oAppHeader.getUserName() != ""){
			oRenderManager.write("<label class=\"sapUiLbl sapUiLblEmph\" style=\"text-align: left;\" dir=\"Inherit\" id=\"" + appHeaderId + "-welcomeLabel\">" +
								  rb.getText("APPHDR_WELCOME_USER") + ":</label>");
			oRenderManager.write("&nbsp;");
			oRenderManager.write("<label class=\"sapUiLbl\" style=\"text-align: left;", padding, ":15px;\" dir=\"Inherit\" id=\"", appHeaderId, "-userLabel\">");
			oRenderManager.writeEscaped(oAppHeader.getUserName());
			oRenderManager.write("</label>");
		}
		else{
			oRenderManager.write("<label class=\"sapUiLbl sapUiLblEmph\" style=\"text-align: left;" + padding + ":15px;\" dir=\"Inherit\" id=\"" + appHeaderId + "-welcomeLabel\">" +
								  rb.getText("APPHDR_WELCOME") + "</label>");
		}
	}

	//Logout area
	if (oAppHeader.getDisplayLogoff()){

		//Display the separator only when the welcome area is displayed as well
		if (oAppHeader.getDisplayWelcome()){
			oRenderManager.write("<span role=\"separator\" class=\"sapUiTbSeparator\"></span>");
		}
		oRenderManager.renderControl(oAppHeader.oLogoffBtn);
	}

};
}; // end of sap/ui/commons/ApplicationHeaderRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Button
jQuery.sap.declare("sap.ui.commons.ButtonRenderer");

/**
 * @class
 * @author SAP AG
 * @version 1.22.8
 * @static
 */
sap.ui.commons.ButtonRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} rm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oButton An object representation of the control that should be rendered.
 */
sap.ui.commons.ButtonRenderer.render = function(rm, oButton) {

	// return immediately if control is invisible
	if (!oButton.getVisible()) {
		return;
	}

	rm.addClass("sapUiBtn");

	// button is rendered as a "<button>" element
	rm.write("<button type=\"button\""); // otherwise this turns into a submit button in IE8
	rm.writeControlData(oButton);
	if(oButton.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oButton.getTooltip_AsString());
	}

	//styling
	if (oButton.getStyled()) {
		rm.addClass("sapUiBtnS");
	}

	if (oButton.getLite()) {
		rm.addClass("sapUiBtnLite");
	}else{
		rm.addClass("sapUiBtnNorm");
	}

	var sStyle = oButton.getStyle();

	if (sStyle != "" && sStyle != sap.ui.commons.ButtonStyle.Default) {
		rm.addClass("sapUiBtn"+jQuery.sap.escapeHTML(sStyle));
	}

	//ARIA
	rm.writeAccessibilityState(oButton, {
		role: 'button',
		disabled: !oButton.getEnabled()
	});

	if (!oButton.getEnabled()) {
		rm.write(" tabIndex=\"-1\"");
		rm.addClass("sapUiBtnDsbl");
	} else {
		rm.write(" tabIndex=\"0\"");
		rm.addClass("sapUiBtnStd");
	}

	var bImageOnly = false;
	if (!oButton.getText() && oButton.getIcon()) { // icon, but no text => reduce padding
		rm.addClass("sapUiBtnIconOnly");
		bImageOnly = true; // only the image is there, so it must have some meaning
	}

	if (oButton.getWidth() && oButton.getWidth() != '') {
		rm.addStyle("width", oButton.getWidth());
		rm.addClass("sapUiBtnFixedWidth");
	}
	if (oButton.getHeight() && oButton.getHeight() != '') {
		rm.addStyle("height", oButton.getHeight());
	}
	rm.writeStyles();

	if(this.renderButtonAttributes){
		this.renderButtonAttributes(rm, oButton);
	}

	// feature-dependent CSS class, written for browsers not understanding CSS gradients (=IE8, IE9)
	// required to avoid a large number of browser selectors which is needed to NOT serve filter:... to IE10
	if (!!sap.ui.Device.browser.internet_explorer && (!document.documentMode || document.documentMode < 10)) {
		rm.addClass("sapUiBtnNoGradient");
	}

	rm.writeClasses();

	rm.write(">");

	if(this.renderButtonContentBefore){
		this.renderButtonContentBefore(rm, oButton);
	}

	var bUseIconFont = false;
	if (sap.ui.core.IconPool.isIconURI(oButton.getIcon())) {
		bUseIconFont = true;
	}

	if (oButton.getIconFirst()) {
		if (bUseIconFont) {
			this.writeIconHtml(rm, oButton, bImageOnly);
		} else if(this._getIconForState(oButton, "base")) {
			this.writeImgHtml(rm, oButton, bImageOnly);
		}
	}

	// write the button label
	if (oButton.getText()) {
		if (!oButton.getIcon() && !this.renderButtonContentBefore && !this.renderButtonContentAfter) {
			rm.writeEscaped(oButton.getText());
		} else { // if there is an icon, an additional span is required
			rm.write("<span class=\"sapUiBtnTxt\">");
			rm.writeEscaped(oButton.getText());
			rm.write("</span>");
		}
	}

	if (!oButton.getIconFirst()) {
		if (bUseIconFont) {
			this.writeIconHtml(rm, oButton, bImageOnly);
		} else if(this._getIconForState(oButton, "base")) {
			this.writeImgHtml(rm, oButton, bImageOnly);
		}
	}

	if(this.renderButtonContentAfter){
		this.renderButtonContentAfter(rm, oButton);
	}

	// close button
	rm.write("</button>");
};

/**
 * Function called by button control on mouse down event.
 */
sap.ui.commons.ButtonRenderer.onactive = function(oButton) {
	oButton.$().addClass("sapUiBtnAct").removeClass("sapUiBtnStd");
	oButton.$("img").attr("src", this._getIconForState(oButton, "active"));
};

/**
 * Function called by button control on mouse up event.
 */
sap.ui.commons.ButtonRenderer.ondeactive = function(oButton) {
	oButton.$().addClass("sapUiBtnStd").removeClass("sapUiBtnAct");
	oButton.$("img").attr("src", this._getIconForState(oButton, "deactive"));
};

/**
 * Function called by button control on blur.
 */
sap.ui.commons.ButtonRenderer.onblur = function(oButton) {
	oButton.$().removeClass("sapUiBtnFoc");
	oButton.$("img").attr("src", this._getIconForState(oButton, "blur"));
	if (!!sap.ui.Device.browser.internet_explorer) {
		sap.ui.commons.ButtonRenderer.onmouseout(oButton);
	}
};

/**
 * Function called by button control on focus.
 */
sap.ui.commons.ButtonRenderer.onfocus = function(oButton) {
	oButton.$().addClass("sapUiBtnFoc");
	oButton.$("img").attr("src", this._getIconForState(oButton, "focus"));
};

/**
 * Function called when mouse leaves button
 */
sap.ui.commons.ButtonRenderer.onmouseout = function(oButton) {
	oButton.$().removeClass("sapUiBtnAct");
	oButton.$().addClass("sapUiBtnStd");
	oButton.$("img").attr("src", this._getIconForState(oButton, "mouseout"));
};

/**
 * Function called when mouse enters button
 * @private
 */
sap.ui.commons.ButtonRenderer.onmouseover = function(oButton) {
	oButton.$("img").attr("src", this._getIconForState(oButton, "mouseover"));
};

/**
 * Returns the icon URI for the given button state
 * @private
 */
sap.ui.commons.ButtonRenderer._getIconForState = function(oButton, sState) {
	if (!oButton.getEnabled()){
		sState = "disabled";
	}
	switch(sState){
		case "focus":
		case "blur":
		case "base":
			if(oButton.$().hasClass("sapUiBtnAct")){
				var sIcon = oButton.getIconSelected() || oButton.getIconHovered();
				return sIcon ? sIcon : oButton.getIcon();
			}else if(oButton.$().hasClass("sapUiBtnFoc")){
				return oButton.getIconHovered() || oButton.getIcon();
			}
			return oButton.getIcon();
		case "mouseout":
			if(oButton.$().hasClass("sapUiBtnFoc")){
				return oButton.getIconHovered() || oButton.getIcon();
			}
			return oButton.getIcon();
		case "active":
			var sIcon = oButton.getIconSelected() || oButton.getIconHovered();
			return sIcon ? sIcon : oButton.getIcon();
		case "mouseover":
		case "deactive":
			var sIcon = oButton.getIconHovered();
			return sIcon ? sIcon : oButton.getIcon();
	}
	return oButton.getIcon();
};

/**
 * HTML for icon as image
 */
sap.ui.commons.ButtonRenderer.writeImgHtml = function(oRenderManager, oButton, bImageOnly) {
	var rm = oRenderManager,
		iconUrl = this._getIconForState(oButton, "base");

	rm.write("<img");
	rm.writeAttribute("id", oButton.getId() + "-img");
	rm.writeAttributeEscaped("src", iconUrl);
	if(oButton.getTooltip_AsString() && !oButton.getText()) {
		rm.writeAttributeEscaped("alt", oButton.getTooltip_AsString());
	} else {
		rm.writeAttribute("alt", ""); // there must be an ALT attribute
	}

	if (!bImageOnly) {
		rm.writeAttribute("role", "presentation");
	}

	rm.addClass("sapUiBtnIco");
	if (oButton.getText()) { // only add a distance to the text if there is text
		if (oButton.getIconFirst()) {
			rm.addClass("sapUiBtnIcoL");
		} else {
			rm.addClass("sapUiBtnIcoR");
		}
	}
	rm.writeClasses();

	rm.write("/>");
};

/**
 * HTML for icon as icon font
 */
sap.ui.commons.ButtonRenderer.writeIconHtml = function(oRenderManager, oButton, bImageOnly) {

	var rm = oRenderManager;
	var oIconInfo = sap.ui.core.IconPool.getIconInfo(oButton.getIcon());
	var aClasses = [];
	var mAttributes = {};

	mAttributes["id"] = oButton.getId() + "-icon";

	aClasses.push("sapUiBtnIco");
	if (oButton.getText()) { // only add a distance to the text if there is text
		var bRTL = rm.getConfiguration().getRTL();
		if ((oButton.getIconFirst() && (!bRTL || oIconInfo.skipMirroring)) || (!oButton.getIconFirst() && !oIconInfo.skipMirroring && bRTL)) {
			aClasses.push("sapUiBtnIcoL");
		} else {
			aClasses.push("sapUiBtnIcoR");
		}
	}

	rm.writeIcon(oButton.getIcon(), aClasses, mAttributes);

};

sap.ui.commons.ButtonRenderer.changeIcon = function(oButton) {

	if (sap.ui.core.IconPool.isIconURI(oButton.getIcon())) {
		var oIconInfo = sap.ui.core.IconPool.getIconInfo(oButton.getIcon());
		var oIcon = oButton.$("icon");
		if (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version < 9) {
			oIcon.text(oIconInfo.content);
		} else {
			oIcon.attr("data-sap-ui-icon-content", oIconInfo.content);
		}
		if(!oIconInfo.skipMirroring) {
			oIcon.addClass("sapUiIconMirrorInRTL");
		} else {
			oIcon.removeClass("sapUiIconMirrorInRTL");
		}
	} else if (oButton.$().hasClass("sapUiBtnAct")) {
		oButton.$("img").attr("src", this._getIconForState(oButton, "active"));
	} else if (oButton.$().hasClass("sapUiBtnFoc")) {
		oButton.$("img").attr("src", this._getIconForState(oButton, "focus"));
	} else if (oButton.$().hasClass("sapUiBtnStd")) {
		oButton.$("img").attr("src", this._getIconForState(oButton, "base"));
	}

};

}; // end of sap/ui/commons/ButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.CalloutBaseRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.commons.CalloutBaseRenderer");

/**
 * @class CalloutBase renderer.
 * @static
 */
sap.ui.commons.CalloutBaseRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the Callout that should be rendered
 */
sap.ui.commons.CalloutBaseRenderer.render = function(oRenderManager, oControl){

	var rm = oRenderManager;
	var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();
	var sId = oControl.getId();

	//container
	rm.write("<div");
	rm.writeControlData(oControl);

	rm.addClass("sapUiCltBase");
	if (this.addRootClasses) {
		this.addRootClasses(rm, oControl);
	}
	rm.writeClasses();

	if (accessibility) {
		rm.writeAttribute("role", "dialog");
		//ARIA label
		var sAriaLabel = oControl.oRb.getText('CALLOUT_ARIA_NAME');
		if(sAriaLabel){
			rm.writeAttributeEscaped("aria-label", sAriaLabel);
		}
	}
	if (oControl.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
	}
	rm.write(">");

	//first focusable control to provide tab loop
	rm.write("<span id=\"" + sId + "-fhfe\" tabIndex=\"0\"></span>");

	// content container
	rm.write("<div");
	rm.writeAttribute("id",sId + "-cont");

	rm.addClass("sapUiCltBaseCont");
	if (this.addContentClasses) {
		this.addContentClasses(rm, oControl);
	}
	rm.writeClasses();

	rm.writeAttribute("tabindex","-1");
	rm.write(">");

	// successor controls provide content here in their specific renderContent methods
	if (this.renderContent) {
		this.renderContent(rm, oControl);
	}
	rm.write("</div>");

	// arrow tip
	rm.write("<div");
	rm.writeAttribute("id", sId+"-arrow");
	if (accessibility) {
		rm.writeAttribute("role", "presentation");
	}
	// specific arrow placement is specified in behavior by setting additional CSS classes
	rm.addClass("sapUiCltBaseArr");
	if (this.addArrowClasses) {
		this.addArrowClasses(rm, oControl);
	}
	rm.writeClasses();
	rm.write("></div>");

	//last focusable control to provide tab loop
	rm.write("<span id=\"" + sId + "-fhee\" tabIndex=\"0\"></span>");

	rm.write("</div>");// container

};

}; // end of sap/ui/commons/CalloutBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.CalloutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.commons.CalloutRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Callout renderer.
 * @static
 */
sap.ui.commons.CalloutRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.CalloutBaseRenderer);

/**
 * Renders the HTML for content.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oCallout an object representation of the Callout that should be rendered
 */
sap.ui.commons.CalloutRenderer.renderContent = function(oRenderManager, oCallout){

	var rm = oRenderManager;
	var content = oCallout.getContent();

	// content
	for (var i = 0; i < content.length; i++) {
		rm.renderControl(content[i]);
	}
};

/**
 * Add the root CSS class to the Callout to redefine/extend CalloutBase
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.commons.CalloutRenderer.addRootClasses = function(oRenderManager, oControl) {
	oRenderManager.addClass("sapUiClt");
};

/**
 * Add the content CSS class to the Callout to redefine/extend CalloutBase
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.commons.CalloutRenderer.addContentClasses = function(oRenderManager, oControl) {
	oRenderManager.addClass("sapUiCltCont");
};

/**
 * Add the arrow/tip CSS class to the Callout to redefine/extend CalloutBase
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ui.commons.CalloutRenderer.addArrowClasses = function(oRenderManager, oControl) {
	oRenderManager.addClass("sapUiCltArr");
};

}; // end of sap/ui/commons/CalloutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.CarouselRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Carousel
jQuery.sap.declare("sap.ui.commons.CarouselRenderer");

/**
 * @class carousel renderer.
 * @static
 */
sap.ui.commons.CarouselRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.CarouselRenderer.render = function(oRenderManager, oControl) {

	var rm = oRenderManager;
	var bRTL = sap.ui.getCore().getConfiguration().getRTL();

	rm.write("<div");
	rm.addClass("sapUiCrsl");
	if (oControl.getWidth() != "") {
		rm.addStyle("width", oControl.getWidth());
	}
	if (oControl.getHeight() != "") {
		rm.addStyle("height", oControl.getHeight());
	}
	rm.writeStyles();
	rm.writeClasses();
	rm.writeControlData(oControl);
	rm.write(">");

	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	// Start Prev button
	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "-prevbutton");
	rm.writeAttribute("title", rb.getText("CAROUSEL_SHOW_PREV"));
	rm.addClass("sapUiCrslPrevBtn");
	rm.writeClasses();
	if (oControl.getHandleSize() != 22) {
		if (oControl.getOrientation() == "vertical") {
			rm.addStyle("height",oControl.getHandleSize() + "px");
		} else {
			rm.addStyle("width",oControl.getHandleSize() + "px");
		}
		rm.writeStyles();
	}
	rm.write(">");
	if (oControl.getOrientation() == "vertical") {
		rm.write("&#9650");//Symbol for Base and HCB Theme (Must be hidden in other themes)
	} else {
		if (bRTL) {
			rm.write("&#9658");//Symbol for Base and HCB Theme (Must be hidden in other themes)
		}
		else{
			rm.write("&#9668");//Symbol for Base and HCB Theme (Must be hidden in other themes)
		}
	}
	rm.write("</div>");
	// End Prev button

	// Start Next button
	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "-nextbutton");
	rm.writeAttribute("title", rb.getText("CAROUSEL_SHOW_NEXT"));
	rm.addClass("sapUiCrslNextBtn");
	rm.writeClasses();
	if (oControl.getHandleSize() != 22) {
		if (oControl.getOrientation() == "vertical") {
			rm.addStyle("height",oControl.getHandleSize() + "px");
		} else {
			rm.addStyle("width",oControl.getHandleSize() + "px");
		}
		rm.writeStyles();
	}
	rm.write(">");
	if (oControl.getOrientation() == "vertical") {
		rm.write("&#9660");//Symbol for Base and HCB Theme (Must be hidden in other themes)
	} else {
		if (bRTL) {
			rm.write("&#9668");//Symbol for Base and HCB Theme (Must be hidden in other themes)
		}
		else{
			rm.write("&#9658");//Symbol for Base and HCB Theme (Must be hidden in other themes)
		}
	}
	rm.write("</div>");
	// End Next button


	rm.write("<div");
	rm.writeAttribute("tabindex", "0");
	rm.addClass("sapUiCrslBefore");
	rm.writeClasses();
	rm.write("></div>");

	// Start content area
	rm.write("<div");
	rm.writeAttribute("id", oControl.getId() + "-contentarea");
	rm.addClass("sapUiCrslCnt");
	rm.writeClasses();
	rm.write(">");

	var aContent = oControl.getContent();

	rm.write("<ul");
	rm.writeAttribute("id", oControl.getId() + "-scrolllist");
	rm.writeAttribute("role", "listbox");
	rm.writeAttribute("aria-describedby", oControl.getId() + "-navigate");
	rm.addClass("sapUiCrslScl");
	rm.writeClasses();
	rm.write(">");

	for ( var i = 0; i < aContent.length; i++) {
		var oChild = aContent[i];
		rm.write("<li");
		rm.writeAttribute("id",oControl.getId() + "-item-" + oChild.getId());
		rm.writeAttribute("role", "option");
		rm.writeAttribute("tabindex", "-1");
		rm.writeAttribute("aria-describedby", oControl.getId() + "-toggleaction");
		rm.addClass("sapUiCrslItm");
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oChild);
		rm.write("</li>");
	}

	rm.write("</ul>");

	rm.write("</div>");
	// End content area

	rm.write("<div");
	rm.writeAttribute("tabindex", "0");
	rm.addClass("sapUiCrslAfter");
	rm.writeClasses();
	rm.write("></div>");

	// aria description for toggling the action mode
	rm.write("<span");
	rm.writeAttribute("id", oControl.getId() + "-toggleaction");
	rm.addStyle("position", "absolute");
	rm.addStyle("top", "-20000px");
	rm.writeStyles();
	rm.write(">");
	rm.write(rb.getText("CAROUSEL_ACTION_MODE"));
	rm.write("</span>");

	// aria description for navigation
	rm.write("<span");
	rm.writeAttribute("id", oControl.getId() + "-navigate");
	rm.addStyle("position", "absolute");
	rm.addStyle("top", "-20000px");
	rm.writeStyles();
	rm.write(">");
	rm.write(rb.getText("CAROUSEL_NAV"));
	rm.write("</span>");

	rm.write("</div>");
};
}; // end of sap/ui/commons/CarouselRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.CheckBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.CheckBox
jQuery.sap.declare("sap.ui.commons.CheckBoxRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class
 * @author SAP AG
 * @version 0.1
 * @static
 */
sap.ui.commons.CheckBoxRenderer = {
};

/**
 * Renders the HTML for the CheckBox, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that is used for writing to the render output buffer.
 * @param {sap.ui.commons.CheckBox} oCheckBox The CheckBox control that should be rendered.
 */
sap.ui.commons.CheckBoxRenderer.render = function(rm, oCheckBox) {

	// Return immediately if control is invisible
	if (!oCheckBox.getVisible()) {
		return;
	}

	rm.addClass("sapUiCb");

	// Open the containing <span> tag
	rm.write("<span");
	rm.writeControlData(oCheckBox);

	// ARIA
	rm.writeAccessibilityState(oCheckBox, {"role" : sap.ui.core.AccessibleRole.Checkbox.toLowerCase()});

	// Collect state information
	var enabled = oCheckBox.getEnabled() != null && oCheckBox.getEnabled();
	var editable = oCheckBox.getEditable() != null && oCheckBox.getEditable();
	var inErrorState = false;
	var inWarningState = false;
	if (oCheckBox.getValueState() != null) {
		inErrorState = sap.ui.core.ValueState.Error == oCheckBox.getValueState();
		inWarningState = sap.ui.core.ValueState.Warning == oCheckBox.getValueState();
	}


	// Add classes and properties depending on the state
	if (oCheckBox.getChecked()) {
		rm.addClass("sapUiCbChk");
	}

	var myTabIndex = 0;
	var bReadOnly = false;

	if (!editable) {
		bReadOnly = true;
		rm.addClass("sapUiCbRo");
		// According to CSN 2581852 2012 a readonly CB should be in the tabchain
		// This changed in 2013 back to not in the tabchain: see CSN 0002937527 2013
		// Let's see how often this will be changed back and forth in the future... Accessibility fun! :-D
		// End of 2013 is have to be again in the tabchain.
		// But not in the Form. But this is handled in the FormLayout control
		// Let's see what happens 2014... ;-)
		myTabIndex = 0;
	}
	if (!enabled) {
		bReadOnly = true;
		rm.addClass("sapUiCbDis");
		myTabIndex = -1;
	}
	if (inErrorState) {
		rm.addClass("sapUiCbErr");
		rm.writeAttribute("aria-invalid", "true");
	} else if (inWarningState) {
		rm.addClass("sapUiCbWarn");
	}
	if (enabled && editable && !inErrorState && !inWarningState) {
		rm.addClass("sapUiCbStd");
	}
	if (enabled && editable) {
		rm.addClass("sapUiCbInteractive");
	}
	rm.writeClasses();

	if (oCheckBox.getWidth() && oCheckBox.getWidth() != '') {
		rm.writeAttribute("style", "width:" + oCheckBox.getWidth() + ";");
	}

	rm.writeAttribute("tabIndex", myTabIndex);

	rm.write(">"); // close the containing <span> tag


	// Write the (potentially hidden) HTML checkbox element
	rm.write("<input type='CheckBox' tabindex='-1' id='");
	rm.write(oCheckBox.getId());
	rm.write("-CB'");

	if (oCheckBox.getName()) {
		rm.writeAttributeEscaped('name', oCheckBox.getName());
	}

	if (oCheckBox.getChecked()) {
		rm.write(" checked='checked'");
	}
	if (!enabled) {
		rm.write(" disabled='disabled'");
	}
	var tooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oCheckBox, oCheckBox.getTooltip_AsString());
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}
	if(bReadOnly) {
		rm.write(" readOnly='readOnly'");
	}
	rm.write(" />"); // close checkbox-input-element


	// Write the checkbox label which also holds the background image
	rm.write("<label");
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}
	rm.writeAttribute("for", oCheckBox.getId() + "-CB"); // label for checkbox, so clicks toggle the state
	if (!oCheckBox.getText()) {
		rm.write(" class='sapUiCbNoText'");
	}
	rm.write(">");
	if (oCheckBox.getText()) {
		this.renderText(rm, oCheckBox.getText(), oCheckBox.getTextDirection());
	}
	rm.write("</label>");

	// close the surrounding <span> element
	rm.write("</span>");
};



/**
 * Write the CheckBox label either flat or - in case the text direction is different from the environment - within a span tag with an explicit "dir".
 */
sap.ui.commons.CheckBoxRenderer.renderText = function(oRenderManager, sText, eTextDirection) {
	var rm = oRenderManager;
	if (!eTextDirection || eTextDirection == sap.ui.core.TextDirection.Inherit) {
		rm.writeEscaped(sText);
	} else {
		rm.write("<span style=\"direction:" + eTextDirection.toLowerCase() + ";\">");
		rm.writeEscaped(sText);
		rm.write("</span>");
	}
};

}; // end of sap/ui/commons/CheckBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ColorPickerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.ColorPicker
jQuery.sap.declare("sap.ui.commons.ColorPickerRenderer");

/**
 * @class ColorPicker renderer.
 * @static
 */
sap.ui.commons.ColorPickerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.ColorPickerRenderer.render = function(oRm, oControl){

	// write the HTML into the render manager
	oRm.write("<div");   // Outer DIV
	oRm.writeControlData(oControl);
	oRm.writeClasses();
	oRm.write(">"); // <DIV> element
	oRm.renderControl(oControl.oMatrix);
	oRm.write("</div>");  // outer DIV

};


}; // end of sap/ui/commons/ColorPickerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.DialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Dialog
jQuery.sap.declare("sap.ui.commons.DialogRenderer");

/**
 * @class  sap.ui.commons.DialogRenderer
 * @static
 */
sap.ui.commons.DialogRenderer = {};


/**
 * Renders the HTML for the Dialog, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} rm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.DialogRenderer.render = function(rm, oControl) {
	var heightSet = sap.ui.commons.Dialog._isSizeSet(oControl.getHeight());
	var widthSet = sap.ui.commons.Dialog._isSizeSet(oControl.getWidth());

	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	oControl.getScrollTop();  // Update the scroll position properties
	oControl.getScrollLeft();

	var aButtons = oControl.getButtons();
	var iButtonCount = aButtons.length;


	// Root element and classes/styles
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiDlg");
	if (oControl.getModal()) {
		rm.addClass("sapUiDlgModal");
	}
	rm.addClass("sapUiDlgContentBorderDesign" + oControl.getContentBorderDesign());

	rm.addStyle("width", oControl.getWidth());
	rm.addStyle("height", oControl.getHeight());
	rm.addStyle("min-width", oControl.getMinWidth());
	rm.addStyle("min-height", oControl.getMinHeight());
	rm.addStyle("max-width", oControl.getMaxWidth());
	rm.addStyle("max-height", oControl.getMaxHeight());

	if (!heightSet) {
		rm.addClass("sapUiDlgFlexHeight");
	}
	if (!widthSet) {
		rm.addClass("sapUiDlgFlexWidth");
	}
	if (iButtonCount == 0) {
		rm.addClass("sapUiDlgNoButtons");
	}
	if (!oControl.getApplyContentPadding()) {
		rm.addClass("sapUiDlgNoPad");
	}
	rm.writeClasses();
	rm.writeStyles();

	rm.writeAttribute("aria-labelledby", oControl.getId() + "-lbl " + oControl.getId() + "-acc");
	rm.writeAttribute("role", oControl.getAccessibleRole().toLowerCase());
	rm.writeAttribute("tabindex", "-1");
	rm.write("><span style='display:none;' id='", oControl.getId(), "-acc'>", rb.getText("DIALOG_CLOSE_HELP"), "</span>");

	// Header
	rm.write("<span id='" + oControl.getId() + "-fhfe' tabIndex='0'></span><div id='" + oControl.getId() + "-hdr' class='sapUiDlgHdr'>");
	rm.write("<span class='sapUiDlgHdrLeft' id='" + oControl.getId() + "-hdrL'>");

	// Header label
	var title = oControl.getTitle();
	rm.write("<span id='" + oControl.getId() + "-lbl' class='sapUiDlgLabel'");

	rm.writeAttribute("role", "heading");
	rm.writeAttribute("aria-level", "1");
	if (title) {
		rm.writeAttributeEscaped("title", title);
	}
	rm.write(">");

	if (!title) {
		rm.write("&nbsp;");
	} else {
		rm.writeEscaped(title); 
	}
	rm.write("</span></span>");
	rm.write("<span id='", oControl.getId(), "-hdrR' class='sapUiDlgHdrBtns'>");
	// Example for an additional button:   rm.write("<a class='sapUiDlgOptBtn'></a>");

	if (oControl.getShowCloseButton()) {
		rm.write("<a id='", oControl.getId(), "-close' class='sapUiDlgCloseBtn' href='javascript:void(0)'");
		rm.write(" tabIndex='-1'"); // according to accessibility experts (O.K. and M.J.), the 'x' should not be tab-able
		rm.writeAttribute("role","button");
		rm.writeAttributeEscaped("aria-label", rb.getText("DIALOG_CLOSE_HELP"));
		rm.writeAttributeEscaped("title", rb.getText("DIALOG_CLOSE_TEXT"));
		rm.write(">X</a>");
	}
	rm.write("</span></div>");

	// 	Header separator
	rm.write('<div class="sapUiDlgHdrSep"></div>');

	// Content area
	rm.write("<div class='sapUiDlgCont' id='", oControl.getId(), "-cont' tabindex=\"-1\">");

	// Content
	var aChildren = oControl.getContent();
	for(var i = 0; i < aChildren.length; i++) {
		rm.renderControl(aChildren[i]);
	}
	rm.write("</div>");

	// Footer separator
	if (iButtonCount > 0) {
		rm.write('<div class="sapUiDlgFooterSep"></div>');
	}

	// Footer
	rm.write("<div id='");
	rm.write(oControl.getId());
	rm.write("-footer' class='sapUiDlgFooter'>");

	// Wave and Buttons
	rm.write("<div class='sapUiDlgBtns'>");
	for (var i = 0; i < iButtonCount; i++) {
		rm.renderControl(aButtons[i]);
	}
	rm.write("</div><div class='sapUiDlgWave'></div></div>");

	// Grip
	if (oControl.getResizable()) {
		rm.write("<span id='");
		rm.write(oControl.getId());
		rm.write("-grip' class='sapUiDlgGrip'>&#916;</span>");
	}

	// End of Dialog
	rm.write("<span id='" + oControl.getId() + "-fhee' tabIndex='0'></span></div>");

};

}; // end of sap/ui/commons/DialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.FileUploaderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.FileUploader
jQuery.sap.declare("sap.ui.commons.FileUploaderRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.unified.FileUploaderRenderer'); // unlisted dependency retained


sap.ui.commons.FileUploaderRenderer = sap.ui.core.Renderer.extend(sap.ui.unified.FileUploaderRenderer);
}; // end of sap/ui/commons/FileUploaderRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.FormattedTextViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.commons.FormattedTextViewRenderer");

/**
 * @class FormattedTextView renderer.
 * @static
 */
sap.ui.commons.FormattedTextViewRenderer = {};

/*
 * Renders the HTML for the FormattedTextView, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for
 * writing to the render output buffer @param {sap.ui.core.Control} oControl an
 * object representation of the control that should be rendered
 */
sap.ui.commons.FormattedTextViewRenderer.render = function(oRm, oControl) {
	if (!oControl.getVisible()) {
		return;
	}

	// pattern for placeholders:
	var rPlaceHolderPattern = /<embed\s+data-index="([0-9]+)"\s*\/?>/gim;
	var sHtml = oControl.getHtmlText();

	// clone, will be modified below
	var aInnerControls = oControl.getControls().slice();

	var iToBeRendered = aInnerControls.length;
	var lastIndex = 0;
	var aMatch = [];

	// write the HTML into the render manager
	oRm.write("<span");
	oRm.writeControlData(oControl);
	oRm.addClass("sapUiFTV");
	oRm.writeClasses();

	// render Tooltip
	if (oControl.getTooltip_AsString()) {
		oRm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
	}
	oRm.write(">"); // span element

	// check for placeholders in htmlText property
	while (aMatch = rPlaceHolderPattern.exec(sHtml)) {
		// write any static HTML between previous and current placeholder (if
		// any)
		oRm.write(sHtml.slice(lastIndex, aMatch.index));
		// replace placeholder with control in aggregation
		if (this._renderReplacement(oRm, aMatch[1], aInnerControls)) {
			iToBeRendered--;
		} else {
			jQuery.sap.log.warning("Could not find matching control to placeholder #" + aMatch[1]);
		}
		lastIndex = rPlaceHolderPattern.lastIndex;
	}
	// render the remainder of the HTML
	oRm.write(sHtml.slice(lastIndex, sHtml.length));

	if (iToBeRendered > 0) {
		jQuery.sap.log.warning('There are leftover controls in the aggregation that have not been used in the formatted text', oControl);
	}

	oRm.write("</span>");

};

/* Private method for placeholder replacement */
sap.ui.commons.FormattedTextViewRenderer._renderReplacement = function(rm, controlsIndex, aControls) {
	if (aControls[controlsIndex]) {
		rm.renderControl(aControls[controlsIndex]);
		// UI5 controls must not be rendered twice!
		aControls[controlsIndex] = null;
		return true;
	} else
		return false;
};
}; // end of sap/ui/commons/FormattedTextViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.HorizontalDividerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.HorizontalDivider
jQuery.sap.declare("sap.ui.commons.HorizontalDividerRenderer");

/**
 * @class HorizontalDivider renderer.
 * @static
 */
sap.ui.commons.HorizontalDividerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered
 */
sap.ui.commons.HorizontalDividerRenderer.render = function(oRenderManager, oControl){
	var rm = oRenderManager;

	// return immediately if control is invisible
	if(!oControl.getVisible()){
		return;
	}

	rm.write("<hr");
	rm.writeControlData(oControl);
	rm.writeAttribute("role", "separator"); //ARIA
	if(oControl.getWidth()) {
		rm.writeAttribute("style", "width:"+oControl.getWidth()+";");
	}
	rm.addClass("sapUiCommonsHoriDiv");
	rm.addClass(oControl.getType() == "Page" ? "sapUiCommonsHoriDivTypePage" : "sapUiCommonsHoriDivTypeArea");
	switch(oControl.getHeight()){
		case "Ruleheight":
			rm.addClass("sapUiCommonsHoriDivHeightR");
			break;
		case "Small":
			rm.addClass("sapUiCommonsHoriDivHeightS");
			break;
		case "Large":
			rm.addClass("sapUiCommonsHoriDivHeightL");
			break;
		default:
			rm.addClass("sapUiCommonsHoriDivHeightM");
	}
	rm.writeClasses();
	rm.write("/>");
};

}; // end of sap/ui/commons/HorizontalDividerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ImageMapRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.commons.ImageMapRenderer");

/**
 * @class ImageMap renderer.
 * @static
 */
sap.ui.commons.ImageMapRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.ImageMapRenderer.render = function(oImageRenderManager, oImageMap){
    // convenience variable
	var rm = oImageRenderManager;
	var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	rm.write('<SPAN id="' + oImageMap.getId() + '-Descr" style="visibility: hidden; display: none;">');
	rm.writeEscaped(rb.getText("IMAGEMAP_DSC"));
	rm.write('</SPAN>');

	rm.write("<map tabindex='-1'");
	rm.writeControlData(oImageMap);

	// Render name attribute
	rm.writeAttributeEscaped("name",  oImageMap.getName());

	if (oImageMap.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oImageMap.getTooltip_AsString());
	}

	rm.write(">");
	var aAreas = oImageMap.getAreas();
		for (var index = 0, length = aAreas.length; index < length; index++) {
			rm.write("<area ");

			rm.writeElementData(aAreas[index]);

			if (accessibility) {
				rm.writeAttribute("aria-describedby", oImageMap.getId() + "-Descr");
			}

			// Get the Attributes of the area
			var sShape = aAreas[index].getShape();
			var sCoords = aAreas[index].getCoords();
			var sHref = aAreas[index].getHref();
			var sAlt = aAreas[index].getAlt();
			var sTitle = aAreas[index].getTooltip_AsString();

			// Render Shape Attribute. It can an be only rect, circle, poly and default
			if ( (sShape === "rect") || (sShape === "circle") || (sShape === "poly")){
				rm.writeAttribute("shape", sShape);
			} else {
				rm.writeAttribute("shape", "default");
			}

			// Render Coordinates. To do: check syntax of the input array of the coordinates
			if (sCoords) {
				rm.writeAttributeEscaped("coords", sCoords);
			}

			// Render href
			if (sHref) {
				rm.writeAttributeEscaped("href", sHref);
			}

			// Render text on ALT
			if (sAlt) {
				rm.writeAttributeEscaped("alt", sAlt);
			}

			// Tooltip
			if (sTitle) {
				rm.writeAttributeEscaped("title", sTitle);
			}



			rm.writeAttribute("tabIndex", 0);
			rm.write(">");
		} // end of for

	rm.write("</map>");

};

}; // end of sap/ui/commons/ImageMapRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ImageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Image
jQuery.sap.declare("sap.ui.commons.ImageRenderer");

/**
 * @class
 *
 * @author d046011
 * @version 0.1
 * @static
 */
sap.ui.commons.ImageRenderer = {
};

/**
 * Renders the HTML for the Image, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.Image} oImage The control that should be rendered.
 */
sap.ui.commons.ImageRenderer.render = function(oRenderManager, oImage) {
	var rm = oRenderManager;

	// Return immediately if control is invisible
	if (!oImage.getVisible()) {
		return;
	}

	// Open the <img> tag
	rm.write("<img");
	rm.writeControlData(oImage);

	// Set the 1x1.gif when empty source is set. This is to prevent the broken image placeholder and unnecessary 
	// requests to the root url in older browsers (as the 1x1.gif is only loaded once and then cached).
	// Hiding the image won't help as hidden images are still loaded.
	// The HTML5 spec requires empty source tags to be ignored. Anyway, some modern browsers still show border around
	// empty images.
	rm.writeAttributeEscaped("src", oImage.getSrc() || sap.ui.resource('sap.ui.commons', 'img/1x1.gif'));

	rm.addClass("sapUiImg");
	if (oImage.hasListeners("press")) {
		rm.addClass("sapUiImgWithHandler");
	}
	if (!oImage.getSrc()) {
		rm.addClass("sapUiImgNoSource");	
	}
	rm.writeClasses();

	var tooltip = oImage.getTooltip_AsString();
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}

	var sUseMap = oImage.getUseMap();
	if (sUseMap) {
		if (!(jQuery.sap.startsWith(sUseMap, "#"))) {
			sUseMap = "#" + sUseMap;
		}
		rm.writeAttributeEscaped("useMap", sUseMap);
	}

	// determine tab index and write alt attribute - both depending on "decorative" state (which is overridden by the "useMap" property
	var myTabIndex = 0;
	if ((oImage.getDecorative() && (!sUseMap))) {
		myTabIndex = -1;
		rm.writeAttribute("role", "presentation");
		rm.write(" alt=''"); // accessibility requirement: write always empty alt attribute for decorative images
	} else {
		if (oImage.getAlt()) {
			rm.writeAttributeEscaped("alt", oImage.getAlt() || tooltip); // accessibility requirement: use tooltip for alt if alt is not set
		} else if (tooltip) {
			rm.writeAttributeEscaped("alt", tooltip);
		}
	}
	rm.writeAttribute("tabIndex", myTabIndex);

	// Dimensions
	var myStyle = "";
	if (oImage.getWidth() && oImage.getWidth() != '') {
		myStyle += "width:" + oImage.getWidth() + ";";
	}
	if (oImage.getHeight() && oImage.getHeight() != '') {
		myStyle += "height:" + oImage.getHeight() + ";";
	}
	if (myStyle != "") {
		rm.writeAttribute("style", myStyle);
	}

	rm.write("/>"); // close the <img> element
};
}; // end of sap/ui/commons/ImageRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.InPlaceEditRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.commons.InPlaceEditRenderer");

/**
 * @class InPlaceEdit renderer.
 * @static
 */
sap.ui.commons.InPlaceEditRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oInPlaceEdit an object representation of the control that should be rendered
 */
sap.ui.commons.InPlaceEditRenderer.render = function(rm, oInPlaceEdit){

	var oContent = oInPlaceEdit.getContent();
	var sWidth;

	if (oContent) {
		if (oContent.getWidth) {
			sWidth = oContent.getWidth();
		}
		if (oContent.getVisible && !oContent.getVisible()) {
			// invisible -> render nothing
			return;
		}
	}else{
		// no content -> render nothing
		return;
	}

	// write the HTML into the render manager
	rm.write("<DIV");
	rm.writeControlData(oInPlaceEdit);
	rm.addClass("sapUiIpe");

	if (!oInPlaceEdit.getEditable()) {
		rm.addClass("sapUiIpeRo");
	}else if (!oInPlaceEdit._bEditMode) {
		// display mode
		rm.writeAttribute("tabindex", "-1"); //to have focus event on clicking on this DIV (ComboBox expander in display mode)
		if (!oInPlaceEdit._sOldTextAvailable) {
			if (oContent.getMetadata().getName() == "sap.ui.commons.ComboBox" || oContent.getMetadata().getName() == "sap.ui.commons.DropdownBox") {
				rm.addClass("sapUiIpeCombo");
			}
		}
		if (oContent.getMetadata().getName() == "sap.ui.commons.Link") {
			rm.addClass("sapUiIpeLink");
		}
	}else{
		// edit mode
		rm.addClass("sapUiIpeEdit");
	}

	if (sWidth) {
		rm.addStyle("width", sWidth);
	}

	if (oInPlaceEdit.getUndoEnabled() && oInPlaceEdit._sOldTextAvailable && ( !oInPlaceEdit._bEditMode || ( oInPlaceEdit._bEditMode && oInPlaceEdit._oEditControl.getValue() != oInPlaceEdit._sOldText))) {
		// there is an old text available - visualize Undo
		rm.addClass("sapUiIpeUndo");
	}

	switch (oInPlaceEdit.getValueState()) {
	case sap.ui.core.ValueState.Error:
		rm.addClass('sapUiIpeErr');
	break;
	case sap.ui.core.ValueState.Success:
		rm.addClass('sapUiIpeSucc');
	break;
	case sap.ui.core.ValueState.Warning:
		rm.addClass('sapUiIpeWarn');
	break;
	default:
	break;
	}

	var tooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oInPlaceEdit, oInPlaceEdit.getTooltip_AsString());
	if(tooltip) {
		rm.writeAttributeEscaped('title', tooltip);
	}

	rm.writeClasses();
	rm.writeStyles();
	rm.write(">"); // DIV
	if (oInPlaceEdit._sOldTextAvailable || oContent.getMetadata().getName() == "sap.ui.commons.Link") {
		// there is an old text available - put content in a extra DIV to position
		// for Link do it always to have the edit button next to the link, but have the defined width for the outer DIV
		rm.write("<DIV");
		rm.addClass("sapUiIpeCont");
		if (oContent.getMetadata().getName() == "sap.ui.commons.ComboBox" || oContent.getMetadata().getName() == "sap.ui.commons.DropdownBox") {
			rm.addClass("sapUiIpeCombo");
		}
		rm.writeClasses();
		rm.write(">"); // DIV

	}
	if (oInPlaceEdit._bEditMode) {
		this.renderEditContent(rm, oInPlaceEdit);
	}else{
		this.renderDisplayContent(rm, oInPlaceEdit);
	}
	if (oInPlaceEdit._sOldTextAvailable || oContent.getMetadata().getName() == "sap.ui.commons.Link") {
		rm.write("</DIV>");
		if (oInPlaceEdit.getUndoEnabled() && oInPlaceEdit._sOldTextAvailable) {
			// there is an old text available and undo enabled - render undo button
			rm.renderControl(oInPlaceEdit._oUndoButton);
		}
	}
	rm.write("</DIV>");
};

sap.ui.commons.InPlaceEditRenderer.renderDisplayContent = function(rm, oInPlaceEdit){

	if (oInPlaceEdit._oDisplayControl) {
		rm.renderControl(oInPlaceEdit._oDisplayControl);
		if (oInPlaceEdit.getEditable() && oInPlaceEdit._oDisplayControl.getMetadata().getName() == "sap.ui.commons.Link") {
			rm.renderControl(oInPlaceEdit._oEditButton);
		}
	}

};

sap.ui.commons.InPlaceEditRenderer.renderEditContent = function(rm, oInPlaceEdit){

	if (oInPlaceEdit._oEditControl) {
		rm.renderControl(oInPlaceEdit._oEditControl);
	}

};
}; // end of sap/ui/commons/InPlaceEditRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.LabelRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Label
jQuery.sap.declare("sap.ui.commons.LabelRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class
 *
 * @author SAP - TD Core UI&AM UI Infra
 * @version 0.1
 * @static
 */
sap.ui.commons.LabelRenderer = {
//	sap.ui.core.Renderer.apply(this, arguments);
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render-output-buffer.
 * @param {sap.ui.core.Control} oLabel An object representation of the control that should be rendered.
 */
sap.ui.commons.LabelRenderer.render = function(oRenderManager, oLabel) {
	// Some convenience variables.
	var rm = oRenderManager;
	var r = sap.ui.commons.LabelRenderer;

	// Return immediately if control is invisible
	if (!oLabel.getVisible()) {
		return;
	}

	rm.write("<label");
	rm.writeControlData(oLabel);

	var sTooltip = oLabel.getTooltip_AsString();

	if (oLabel.getLabelForRendering()) {
		var oFor = sap.ui.getCore().byId(oLabel.getLabelForRendering());
		rm.write(" for=\"");
		// for some controls the label must point to an special HTML element, not the outer one.
		if ( oFor && oFor.getIdForLabel) {
			rm.write(oFor.getIdForLabel());
		} else{
			rm.write(oLabel.getLabelForRendering());
		}
		rm.write("\"");

		if ((!sTooltip || sTooltip == "") && oFor && oFor.getTooltip_AsString() && oFor.getTooltip_AsString() != "") {
			// If label has no own tooltip use tooltip of the labeled control
			sTooltip = oFor.getTooltip_AsString();
		}
	}

	// check whether a 'required' marker is needed
	if ( oLabel.isRequired() ) {
		rm.addClass('sapUiLblReq');
		if (oLabel.getRequiredAtBegin()) {
			rm.addClass('sapUiLblReqBeg');
		} else {
			rm.addClass('sapUiLblReqEnd');
		}
	}

	if(sTooltip) {
		rm.writeAttributeEscaped('title', sTooltip);
	}

	// Styles
	rm.addClass("sapUiLbl");
	if (oLabel.getDesign() == sap.ui.commons.LabelDesign.Bold) {
		rm.addClass("sapUiLblEmph");
	}

	// Text direction
	var sTextDir = oLabel.getTextDirection();
	if (sTextDir) {
		rm.addStyle("direction", sTextDir.toLowerCase());
	}

	// Style for text alignment
	var oTextAlign = oLabel.getTextAlign();
	if(oTextAlign) {
		rm.addStyle("text-align", r.getTextAlign(oTextAlign, sTextDir));
	}

	// Style for width
	var sWidth = oLabel.getWidth();
	if(sWidth) {
		rm.addStyle("width", sWidth);
	}

	if(!oLabel.getWrapping()){
		rm.addClass("sapUiLblNowrap");
	}

	rm.writeStyles();
	rm.writeClasses();

	// Close start tag
	rm.write(">");

	// Get image fragment if there is one, and write
	if (oLabel.getIcon()) {
		this.writeImgHtml(rm, oLabel);
	}

	// Write the label text
	if (oLabel.getText()) {
		rm.writeEscaped(oLabel.getText());
	}

	// Close tag
	rm.write("</label>");
};


sap.ui.commons.LabelRenderer.writeImgHtml = function(oRenderManager, oLabel) {
	var rm = oRenderManager;
	var sIconUrl = oLabel.getIcon();
	var oConfig = oRenderManager.getConfiguration();
	var aClasses = [];
	var mAttributes = {};

	aClasses.push("sapUiLblIco");
	if ((oLabel.getTextDirection()==sap.ui.core.TextDirection.RTL && !oConfig.getRTL()) || (oLabel.getTextDirection()==sap.ui.core.TextDirection.LTR && oConfig.getRTL())) {
		// if text direction is different to global text direction, icon margin must be switched.
		aClasses.push("sapUiLblIcoR");
	} else {
		aClasses.push("sapUiLblIcoL");
	}

	rm.writeIcon(sIconUrl, aClasses, mAttributes);

};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.ui.commons.LabelRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;

}; // end of sap/ui/commons/LabelRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.LinkRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Link
jQuery.sap.declare("sap.ui.commons.LinkRenderer");

/**
 * @class
 *
 * @author SAP AG
 * @version 0.1
 * @static
 */
sap.ui.commons.LinkRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oLink An object representation of the control that should be rendered.
 */
sap.ui.commons.LinkRenderer.render = function(rm, oLink) {

	// Return immediately if control is invisible
	if (!oLink.getVisible()) {
		return;
	}

	// Link is rendered as a "<a>" element
	rm.write("<a");
	rm.writeControlData(oLink);

	rm.writeAccessibilityState(oLink);

	if (!oLink.getEnabled()) {
		rm.addClass("sapUiLnkDsbl");
		rm.writeAttribute("disabled", "true");
	} else {
		rm.addClass("sapUiLnk");
	}
	rm.writeClasses();

	if (oLink.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oLink.getTooltip_AsString());
	}

	if (oLink.getHref()) {
		rm.writeAttributeEscaped("href", oLink.getHref());
	}	else {
		rm.writeAttribute("href", "javascript:void(0);");
	}

	if (oLink.getTarget()) {
		rm.writeAttributeEscaped("target", oLink.getTarget());
	}

	if (!oLink.getEnabled()) {
		rm.writeAttribute("tabIndex", "-1");
	} else {
		rm.writeAttribute("tabIndex", "0");
	}

	if (oLink.getWidth()) {
		rm.addStyle("width", oLink.getWidth());
	}
	rm.writeStyles();

	// Close the opening tag
	rm.write(">");

	// Write the Link text
	if (oLink.getText()) {
		rm.writeEscaped(oLink.getText());
	}

	// Close the tag
	rm.write("</a>");

};

}; // end of sap/ui/commons/LinkRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ListBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.ListBox
jQuery.sap.declare("sap.ui.commons.ListBoxRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.strings'); // unlisted dependency retained


/**
 * @class ListBox Renderer
 *
 * @author d046011
 * @version 1.22.8
 * @static
 */
sap.ui.commons.ListBoxRenderer = {
};

/**
 * Renders the HTML for the ListBox, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render-output-buffer.
 * @param {sap.ui.commons.ListBox} oListBox The ListBox control that should be rendered.
 */
sap.ui.commons.ListBoxRenderer.render = function(rm, oListBox) {
	var r = sap.ui.commons.ListBoxRenderer;

	// TODO: this is a prototype experimenting with an alternative to onAfterRendering for size calculations and corrections
	// Do not copy this approach for now!
	// Main problem: renderers are supposed to create a string, not DOM elements, e.g. so they could also run on the server. At least that was the idea in former times.
	if (r.borderWidths === undefined) {
		if (!!sap.ui.Device.browser.internet_explorer) { // all known IE versions have this issue (min-width does not include borders)  TODO: update
			var oFakeLbx = document.createElement("div");
			var oStaticArea = sap.ui.getCore().getStaticAreaRef();
			oStaticArea.appendChild(oFakeLbx);
			oFakeLbx.className = "sapUiLbx";
			var $fakeLbx = jQuery(oFakeLbx);
			$fakeLbx.css("width", "50px");
			$fakeLbx.css("min-width", "100px");
			r.borderWidths = oFakeLbx.offsetWidth - 100;
			oStaticArea.removeChild(oFakeLbx);
		} else {
			// all other browsers are fine
			r.borderWidths = 0;
		}
	}


	// Return immediately if control is invisible
	if (!oListBox.getVisible()) {
		return;
	}

	rm.addClass("sapUiLbx");
	var bStd = true;
	if (!oListBox.getEditable()) {
		rm.addClass("sapUiLbxRo");
		bStd = false;
	}
	if (!oListBox.getEnabled()) {
		rm.addClass("sapUiLbxDis");
		bStd = false;
	}
	if (bStd) {
		rm.addClass("sapUiLbxStd"); // neither readonly nor disabled - this helps the CSS
	}

	// Open the containing <div> tag
	rm.write("<div");

	rm.writeControlData(oListBox);
	rm.writeAttribute("tabindex", "-1");

	var sWidth = oListBox.getWidth();
	if (sWidth) {
		rm.addStyle("width", sWidth);
		var bDisplaySecondaryValues = oListBox.getDisplaySecondaryValues();
		var bDisplayIcons = oListBox.getDisplayIcons();
		if (!bDisplaySecondaryValues && !bDisplayIcons) {
			// if fixed width, no secondary values and no icons use table-layout:fixed; to enable text-overflow:ellipsis;
			// not possible with secondary value / icons because of auto width function of table not available with fixed layout
			rm.addClass("sapUiLbxFixed");
		}
	}

	if (!sWidth || (sWidth == "auto") || (sWidth == "inherit")) {
		rm.addClass("sapUiLbxFlexWidth");
	}

	rm.writeClasses();

	// min/max-widths need fixes in IE
	var sMinWidth = oListBox.getMinWidth();
	var sMaxWidth = oListBox.getMaxWidth();
	if (!!sap.ui.Device.browser.internet_explorer) {
		sMinWidth = r.fixWidth(sMinWidth);
		sMaxWidth = r.fixWidth(sMaxWidth);
	}
	if (sMinWidth) {
		rm.addStyle("min-width", sMinWidth);
	}
	if (sMaxWidth) {
		rm.addStyle("max-width", sMaxWidth);
	}

	if (oListBox._bHeightInItems) {
		if (oListBox._sTotalHeight != null) {
			rm.addStyle("height", oListBox._sTotalHeight); // calculated height available
		} else {
			// height will be calculated and set in onAfterRendering
		}
	} else {
		var sHeight = oListBox.getHeight();
		if(sHeight){
			rm.addStyle("height", sHeight); // "normal" CSS height
		}
	}
	rm.writeStyles();

	var tooltip = oListBox.getTooltip_AsString();
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}
	rm.write(">");

	this.renderItemList(oListBox, rm);

	rm.write("</div>");
};

/**
 * Renders all items
 */
sap.ui.commons.ListBoxRenderer.renderItemList = function (oListBox, rm) {

	// Write the start tag
	rm.write("<ul id='" + oListBox.getId() + "-list'");

	rm.writeAttribute("tabindex", this.getTabIndex(oListBox));

	// add ARIA stuff
	rm.writeAccessibilityState(oListBox, {
		role: "listbox",
		multiselectable: oListBox.getAllowMultiSelect()
	});
	rm.write(">");

	var items = oListBox.getItems(),
		iRealItemIndex = 0, // to not count separators
		iRealItemCount = 0;

	for (var i = 0; i < items.length; i++) { // TODO: required only for ARIA setsize
		if (!(items[i] instanceof sap.ui.core.SeparatorItem)) {
			iRealItemCount++;
		}
	}

	var bMarkLastChild = (!!sap.ui.Device.browser.internet_explorer && (sap.ui.Device.browser.version == 8)); // IE8 workaround for "last-child"
	var bDisplaySecondaryValues = oListBox.getDisplaySecondaryValues();

	// Write the rows with the items
	for (var i = 0; i < items.length; i++) {
		var item = items[i];

		if (item instanceof sap.ui.core.SeparatorItem) {
			// draw a separator
			rm.write("<div id='", item.getId(), "' class='sapUiLbxSep' role='separator'><hr/>");

			// colspan is not available, so add more separator cells
			if (oListBox.getDisplayIcons()) {
				rm.write("<hr/>");
			}
			if (bDisplaySecondaryValues) {
				rm.write("<hr/>");
			}
			rm.write("</div>");

		} else {
			// regular ListItem or just a plain Item
			rm.write("<li");
			rm.writeElementData(item);
			rm.writeAttribute("data-sap-ui-lbx-index", i);

			rm.addClass("sapUiLbxI");
			if (!item.getEnabled()) {
				rm.addClass("sapUiLbxIDis");
			}
			rm.writeAttribute("tabindex", "-1"); // make all LIs to focusable elements, tabindex will be changed by ItemNavigation
			if (oListBox.isIndexSelected(i)) {
				rm.addClass("sapUiLbxISel");
			}
			rm.writeClasses();

			// get the text values
			var sText = item.getText();
			var sSecondaryValue = item.getAdditionalText ? item.getAdditionalText() : ""; // allow usage of sap.ui.core.Item

			// tooltip
			if (item.getTooltip_AsString()) {
				rm.writeAttributeEscaped("title", item.getTooltip_AsString());
			} else {
				rm.writeAttributeEscaped("title", sText + ((bDisplaySecondaryValues && sSecondaryValue) ? "  --  " + sSecondaryValue : ""));
			}

			// ARIA
			rm.writeAccessibilityState(item, {
				role: "option",
				selected: (i===oListBox.getSelectedIndex()),
				setsize: iRealItemCount,
				posinset: iRealItemIndex+1
			});

			rm.write(">");


			// write icon column if required
			if (oListBox.getDisplayIcons()) {
				var sIcon;
				if (item.getIcon) { // allow usage of sap.ui.core.Item
					sIcon = item.getIcon();
				}
				rm.write("<span");
				if (sap.ui.core.IconPool.isIconURI(sIcon)) {
					rm.addClass("sapUiLbxIIco");
					rm.addClass("sapUiLbxIIcoFont");
					var oIconInfo = sap.ui.core.IconPool.getIconInfo(sIcon);
					rm.addStyle("font-family", "'" + oIconInfo.fontFamily + "'");
					if(oIconInfo && !oIconInfo.skipMirroring){
						rm.addClass("sapUiIconMirrorInRTL");
					}
					rm.writeClasses();
					rm.writeStyles();
					rm.write(">");
					rm.write(oIconInfo.content);
				}else{
					rm.write(" class='sapUiLbxIIco'><img src='");
					// if the item has an icon, use it; otherwise use something empty
					if (sIcon) {
						rm.writeEscaped(sIcon);
					} else {
						rm.write(sap.ui.resource('sap.ui.commons', 'img/1x1.gif'));
					}
					rm.write("'/>");
				}
				rm.write("</span>");
			}

			// write the main text
			rm.write("<span class='sapUiLbxITxt");
			if (bMarkLastChild && !bDisplaySecondaryValues) {
				rm.write(" sapUiLbxILastChild");
			}
			rm.write("'");
			rm.writeAttribute("id", item.getId() + "-txt");
			var oTextAlign = oListBox.getValueTextAlign();
			if(oTextAlign) {
				rm.write("style='text-align:" + sap.ui.commons.ListBoxRenderer.getTextAlign(oTextAlign, null) + "'"); // TODO: check whether the ListBox needs its own textDirection property
			}
			rm.write(">");
			if(sText === "" || sText === null) {
				rm.write("&nbsp;");
			} else {
				rm.writeEscaped(sText);
			}

			// Potentially display second column
			if (bDisplaySecondaryValues) {
				rm.write("</span><span class='sapUiLbxISec");
				if (bMarkLastChild) {
					rm.write(" sapUiLbxILastChild");
				}
				rm.write("'");
				var oTextAlign = oListBox.getSecondaryValueTextAlign();
				if(oTextAlign) {
					rm.write("style='text-align:" + sap.ui.commons.ListBoxRenderer.getTextAlign(oTextAlign, null) + "'"); // TODO: check whether the ListBox needs its own textDirection property
				}
				rm.write(">");
				rm.writeEscaped(sSecondaryValue);
			}

			rm.write("</span></li>");
			iRealItemIndex++;
		}
	}

	// Close the surrounding element
	rm.write("</ul>");
};


/**
 * If the given width is set in pixels, this method reduces the pixel width by the known total width of the borders.
 * Needed for IE which doesn't handle the combination of border-box and min/max-width correctly.
 * @private
 */
sap.ui.commons.ListBoxRenderer.fixWidth = function(sCssWidth) {
	if (sap.ui.commons.ListBoxRenderer.borderWidths > 0) {
		if (sCssWidth && jQuery.sap.endsWithIgnoreCase(sCssWidth, "px")) {
			var iWidth = parseInt(sCssWidth.substr(0, sCssWidth.length - 2), 10);
			var newWidth = iWidth - sap.ui.commons.ListBoxRenderer.borderWidths;
			if (newWidth >= 0) {
				return newWidth + "px";
			}
		}
	}
	return sCssWidth;
};

/**
 * The default TabIndex that should be set for the ListBox as well as for the selected element.
 * Can be overwritten in extending sub-classes.
 * @protected
 */
sap.ui.commons.ListBoxRenderer.getTabIndex = function(oListBox) {
	if (oListBox.getEnabled() && oListBox.getEditable()) {
		return 0;
	} else {
		return -1;
	}
};

/**
 * Adapts the item CSS classes after a selection change
 * @private
 */
sap.ui.commons.ListBoxRenderer.handleSelectionChanged = function(oListBox) { // TODO: handle tab stop
	if (oListBox.getDomRef()) {
		var items = oListBox.getItems();
		for (var i = 0, l = items.length; i < l; i++) { // TODO: could take very long for long lists
			if (oListBox.isIndexSelected(i)) {
				items[i].$().addClass("sapUiLbxISel").attr("aria-selected", "true");
			} else {
				items[i].$().removeClass("sapUiLbxISel").attr("aria-selected", "false");
			}
		}
	}
};

/**
 * Set the active descendant of the ListBox to get correct announcements
 * @private
 */
sap.ui.commons.ListBoxRenderer.handleARIAActivedescendant = function(oListBox, iIndex) {
	var $list = oListBox.$("list");
	if ($list.length > 0) {
		var $selectedChild = $list.children("li[data-sap-ui-lbx-index=" + iIndex + "]");
		$list.attr("aria-activedescendant", $selectedChild.attr("id"));
	}
};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.ui.commons.ListBoxRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;

}; // end of sap/ui/commons/ListBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.MenuBar
jQuery.sap.declare("sap.ui.commons.MenuBarRenderer");


/**
 * @class MenuBarRenderer.
 * @static
 */
sap.ui.commons.MenuBarRenderer = {
};

/**
 * Renders the HTML for the given menubar using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.Toolbar} oToolbar An object representation of the control that should be rendered.
 */
sap.ui.commons.MenuBarRenderer.render = function(oRenderManager, oMenuBar) {
	var rm = oRenderManager;

	oMenuBar.doBeforeRendering();

	if(!oMenuBar.getVisible()) {
		return;
	}

	rm.write("<div");
	rm.writeControlData(oMenuBar);
	rm.addClass("sapUiMnuBar");
	if(oMenuBar.getDesign() == sap.ui.commons.MenuBarDesign.Header) {
		rm.addClass("sapUiMnuBarHeader");
	}
	var bIsDisabled = !oMenuBar.getEnabled();
	if(bIsDisabled) {
		rm.addClass("sapUiMnuBarDsbl");
	}
	rm.addStyle("width", oMenuBar.getWidth());
	rm.writeStyles();
	rm.writeClasses();
	rm.writeAttribute("tabindex", "0");
	var sTooltip = oMenuBar.getTooltip_AsString();
	sap.ui.commons.MenuBarRenderer.writeAria(rm, "menubar", sTooltip, bIsDisabled);
	rm.write("><ul");
	rm.writeAttribute("id", oMenuBar.getId()+"-area");
	rm.writeAttribute("class", "sapUiMnuBarArea");
	rm.write(">");

	var iVisibleItemIdx = 0;
	var aItems = oMenuBar.getItems();
	for(var i=0; i<aItems.length; i++){
		var oItem = aItems[i];
		if(oItem.getVisible()){
			iVisibleItemIdx++;
			rm.write("<li");
			rm.writeElementData(oItem);
			rm.addClass("sapUiMnuBarItm");
			var bDsbld = !oItem.getEnabled() || bIsDisabled;
			if(bDsbld) {
				rm.addClass("sapUiMnuBarItmDsbl");
			}
			rm.writeClasses();
			rm.writeAttribute("itemidx", ""+i);
			var sTooltip = oItem.getTooltip_AsString();
			sap.ui.commons.MenuBarRenderer.writeAria(rm, "menuitem", sTooltip, bDsbld, iVisibleItemIdx);
			rm.writeAttribute("tabindex", "-1");
			rm.write("><span>");
			rm.writeEscaped(oItem.getText());
			rm.write("</span></li>");
		}
	}

	rm.write("<li");
	rm.writeAttribute("id", oMenuBar.getId()+"-ovrflw");
	rm.writeAttribute("itemidx", "ovrflw");
	rm.writeAttribute("style", "display:none;");
	rm.writeAttribute("tabindex", "-1");
	rm.addClass("sapUiMnuBarItm");
	rm.addClass("sapUiMnuBarOvrFlw");
	if(bDsbld) {
		rm.addClass("sapUiMnuBarItmDsbl");
	}
	rm.writeClasses();
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	var sOverFlowText = undefined;
	if(rb) {
		sOverFlowText = rb.getText("MNUBAR_OVRFLW");
	}
	sap.ui.commons.MenuBarRenderer.writeAria(rm, "menuitem", sOverFlowText, false, 0);
	rm.write("><span></span></li></ul></div>");
};

sap.ui.commons.MenuBarRenderer.writeAria = function(rm, sRole, sText, bDisabled, iIdx){
	if(sText) {
		rm.writeAttributeEscaped("title", sText);
	}

	if(!sap.ui.getCore().getConfiguration().getAccessibility()) {
		return;
	}

	rm.writeAttribute("role", sRole);
	if(sRole == "menuitem"){
		rm.writeAttribute("aria-haspopup", true);
		rm.writeAttribute("aria-posinset", iIdx);
	}
	if(bDisabled) {
		rm.writeAttribute("aria-disabled", true);
	}
};
}; // end of sap/ui/commons/MenuBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.MenuButton
jQuery.sap.declare("sap.ui.commons.MenuButtonRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class MenuButton renderer.
 * For a common look&feel, the MenuButton extends the Button control,
 * just like the TextField ComboBox works.
 * @static
 */
sap.ui.commons.MenuButtonRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.ButtonRenderer);

/**
 * Hint: "renderButtonAttributes" is a reserved/hard-coded Button extending function!
 *       It is used to allow extensions to display content after the actual button content.
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager currently rendering this control
 * @param {sap.ui.commons.MenuButton}
 *            oControl the MenuButton that should be rendered
 * @private
 */
sap.ui.commons.MenuButtonRenderer.renderButtonAttributes = function(rm, oControl) {
	//Add specific ARIA information for MenuButton
	if (sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute("aria-haspopup", "true");
	}
};

/**
 * Hint: "renderButtonContentAfter" is a reserved/hard-coded Button extending function!
 *       It is used to allow extensions to display content after the actual button content.
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager currently rendering this control
 * @param {sap.ui.commons.MenuButton}
 *            oControl the MenuButton that should be rendered
 * @private
 */
sap.ui.commons.MenuButtonRenderer.renderButtonContentAfter = function(rm, oControl) {
	rm.write("<span class=\"sapUiMenuButtonIco\"></span>");
};
}; // end of sap/ui/commons/MenuButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuItemBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.ui.commons.MenuItemBase");

/**
 * @class Provides the standard properties for menu items.
 * @extends sap.ui.unified.MenuItemBase
 *
 * @author SAP AG 
 *
 * @public
 * @deprecated Since version 1.21.0. 
 * Please use the control sap.ui.unified.MenuItemBase of the library sap.ui.unified instead.
 * @name sap.ui.commons.MenuItemBase
 */

(function(){

try{
	sap.ui.getCore().loadLibrary("sap.ui.unified");
}catch(e){
	alert("The controls/elements 'sap.ui.commons.Menu*' needs library 'sap.ui.unified'.");
	throw(e);
}

jQuery.sap.require('sap.ui.unified.MenuItemBase'); // unlisted dependency retained


sap.ui.commons.MenuItemBase = sap.ui.unified.MenuItemBase;

})();
}; // end of sap/ui/commons/MenuItemBase.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Menu
jQuery.sap.declare("sap.ui.commons.MenuRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.unified.MenuRenderer'); // unlisted dependency retained


sap.ui.commons.MenuRenderer = sap.ui.core.Renderer.extend(sap.ui.unified.MenuRenderer);
}; // end of sap/ui/commons/MenuRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.MessageBar
jQuery.sap.declare("sap.ui.commons.MessageBarRenderer");
//jQuery.sap.require("sap.ui.commons.MessageType");
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * @class MessageBar renderer.
 * @static
 */
sap.ui.commons.MessageBarRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.MessageBarRenderer.render = function(oRenderManager, oControl){
  // Convenience variables
	var rm  = oRenderManager;
	var id  = oControl.getId();

	// Opening the outer DIV container:
	// (Marking it as "draggable" stops the browser text selection on drag.)
	rm.write('<div draggable="true"');
  rm.writeControlData(oControl);
  rm.addClass("sapUiMsgBar");
  if (this.oDropPosition) {
	// A "re-dock" image will be added if the MessageBar has been dragged.
	rm.addClass("sapUiMsgBarMoved");
  }
  rm.writeClasses();
  rm.write(">");

		// Opening the counters&icons DIV container:
		// (An "id" is provided as the Toast will have to right-align against this element.)
		rm.write('<div id="' + id + '__sums" class="sapUiMsgBarSums">');

		  // Open-Hide message list arrow:
			// (An "id" is provided as the Toast will have to point-back towards this element.)
			// (This "Arrow" image is state-dependent and theme-dependent.)
			rm.write('<div id="' + id + '__arrowImg" class="sapUiMsgBarToggle"></div>');

		  // Error area: Image and Error count.
			// IDs are provided for DOM updates: display:none and count.
			rm.write('<div id="' + id + '__ErrorImg" class="sapUiMsgIcon sapUiMsgIconError sapUiMsgBarZeroCount"></div>');
			rm.write('<span id="' + id + '__ErrorCount" class="sapUiMsgTxt sapUiMsgBarZeroCount">(0)</span>');

		  // Warning area: Image and Warning count.
			rm.write('<div id="' + id + '__WarningImg" class="sapUiMsgIcon sapUiMsgIconWarning sapUiMsgBarZeroCount"></div>');
			rm.write('<span id="' + id + '__WarningCount" class="sapUiMsgTxt sapUiMsgBarZeroCount">(0)</span>');

		  // Success area: Image and Success count.
			rm.write('<div id="' + id + '__SuccessImg" class="sapUiMsgIcon sapUiMsgIconSuccess sapUiMsgBarZeroCount"></div>');
			rm.write('<span id="' + id + '__SuccessCount" class="sapUiMsgTxt sapUiMsgBarZeroCount">(0)</span>');

		// Closing the counters&icons DIV container:
	  rm.write("</div>");

	  // Re-dock icon: Appears after Drag&Drop.
		rm.write('<div class="sapUiMsgBarHome"></div>');

	// Closing the outer DIV container:
  rm.write("</div>");
};
}; // end of sap/ui/commons/MessageBarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.MessageList
jQuery.sap.declare("sap.ui.commons.MessageListRenderer");

/**
 * @class MessageList renderer.
 * @static
 */
sap.ui.commons.MessageListRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.MessageListRenderer.render = function(oRenderManager, oControl){
	// Convenience variable
	var rm = oRenderManager;

	// Opening the outer container:
  rm.write('<ul class="sapUiMsgList"');
  rm.writeControlData(oControl);
  rm.write(">");

	  // Rendering all supplied messages:
	  // Most recent messages were pushed in last, so looping in reversed order
	  // to display those first.
		for (var i=oControl.aMessages.length-1; i>=0; i--) {
		  rm.write('<li class="sapUiMsgListLi">');
		  rm.renderControl(oControl.aMessages[i]);
		  rm.write("</li>");
		} // end for

  // Closing container:
  rm.write("</ul>");
};
}; // end of sap/ui/commons/MessageListRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

//Provides default renderer for control sap.ui.commons.Message
jQuery.sap.declare("sap.ui.commons.MessageRenderer");

/**
 * @class Message renderer.
 * @static
 */
sap.ui.commons.MessageRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * A "Message" renders with:
 *  - An icon,
 *  - Possibly with a "Details" pointer to point to its longText
 *  - A shortText
 * It is up to its host (Toast, List, ... ) to hide or not the different parts.
 * For example, it is for the Toast to decide if icons are to be shown or not! Decision can be theme-dependent!
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.MessageRenderer.render = function(oRenderManager, oControl){
	// Convenience variables
	var rm = oRenderManager;

	// Opening the outer container:
	// tabindex="0": Message must be focusable for accessibility?!?
	rm.write('<div class="sapUiMsg" tabindex="0">');

	// Message icon:
	rm.write('<div class="sapUiMsgIcon sapUiMsgIcon' + oControl.getType() + '"></div>');

	// Possible "Details" pointer, with its trailing "-" separator:
	if ( typeof oControl.fnCallBack === "function" ) {
		rm.write('<span class="sapUiMsgLnk">');
		// Rendering a "short" Link pointing to the "long" Details:
		if (!oControl.oLink) {
			oControl.oLink = new sap.ui.commons.Link();
			var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
			oControl.oLink.setText(rb.getText("MSGLIST_DETAILS"));
			oControl.oLink.attachPress(function() {oControl.openDetails();});
		}
		rm.renderControl(oControl.oLink);
		rm.write(' - </span>');
	}

	// ShortText:
	rm.write('<span class="sapUiMsgTxt">');
	rm.writeEscaped(oControl.getText());
	rm.write('</span>');

	// Closing the outer container:
	rm.write('</div>');
};
}; // end of sap/ui/commons/MessageRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageToastRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.MessageToast
jQuery.sap.declare("sap.ui.commons.MessageToastRenderer");

/**
 * @class MessageToast renderer.
 * @static
 */
sap.ui.commons.MessageToastRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.MessageToastRenderer.render = function(oRenderManager, oControl){
	// Convenience variable
	var rm = oRenderManager;

	// Opening the invisible outer-DIV container:
	// (Required to host the down-arrow.)
	// "classing" as per Type/Priority, for influencing the inner rendering:
	rm.write('<div class="' + oControl.getClasses() + '"');
	rm.writeControlData(oControl);
	rm.write('>');

		// Opening the inner-DIV message-container:
		rm.write('<div class="sapUiMsgToastMsg sapUiShd">');

			// Checking what message is to be toasted:
		  if (oControl.oMessage) {
			rm.renderControl(oControl.oMessage);
		  } else {
			// No message supplied. Rendering "Multiple new messages...":
				var sMultiMsgs = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons").getText("MSGTOAST_MULTI_MSGS");
				rm.write('<div class="sapUiMsg" tabindex="0"><span class="sapUiMsgTxt">' + sMultiMsgs + '</span></div>');
		  }

		// Closing the inner-DIV message-container:
		rm.write("</div>");

	  // Down-arrow:
		// (An "id" is provided as this arrow will have to point-back towards the right Bar icon.)
		// (This "Arrow" image is Type/Priority-dependent and theme-dependent.)
		rm.write('<div id="' + oControl.getId() + 'Arrow" class="sapUiMsgToastArrow"></div>');

	// Closing the invisible outer-DIV container:
	rm.write("</div>");
};
}; // end of sap/ui/commons/MessageToastRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.PaginatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

//Provides default renderer for control sap.ui.commons.Paginator
jQuery.sap.declare("sap.ui.commons.PaginatorRenderer");
jQuery.sap.require('jquery.sap.encoder'); // unlisted dependency retained


/**
 * @class Paginator renderer.
 * @static
 */
sap.ui.commons.PaginatorRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oPaginator an object representation of the control that should be rendered
 */
sap.ui.commons.PaginatorRenderer.render = function(oRm, oPaginator){

	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	oRm.write("<div");
	oRm.writeControlData(oPaginator);
	oRm.writeAccessibilityState(oPaginator, {
		role: "toolbar",
		labelledby: oPaginator.getId() + "-accDesc"
	});
	oRm.addClass("sapUiPag");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<span class='sapUiPagAccDesc' id='" + oPaginator.getId() + "-accDesc'>");
	oRm.writeEscaped(rb.getText("PAGINATOR"));	
	oRm.write("</span>");

	this.renderPaginator(oRm, oPaginator);

	oRm.write("</div>");
};


/**
 * Builds the paginator
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oPaginator an object representation of the control that should be rendered
 */
sap.ui.commons.PaginatorRenderer.renderPaginator = function(oRm, oPaginator) {
	// First check if number of page is 1 or less, in this case, we do not render the paginator
	if (oPaginator.getNumberOfPages() <= 1) {
		return;
	}

	// Buffer paginator id for other ids concatenation
	var paginatorId = oPaginator.getId();
	var iCurrentPage = oPaginator.getCurrentPage();
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");


	/************************************************************************************
	 * Render the Page 1 (first page link) when necessary, back arrow, back link
	 ************************************************************************************/
	var linkClass = (iCurrentPage == 1) ? "sapUiLnkDsbl" : "sapUiLnk";
	var linkAcc = (iCurrentPage == 1) ? " aria-disabled='true'" : "";

	// First page link must only appear when at least 5 pages are available
	if (oPaginator.getNumberOfPages() > 5) {
		oRm.write("<a id='" + paginatorId + "--firstPageLink' href='javascript:void(0);' title='");
		oRm.writeEscaped(rb.getText("FIRST_PAGE"));
		oRm.write("' class='sapUiPagBtn sapUiPagFirst " + linkClass + "' " + linkAcc + "><span class='sapUiPagText'>");
		oRm.writeEscaped(rb.getText("PAGINATOR_OTHER_PAGE", [1]));
		oRm.write("</span></a>");
	}
	oRm.write("<a id='" + paginatorId + "--backLink' href='javascript:void(0);' title='");
	oRm.writeEscaped(rb.getText("PREVIOUS_PAGE"));
	oRm.write("' class='sapUiPagBtn sapUiPagBack " + linkClass + "' " + linkAcc + "><span class='sapUiPagText'>");
	oRm.writeEscaped(rb.getText("BACK"));
	oRm.write("</span></a>");



	/************************************************************************************
	 * Render the page numbers in a list
	 *************************************************************************************/
	oRm.write("<ul id='" + paginatorId + "-pages' role='presentation'>");
	oRm.write(sap.ui.commons.PaginatorRenderer.getPagesHtml(paginatorId, oPaginator._calculatePagesRange(), oPaginator.getCurrentPage(), true));
	oRm.write("</ul>");



	/************************************************************************************
	 * Render the forward link, forward arrow and last page link when necessary
	 *************************************************************************************/
	linkClass = (iCurrentPage == oPaginator.getNumberOfPages()) ? "sapUiLnkDsbl" : "sapUiLnk";
	linkAcc = (iCurrentPage == 1) ? " aria-disabled='true'" : "";

	oRm.write("<a id='" + paginatorId + "--forwardLink' href='javascript:void(0);' title='");
	oRm.writeEscaped(rb.getText("NEXT_PAGE"));
	oRm.write("' class='sapUiPagBtn sapUiPagForward " + linkClass + "' " + linkAcc + "><span class='sapUiPagText'>");
	oRm.writeEscaped(rb.getText("FORWARD"));
	oRm.write("</span></a>");
	if (oPaginator.getNumberOfPages() > 5) {
		oRm.write("<a id='" + paginatorId + "--lastPageLink' href='javascript:void(0);' title='");
		oRm.writeEscaped(rb.getText("LAST_PAGE"));
		oRm.write("' class='sapUiPagBtn sapUiPagLast " + linkClass + "' " + linkAcc + "><span class='sapUiPagText'>");
		oRm.writeEscaped(rb.getText("PAGINATOR_OTHER_PAGE", [oPaginator.getNumberOfPages()]));
		oRm.write("</span></a>");
	}
};


sap.ui.commons.PaginatorRenderer.getPagesHtml = function(sPaginatorId, oRange, iCurrent, bVisible) {
	var aHtml = [];
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	// each single page link is an <li> with an <a> inside
	for (var i = oRange.firstPage; i <= oRange.lastPage; i++) {
		aHtml.push("<li id='" + sPaginatorId + "-li--" + i + "' class='sapUiPagPage");
		aHtml.push((i == iCurrent) ? " sapUiPagCurrentPage'" : "'");
		if (!bVisible) { // for those items to be animated into view
			aHtml.push(" style='display:none'");
		}
		aHtml.push(">");
		aHtml.push("<a id='" + sPaginatorId + "-a--" + i + "' title='");
		if (i == iCurrent) {
			aHtml.push(jQuery.sap.encodeHTML(rb.getText("PAGINATOR_CURRENT_PAGE", [i])));
		} else {
			aHtml.push(jQuery.sap.encodeHTML(rb.getText("PAGINATOR_OTHER_PAGE", [i])));
		}
		aHtml.push("' href='javascript:void(0);'");
		if (i == iCurrent) {
			aHtml.push(" tabindex='0' class='sapUiLnkDsbl'");
		} else {
			 aHtml.push(" class='sapUiLnk'");
		}
		aHtml.push(">" + i + "</a>"); // TODO: clickable?! onPageClick
		aHtml.push("</li>");
	}

	return aHtml.join("");
};

/**
 * Updates the back/first/next/last page links
 * @param {sap.ui.core.Control} oPaginator an object representation of the control that should be updated
 * @private
 */
sap.ui.commons.PaginatorRenderer.updateBackAndForward = function(oPaginator) {
	var page = oPaginator.getCurrentPage();
	var id = oPaginator.getId();

	var isFirst = (page == 1);
	var isLast = (page == oPaginator.getNumberOfPages());

	var firstPage = jQuery.sap.byId(id + "--firstPageLink").toggleClass("sapUiLnk", !isFirst).toggleClass("sapUiLnkDsbl", isFirst);
	var backLink = jQuery.sap.byId(id + "--backLink").toggleClass("sapUiLnk", !isFirst).toggleClass("sapUiLnkDsbl", isFirst);
	var forwardLink = jQuery.sap.byId(id + "--forwardLink").toggleClass("sapUiLnk", !isLast).toggleClass("sapUiLnkDsbl", isLast);
	var lastPage = jQuery.sap.byId(id + "--lastPageLink").toggleClass("sapUiLnk", !isLast).toggleClass("sapUiLnkDsbl", isLast);
	
	if (isFirst) {
		firstPage.attr("aria-disabled", "true");
		backLink.attr("aria-disabled", "true");
		forwardLink.removeAttr("aria-disabled");
		lastPage.removeAttr("aria-disabled");
	} else if (isLast) {
		firstPage.removeAttr("aria-disabled");
		backLink.removeAttr("aria-disabled");
		forwardLink.attr("aria-disabled", "true");
		lastPage.attr("aria-disabled", "true");
	} else {
		firstPage.removeAttr("aria-disabled");
		backLink.removeAttr("aria-disabled");
		forwardLink.removeAttr("aria-disabled");
		lastPage.removeAttr("aria-disabled");
	}
};
}; // end of sap/ui/commons/PaginatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.PanelRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Panel
jQuery.sap.declare("sap.ui.commons.PanelRenderer");

/**
 * @class
 * @static
 */
sap.ui.commons.PanelRenderer = function() {
};


/**
 * Renders the HTML for the Panel, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
 */
sap.ui.commons.PanelRenderer.render = function(rm, oControl) {
	var id = oControl.getId();

	// do not render anything for invisible Panels
	if (!oControl.getVisible()) {
		return;
	}

	var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();

	//var hasToolbar = false; // TODO: this can be used in the future; rendering should already be quite ok, but minor adjustments are expected

	var heightSet = sap.ui.commons.Panel._isSizeSet(oControl.getHeight());
	var widthSet = sap.ui.commons.Panel._isSizeSet(oControl.getWidth());

	oControl.getScrollTop();  // update the scroll position properties
	oControl.getScrollLeft();


	// root element and classes
	rm.write("<section");
	rm.writeControlData(oControl);
	rm.addClass("sapUiPanel");
	rm.addStyle("width", oControl.getWidth());

	if (!oControl.getCollapsed()) {
		rm.addStyle("height", oControl.getHeight());
	} else {
		rm.addClass("sapUiPanelColl");
		rm.addStyle("height", "auto");
	}
	if (heightSet) {
		rm.addClass("sapUiPanelHeightSet");
	}
	if (widthSet) {
		rm.addClass("sapUiPanelWidthSet");
	}
	if (oControl.getApplyContentPadding()) {
		rm.addClass("sapUiPanelWithPadding");
	}
	if (!oControl.getEnabled()) {
		rm.addClass("sapUiPanelDis");
	}
	if (oControl.getShowCollapseIcon()) {
		rm.addClass("sapUiPanelWithCollapseIcon");
	}
	rm.addClass("sapUiPanelBorderDesign" + oControl.getBorderDesign());
	rm.addClass("sapUiPanelAreaDesign" + oControl.getAreaDesign());
	rm.writeClasses();
	rm.writeStyles();

	if (accessibility) {
		rm.writeAttribute("aria-labelledby", id + "-title ");
		rm.writeAttribute("aria-describedby", id + "-acc");
		rm.writeAttribute("role", "region");
		if (oControl.getCollapsed()) {
			rm.writeAttribute("aria-expanded", "false");
		} else {
			rm.writeAttribute("aria-expanded", "true");
		}
		rm.writeAttribute("tabindex", "0");
	}

	// tooltip of Panel
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}


	// header
	rm.write("><header id='" + id + "-hdr'");
	rm.addClass("sapUiPanelHdr");

	// tooltip of Title, might be set in addition
	var oTitle = oControl.getTitle();
	var sTitleTooltip;
	var sLevel = sap.ui.core.TitleLevel.H5; // to be compatible of size
	var bEmphasized = true;
	if (oTitle) {
		sTitleTooltip = oTitle.getTooltip_AsString();
		if (sTitleTooltip) {
			rm.writeAttributeEscaped("title", sTitleTooltip);
		}

		if (oTitle.getLevel() != sap.ui.core.TitleLevel.Auto) {
			// if title level is set use emphasized of title, otherwise use default one to be compatible
			sLevel = oTitle.getLevel();
			bEmphasized = oTitle.getEmphasized();
		}
	}
	if (bEmphasized) {
		rm.addClass("sapUiPanelHdrEmph");
	}

	rm.writeClasses();
	rm.write(">");
	
	if(oControl.getShowCollapseIcon() && accessibility){
		rm.write("<span id=\""+id+"-acc\" style=\"display:none;\">");
		rm.writeEscaped(oControl._rb.getText("PANEL_HEAD_ACC"));
		rm.write("</span>");
	}

	var sCollapseTooltip = oControl._rb.getText(oControl.getCollapsed() ? "PANEL_EXPAND" : "PANEL_COLLAPSE");
	if (oControl.getShowCollapseIcon()) { /* TODO: remove this one and rearrange the other in CSS */
		rm.write("<a id='" + id + "-collArrow' class='sapUiPanelHdrItem sapUiPanelCollArrow' href='javascript:void(0)' tabindex='0' title='" + sCollapseTooltip + "'");
		if (accessibility) {
			//rm.writeAttribute("aria-labelledby", id + "-title");
			rm.writeAttribute("role", "button");
		}
		rm.write(">&nbsp;</a>");
	}


	// IMPORTANT: title h1 is always rendered to simplify calculations and because having no title should be a rare use-case
	// if (oTitle) {
	if (oTitle && oTitle.getIcon()) {
		// header icon, if available
		var sIcon = oTitle.getIcon();
		var aClasses = [];
		var mAttributes = {};

		mAttributes["id"] = id + "-ico";
		aClasses.push("sapUiPanelIco");
		aClasses.push("sapUiPanelHdrItem");
		aClasses.push("sapUiTv"+sLevel); // use same font-size like header level (if icon font is used (for image it dosn't matters)

		rm.writeIcon(sIcon, aClasses, mAttributes);
	}

	// header title text
	var text = jQuery.sap.escapeHTML(oControl.getText());
	if (!text) {
		text = "&nbsp;";
	}
	// just reuse TextView class because there font size & co. is already defined
	rm.write("<"+sLevel+" ");
	rm.addClass("sapUiTv"+sLevel);
//	rm.write("<h1 id='" + id + "-title' class='sapUiPanelHdrItem sapUiPanelTitle'");
	rm.write(" id='" + id + "-title' ");
	rm.addClass("sapUiPanelHdrItem");
	rm.addClass("sapUiPanelTitle");
	rm.writeClasses();
	if (accessibility) {
		rm.writeAttribute("role", "heading");
	}
	rm.write(">");
	rm.write(text); // already escaped!
//	rm.write("</h1>");
	rm.write("</"+sLevel+">");


  // toolbar + buttons
  var aButtons = oControl.getButtons();
  if (aButtons && (aButtons.length > 0)) {
	rm.write("<div id='" + id + "-tb' class='sapUiPanelHdrItem sapUiPanelTb sapUiTbDesignFlat'>");

	for (var i = 0; i < aButtons.length; i++) {
		rm.renderControl(aButtons[i]);
	}

		rm.write("</div>");
  }


  // any other right-aligned buttons go like this:
  // <a id="firstIcoRight" class="sapUiPanelHdrRightItem sapUiPanel*">O</a>
  // the positioning among these items needs to be solved then, either by fixed CSS classes if there are few items (like Right1 Right2)
  // or maybe they need to be put into a nowrap div

  // collapse icon
  if (oControl.getShowCollapseIcon()) {
		rm.write("<a id='" + id + "-collIco' class='sapUiPanelHdrRightItem sapUiPanelCollIco' href='javascript:void(0)' tabindex='0' title='" + sCollapseTooltip + "'");
		if (accessibility) {
			//rm.writeAttribute("aria-labelledby", id + "-title");
			rm.writeAttribute("role", "button");
		}
		rm.write(">&nbsp;</a>");
	}

  rm.write("</header>");



	// content area

	// everything below the header is only rendered initially if not collapsed - saves performance and Panel just re-renders later on expand
	if (!oControl.getCollapsed()) {
		rm.write("<div class='sapUiPanelCont' id='", id, "-cont'>");

		// Content (child controls)
		var oControls = oControl.getContent(),
				iLength = oControls.length;
		for (var i=0; i < iLength; i++) {
			rm.renderControl(oControls[i]);
		}

		rm.write("</div>");
	}

	rm.write("</section>");
};
}; // end of sap/ui/commons/PanelRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ProgressIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.ProgressIndicator
jQuery.sap.declare("sap.ui.commons.ProgressIndicatorRenderer");

/**
 * @class ProgressIndicator renderer.
 * @static
 */
sap.ui.commons.ProgressIndicatorRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.ProgressIndicatorRenderer.render = function(oRenderManager, oProgressIndicator){
	// .convenience variable
	var rm = oRenderManager;
	var widthControl = oProgressIndicator.getWidth();
	var widthBar = oProgressIndicator.getPercentValue();
	var widthBorder;
	var positionEnd;
	oProgressIndicator.bRtl  = sap.ui.getCore().getConfiguration().getRTL();

	// return immediately if control is invisible
	if (!oProgressIndicator.getVisible()) {
		return;
	}

	if (widthBar > 100) {
		widthBorder = (10000 / widthBar) + '%';
	}
	else {
		widthBorder = '100%';
	}

	// write the HTML into the render manager
	rm.write('<DIV');
	rm.writeControlData(oProgressIndicator);

	rm.writeAttribute('tabIndex', '0');

	//ARIA
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
//		rm.writeAttribute("role", sap.ui.core.AccessibleRole.Slider);
		rm.writeAttribute('role', 'progressbar');
		rm.writeAccessibilityState(oProgressIndicator, {valuemin: '0%'});
		rm.writeAccessibilityState(oProgressIndicator, {valuemax: '100%'});
		rm.writeAccessibilityState(oProgressIndicator, {valuenow: widthBar + '%'});
//		rm.writeAccessibilityState(oProgressIndicator, {label:oSlider.getTooltip()});

//		if (!oProgressIndicator.getEditable()) {
//			rm.writeAccessibilityState(oProgressIndicator, {disabled: true});
//		}else {
//			rm.writeAccessibilityState(oProgressIndicator, {disabled: false});
//		}
	}

	if (oProgressIndicator.getWidth() && oProgressIndicator.getWidth() != '') {
		rm.writeAttribute('style', 'height: 16px; width:' + widthControl + ';');
	}

	if (oProgressIndicator.getTooltip_AsString()) {
		rm.writeAttributeEscaped('title', oProgressIndicator.getDisplayValue() + '- '+ oProgressIndicator.getTooltip_AsString());
	}
	else {
		rm.writeAttributeEscaped('title', oProgressIndicator.getDisplayValue());
	}

	rm.addClass('sapUiProgInd');
	rm.writeClasses();

	rm.write('>');

	rm.write('<DIV');
	rm.writeAttribute('id', oProgressIndicator.getId() + '-box');

	if (oProgressIndicator.getWidth() && oProgressIndicator.getWidth() != '') {
		rm.writeAttribute('style', 'height: 16px; width:' + widthBorder + ';');
	}

	rm.addClass('sapUiProgIndBorder');
	rm.writeClasses();

	rm.write('>');

	rm.write('<DIV');
	rm.writeAttribute('id', oProgressIndicator.getId() + '-bar');
	rm.writeAttribute('onselectstart', "return false");
	rm.writeAttribute('style', 'height: 14px; width:' + oProgressIndicator.getPercentValue() + '%;');

	var sBarColor = oProgressIndicator.getBarColor();
	switch (sBarColor) {
		case "POSITIVE":
			rm.addClass('sapUiProgIndBarPos');
			break;
		case "NEGATIVE":
			rm.addClass('sapUiProgIndBarNeg');
			break;
		case "CRITICAL":
			rm.addClass('sapUiProgIndBarCrit');
			break;
		case "NEUTRAL":
			rm.addClass('sapUiProgIndBar');
			break;
		default:
			rm.addClass('sapUiProgIndBar');
			break;
	}

	rm.writeClasses();

	rm.write('>');

	rm.write('<DIV');
	rm.writeAttribute('id', oProgressIndicator.getId() + '-end');

	if (widthBar > 100) {
		switch (sBarColor) {
			case "POSITIVE":
				rm.addClass('sapUiProgIndPosEnd');
				break;
			case "NEGATIVE":
				rm.addClass('sapUiProgIndNegEnd');
				break;
			case "CRITICAL":
				rm.addClass('sapUiProgIndCritEnd');
				break;
			case "NEUTRAL":
				rm.addClass('sapUiProgIndEnd');
				break;
			default:
				rm.addClass('sapUiProgIndEnd');
				break;
		}
	}
	else {
		rm.addClass('sapUiProgIndEndHidden');
	}

	rm.writeClasses();
	if (oProgressIndicator.bRtl) {
		rm.writeAttribute('style', 'position: relative; right:' + widthBorder);
	} else {
		rm.writeAttribute('style', 'position: relative; left:' + widthBorder);
	}

	rm.write('>');
	rm.write('</DIV>');

	rm.write('<SPAN');

	rm.addClass('sapUiProgIndFont');
	rm.writeClasses();

	rm.write('>');

	if (oProgressIndicator.getShowValue()&& oProgressIndicator.getShowValue() == true) {
		if (oProgressIndicator.getDisplayValue() && oProgressIndicator.getDisplayValue() != '') {
			rm.writeEscaped(oProgressIndicator.getDisplayValue());
		}
	}

	rm.write('</SPAN>');
	rm.write('</DIV>');
	rm.write('</DIV>');
	rm.write('</DIV>');
};
}; // end of sap/ui/commons/ProgressIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RadioButtonGroupRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.RadioButtonGroup
jQuery.sap.declare("sap.ui.commons.RadioButtonGroupRenderer");

/**
 * @class RadioButtonGroup renderer.
 * @static
 */
sap.ui.commons.RadioButtonGroupRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.RadioButtonGroupRenderer.render = function(oRenderManager, oRBGroup){
	// convenience variable
	var rm = oRenderManager;

	// Return immediately if control is invisible or has no RadioButtons
	if (!oRBGroup.getVisible() || !oRBGroup.aRBs) {
		return;
	}

	var iColumns = oRBGroup.getColumns();
	var bEnabled = oRBGroup.getEnabled();

	if (bEnabled) {
		// check if at least one item is enabled
		var aItems = oRBGroup.getItems();
		bEnabled = false;
		for ( var i = 0; i < aItems.length; i++) {
			if (aItems[i].getEnabled()){
				bEnabled = true;
				break;
			}
		}
	}

	rm.write("<DIV");
	rm.writeControlData(oRBGroup);
	rm.addClass("sapUiRbG");
	if(iColumns > 1){
		if(iColumns == oRBGroup.aRBs.length){
			rm.addClass("sapUiRbG1Row");
		}else{
			rm.addClass("sapUiRbGTab");
			if (oRBGroup.getWidth() && oRBGroup.getWidth() != '') {
				rm.addClass("sapUiRbGTabFlex");
				// as in Firefox -moz-box-flex > 0 brings ellipsis even if no width is given
				// therefore flexible columns should be only used if a width is given.
			}
		}
	}

	if (oRBGroup.getWidth() && oRBGroup.getWidth() != '') {
		rm.addStyle("width", oRBGroup.getWidth());
	}

	if (oRBGroup.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oRBGroup.getTooltip_AsString());
	}

	if(bEnabled){
		rm.writeAttribute('tabindex', '0');
	}else{
		rm.writeAttribute('tabindex', '-1');
	}

	// ARIA
	rm.writeAccessibilityState(oRBGroup, {
		role: "radiogroup",
		invalid: oRBGroup.getValueState() == sap.ui.core.ValueState.Error,
		disabled: !oRBGroup.getEditable()
	});

	rm.writeClasses();
	rm.writeStyles();
	rm.write(">"); // DIV

	// columns
	for (var c = 0; c < iColumns; c++) {
		if(iColumns > 1 && iColumns != oRBGroup.aRBs.length){
			// if only 1 column -> no DIV necessary
			rm.write("<DIV");
			rm.addClass("sapUiRbGCol");
			rm.writeClasses();
			rm.write(">"); // DIV element
		}

		// render RadioButtons
		for (var i = c; i < oRBGroup.aRBs.length; i=i+iColumns) {
			rm.renderControl(oRBGroup.aRBs[i]);
		}

		if(iColumns > 1 && iColumns != oRBGroup.aRBs.length){
			rm.write("</DIV>");
		}
	}

	if(iColumns > 1 && iColumns != oRBGroup.aRBs.length){
		// dummy Column to avoid big spaces between RadioButtons in Safari
		rm.write('<DIV class="sapUiRbGDummy"> </DIV>');
	}

	rm.write("</DIV>");
};
}; // end of sap/ui/commons/RadioButtonGroupRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RadioButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.RadioButton
jQuery.sap.declare("sap.ui.commons.RadioButtonRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class RadioButton Renderer
 *
 * @author d046011
 * @version 0.1
 * @static
 */
sap.ui.commons.RadioButtonRenderer = {
};

/**
 * Renders the HTML for the RadioButton, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.RadioButton} oRadioButton The RadioButton control that should be rendered.
 */
sap.ui.commons.RadioButtonRenderer.render = function(rm, oRadioButton) {

	// Return immediately if control is invisible
	if (!oRadioButton.getVisible()) {
		return;
	}

	var sId = oRadioButton.getId();
	var tooltip = oRadioButton.getTooltip_AsString();

	rm.addClass("sapUiRb");

	// Open the containing <span> tag
	rm.write("<span");
	rm.writeControlData(oRadioButton);

	// ARIA
	rm.writeAccessibilityState(oRadioButton, {
		role: "radio",
		checked: oRadioButton.getSelected() === true,
		invalid: oRadioButton.getValueState() == sap.ui.core.ValueState.Error,
		disabled: !oRadioButton.getEditable(),
		labelledby: sId+"-label",
		describedby: tooltip ? sId+"-Descr" : undefined
	});

	// Collect state information
	var enabled = oRadioButton.getEnabled() != null && oRadioButton.getEnabled();
	var editable = oRadioButton.getEditable() != null && oRadioButton.getEditable();
	var inErrorState = false;
	var inWarningState = false;
	if (oRadioButton.getValueState() != null) {
		inErrorState = sap.ui.core.ValueState.Error == oRadioButton.getValueState();
		inWarningState = sap.ui.core.ValueState.Warning == oRadioButton.getValueState();
	}

	// Add classes and properties depending on the state
	if (oRadioButton.getSelected()) {
		rm.addClass("sapUiRbSel");
	}

	var myTabIndex = 0;
	var bReadOnly = false;

	if (!enabled) {
		myTabIndex = -1;
		bReadOnly = true;
		rm.addClass("sapUiRbDis");
	}
	if (!editable) {
		//myTabIndex = -1; //According to CSN2581852 2012 a readonly RB should be in the tabchain
		bReadOnly = true;
		rm.addClass("sapUiRbRo");
	}
	if (inErrorState) {
		rm.addClass("sapUiRbErr");
	} else if (inWarningState) {
		rm.addClass("sapUiRbWarn");
	}
	if (enabled && editable && !inErrorState && !inWarningState) {
		rm.addClass("sapUiRbStd");
	}
	if (enabled && editable) {
		rm.addClass("sapUiRbInteractive");
	}
	rm.writeClasses();

	if (oRadioButton.getWidth() && oRadioButton.getWidth() != '') {
		rm.writeAttribute("style", "width:" + oRadioButton.getWidth() + ";");
	}

	rm.writeAttribute("tabIndex", myTabIndex);

	var tooltipToUse = sap.ui.core.ValueStateSupport.enrichTooltip(oRadioButton, tooltip ? tooltip : oRadioButton.getText());
	if (tooltipToUse) {
		rm.writeAttributeEscaped("title", tooltipToUse);
	}

	rm.write(">"); // Close the containing <span> tag


	// Write the real - potentially hidden - HTML RadioButton element
	rm.write("<input type='radio' tabindex='-1' id='");
	rm.write(sId);
	rm.write("-RB' name=\"");
	rm.writeEscaped(oRadioButton.getGroupName());
	rm.write("\" ");
	if (oRadioButton.getSelected()) {
		rm.write(" checked='checked'");
	}
	if (!enabled) {
		rm.write(" disabled='disabled'");
	}
	if(bReadOnly) {
		rm.write(" readonly='readonly'");
		rm.write(" disabled='disabled'");
	}
	if (oRadioButton.getKey()) {
		rm.writeAttributeEscaped("value", oRadioButton.getKey());
	}

	rm.write(" />"); // Close RadioButton-input-element


	// Write the RadioButton label which also holds the background image
	rm.write("<label id=\""+sId+"-label\"");
	rm.writeAttribute("for", sId + "-RB"); // Label for RadioButton, so a click toggles the state
	if (!oRadioButton.getText()) {
		rm.write(" class=\"sapUiRbNoText\"");
	}
	rm.write(">");
	if (oRadioButton.getText()) {
		this.renderText(rm, oRadioButton.getText(), oRadioButton.getTextDirection());
	}
	rm.write("</label>");

	if (tooltip) {
		// for ARIA the tooltip must be in a separate SPAN and assigned via aria-describedby.
		// otherwise JAWS do not read it.
		rm.write("<span id=\""+sId+"-Descr\" style=\"visibility: hidden; display: none;\">");
		rm.writeEscaped(tooltip);
		rm.write("</span>");
	}
	// Close the surrounding <span> element
	rm.write("</span>");
};

/**
 * Write RadioButton label - either flat, or, in case the text direction is different from the environment, within a <span> with an explicit "dir".
 */
sap.ui.commons.RadioButtonRenderer.renderText = function(oRenderManager, sText, eTextDirection) {
	var rm = oRenderManager;
	if (!eTextDirection || eTextDirection == sap.ui.core.TextDirection.Inherit){
		rm.writeEscaped(sText);
	} else {
		rm.write("<span style=\"direction:" + eTextDirection.toLowerCase() + ";\">");
		rm.writeEscaped(sText);
		rm.write("</span>");
	}
};

sap.ui.commons.RadioButtonRenderer.setSelected = function(oRadioButton, bSelected) {

	oRadioButton.$().toggleClass('sapUiRbSel', bSelected).attr('aria-checked', bSelected);
	var $Dom = oRadioButton.getDomRef("RB");
	if(bSelected){
		$Dom.checked = true;
		$Dom.setAttribute('checked', 'checked');
	}else{
		$Dom.checked = false;
		$Dom.removeAttribute('checked');
	}

};

}; // end of sap/ui/commons/RadioButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RatingIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.RatingIndicator
jQuery.sap.declare("sap.ui.commons.RatingIndicatorRenderer");

/**
 * @class RatingIndicatorRenderer.
 * @static
 */
sap.ui.commons.RatingIndicatorRenderer = function() {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oRating an object representation of the control that should be rendered
 */
sap.ui.commons.RatingIndicatorRenderer.render = function(oRenderManager, oRating) {
	var rm = oRenderManager;

	// return immediately if control is invisible
	if(!oRating.getVisible()){
		return;
	}

	var iNumberOfSymbols = oRating.getMaxValue();

	rm.write("<div");
	rm.writeControlData(oRating);
	rm.addClass("sapUiRating");
	if(oRating.getEditable()){
		rm.addClass("sapUiRatingEdit");
	}
	rm.writeClasses();
	rm.writeAttribute("tabindex", "0"/*oRating.getEditable() ? "0" : "-1"*/); //According to CSN 2581852 2012 the RI should always be in the tabchain
	if(oRating.getTooltip() && oRating.getTooltip_AsString()){
		rm.writeAttributeEscaped("title", oRating.getTooltip_AsString());
	}else if(!oRating.getEditable()){
		rm.writeAttribute("title", oRating._getDisplayValue());
	}

	//ARIA
	rm.writeAccessibilityState(oRating, {
		"role": "slider",
		"orientation": "horizontal",
		"valuemin": 1,
		"valuemax": iNumberOfSymbols,
		"disabled": !oRating.getEditable(),
		"live": "assertive"
	});

	rm.write(">");

	for(var i=0; i<iNumberOfSymbols; i++){
		sap.ui.commons.RatingIndicatorRenderer.renderItem(rm, oRating, i, oRating._getDisplayValue());
	}

	rm.write("</div>");
};

/**
 * Helper function to render a rating symbol.
 * @private
 */
sap.ui.commons.RatingIndicatorRenderer.renderItem = function(rm, oRating, i, fValue){
	var val = i+1;
	rm.write("<div");
	rm.writeAttribute("id", oRating.getId() + "-itm-" + val);
	rm.writeAttribute("itemvalue", val);
	rm.writeAttribute("class", "sapUiRatingItm");
	rm.writeAttribute("style", "line-height:0px;");
	if(!oRating.getTooltip() && oRating.getEditable()){
		//rm.writeAttribute("dir", "ltr"); //Do we need this to avoid tooltips like "of 5 3" instead of "3 of 5"
		rm.writeAttributeEscaped("title", oRating._getText("RATING_TOOLTIP" , [val, oRating.getMaxValue()]));
	}
	rm.write(">");

	rm.write("<img");
	rm.writeAttribute("class", "sapUiRatingItmImg");
	var sIcon = sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol("selected", oRating);
	rm.writeAttributeEscaped("src", sIcon);
	rm.write("/>");

	rm.write("<div");
	rm.writeAttribute("class", "sapUiRatingItmOvrflw");

	var visualMode = oRating.getVisualMode();
	if(visualMode == "Full"){
		fValue = Math.round(fValue);
	}
	var style;
	if(fValue >= val){
		style = "width:0%;";
	}else if(fValue < i){
		style = "width:100%;";
	}else{
		var diff = fValue-i;
		if(visualMode == "Half"){
			var width = 50;
			if(diff < 0.25) {
				width = 100;
			}
			if(diff >= 0.75) {
				width = 0;
			}
			style = "width:" + width + "%;";
		}else{ //Continuous
			style = "width:" + (100-Math.round(diff*100)) + "%;";
		}
	}
	rm.writeAttribute("style", style);
	rm.write(">");

	rm.write("<img");
	rm.writeAttribute("class", "sapUiRatingItmOvrflwImg");
	sIcon = sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol("unselected", oRating);
	rm.writeAttributeEscaped("src", sIcon);
	rm.write("/>");

	rm.write("</div>");
	rm.write("</div>");
};

/**
 * Helper function to render a rating symbol in hover state.
 *
 * @param {int} iCount the number of the rating image which should be hovered.
 * @param {sap.ui.core.Control} oRating an object representation of the control that should be rendered
 * @param {boolean} bAfter specifies whether the rating image is behind the hovered one.
 * @private
 */
sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol = function(iCount, oRating, bAfter){
	var oSymbol = jQuery.sap.byId(oRating.getId() + "-itm-" + iCount);
	oSymbol.addClass("sapUiRatingItmHov");
	var oSymbolImage = oSymbol.children("img");
	var sIcon = sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol(bAfter ? "unselected" : "hover", oRating);
	oSymbolImage.attr("src", sIcon);
};

/**
 * Helper function to render a rating symbol in normal (selected/deselected) state.
 *
 * @param {int} iCount the number of the rating image which should be unhovered.
 * @param {sap.ui.core.Control} oRating an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.RatingIndicatorRenderer.unhoverRatingSymbol = function(iCount, oRating){
	var oSymbol = jQuery.sap.byId(oRating.getId() + "-itm-" + iCount);
	oSymbol.removeClass("sapUiRatingItmHov");
	var oSymbolImage = oSymbol.children("img");
	var sIcon = sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol("selected", oRating);
	oSymbolImage.attr("src", sIcon);
};

/**
 * Helper function to find the right symbol.
 *
 * @param {string} sType type of desired image (selected, unselected, hover)
 * @param {sap.ui.core.Control} oRating an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.RatingIndicatorRenderer.getThemeSymbol = function(sType, oRating){
	var sIcon, sParam;

	if(sType == "selected"){
		sIcon = oRating.getIconSelected();
		sParam = "sap.ui.commons.RatingIndicator:sapUiRatingSymbolSelected";
	}else if(sType == "unselected"){
		sIcon = oRating.getIconUnselected();
		sParam = "sap.ui.commons.RatingIndicator:sapUiRatingSymbolUnselected";
	}else{
		sIcon = oRating.getIconHovered();
		sParam = "sap.ui.commons.RatingIndicator:sapUiRatingSymbolHovered";
	}

	if(!sIcon){
		var sThemePath = 
			"themes/" + 
			sap.ui.getCore().getConfiguration().getTheme() + "/" + 
			sap.ui.core.theming.Parameters.get(sParam);

		// The documentation states that sap.ui.resource() should be used for theme-URLs
		sIcon = sap.ui.resource("sap.ui.commons", sThemePath);
	}

	return sIcon;
};
}; // end of sap/ui/commons/RatingIndicatorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ResponsiveContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.ResponsiveContainer
jQuery.sap.declare("sap.ui.commons.ResponsiveContainerRenderer");

/**
 * @class RatingIndicatorRenderer.
 * @static
 */
sap.ui.commons.ResponsiveContainerRenderer = function() {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oRating an object representation of the control that should be rendered
 */
sap.ui.commons.ResponsiveContainerRenderer.render = function(oRenderManager, oContainer) {
	var oRM = oRenderManager,
		oContent = oContainer.getAggregation("content");
	oRM.write("<div ");
	oRM.writeControlData(oContainer);
	oRM.addStyle("width", oContainer.getWidth());
	oRM.addStyle("height", oContainer.getHeight());
	oRM.writeStyles();
	oRM.write(">");
	if (oContent) {
		oRM.renderControl(oContent);
	}
	// Render divs for each range into an invisible area to get the actual pixel width
	// for arbitrary CSS sizes (em, ex, rem, etc...)
	oRM.write("<div ");
	oRM.addStyle("width", "0px");
	oRM.addStyle("height", "0px");
	oRM.addStyle("overflow", "hidden");
	oRM.writeStyles();
	oRM.write(">");
	jQuery.each(oContainer.getRanges(), function(i, oRange) {
		oRM.write("<div ");
		oRM.writeElementData(oRange);
		oRM.addStyle("width", oRange.getWidth());
		oRM.addStyle("height", oRange.getHeight());
		oRM.writeStyles();
		oRM.write("></div>")
	});
	oRM.write("</div>")
	oRM.write("</div>");
};
}; // end of sap/ui/commons/ResponsiveContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RichTooltipRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.RichTooltip
jQuery.sap.declare("sap.ui.commons.RichTooltipRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class RichToltip renderer.
 * @static
 */
sap.ui.commons.RichTooltipRenderer = {};

/**
 * Renders the HTML for the RichTooltip, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} rm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oRichTooltip An object representation of the control that should be rendered.
 */
sap.ui.commons.RichTooltipRenderer.render = function(rm, oRichTooltip){
	var sId = oRichTooltip.getId();

	// Header
	rm.write("<div ");
	rm.writeControlData(oRichTooltip);
	rm.addClass("sapUiRtt");
	rm.writeClasses();
	rm.write(" ><div><div>");
	rm.write("<div class='sapUiRttTopL'></div><div class='sapUiRttTopR'></div>");
	rm.write("<div class='sapUiRttCL'>");
	rm.write("<div class='sapUiRttCR'>");
	
	rm.write("<div class='sapUiRttContent'>");

	// Title
	var sTitle = oRichTooltip.getTitle();
	if (sTitle) {
		rm.write("<div id='" + sId +"-title' role='tooltip' class='sapUiRttTitle'>");
		rm.writeEscaped(sTitle);
		rm.write("</div>");
		// render a separator between title and rest of the RichTooltip
		rm.write("<div class='sapUiRttSep'></div>");
	}

	// if the parent element has a set ValueState render the corresponding text and image
	var sValueStateText = sap.ui.core.ValueStateSupport.getAdditionalText(oRichTooltip.getParent());
	
	// render the individual ValueState text (if available) otherwise use the default text
	var sIndividualText = oRichTooltip.getAggregation("individualStateText");
	
	// if there is any (from parent control or from RTT itself) value state text set
	if (sValueStateText || sIndividualText) {
		rm.write('<div class="sapUiRttValueStateContainer">');
		
		// only if the owner of the RTT has a value state - render state and image
		if (sValueStateText) {
			var sValueState = oRichTooltip.getParent().getValueState();
			var sValueStateImage = sValueState !== sap.ui.core.ValueState.None ? "ValueState_" + sValueState + ".png" : "";

			// if there is a proper value state -> render corresponding image
			if (sValueStateImage !== "") {
				sValueStateImage = jQuery.sap.getModulePath("sap.ui.commons", '/')
				+ "themes/"
				+ sap.ui.getCore().getConfiguration().getTheme()
				+ "/img/richtooltip/" + sValueStateImage;
			
				rm.write('<img id="'+ sId +'-valueStateImage" class="sapUiRttValueStateImage" src="');
				rm.writeEscaped(sValueStateImage);
				rm.write('"/>');
			}
		} 
	
	    if (sIndividualText) {
			rm.renderControl(sIndividualText);
		} else {
			rm.write('<div id="'+ sId +'-valueStateText" class="sapUiRttValueStateText">');
			rm.writeEscaped(sValueStateText);
			rm.write('</div>');
		}
		
		rm.write('</div>');
		
		// render a separator between ValueState stuff and text of the RichTooltip
		rm.write("<div class='sapUiRttSep'></div>");
	}	
	
	
	rm.write('<div class="sapUiRttContentContainer">');
	// render image that might be set
	var sImage = oRichTooltip.getImageSrc();
	if (sImage){
		var sAltText = oRichTooltip.getImageAltText();
		rm.write('<img id="' + sId + '-image" alt="' + sAltText + '" class="sapUiRttImage" src="');
		rm.writeEscaped(sImage);
		rm.write('"/>');
	}
	
	// render RichTooltip's text
	var oText = oRichTooltip.getAggregation("formattedText");
	if (oText){
		rm.renderControl(oText);
	}
	rm.write('</div>');

	// render footer
	rm.write("</div></div></div>");
	rm.write("<div class='sapUiRttBotL'></div>");
	rm.write("<div class='sapUiRttBotR'></div>");
	rm.write("</div></div></div>");
};
}; // end of sap/ui/commons/RichTooltipRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RoadMapRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.RoadMap
jQuery.sap.declare("sap.ui.commons.RoadMapRenderer");

(function() {

/**
 * @class RoadMap renderer.
 * @static
 */
sap.ui.commons.RoadMapRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @private
 */
sap.ui.commons.RoadMapRenderer.render = function(oRenderManager, oRoadMap){
	var rm = oRenderManager;

	oRoadMap.doBeforeRendering(); //Inform the Roadmap that the rendering starts

	if(!oRoadMap.getVisible()) {
		return;
	}

	rm.write("<div");
	rm.writeControlData(oRoadMap);
	rm.addClass("sapUiRoadMap");
	rm.writeClasses();
	rm.writeAttribute("tabIndex", "0");

	var sTooltip = oRoadMap.getTooltip_AsString();
	if(sTooltip){
		rm.writeAttributeEscaped("title", sTooltip);
	}

	rm.writeAttribute("style", "width:"+(oRoadMap.getWidth() ? oRoadMap.getWidth() : "100%")+";");

	rm.write(">");

	renderDelimiter(rm, oRoadMap, true);

	rm.write("<ul");
	rm.writeAttribute("id", oRoadMap.getId() + "-steparea");
	rm.addClass("sapUiRoadMapStepArea");
	rm.writeClasses();

	//ARIA
	if(sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute("role", "group");
		rm.writeAttributeEscaped("aria-label", getText("RDMP_DEFAULT_TOOLTIP", []));
		if(sTooltip){
			rm.writeAttributeEscaped("title", sTooltip);
		}
	}

	rm.write(">");

	var aSteps = oRoadMap.getSteps();
	for(var i=0; i<aSteps.length; i++){
		var oStep = aSteps[i];
		if(oStep.getSubSteps().length > 0){ //is expandable?
			renderExpandableStep(rm, oRoadMap, oStep);
		}else{
			renderStep(rm, oRoadMap, oStep);
		}
	}

	rm.write("</ul>");

	renderDelimiter(rm, oRoadMap, false);

	rm.write("</div>");
};


/**
 * Updates the CSS classes of the Roadmap to select a new step.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {string} sId the ID of the step which should be selected.
 * @private
 */
sap.ui.commons.RoadMapRenderer.selectStepWithId = function(oRoadMap, sId){
	var sCurrentId = oRoadMap.getSelectedStep();
	if(sCurrentId) {
		jQuery.sap.byId(sCurrentId).removeClass("sapUiRoadMapSelected");
	}
	if(sId) {
		jQuery.sap.byId(sId).addClass("sapUiRoadMapSelected");
	}
	if(sap.ui.getCore().getConfiguration().getAccessibility()){
		if(sCurrentId) {
			jQuery.sap.byId(sCurrentId+"-box").removeAttr("aria-checked");
		}
		if(sId) {
			jQuery.sap.byId(sId+"-box").attr("aria-checked", true);
		}
	}
};


/**
 * Updates the CSS classes of the Roadmap when a step is selected. If the step is an
 * expandable step the exapnd state is toggled.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @see <code>sap.ui.commons.RoadMapRenderer.selectStepWithId</code>
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {sap.ui.core.Element} oStep the step which was selected.
 * @param {boolean} bIsSubStep indicator whether the given step is a sub step or not.
 * @param {boolean} bSkipAnim indicator whether animation should be used or not.
 * @param {function} fEndCallBack callback function which is called in the end with a string parameter indicating the operation which was done ("expanded", "collapsed", "selected")
 * @param {boolean} bSkipSelect indicator whether selection state should be switched or not.
 * @private
 */
sap.ui.commons.RoadMapRenderer.selectStep = function(oRoadMap, oStep, bIsSubStep, bSkipAnim, fEndCallBack, bSkipSelect){
	if(!bSkipSelect){
		//Select the step
		sap.ui.commons.RoadMapRenderer.selectStepWithId(oRoadMap, oStep.getId());
	}
	if(!bIsSubStep && oStep.getSubSteps().length > 0){
		//Expandable step -> Toggle the expand state

		var aSteps = oStep.getSubSteps();
		var jDomRef = oStep.$();
		var bIsExpanded = jDomRef.hasClass("sapUiRoadMapExpanded"); //Get the current expand state

		var iCounter = 1; //Must be in the end 0 when all animations are done (see fDoOnAnimComplete)

		var fDoOnAnimComplete = function(){ //Function called when an animation is done
			iCounter--;
			if(iCounter > 0) {
				return;
			}

			//Only do something if the last animation finishs
			if(fEndCallBack) {
				fEndCallBack(!bIsExpanded ? "expanded" : "collapsed");
			}
			sap.ui.commons.RoadMapRenderer.updateStepArea(oRoadMap);
		};

		//Animation function to hide / show a step (depending on the current expand state)
		var fAnim = function(sId, bOpen, fComplete){
			var jRef = jQuery.sap.byId(sId);
			if(!jQuery.fx.off && !bSkipAnim){ //Animation only if turned on globally and if should not be skipped
				jRef.width(bOpen ? "0px" : oRoadMap.iStepWidth);
				var oLabel = jQuery.sap.byId(sId+"-label");
				oLabel.addClass("sapUiRoadMapHidden");
				if(bOpen) {
					jRef.toggleClass("sapUiRoadMapHidden");
				}
				jRef.animate({width: bOpen ? oRoadMap.iStepWidth : "0px"}, "fast", function(){
					if(!bOpen) {
						jRef.toggleClass("sapUiRoadMapHidden");
					}
					jRef.width("");
					oLabel.removeClass("sapUiRoadMapHidden");
					if(fComplete) {
						fComplete();
					}
				});
			}else{
				jRef.toggleClass("sapUiRoadMapHidden");
				if(fComplete) {
					fComplete();
				}
			}
		};

		//Change the expand state of the step immediately
		jDomRef.toggleClass("sapUiRoadMapExpanded");

		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			var bExp = jDomRef.hasClass("sapUiRoadMapExpanded");
			oStep.$("box").attr("aria-expanded", bExp);
			oStep.$("expandend-box").attr("aria-expanded", bExp);
		}

		//Hide / Show the sub steps
		for(var i=0; i<aSteps.length; i++){
			if(aSteps[i].getVisible()){
				iCounter++;
				fAnim(aSteps[i].getId(), !bIsExpanded, fDoOnAnimComplete);
			}
		}
		//Hide / Show the end step
		fAnim(oStep.getId()+"-expandend", !bIsExpanded, fDoOnAnimComplete);
	}else{
		if(fEndCallBack) {
			fEndCallBack("selected");
		}
	}
};


/**
 * Recalculates the width of the step area and updates the delimiters.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @private
 */
sap.ui.commons.RoadMapRenderer.updateStepArea = function(oRoadMap){
	if(oRoadMap.iStepWidth != -1){
		var jStepAreaRef = oRoadMap.$("steparea");
		var jStartDelimRef = oRoadMap.$("Start");
		var jEndDelimRef = oRoadMap.$("End");
		var jRoadMapRef = oRoadMap.$();

		var iScrollLeft = jStepAreaRef.scrollLeft();

		var iAvailableSpaceForSteps = jRoadMapRef.width() - jStartDelimRef.outerWidth(true) - jEndDelimRef.outerWidth(true);
		var iMaxVisibleSteps = oRoadMap.getNumberOfVisibleSteps();
		var iCurrentMaxVisibleSteps = getNumberOfPotentiallyVisibleSteps(oRoadMap);
		if(iMaxVisibleSteps < 1){
			iMaxVisibleSteps = iCurrentMaxVisibleSteps;
		}else{
			iMaxVisibleSteps = Math.min(iMaxVisibleSteps, iCurrentMaxVisibleSteps);
		}

		var iPossibleSteps = Math.floor(iAvailableSpaceForSteps / oRoadMap.iStepWidth);
		var iNumberOfVisibleSteps = Math.min(iMaxVisibleSteps, iPossibleSteps);
		jStepAreaRef.width(iNumberOfVisibleSteps * oRoadMap.iStepWidth).scrollLeft(iScrollLeft);

		updateDelimiters(oRoadMap);
	}
};


/**
 * Recalculates the width of the step area and updates the delimiters and sets the
 * focus either to the specified first visible step of the Roadmap (if not exists the first visible
 * step is focused).
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @see <code>sap.ui.commons.RoadMapRenderer.updateStepArea</code>
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {boolean} bSkipScrollState if false the function does the same as <code>sap.ui.commons.RoadMapRenderer.updateStepArea</code>
 * @private
 */
sap.ui.commons.RoadMapRenderer.updateScrollArea = function(oRoadMap, bSkipScrollState){
	sap.ui.commons.RoadMapRenderer.updateStepArea(oRoadMap);
	if(!bSkipScrollState){
		var jStepArea = oRoadMap.$("steparea");
		var oPos = getStepEndPosition(oRoadMap, false);
		if(oRoadMap.getFirstVisibleStep()){
			var jStep = jQuery.sap.byId(oRoadMap.getFirstVisibleStep());
			oPos = getPositionLeft(jStepArea, jStep);
		}
		updateScrollState(oRoadMap, oPos + getRTLFactor()*jStepArea.scrollLeft(), true);
	}
};


/**
 * Checks whether the step with the given Id is currently in the visible part of the scroll area.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {string} sId the ID of the step which should be checked.
 * @private
 */
sap.ui.commons.RoadMapRenderer.isVisibleRef = function(oRoadMap, sId){
	var jStepArea = oRoadMap.$("steparea");
	var jStepAreaChildren = jStepArea.children(":visible");
	for(var i=0; i<jStepAreaChildren.length; i++){
		var jChild = jQuery(jStepAreaChildren.get(i));
		if(jChild.attr("id") == sId){
			var iPos = getPositionLeft(jStepArea, jChild);
			return iPos >= 0 && iPos < jStepArea.width();
		}
	}
	return false;
};


/**
 * Returns the Id of the first step in the visible part of the scroll area.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @private
 */
sap.ui.commons.RoadMapRenderer.getFirstVisibleRef = function(oRoadMap){
	var jStepArea = oRoadMap.$("steparea");
	var jStepAreaChildren = jStepArea.children(":visible");
	for(var i=0; i<jStepAreaChildren.length; i++){
		var jChild = jQuery(jStepAreaChildren.get(i));
		if(getPositionLeft(jStepArea, jChild) == 0){
			return jChild;
		}
	}
	return null;
};


/**
 * Updates the label text of the given step
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Element} oStep the Step for which the label should be changed.
 * @param {string} sLabel the new label.
 * @private
 */
sap.ui.commons.RoadMapRenderer.setStepLabel = function(oStep, sLabel){
	var l = sLabel ? jQuery.sap.escapeHTML(sLabel) : "";
	oStep.$("label").html(l);
	oStep.$("expandend-label").html(l);
	
	if(!sap.ui.getCore().getConfiguration().getAccessibility()) {
		return;
	}
	
	oStep.$("box").attr("aria-label", getAriaLabel(oStep, sLabel));
	oStep.$("expandend-box").attr("aria-label", getAriaLabel(oStep, sLabel));
};


/**
 * Updates the enabled state of the given step
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {sap.ui.core.Element} oStep the Step for which the state should be changed.
 * @param {boolean} bEnabled the enabled state.
 * @private
 */
sap.ui.commons.RoadMapRenderer.setStepEnabled = function(oRoadMap, oStep, bEnabled){
	var jRef = oStep.$();
	var jRef2 = oStep.$("expandend");
	if(bEnabled){
		jRef.removeClass("sapUiRoadMapDisabled");
		jRef2.removeClass("sapUiRoadMapDisabled");
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			oStep.$("box").removeAttr("aria-disabled");
			oStep.$("expandend-box").removeAttr("aria-disabled");
		}
		return false;
	}else{
		var bSelected = oRoadMap.getSelectedStep() == oStep.getId();
		if(bSelected) {
			jRef.removeClass("sapUiRoadMapSelected");
		}
		jRef.addClass("sapUiRoadMapDisabled");
		jRef2.addClass("sapUiRoadMapDisabled");
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			var jRefBox = oStep.$("box");
			jRefBox.attr("aria-disabled", true);
			if(bSelected) {
				jRefBox.removeAttr("aria-checked");
			}
			oStep.$("expandend-box").attr("aria-disabled", true);
		}
		return bSelected;
	}
};


/**
 * Updates the visible state of the given step
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {sap.ui.core.Element} oStep the Step for which the state should be changed.
 * @param {boolean} bIsSubStep indicates whether the given step is a substep or not
 * @param {boolean} bVisible the visible state.
 * @private
 */
sap.ui.commons.RoadMapRenderer.setStepVisible = function(oRoadMap, oStep, bIsSubStep, bVisible){
	var jRef = oStep.$();
	var jRef2 = oStep.$("expandend");
	var bSelected = oRoadMap.getSelectedStep() == oStep.getId();

	var oParent = oStep.getParent();
	if(bIsSubStep){
		if(oParent.getEnabled() && oParent.getVisible() && oParent.getExpanded()){
			if(bVisible){
				jRef.removeClass("sapUiRoadMapHidden");
			}else{
				jRef.addClass("sapUiRoadMapHidden");
			}
		}
	}else{
		if(bVisible){
			jRef.removeClass("sapUiRoadMapHidden");
		}else{
			jRef.addClass("sapUiRoadMapHidden");
		}

		var aSteps = oStep.getSubSteps();
		if(aSteps.length > 0 && oStep.getExpanded()){
			if(bVisible){
				jRef2.removeClass("sapUiRoadMapHidden");
			}else{
				jRef2.addClass("sapUiRoadMapHidden");
			}

			for(var i=0; i<aSteps.length; i++){
				if(aSteps[i].getVisible()){
					var jRef3 = aSteps[i].$();
					if(oRoadMap.getSelectedStep() == aSteps[i].getId()){
						bSelected = true;
						jRef3.removeClass("sapUiRoadMapSelected");
						aSteps[i].$("box").removeAttr("aria-checked");
					}
					if(bVisible){
						jRef3.removeClass("sapUiRoadMapHidden");
					}else{
						jRef3.addClass("sapUiRoadMapHidden");
					}
				}
			}
		}
	}

	return bSelected;
};


/**
 * Updates the width of the Roadmap
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {string} sWidth the new width.
 * @private
 */
sap.ui.commons.RoadMapRenderer.setRoadMapWidth = function(oRoadMap, sWidth){
	var jRef = oRoadMap.$();
	jRef.attr("style", "width:"+(sWidth ? sWidth : "100%")+";");
};


/**
 * Scrolls according to the given direction.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @see <code>sap.ui.commons.RoadMapRenderer.getFirstVisibleRef</code>
 *
 * @param {sap.ui.core.Control} oRoadMap the Roadmap control for which the renderer action should be performed
 * @param {string} sDir the scroll direction (allowed are "next", "prev", "first", "last")
 * @param {function} fEndCallBack callback function which is called in the end with a string parameter indicating the id of the new first visible step
 * @private
 */
sap.ui.commons.RoadMapRenderer.scrollToNextStep = function(oRoadMap, sDir, fEndCallBack){
	var oPos = sDir;
	if(sDir == "first" || sDir == "last") {
		oPos = getStepEndPosition(oRoadMap, sDir == "last");
	}
	updateScrollState(oRoadMap, oPos, false, fEndCallBack);
};


/**
 * Shortens the label of the given step and adds ellipses if necessary
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Element} oStep the Step for which the label should be adapted
 * @private
 */
sap.ui.commons.RoadMapRenderer.addEllipses = function(oStep){
	if(!oStep) {
		return;
	}

	var jStepLabel = oStep.$("label");
	var sOriginalText = oStep.getLabel();
	var sText = sOriginalText + "";

	var jClone = jQuery("<label class=\"sapUiRoadMapTitle\" style=\"display:none;position:absolute;overflow:visible;font-weight:bold;height:auto\">"+sText+"</label>");
	jClone.width(jStepLabel.width());
	jQuery(sap.ui.getCore().getStaticAreaRef()).append(jClone);

	var bIsShortened = false;
	while(sText.length > 0 && jClone.height() > jStepLabel.height()){
		//TODO: Do we need special RTL handling here?
		sText = sText.substr(0, sText.length - 1);
		jClone.html(jQuery.sap.escapeHTML(sText + "..."));
		bIsShortened = true;
	}

	if(bIsShortened){
		jStepLabel.html("<span>" + jQuery.sap.escapeHTML(sText) + "</span>");
		jStepLabel.attr("title", oStep.getLabel());
	}else{
		jStepLabel.attr("title", getStepTooltip(oStep));
	}

	jClone.remove();
};


/**
 * Updates the ARIA properties of the steps on the same level as the given step.
 * (Attention: This function should only be called by the Roadmap control itself).
 *
 * @param {sap.ui.core.Element} oStep the Step.
 * @private
 */
sap.ui.commons.RoadMapRenderer.updateStepAria = function(oStep){
	if(!sap.ui.getCore().getConfiguration().getAccessibility()) {
		return;
	}
	var bIsTopLevel = oStep.getParent() instanceof sap.ui.commons.RoadMap;
	var aSteps = oStep.getParent()[bIsTopLevel ? "getSteps" : "getSubSteps"]();
	for(var i=0; i<aSteps.length; i++){
		var sPosInSet = getAriaPosInSet(aSteps[i]);
		var sSetSize = getAriaSetSize(aSteps[i]);
		var jStepBox = aSteps[i].$("box");
		jStepBox.attr("aria-posinset", sPosInSet);
		jStepBox.attr("aria-setsize", sSetSize);
		if(bIsTopLevel && aSteps[i].getSubSteps().length > 0){
			jStepBox = aSteps[i].$("expandend-box");
			jStepBox.attr("aria-posinset", sPosInSet);
			jStepBox.attr("aria-setsize", sSetSize);
		}
	};
};


//********* Private *********


//Writes the delimiter HTML into the rendermanger
var renderDelimiter = function(rm, oRoadMap, bStart){
	var sType = bStart ? "Start" : "End";
	rm.write("<div");
	rm.writeAttribute("id", oRoadMap.getId() + "-" + sType);
	rm.writeAttribute("tabindex", "-1");
	var hasHiddenSteps = true; //Simply assume that there are hidden steps -> updated later (see function updateScrollState)
	rm.addClass(hasHiddenSteps ? "sapUiRoadMap" + sType + "Scroll" : "sapUiRoadMap" + sType + "Fixed");
	rm.addClass("sapUiRoadMapDelim");
	rm.addClass("sapUiRoadMapContent");
	rm.writeClasses();
	rm.write("></div>");
};


//Writes the step HTML into the rendermanger
var renderStep = function(rm, oRoadMap, oStep, aAdditionalClasses, fAddAdditionalBoxContent, sId){
	rm.write("<li");
	if(sId){ //Write the given Id if available, otherwise use writeControlData
		rm.writeAttribute("id", sId);
	}else{
		rm.writeElementData(oStep);
	}
	var sStepName = getStepName(oRoadMap, oStep);
	oStep.__stepName = sStepName;
	var sTooltip = getStepTooltip(oStep);

	rm.addClass("sapUiRoadMapContent");
	rm.addClass("sapUiRoadMapStep");
	if(!oStep.getVisible()) {
		rm.addClass("sapUiRoadMapHidden");
	}
	if(oStep.getEnabled()){
		if(oRoadMap.getSelectedStep() == oStep.getId()) {
			rm.addClass("sapUiRoadMapSelected");
		}
	}else{
		rm.addClass("sapUiRoadMapDisabled");
	}
	if(aAdditionalClasses){ //Write additional CSS classes if available
		for(var i=0; i<aAdditionalClasses.length; i++){
			rm.addClass(aAdditionalClasses[i]);
		}
	}
	rm.writeClasses();

	rm.write(">");

	renderAdditionalStyleElem(rm, sId ? sId : oStep.getId(), 1);

	rm.write("<div");
	rm.writeAttribute("id", (sId ? sId : oStep.getId()) + "-box");
	rm.writeAttribute("tabindex", "-1");
	rm.addClass("sapUiRoadMapStepBox");
	rm.writeClasses();
	rm.writeAttributeEscaped("title", sTooltip);

	writeStepAria(rm, oRoadMap, oStep, fAddAdditionalBoxContent ? true : false);

	rm.write("><span>");
	rm.write(sStepName);
	rm.write("</span>");

	//Call callback function to render additional content
	if(fAddAdditionalBoxContent) {
		fAddAdditionalBoxContent(rm, oRoadMap, oStep);
	}

	rm.write("</div>");

	rm.write("<label");
	rm.writeAttribute("id", (sId ? sId : oStep.getId()) + "-label");
	rm.addClass("sapUiRoadMapTitle");
	rm.writeAttributeEscaped("title", sTooltip);
	rm.writeClasses();
	rm.write(">");
	var sLabel = oStep.getLabel();
	if(sLabel) {
		rm.writeEscaped(sLabel);
	}
	rm.write("</label>");

	renderAdditionalStyleElem(rm, sId ? sId : oStep.getId(), 2);

	rm.write("</li>");
};


//Returns the tooltip of the given step
var getStepTooltip = function(oStep){
	var sTooltip = oStep.getTooltip_AsString();
	if(!sTooltip){
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			sTooltip = getText("RDMP_DEFAULT_STEP_TOOLTIP", [oStep.__stepName]);
		}else{
			sTooltip = "";
		}
	}
	return sTooltip;
};


//Writes the additonal style HTML into the rendermanger (see renderStep)
var renderAdditionalStyleElem = function(rm, sId, iIdx){
	rm.write("<div");
	rm.writeAttribute("id", sId + "-add" + iIdx);
	rm.addClass("sapUiRoadMapStepAdd" + iIdx);
	rm.writeClasses();
	rm.write("></div>");
};


//Writes the ARIA properties of a step
var writeStepAria = function(rm, oRoadMap, oStep, bIsExpandable){
	if(!sap.ui.getCore().getConfiguration().getAccessibility()) {
		return;
	}

	rm.writeAttribute("role", "treeitem");

	if(oStep.getEnabled()){
		rm.writeAttribute("aria-checked", oRoadMap.getSelectedStep() == oStep.getId());
	}else{
		rm.writeAttribute("aria-disabled", true);
	}
	rm.writeAttribute("aria-haspopup", bIsExpandable);
	rm.writeAttribute("aria-level", oStep.getParent() instanceof sap.ui.commons.RoadMap ? 1 : 2);
	
	rm.writeAttribute("aria-posinset", getAriaPosInSet(oStep));
	rm.writeAttribute("aria-setsize", getAriaSetSize(oStep));
	rm.writeAttributeEscaped("aria-label", getAriaLabel(oStep, oStep.getLabel()));

	if(!bIsExpandable) {
		return;
	}

	rm.writeAttribute("aria-expanded", oStep.getExpanded());
};


//Computes how the aria-label property should be set for the given step
var getAriaLabel = function(oStep, sLabel){
	var bIsExpandable = oStep.getParent() instanceof sap.ui.commons.RoadMap && oStep.getSubSteps().length > 0;
	
	var sResult = sLabel || "";
	if(oStep.getEnabled()){
		sResult = getText(bIsExpandable ? "RDMP_ARIA_EXPANDABLE_STEP" : "RDMP_ARIA_STANDARD_STEP", [sResult]);
	}
	
	return sResult; 
};


//Computes how the aria-posinset property should be set for the given step
var getAriaPosInSet = function(oStep){
	var bIsTopLevel = oStep.getParent() instanceof sap.ui.commons.RoadMap;
	var iIdx = oStep.getParent()[bIsTopLevel ? "indexOfStep" : "indexOfSubStep"](oStep);
	var iCountInvisible = 0;
	var aSteps = oStep.getParent()[bIsTopLevel ? "getSteps" : "getSubSteps"]();
	for(var i=0; i<iIdx; i++){
		if(!aSteps[i].getVisible()){
			iCountInvisible++;
		}
	}
	return iIdx + 1 - iCountInvisible;
};


//Computes how the aria-setsize property should be set for the given step
var getAriaSetSize = function(oStep){
	var bIsTopLevel = oStep.getParent() instanceof sap.ui.commons.RoadMap;
	var aSteps = oStep.getParent()[bIsTopLevel ? "getSteps" : "getSubSteps"]();
	var iCount = aSteps.length;
	for(var i=0; i<aSteps.length; i++){
		if(!aSteps[i].getVisible()){
			iCount--;
		}
	}
	return iCount;
};


//Writes the step HTML of the expandable step and its children into the rendermanger
var renderExpandableStep = function(rm, oRoadMap, oStep){
	var fCreateIcon = function(rm, oRoadMap, sId, sIcon, sAdditonalClass){
		rm.write("<div");
		rm.writeAttribute("id", sId + "-ico");
		rm.addClass("sapUiRoadMapStepIco");
		if(sAdditonalClass) {
			rm.addClass(sAdditonalClass);
		}
		rm.writeClasses();
		rm.write("></div>");
	};

	var bIsExpanded = oStep.getExpanded();

	//Render the start step with an additional icon
	renderStep(rm, oRoadMap, oStep, bIsExpanded ? ["sapUiRoadMapExpanded"] : null, function(rm, oRoadMap, oStep){
		fCreateIcon(rm, oRoadMap, oStep.getId(), bIsExpanded ? "roundtripstart.gif" : "roundtrip.gif");
	});

	//Render the sub steps
	var aSteps = oStep.getSubSteps();
	for(var i=0; i<aSteps.length; i++){
		var aClasses = ["sapUiRoadMapSubStep"];
		if(!bIsExpanded && aSteps[i].getVisible()) {
			aClasses.push("sapUiRoadMapHidden");
		}
		renderStep(rm, oRoadMap, aSteps[i], aClasses);
	}

	//Render the end step with an additional icon
	aClasses = ["sapUiRoadMapExpanded", "sapUiRoadMapStepEnd"];
	if(!bIsExpanded) {
		aClasses.push("sapUiRoadMapHidden");
	}
	renderStep(rm, oRoadMap, oStep, aClasses, function(rm, oRoadMap, oStep){
		fCreateIcon(rm, oRoadMap, oStep.getId()+"-expandend", "roundtripend.gif");
	}, oStep.getId()+"-expandend");
};


//Returns the name of the step according to its index in the aggregation (like "1", "a", "aa")
var getStepName = function(oRoadMap, oStep){
	var oParent = oStep.getParent();
	if(oParent === oRoadMap) {
		return oParent.indexOfStep(oStep) + 1;
	}

	var iIdx = oParent.indexOfSubStep(oStep);

	if(iIdx < 26) {
		return String.fromCharCode(97+iIdx);
	} // Single character

	//Double characters Substeps name are formed of 2 letters (e.g. "aa"). -> so overall 702 substeps possible
	var firstCharIdx = Math.floor(iIdx/26) - 1;
	var secondCharIdx = iIdx % 26;
	return String.fromCharCode(97+firstCharIdx, 97+secondCharIdx);
};


//Refreshs teh delimiters according to the current scroll state
var updateDelimiters = function(oRoadMap){
	var iRTLFactor = getRTLFactor();

	var jStepArea = oRoadMap.$("steparea");

	var iScrollLeft = getScrollLeft(jStepArea);

	var jStartDelim = oRoadMap.$("Start");
	jStartDelim.removeClass("sapUiRoadMapStartScroll").removeClass("sapUiRoadMapStartFixed");
	jStartDelim.addClass(iRTLFactor*iScrollLeft >= oRoadMap.iStepWidth ? "sapUiRoadMapStartScroll" : "sapUiRoadMapStartFixed");

	var jEndDelim = oRoadMap.$("End");
	jEndDelim.removeClass("sapUiRoadMapEndScroll").removeClass("sapUiRoadMapEndFixed");
	var bEndReached = jStepArea.get(0).scrollWidth - iRTLFactor*iScrollLeft - jStepArea.width() < oRoadMap.iStepWidth;
	jEndDelim.addClass(bEndReached ? "sapUiRoadMapEndFixed" : "sapUiRoadMapEndScroll");
};


//Returns the translatable text according to the given key and arguments
var getText = function(sKey, aArgs) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	if(rb) {
		return rb.getText(sKey, aArgs);
	}
	return sKey;
};


//Returns the number of steps which currently could be visible
//(Must be visible and for substeps the parent must be expanded)
var getNumberOfPotentiallyVisibleSteps = function(oRoadMap){
	var counter = 0;
	var aSteps = oRoadMap.getSteps();
	for(var i=0; i<aSteps.length; i++){
		if(aSteps[i].getVisible()){
			counter++;
			if(aSteps[i].getExpanded()){
				counter++; //End of Expanded Step
				var aSubSteps = aSteps[i].getSubSteps();
				for(var j=0; j<aSubSteps.length; j++){
					if(aSubSteps[j].getVisible()) {
						counter++;
					}
				}
			}
		}
	}
	return counter;
};


//Returns the position left attribute of the given step within the scroll area
var getPositionLeft = function(jStepArea, jStep){
	var iPos = jStep.position().left;
	if(sap.ui.getCore().getConfiguration().getRTL()){ //Recompute in RTL case
		iPos = jStepArea.width() - iPos - jStep.outerWidth();
	}
	return iPos;
};


//Returns a factor which is needed in some browsers in RTL mode to make the position and scroll calculations running:
//Scrolling in RTL is quite strange in the different browsers:
//  -Firefox: right side has scrollleft=0, scrolling is indicated with negative values
//  -IE:      right side has scrollleft=0, scrolling is indicated with positive values
//  -Safari:  left side has scrollleft=0, scrolling is indicated with positive values
var getRTLFactor = function(){
	return sap.ui.getCore().getConfiguration().getRTL() && !!!sap.ui.Device.browser.internet_explorer ? -1 : 1;
};


//Calculates the scroll left attribute (with fix for Safari in RTL mode) to make the position and scroll calculations running
//(see comment on getRTLFactor for RTL behavior)
var getScrollLeft = function(jStepArea){
	if(sap.ui.getCore().getConfiguration().getRTL() && !!sap.ui.Device.browser.webkit){
		return (-1)*(jStepArea.get(0).scrollWidth - jStepArea.scrollLeft() - jStepArea.width());
	}
	return jStepArea.scrollLeft();
};


//Calculates the position of the fisrt/last step (with fix for Safari in RTL mode) to make the position and scroll calculations running
//(see comment on getRTLFactor for RTL behavior)
var getStepEndPosition = function(oRoadMap, bLast){
	var iScrollWidth = oRoadMap.$("steparea").get(0).scrollWidth;
	if(sap.ui.getCore().getConfiguration().getRTL() && !!sap.ui.Device.browser.webkit){
		return bLast ? 0 : (-1)*iScrollWidth;
	}
	return bLast ? iScrollWidth : 0;
};


//Scrolls to the given position
var updateScrollState = function(oRoadMap, iNewPos, bSkipAnim, fEndCallBack){
	var jStepArea = oRoadMap.$("steparea");
	jStepArea.stop(false, true);

	if(iNewPos == "next"){
		iNewPos = jStepArea.scrollLeft() + oRoadMap.iStepWidth*getRTLFactor();
	}else if(iNewPos == "prev"){
		iNewPos = jStepArea.scrollLeft() - oRoadMap.iStepWidth*getRTLFactor();
	}else if(iNewPos == "keep"){
		iNewPos = jStepArea.scrollLeft();
	}else{
		iNewPos = iNewPos*getRTLFactor();
	}

	var fDoAfterScroll = function(){
		updateDelimiters(oRoadMap);

		if(fEndCallBack){
			var jFirstVisibleRef = sap.ui.commons.RoadMapRenderer.getFirstVisibleRef(oRoadMap);
			fEndCallBack(jFirstVisibleRef.attr("id"));
		}
	};

	if(!jQuery.fx.off && !bSkipAnim){
		jStepArea.animate({scrollLeft: iNewPos}, "fast", fDoAfterScroll);
	}else{
		jStepArea.scrollLeft(iNewPos);
		fDoAfterScroll();
	}
};


}());
}; // end of sap/ui/commons/RoadMapRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.SearchFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.SearchField
jQuery.sap.declare("sap.ui.commons.SearchFieldRenderer");

/**
 * @class SearchField renderer.
 * @static
 */
sap.ui.commons.SearchFieldRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.SearchFieldRenderer.render = function(oRenderManager, oControl){
    var rm = oRenderManager;

	if(!oControl.getVisible()){
		return;
	}

    rm.write("<div");
    rm.writeControlData(oControl);
    rm.addClass("sapUiSearchField");
    if(!oControl.getEditable() || !oControl.getEnabled()){
		rm.addClass("sapUiSearchFieldDsbl");
    }
    if(!oControl.hasListExpander()){
		rm.addClass("sapUiSearchFieldNoExp");
    }
    if(oControl.getEnableClear()){
		rm.addClass("sapUiSearchFieldClear");
    }
    if(oControl.getWidth()) {
		rm.addStyle("width", oControl.getWidth());
    }
    if(oControl.getValue()) {
    	rm.addClass("sapUiSearchFieldVal");
    }
    rm.writeClasses();
    rm.writeStyles();

	/*rm.writeAccessibilityState(null, {
		//role: "search",
		owns: oControl._ctrl.getId() + (oControl.getShowExternalButton() ? (" "+oControl._btn.getId()) : "")
	});*///CSN 1076183 2013: ARIA owns not required and leads to unexpected screen reader anouncements
    	
    rm.write(">");
    rm.renderControl(oControl._ctrl);
    if(oControl.getShowExternalButton()){
		rm.renderControl(oControl._btn);
    }
    rm.write("</div>");
};






}; // end of sap/ui/commons/SearchFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.SegmentedButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.commons.SegmentedButtonRenderer");

/**
 * @class SegmentedButton renderer.
 * @static
 */
sap.ui.commons.SegmentedButtonRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.SegmentedButtonRenderer.render = function(oRenderManager, oControl){
    // convenience variable
	var rm = oRenderManager,
		rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons"),
		// ResourceBundle always returns the key if the text is not found
		sText = rb.getText("SEGMENTEDBUTTON_ARIA_SELECT");
	if (!oControl.getVisible()) {
		return;
	}

	// write the HTML into the render manager  
    rm.write("<span");
    rm.writeControlData(oControl);
    rm.addClass("sapUiSegmentedButton");
    rm.writeClasses();
	rm.write(">"); // SPAN element
    rm.write('<span id="'+oControl.getId()+'-radiogroup"');
    // ARIA
	rm.writeAccessibilityState(oControl, {
		role: "radiogroup",
		disabled: !oControl.getEnabled()
	});
	rm.write(">"); // SPAN element
	this.renderButtons(rm,oControl);
    rm.write("</span>");
	rm.write('<span id="'+oControl.getId()+'-label" style="visibility: hidden; display: none;">');
	rm.writeEscaped(sText);
	rm.write('</span>');
    rm.write("</span>");
};

sap.ui.commons.SegmentedButtonRenderer.renderButtons = function(oRenderManager, oControl) {
	// convenience variable
	var rm = oRenderManager,
		aButtons = oControl.getButtons();
    jQuery.each(aButtons, function(i,oButton) {
    	rm.renderControl(oButton);
    });
};
}; // end of sap/ui/commons/SegmentedButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.SliderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Slider
jQuery.sap.declare("sap.ui.commons.SliderRenderer");

/**
 * @class Slider renderer.
 * @static
 */
sap.ui.commons.SliderRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.SliderRenderer.render = function(oRenderManager, oSlider){
	// Convenience variable
	var rm = oRenderManager;
	var oR  = sap.ui.commons.SliderRenderer;

	// Return immediately if control is invisible
	if (!oSlider.getVisible()) {
		return;
	}

	// Write the HTML into the render manager
	rm.write('<DIV');
	rm.writeControlData(oSlider);
	rm.addClass('sapUiSli');
	this.controlAdditionalCode(rm,oSlider);
	if(oSlider.getTooltip_AsString()) {
		rm.writeAttributeEscaped('title', oSlider.getTooltip_AsString());
	}

	if (!oSlider.getVertical() && oSlider.getWidth()) {
		rm.writeAttribute('style', 'width:' + oSlider.getWidth() + ';');
	} else {
		rm.writeAttribute('style', 'height:' + oSlider.getHeight() + ';');
	}

	if (!oSlider.getEnabled()) {
		rm.addClass('sapUiSliDsbl');
	}else{
		if (!oSlider.getEditable()) {
			rm.addClass('sapUiSliRo');
		}else {
			rm.addClass('sapUiSliStd');
		}
	}
	if (oSlider.getVertical()) {
		rm.addClass('sapUiSliVert');
	} else {
		rm.addClass('sapUiSliHori');
	}

	rm.writeClasses();

	// invisible span with tooltip as text for aria on grip
	if(oSlider.getTooltip_AsString()) {
		rm.write('><SPAN id="' + oSlider.getId() + '-Descr" style="visibility: hidden; display: none;">');
		rm.writeEscaped(oSlider.getTooltip_AsString());
		rm.write('</SPAN');
	}

	// Write slide bar
	rm.write('><DIV');
	rm.writeAttribute('id', oSlider.getId() + '-right');
	rm.write('class="sapUiSliR" > <DIV');

	rm.writeAttribute('id', oSlider.getId() + '-left');
	rm.write('class="sapUiSliL" > <DIV');

	rm.writeAttribute('id', oSlider.getId() + '-bar');
	rm.write('class="sapUiSliBar" >');

	var useTextLabels = false;
	if (oSlider.getLabels() && oSlider.getLabels().length > 0) {
		useTextLabels = true;
	}

	if(oSlider.getTotalUnits() > 0 || useTextLabels){

		var iTotalUnits = oSlider.getTotalUnits();
		if (useTextLabels) {
			iTotalUnits = oSlider.getLabels().length -1;
		}

		var fStepSize = (oSlider.getMax() - oSlider.getMin()) / iTotalUnits;

		// Add ticks
		for (var i = 0; i <= iTotalUnits; i++){
			rm.write('<DIV');
			rm.writeAttribute('id', oSlider.getId() + '-tick' + i);
			rm.write('class="sapUiSliTick" ');
			rm.write('></DIV>'); // tick

			if( oSlider.getStepLabels() ){
				// Texts
				rm.write('<DIV');
				rm.writeAttribute('id', oSlider.getId() + '-text' + i);
				switch (i){
				case ( 0 ):
					rm.write('class="sapUiSliText sapUiSliTextLeft" >');
					break;
				case (iTotalUnits):
					rm.write('class="sapUiSliText sapUiSliTextRight" >');
					break;
				default:
					rm.write('class="sapUiSliText" >');
					break;
				}
				if (useTextLabels) {
					rm.write(oSlider.getLabels()[i]);
				} else {
					rm.write(oSlider.getMin() + i * fStepSize);
				}
				rm.write('</DIV>'); // Text
			}
		}
	}

	// Highlight bar
	rm.write('<DIV');
	rm.writeAttribute('id', oSlider.getId() + '-hili');
	rm.write('class="sapUiSliHiLi"></DIV>');

	this.renderGrip(rm, oSlider);

	rm.write('</DIV></DIV></DIV></DIV>');
};

/**
 * Renders the Grip for the slider control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.SliderRenderer.renderGrip = function(rm, oSlider){

	rm.write('<DIV');

	// Icon for grip
	rm.writeAttribute('id', oSlider.getId() + '-grip');
	if (oSlider.getEnabled()) {
		rm.writeAttribute('tabIndex', '0');
	}else{
		rm.writeAttribute('tabIndex', '-1');
	}
	rm.writeAttribute('class', 'sapUiSliGrip');
	rm.writeAttribute('title', oSlider.getValue());

	// ARIA
	rm.writeAccessibilityState(oSlider, {
		role: 'slider',
		orientation: 'horizontal',
		valuemin: oSlider.getMin(),
		valuemax: oSlider.getMax(),
		live: 'assertive',
		disabled: !oSlider.getEditable() || !oSlider.getEnabled(),
		describedby: oSlider.getTooltip_AsString() ? (oSlider.getId()+'-Descr ' + oSlider.getAriaDescribedBy().join(" ")) : undefined
	});

	if (oSlider.getVertical()) {
		rm.write('>&#9668;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)
	} else {
		rm.write('>&#9650;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)
	}
};

/**
 * Adds extra code to the control (i.e. in subclasses), using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.SliderRenderer.controlAdditionalCode = function(rm, oSlider){
};
}; // end of sap/ui/commons/SliderRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.SplitterRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Splitter
jQuery.sap.declare("sap.ui.commons.SplitterRenderer");

/**
 * @class
 * @static
 */
sap.ui.commons.SplitterRenderer = {};

/**
 * Renders the HTML for the Splitter, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered
 */
sap.ui.commons.SplitterRenderer.render = function(oRenderManager, oControl) {

	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	var rm = oRenderManager;
	var orientation = oControl.getSplitterOrientation();
	var position = oControl.getSplitterPosition();
	var dimensionSecPane;
	var oControls;
	var iLength;
	var i;
	/*
	 * dimension (height or width) of the first pane is equal to the position of the splitter bar
	 * dimension of the second pane is the remaining available place after placing the first place
	 * 100 - position
	 * the splitter bar width/height is not taken into account since it has a fix width/height of 4px,
	 * it will be calculated after rendering
	 * it will be converted into percentage once we had the width/height of the splitter available area in px
	 */
	position = position.substring(0, position.length - 1);
	dimensionSecPane = 100 - position;

	/* Opening Splitter Wrapper DIV*/
	rm.write("<div ");
	rm.writeControlData(oControl);
	rm.addClass("sapUiSplitter");

	rm.addStyle("width",  oControl.getWidth());
	rm.addStyle("height",  oControl.getHeight());
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");

	/*rendering the first pane*/
	rm.write("<div id=\"" + oControl.getId() + "_firstPane\" ");
	if (oControl.getShowScrollBars()){
		rm.addStyle("overflow", "auto");
	} else{
		rm.addStyle("overflow", "hidden");
	}
	if (orientation == sap.ui.core.Orientation.Vertical) {
		rm.addClass("sapUiVSplitterFirstPane");
		rm.addStyle("width", position + "%");
	} else if (orientation == sap.ui.core.Orientation.Horizontal) {
		rm.addClass("sapUiHSplitterFirstPane");
		rm.addStyle("height", position + "%");
	}

	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");

	/*First content (child controls)*/
	oControls = oControl.getFirstPaneContent();
	iLength = oControls.length;
	for (i = 0; i < iLength; i++) {
		rm.renderControl(oControls[i]);
	}
	rm.write("</div>");

	/*rendering the splitter bar*/
	rm.write("<div  id=\"" + oControl.getId() + "_SB\" tabIndex=\"0\" role=\"separator\" title=\"" + oControl.getText("SPLITTER_MOVE") + "\""); 
	if (orientation == sap.ui.core.Orientation.Vertical) {
		if (oControl.getSplitterBarVisible()){
			rm.addClass("sapUiVerticalSplitterBar");
		} else {
			rm.addClass("sapUiVerticalSplitterBarHidden");
		}
		rm.addStyle("width", 0 + "%");
	} else if (orientation == sap.ui.core.Orientation.Horizontal) {
		if (oControl.getSplitterBarVisible()){
			rm.addClass("sapUiHorizontalSplitterBar");
		} else {
			rm.addClass("sapUiHorizontalSplitterBarHidden");
		}
		rm.addStyle("height", 0 + "%");
	}
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");
	rm.write("</div>");

	/*rendering the second pane*/
	rm.write("<div id=\"" + oControl.getId() + "_secondPane\" ");
	if (oControl.getShowScrollBars()){
		rm.addStyle("overflow", "auto");
	} else{
		rm.addStyle("overflow", "hidden");
	}
	if (orientation == sap.ui.core.Orientation.Vertical) {
		rm.addClass("sapUiVSplitterSecondPane");
		rm.addStyle("width", dimensionSecPane + '%');
	} else if (orientation == sap.ui.core.Orientation.Horizontal) {
		rm.addClass("sapUiHSplitterSecondPane");
		rm.addStyle("height", dimensionSecPane + '%');
	}
	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");

	/*Second content (child controls)*/
	oControls = oControl.getSecondPaneContent();
	iLength = oControls.length;
	for (i = 0; i < iLength; i++) {
		rm.renderControl(oControls[i]);
	}
	rm.write("</div>");

	/* Closing the Splitter Wrapper DIV*/
	rm.write("</div>");
};
}; // end of sap/ui/commons/SplitterRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TabStripRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.TabStrip
jQuery.sap.declare("sap.ui.commons.TabStripRenderer");

/**
 * @class TabStrip renderer.
 * @static
 */
sap.ui.commons.TabStripRenderer = function() {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.TabStripRenderer.render = function(oRenderManager, oControl){
	// convenience variable
	var rm = oRenderManager;
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	//outer DIV
	rm.write("<div role='presentation'");
	rm.addClass("sapUiTabStrip");
	rm.addStyle("height",oControl.getHeight());
	rm.addStyle("width",oControl.getWidth());
	rm.writeClasses();
	rm.writeStyles();
	rm.writeControlData(oControl);
	//header area
	rm.write("><div class=\"sapUiTabBar\" tabIndex=\"0\"");
	if(oControl.getTooltip_AsString()) {
		rm.writeAttributeEscaped('title', oControl.getTooltip_AsString());
	}
	// menu and list header
	rm.write("><div class=\"sapUiTabMenu\"></div><ul class=\"sapUiTabBarCnt\" role=\"tablist\">");

	var aTabs = oControl.getTabs();
	// check if selected tab exists and is visible -> otherwise select first active one
	var bWrongIndex = false;
	var iSelectedIndex = oControl.getSelectedIndex();
	if (iSelectedIndex < 0) {
		// if not tab is selected use default value
		iSelectedIndex = 0;
		oControl.setProperty( 'selectedIndex', 0, true );
	}
	var oSelectedTab = aTabs[iSelectedIndex];
	if(!oSelectedTab || !oSelectedTab.getVisible() || !oSelectedTab.getEnabled()){
		oControl._warningInvalidSelectedIndex(iSelectedIndex, oSelectedTab);
		bWrongIndex = true;
	}

	// for ARIA determine number of visible tabs
	oControl.iVisibleTabs = 0;
	for (var i=0;i<aTabs.length;i++) {
		var oTab = aTabs[i];
		if(oTab.getVisible() === false) {
			continue;
		}
		oControl.iVisibleTabs++;
	}

	var iVisibleIndex = 0;
	// tabs
	for (var i = 0; i < aTabs.length; i++) {
		var oTab = aTabs[i];
		if(oTab.getVisible() === false) {
			continue;
		}

		if(bWrongIndex && oTab.getEnabled()){
			oControl.setProperty( 'selectedIndex', i, true );
			iSelectedIndex = i;
			bWrongIndex = false;
		}

		rm.write("<li");

		if (oTab.getEnabled() == false) {
			rm.addClass("sapUiTabDsbl");
		} else if (i==iSelectedIndex) {
			rm.addClass("sapUiTabSel");
		} else {
			rm.addClass("sapUiTab");
		}

		// enable the successor tab to overlap this tab if selected
		if (i==iSelectedIndex-1) {
			rm.addClass("sapUiTabBeforeSel");
		} else if (i==iSelectedIndex+1) {
			rm.addClass("sapUiTabAfterSel");
		}

		rm.writeControlData(oTab);
		rm.writeAttribute("tabidx", i);

		//ARIA
		iVisibleIndex++;

		rm.writeAttribute("tabindex", "-1");
		rm.writeAttribute("role", "tab");

		rm.writeAccessibilityState(oTab, {selected: i==iSelectedIndex,
										  controls: oTab.getId() + "-panel",
										  disabled: !oTab.getEnabled(),
										  posinset: iVisibleIndex,
										  setsize: oControl.iVisibleTabs});
		if (oTab.getClosable()) {
			// close button text must be read
			rm.writeAccessibilityState(oTab, {describedby: oTab.getId() + "-close"});
		}

		if (iVisibleIndex == oControl.iVisibleTabs) {
			rm.addClass("sapUiTabLast"); // needed for IE8
		}
		rm.writeClasses();

		var oTitle = oTab.getTitle();
		// tooltip: if title has a tooltip use it, if not use the tooltip of the tab
		if(oTitle && oTitle.getTooltip_AsString()) {
			rm.writeAttributeEscaped('title', oTitle.getTooltip_AsString());
		} else if(oTab.getTooltip_AsString()){
			rm.writeAttributeEscaped('title', oTab.getTooltip_AsString());
		}
		rm.write(">");

		// title with icon
		if (oTitle) {
			var sIcon = oTitle.getIcon();
			if (sIcon) {
				var aClasses = [];
				var mAttributes = {};

				aClasses.push("sapUiTabIco");
				rm.writeIcon(sIcon, aClasses, mAttributes);
			}
			rm.writeEscaped(oTitle.getText());
		} else {
			jQuery.sap.log.warning("No title configured for " + oTab + ". Either set a string as 'text' property or a sap.ui.core.Title as 'title' aggregation.");
		}
		if (oTab.getClosable()) {
			// close button
			rm.write("<button id='" + oTab.getId() + "-close' type=\"button\" tabindex= \"-1\" class=\"sapUiTabClose\" title=\""+rb.getText("TAB_CLOSE_TEXT")+"\"></button>");
		}
		rm.write("</li>");
	}
	rm.write("</ul></div>");

	if (bWrongIndex) {
		// still wrong index - no tab is selected -> render empty panel area
		oControl.setProperty( 'selectedIndex', -1, true );
		iSelectedIndex = -1;
		rm.write("<div id=\"" + oControl.getId() + "-panel" + "\" role=\"tabpanel\"");
		rm.addClass("sapUiTabPanel");
		if(oControl.getHeight()){
			rm.addClass("sapUiTabPanelHeight");
		}
		rm.writeClasses();
		rm.write("></div>");
	}else {
		for (var i=0;i<aTabs.length;i++) {
			var oTab = aTabs[i];
			//do not render unselected (or invisible) tab content
			if (i!=iSelectedIndex || oTab.getVisible() === false) {
				continue;
			}

			// Improved version... now announcing the title when clicked into the tabpanel... into the full tabpanel!
			// ARIA requires ID for the Panel...
			rm.write("<div id=\"" + oTab.getId() + "-panel" + "\" role=\"tabpanel\" aria-labelledby=\"" + oTab.getId() +"\"");
			rm.addClass("sapUiTabPanel");
			if(oControl.getHeight()){
				rm.addClass("sapUiTabPanelHeight");
			}
			rm.writeClasses();
			rm.write(">");

			sap.ui.commons.TabStripRenderer.renderTabContents(rm,oTab);
			rm.write("</div>");
		}
	}
	rm.write("</div>");

	// reset invalidate flag
	oControl.invalidated = false;

};

/*moved over from former (and replaced) Panel control
 * @private
 */
sap.ui.commons.TabStripRenderer.renderTabContents = function(rm, oControl) {

	// Content
	var oControls = oControl.getContent(),
	iLength = oControls.length;
	for (var i=0;i<iLength;i++) {
		rm.renderControl(oControls[i]);
	}

};
}; // end of sap/ui/commons/TabStripRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.TextField
jQuery.sap.declare("sap.ui.commons.TextFieldRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * TextField Renderer
 * @class
 * @static
 * @author SAP
 * @version 1.22.8
 * @since 0.9.0
 */
sap.ui.commons.TextFieldRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.TextField}
 *            oTextField The TextField control that should be rendered.
 */
sap.ui.commons.TextFieldRenderer.render = function(oRenderManager, oTextField) {

	var rm = oRenderManager,
		r  = sap.ui.commons.TextFieldRenderer;

	// Return immediately if control is invisible
	if (!oTextField.getVisible()) {
		return;
	}

	var sWidth = oTextField.getWidth();
	var tooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oTextField, oTextField.getTooltip_AsString());
	var bRenderOuter = oTextField._getRenderOuter();

// In case of Combobox, F4-help, DatePicker: Render outer element.
// The details of the outer element are rendered in the hook implemented in the corresponding control.
	if (bRenderOuter) {
		rm.write("<div");
		rm.writeControlData(oTextField);
		rm.addClass("sapUiTfBack");
		this.renderStyles(rm, oTextField);

		if(tooltip) {
			rm.writeAttributeEscaped('title', tooltip);
		}

		var sSpanStyle;
		if(sWidth && sWidth != '') {
			sSpanStyle= 'width: '+ sWidth+';';
		}

		if(this.renderOuterAttributes){
			this.renderOuterAttributes(rm, oTextField);
		}

		if (sSpanStyle) {
			rm.writeAttribute('style', sSpanStyle);
		}
		rm.writeStyles();
		rm.writeClasses();
		rm.write(">");

		// Outer hook
		if (this.renderOuterContentBefore) {
			this.renderOuterContentBefore(rm, oTextField);
		}
	}

// Inner tag / pure TextField
	if (this.getInnerTagName){
		rm.write('<'+this.getInnerTagName());
	}else{
		rm.write("<input");
	}
	rm.addClass("sapUiTf");

	if (!bRenderOuter) {
		// Stand-alone TextField
		rm.writeControlData(oTextField);
		rm.addClass("sapUiTfBack");
		this.renderStyles(rm, oTextField);

		if(sWidth && sWidth != '') {
			rm.addStyle("width", sWidth);
		}
	}else{
		rm.writeAttribute('id', oTextField.getId() + '-input');
		rm.addClass("sapUiTfInner");
		rm.addStyle("width", '100%');
	}

	if(tooltip) {
		// render title always on INPUT tag (even it's in outer DIV too)
		// because screenreader ignores it on outer DIV 
		rm.writeAttributeEscaped('title', tooltip);
	}

	if (oTextField.getName()) {
		rm.writeAttributeEscaped('name', oTextField.getName());
	}

	if(!oTextField.getEditable()){
		rm.writeAttribute('readonly', 'readonly');
	}
	if(this.renderTextFieldEnabled){
		this.renderTextFieldEnabled(rm, oTextField);
	}else if(!oTextField.getEnabled()){
		rm.writeAttribute('disabled', 'disabled');
		rm.writeAttribute('tabindex', '-1');
	}else if(!oTextField.getEditable()){
		rm.writeAttribute('tabindex', '0');
	}else{
		rm.writeAttribute('tabindex', '0');
	}

	// Appearance
	var sTextDir = oTextField.getTextDirection();
	if (sTextDir) {
		rm.addStyle("direction", sTextDir.toLowerCase());
	}

	var oTextAlign = oTextField.getTextAlign();
	if(oTextAlign) {
		rm.addStyle("text-align", r.getTextAlign(oTextAlign, sTextDir));
	}

	switch (oTextField.getImeMode()) {
	case sap.ui.core.ImeMode.Inactive:
		rm.addStyle('ime-mode','inactive');
		break;
	case sap.ui.core.ImeMode.Active:
		rm.addStyle('ime-mode','active');
		break;
	case sap.ui.core.ImeMode.Disabled:
		rm.addStyle('ime-mode','disabled');
		break;
	}

	if(oTextField.getDesign() == sap.ui.core.Design.Monospace){
		rm.addClass('sapUiTfMono');
	}

	if (oTextField.getMaxLength()) {
		rm.writeAttribute("maxLength", oTextField.getMaxLength());
	}

	// Add additional attributes, styles and so on (TextArea)
	if (this.renderInnerAttributes) {
		this.renderInnerAttributes(rm, oTextField);
	}

	// ARIA
	if(this.renderARIAInfo){
		this.renderARIAInfo(rm, oTextField);
	}

	var sPlaceholder = oTextField.getPlaceholder();
	if (sPlaceholder) {
		if (this.convertPlaceholder) {
			sPlaceholder = this.convertPlaceholder(oTextField);
		}
		if (sap.ui.Device.support.input.placeholder) {
			rm.writeAttributeEscaped('placeholder', sPlaceholder);
		}
	}

	rm.writeStyles();
	rm.writeClasses();

	if (this.getInnerTagName){
		rm.write(">");
	}else{
		rm.write(" value=\"");
		if (!sap.ui.Device.support.input.placeholder && sPlaceholder && !oTextField.getValue()) {
			rm.writeEscaped(sPlaceholder);
		} else {
			rm.writeEscaped(oTextField.getValue());
		}
		rm.write("\"");
		rm.write("/>");
	}

	if (this.getInnerTagName){
		// Inner hook
		if (this.renderInnerContent) {
			this.renderInnerContent(rm, oTextField);
		}

		rm.write('</'+this.getInnerTagName()+'>');
	}

	if (bRenderOuter) {
		// Outer hook
		if (this.renderOuterContent) {
			this.renderOuterContent(rm, oTextField);
		}

		rm.write("</div>");
	}

};

sap.ui.commons.TextFieldRenderer.renderStyles = function(rm, oTextField) {

	rm.addClass('sapUiTfBrd');

	if(oTextField.getEnabled()){
		if(!oTextField.getEditable()){
			rm.addClass("sapUiTfRo");
		}else{
			rm.addClass("sapUiTfStd");
		}
	}else{
		rm.addClass("sapUiTfDsbl");
	}

	switch (oTextField.getValueState()){
	case (sap.ui.core.ValueState.Error) :
		rm.addClass('sapUiTfErr');
	break;
	case (sap.ui.core.ValueState.Success) :
		rm.addClass('sapUiTfSucc');
	break;
	case (sap.ui.core.ValueState.Warning) :
		rm.addClass('sapUiTfWarn');
	break;
	}

	if(oTextField.getRequired()){
		rm.addClass('sapUiTfReq');
	}

	if (oTextField.getPlaceholder() && !sap.ui.Device.support.input.placeholder) {
		rm.addClass('sapUiTfPlace');
	}

};

sap.ui.commons.TextFieldRenderer.onfocus = function(oTextField) {
	var oTfRef = oTextField.$();
	oTfRef.addClass("sapUiTfFoc");

	if (!sap.ui.Device.support.input.placeholder && !oTextField.getValue() && oTextField.getPlaceholder()) {
		if(oTextField._getRenderOuter()){
			var oTfRefInput = oTextField.$("input");
		}else{
			var oTfRefInput = oTfRef;
		}

		oTfRef.removeClass("sapUiTfPlace");
		oTfRefInput.val("");
	}
};

sap.ui.commons.TextFieldRenderer.onblur = function(oTextField) {
	var oTfRef = oTextField.$();
	oTfRef.removeClass("sapUiTfFoc");

	var sPlaceholder = oTextField.getPlaceholder();
	if (!sap.ui.Device.support.input.placeholder) {
		if(oTextField._getRenderOuter()){
			var oTfRefInput = oTextField.$("input");
		}else{
			var oTfRefInput = oTfRef;
		}

		if (!oTfRefInput.val() && sPlaceholder) {
			oTfRef.addClass("sapUiTfPlace");
			if (this.convertPlaceholder) {
				sPlaceholder = this.convertPlaceholder(oTextField);
			}
			oTfRefInput.val(sPlaceholder);
		}
	}
};

sap.ui.commons.TextFieldRenderer.setValueState = function(oTextField, oldValueState, newValueState) {
	var oTfRef = oTextField.$();
	var bRenderOuter = oTextField._getRenderOuter();

	if(bRenderOuter){
	// aria attribute must be on inner tag
		var oTfRefInput = oTextField.$("input");
	}else{
		var oTfRefInput = oTfRef;
	}

	// Remove old value state
	switch (oldValueState){
	case (sap.ui.core.ValueState.Error) :
		oTfRef.removeClass('sapUiTfErr');
		oTfRefInput.removeAttr('aria-invalid');
		break;
	case (sap.ui.core.ValueState.Success) :
		oTfRef.removeClass('sapUiTfSucc');
		break;
	case (sap.ui.core.ValueState.Warning) :
		oTfRef.removeClass('sapUiTfWarn');
		break;
	}

	// Set new value state
	switch (newValueState){
	case (sap.ui.core.ValueState.Error) :
		oTfRef.addClass('sapUiTfErr');
		oTfRefInput.attr('aria-invalid',true);
		break;
	case (sap.ui.core.ValueState.Success) :
		oTfRef.addClass('sapUiTfSucc');
		break;
	case (sap.ui.core.ValueState.Warning) :
		oTfRef.addClass('sapUiTfWarn');
		break;
	}

	var tooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oTextField, oTextField.getTooltip_AsString());
	if (tooltip) {
		oTfRef.attr('title', tooltip);
		if (bRenderOuter) {
			oTextField.$("input").attr('title', tooltip);
		}
	}else{
		oTfRef.removeAttr('title');
		if (bRenderOuter) {
			oTextField.$("input").removeAttr('title');
		}
	}

};

sap.ui.commons.TextFieldRenderer.setEditable = function(oTextField, bEditable) {

	if(!oTextField.getEnabled()){
		// if disabled -> nothing to do
		return;
	}

	var oTfRef = oTextField.$();

	if(oTextField._getRenderOuter()){
	// Readonly attribute must be on inner tag
		var oTfRefInput = oTextField.$("input");
	}else{
		var oTfRefInput = oTfRef;
	}


	if (bEditable) {
		oTfRef.removeClass('sapUiTfRo').addClass('sapUiTfStd');
		oTfRefInput.removeAttr('readonly');
	} else {
		oTfRef.removeClass('sapUiTfStd').addClass('sapUiTfRo');
		oTfRefInput.attr('readonly', 'readonly');
	}

	oTfRefInput.attr('aria-readonly', !bEditable);
};

sap.ui.commons.TextFieldRenderer.setEnabled = function(oTextField, bEnabled) {
	var oTfRef = oTextField.$();

	if(oTextField._getRenderOuter()){
	// Disabled attribute must be on inner tag
		var oTfRefInput = oTextField.$("input");
	}else{
		var oTfRefInput = oTfRef;
	}

	if (bEnabled) {
		if (oTextField.getEditable()) {
			oTfRef.removeClass('sapUiTfDsbl').addClass('sapUiTfStd').removeAttr('aria-disabled');
			oTfRefInput.removeAttr('disabled').removeAttr('aria-disabled').attr( 'tabindex', '0');
		} else {
			oTfRef.removeClass('sapUiTfDsbl').addClass('sapUiTfRo').removeAttr('aria-disabled');
			oTfRefInput.removeAttr('disabled').removeAttr('aria-disabled').attr( 'tabindex', '0').attr( 'readonly', 'readonly');
		}
	}else{
		if (oTextField.getEditable()) {
			oTfRef.removeClass('sapUiTfStd').addClass('sapUiTfDsbl').attr('aria-disabled', 'true');
			oTfRefInput.attr( 'disabled', 'disabled').attr('aria-disabled', 'true').attr( 'tabindex', '-1');
		} else {
			oTfRef.removeClass('sapUiTfRo').addClass('sapUiTfDsbl').attr('aria-disabled', 'true');
			oTfRefInput.removeAttr('readonly').attr( 'disabled', 'disabled').attr('aria-disabled', 'true').attr( 'tabindex', '-1');
		}
	}

};

sap.ui.commons.TextFieldRenderer.removeValidVisualization = function(oTextField) {
	var oTfRef = oTextField.$();
	if(oTfRef) {
		oTfRef.removeClass("sapUiTfSucc");
	}
	else {
		jQuery.sap.delayedCall(1000, sap.ui.commons.TextFieldRenderer, "removeValidVisualization", [oTextField]);
	}
};

sap.ui.commons.TextFieldRenderer.setDesign = function(oTextField, sDesign) {

	oTextField.$().toggleClass('sapUiTfMono', (sDesign == sap.ui.core.Design.Monospace));
};

sap.ui.commons.TextFieldRenderer.setRequired = function(oTextField, bRequired) {

	if(oTextField._getRenderOuter()){
	// aria attribute must be on inner tag
		var oTfRefInput = oTextField.$("input");
	}else{
		var oTfRefInput = oTextField.$();
	}

	oTextField.$().toggleClass('sapUiTfReq', bRequired);
	if (bRequired) {
		oTfRefInput.attr("aria-required", true);
	} else {
		oTfRefInput.removeAttr("aria-required");
	}

};

sap.ui.commons.TextFieldRenderer.renderARIAInfo = function(rm, oTextField) {

	var mProps= {
		role: oTextField.getAccessibleRole().toLowerCase(),
		multiline: false,
		autocomplete: 'none'};

	if (oTextField.getValueState() == sap.ui.core.ValueState.Error) {
		mProps["invalid"] = true;
	}

	rm.writeAccessibilityState(oTextField, mProps);

};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.ui.commons.TextFieldRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;

}; // end of sap/ui/commons/TextFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextViewRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.TextView
jQuery.sap.declare("sap.ui.commons.TextViewRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class TextView renderer.
 * @author SAP AG
 * @static
 */
sap.ui.commons.TextViewRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oTextView An object representation of the control that should be rendered.
 */
sap.ui.commons.TextViewRenderer.render = function(oRenderManager, oTextView) {

	var rm = oRenderManager;
	var r = sap.ui.commons.TextViewRenderer;

	// return immediately if control is invisible
	if (!oTextView.getVisible()) {
		return;
	}

	// Get parameters
	var enabled = oTextView.getEnabled() === true,
		oDesign = oTextView.getDesign(),
		tabIndex = 0;

	// Enable/disable
	if(!enabled) {
		tabIndex = -1;
		rm.addClass("sapUiTvDsbl");
		oTextView.allowTextSelection(false);
	}
	// Show error/warning states if they are enabled
	else {
		// error/warning state
		switch (oTextView.getSemanticColor()){
		case (sap.ui.commons.TextViewColor.Negative) :
			rm.addClass('sapUiTvErr');
			break;
		case (sap.ui.commons.TextViewColor.Positive) :
			rm.addClass('sapUiTvSucc');
			break;
		case (sap.ui.commons.TextViewColor.Critical) :
			rm.addClass('sapUiTvWarn');
			break;
		}
	}

	// Styles
	var TextViewDesign = sap.ui.commons.TextViewDesign;
	if (oDesign != TextViewDesign.Standard) {
		if (oDesign === TextViewDesign.Bold) {
			rm.addClass("sapUiTvEmph");
		} else if (oDesign === TextViewDesign.H1) {
			rm.addClass("sapUiTvH1");
		} else if (oDesign === TextViewDesign.H2) {
			rm.addClass("sapUiTvH2");
		} else if (oDesign === TextViewDesign.H3) {
			rm.addClass("sapUiTvH3");
		} else if (oDesign === TextViewDesign.H4) {
			rm.addClass("sapUiTvH4");
		} else if (oDesign === TextViewDesign.H5) {
			rm.addClass("sapUiTvH5");
		} else if (oDesign === TextViewDesign.H6) {
			rm.addClass("sapUiTvH6");
		} else if (oDesign === TextViewDesign.Italic) {
			rm.addClass("sapUiTvItalic");
		} else if (oDesign === TextViewDesign.Small) {
			rm.addClass("sapUiTvSmall");
		} else if (oDesign === TextViewDesign.Monospace) {
			rm.addClass("sapUiTvMono");
		} else if (oDesign === TextViewDesign.Underline) {
			rm.addClass("sapUiTvULine");
		}
	}

	if(!oTextView.getWrapping()){
		rm.addClass("sapUiTvWrap");
	}

	if (oTextView.getWidth() && oTextView.getWidth() != '') {
		rm.addStyle("width", oTextView.getWidth());
	}

	rm.write("<span");
	rm.writeControlData(oTextView);

	rm.addClass("sapUiTv");

	if (oTextView.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oTextView.getTooltip_AsString());
	}else if (oTextView.getText()) {
		rm.writeAttributeEscaped("title", oTextView.getText());
	}

	// Appearance
	var sTextDir = oTextView.getTextDirection();
	if (sTextDir) {
		rm.addStyle("direction", sTextDir.toLowerCase());
	}

	var oTextAlign = oTextView.getTextAlign();
	if(oTextAlign) {
		// use class because it's easier to overwrite
		var sAlign = r.getTextAlign(oTextAlign, sTextDir);
		sAlign = sAlign.charAt(0).toUpperCase() + sAlign.substring(1);
		rm.addClass("sapUiTvAlign"+sAlign);
	}

	// Make control focusable via tab
	// according to Stefan Schnabel there shall not be a tabstop   rm.writeAttribute('tabindex', tabIndex);
	rm.writeAttribute('tabindex', '-1'); //to make it focusable in ItemNavigation
	// Set Accessible Role
	rm.writeAccessibilityState(oTextView, {
		role: oTextView.getAccessibleRole().toLowerCase(),
		invalid: oTextView.getSemanticColor() == sap.ui.commons.TextViewColor.Negative,
		disabled: !oTextView.getEnabled()
	});

	rm.writeClasses();
	rm.writeStyles();
	rm.write(">");
	rm.writeEscaped(oTextView.getText(), true);
	rm.write("</span>");

};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.ui.commons.TextViewRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;
}; // end of sap/ui/commons/TextViewRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ToggleButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Togglebutton
jQuery.sap.declare("sap.ui.commons.ToggleButtonRenderer");

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class ToggleButton renderer.
 * @author D040134
 * @static
 */

sap.ui.commons.ToggleButtonRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.ButtonRenderer);

/**
 * Hint: "renderButtonAttributes" is a reserved/hard-coded Button extending function!
 *       It is used to allow extensions to display content after the actual button content.
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager currently rendering this control
 * @param {sap.ui.commons.ToggleButton}
 *            oToggleButton the ToggleButton that should be rendered
 * @private
 */
sap.ui.commons.ToggleButtonRenderer.renderButtonAttributes = function(rm, oToggleButton) {
	rm.addClass("sapUiToggleBtn");
	if (oToggleButton.getPressed()){
		rm.addClass("sapUiToggleBtnPressed");
		rm.writeAttribute('aria-pressed', true);
	} else {
		rm.writeAttribute('aria-pressed', false);
	}
};


/**
 * Function called by ToggleButton control to enable Pressed state.
 */
sap.ui.commons.ToggleButtonRenderer.onactivePressed = function(oToggleButton) {
	oToggleButton.$().addClass("sapUiToggleBtnPressed").attr('aria-pressed', true);
};

/**
 * Function called by button control to disable Pressed state.
 */
sap.ui.commons.ToggleButtonRenderer.ondeactivePressed = function(oToggleButton) {
	oToggleButton.$().removeClass("sapUiToggleBtnPressed").attr('aria-pressed', false);
};

/**
 * Function called by button control to update image based on state.
 */
sap.ui.commons.ToggleButtonRenderer.updateImage = function(oToggleButton) {
	oToggleButton.$("img").attr('src',this._getIconForState(oToggleButton, "base"));
};

/**
 * Returns the icon URI for the given button state
 * @private
 */
sap.ui.commons.ToggleButtonRenderer._getIconForState = function(oButton, sState) {
	switch(sState){
		case "mouseout":
		case "focus":
		case "blur":
		case "base":
			return oButton.getPressed() && oButton.getIconSelected() ? oButton.getIconSelected() : oButton.getIcon();
		case "active":
			var sIcon = oButton.getIconSelected();
			return sIcon ? sIcon : oButton.getIcon();
		case "mouseover":
		case "deactive":
			var sIcon = oButton.getIconHovered();
			return sIcon ? sIcon : (oButton.getPressed() && oButton.getIconSelected() ? oButton.getIconSelected() : oButton.getIcon());
	}
	return oButton.getIcon();
};

}; // end of sap/ui/commons/ToggleButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ToolbarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.Toolbar
jQuery.sap.declare("sap.ui.commons.ToolbarRenderer");

/**
 * @class
 *
 * @static
 */
sap.ui.commons.ToolbarRenderer = {
};

/**
 * Renders the HTML for the given toolbar using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.commons.Toolbar} oToolbar An object representation of the control that should be rendered.
 */
sap.ui.commons.ToolbarRenderer.render = function(oRenderManager, oToolbar) {
	var rm = oRenderManager;
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	jQuery.sap.assert(oToolbar instanceof sap.ui.commons.Toolbar, "ToolbarRenderer.render: oToolbar must be a toolbar");

	if (!oToolbar.getVisible()) {
		return;
	}

	rm.write("<div role='toolbar' tabindex='0'"); // Tab index required for ItemNavigation, the Toolbar is actually not tabable
	rm.writeControlData(oToolbar);
	if (oToolbar.getWidth()) {
		rm.addStyle("width", oToolbar.getWidth());
	}

	var sTooltip = oToolbar.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}

	rm.addClass("sapUiTb");
	rm.addClass("sapUiTbDesign" + oToolbar.getDesign());
	if (oToolbar.getStandalone()) {
		rm.addClass("sapUiTbStandalone");
	}

	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");

	var aRightItems = oToolbar.getRightItems();
	var iRightItemsLength =  aRightItems.length;
	var bHasRightItems = iRightItemsLength > 0;

    if (bHasRightItems){
    	rm.write("<div class='sapUiTbCont sapUiTbContLeft'><div class='sapUiTbInner' >");
    } else {
    	rm.write("<div class='sapUiTbCont'><div class='sapUiTbInner'>");
    }


	// Render each item, also the hidden ones, as they might become visible when the toolbar is resized
	var aItems = oToolbar.getItems();
	var iLength = aItems.length;
	for (var i = 0; i < iLength; i++) {
		var oToolbarItem = aItems[i];
		if (oToolbarItem) {
			jQuery.sap.assert(oToolbarItem.getMetadata().isInstanceOf("sap.ui.commons.ToolbarItem"), "ToolbarRenderer.render: oToolbarItem must be a ToolbarItem");

			// Render ToolbarSeparator elements internally, dispatch rendering of real controls
			if (oToolbarItem instanceof sap.ui.commons.ToolbarSeparator) {
				sap.ui.commons.ToolbarRenderer.renderSeparator(rm, oToolbarItem);
			} else {
				rm.renderControl(oToolbarItem);
			}
		}
	}

	// Render the overflow menu button and the cover hiding it, if appropriate
	rm.write("<div id='");
	rm.write(oToolbar.getId());
	rm.write("-mn' class='sapUiTbOB' role='button' aria-haspopup='true' title='" + rb.getText("TOOLBAR_OVERFLOW") + "' tabindex='-1'></div></div></div>");

	// Render right side items if right items exist
	if (bHasRightItems){
		rm.write("<div class='sapUiTbInnerRight' >");
		for (var i = 0; i < iRightItemsLength; i++) {
			var oToolbarItem = aRightItems[i];
			if (oToolbarItem) {
				jQuery.sap.assert(oToolbarItem.getMetadata().isInstanceOf("sap.ui.commons.ToolbarItem"), "ToolbarRenderer.render: oToolbarItem must be a ToolbarItem");
				// Render ToolbarSeparator elements internally, dispatch rendering of real controls
				if (oToolbarItem instanceof sap.ui.commons.ToolbarSeparator) {
					sap.ui.commons.ToolbarRenderer.renderSeparator(rm, oToolbarItem);
				} else {
					rm.renderControl(oToolbarItem);
				}
			}
		}
		rm.write("</div>");
	}
	// Close div for the toolbar
	rm.write("</div>");

};


/**
 * Renders the given ToolbarSeparator
 *
 * @param {sap.ui.core.RenderManager} oRm The RenderManager
 * @param {sap.ui.commons.ToolbarItem} oToolbarItem The ToolbarSeparator
 * @private
 */
sap.ui.commons.ToolbarRenderer.renderSeparator = function(oRm, oToolbarItem) {
	if (oToolbarItem.getDisplayVisualSeparator()) {
		oRm.write("<span ");
		oRm.writeElementData(oToolbarItem);
		if (oToolbarItem.getDesign() === sap.ui.commons.ToolbarSeparatorDesign.FullHeight) {
			oRm.write(" class='sapUiTbSeparator sapUiTbSepFullHeight' role='separator'></span>");
		} else {
			oRm.write(" class='sapUiTbSeparator' role='separator'></span>");
		}
	} else {
		oRm.write("<span ");
		oRm.writeElementData(oToolbarItem);
		oRm.write(" class='sapUiTbSpacer' role='separator'></span>");
	}
};


/**
 * Fills the overflow popup with the currently invisible toolbar items.
 *
 * @param {sap.ui.commons.Toolbar} oToolbar
 * @private
 */
sap.ui.commons.ToolbarRenderer.fillOverflowPopup = function(oToolbar) {
	var oPopupHolder = oToolbar.getDomRef("pu");
	if (!oPopupHolder) {
		oPopupHolder = sap.ui.commons.ToolbarRenderer.initOverflowPopup(oToolbar).firstChild;
	}

	// Move all invisible items from the second row of the toolbar to the popup
	var iVisibleItems = oToolbar.getVisibleItemInfo().count;
	var oToolbarCont = oToolbar.getDomRef().firstChild.firstChild;
	var iPos = 0;
	var oChild = oToolbarCont.firstChild;
	var sOverflowButtonId = oToolbar.getId() + "-mn";
	while (oChild) {
		var nextChild = oChild.nextSibling;
		if (iPos >= iVisibleItems) {
			if (oChild.id == sOverflowButtonId) { // do not move overflow button and cover
				break;
			}

			oPopupHolder.appendChild(oChild);
		}
		oChild = nextChild;
		iPos++;
	}
};


/**
 * Creates the overflow popup inside the static area, but does not fill its contents (=no items).
 *
 * @param {sap.ui.commons.Toolbar} oToolbar
 * @private
 */
sap.ui.commons.ToolbarRenderer.initOverflowPopup = function(oToolbar) {
	var oStaticArea = sap.ui.getCore().getStaticAreaRef();
	var oPopupHolder = document.createElement("div");
	oPopupHolder.className = "sapUiTbDD sapUiTbDesignFlat";
	oPopupHolder.innerHTML = "<div id='" + oToolbar.getId() + "-pu' data-sap-ui=" + oToolbar.getId() + " tabindex='0' role='menu'></div>";
	oStaticArea.appendChild(oPopupHolder);
	return oPopupHolder;
};


/**
 * Removes the toolbar items from the overflow popup and puts them back into the toolbar.
 *
 * @param {sap.ui.commons.Toolbar} oToolbar
 * @private
 */
sap.ui.commons.ToolbarRenderer.emptyOverflowPopup = function(oToolbar) {
	var oPopupHolder = oToolbar.getDomRef("pu");
	var oDomRef = oToolbar.getDomRef();
	
	if (oPopupHolder && oDomRef) {
		var oOverflowButton = oToolbar.getDomRef("mn");
		var oToolbarCont = oDomRef.firstChild.firstChild;
		while (oPopupHolder.hasChildNodes()) {
			oToolbarCont.insertBefore(oPopupHolder.firstChild, oOverflowButton);
		}
	}
};


/**
 * Returns the area in which the overflow popup should be rendered.
 *
 * @param {sap.ui.commons.Toolbar} oToolbar The Toolbar whose popup area is requested
 *
 * @private
 */
sap.ui.commons.ToolbarRenderer.getPopupArea = function(oToolbar) {
	return oToolbar.getDomRef("pu");
};

/**
 * @param {sap.ui.commons.Toolbar} oToolbar The Toolbar where the overflow button should be set active
 * @private
 */
sap.ui.commons.ToolbarRenderer.setActive = function(oToolbar) {
	oToolbar.$("mn").addClass("sapUiTbOBAct");
};

/**
 * @param {sap.ui.commons.Toolbar} oToolbar The Toolbar where the overflow button should be set not active
 * @private
 */
sap.ui.commons.ToolbarRenderer.unsetActive = function(oToolbar) {
	oToolbar.$("mn").removeClass("sapUiTbOBAct");
};
}; // end of sap/ui/commons/ToolbarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TreeRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.TreeRenderer
jQuery.sap.declare("sap.ui.commons.TreeRenderer");

/**
 * @class Tree renderer.
 * @static
 */
sap.ui.commons.TreeRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oTree an object representation of the control that should be rendered
 */
sap.ui.commons.TreeRenderer.render = function(oRenderManager, oTree){
	// convenience variable
	var rm = oRenderManager;

	//First node get is focusable.
	sap.ui.commons.TreeRenderer.bFirstNodeRendered = false;

	rm.write("<div");
	rm.writeControlData(oTree);
	rm.addClass("sapUiTree");

	if(oTree.getHeight() != "" && oTree.getHeight() != "auto"){
		rm.addClass("sapUiTreeFixedHeight");
	}
	if(!oTree.getShowHeader()){
		rm.addClass("sapUiTreeTransparent");
	}
	rm.writeClasses();

	rm.addStyle("width", oTree.getWidth() || "auto");
	rm.addStyle("height", oTree.getHeight());
	rm.addStyle("min-width", oTree.getMinWidth());

	rm.writeStyles();

	//ARIA
	rm.writeAttribute('role', 'tree');
	rm.write(">");

	if(oTree.getShowHeader()){

		rm.write("<div id=\""+ oTree.getId() +"-Header\" class=\"sapUiTreeHeader\""); //Header
		rm.writeAttribute('role', 'heading');
		rm.write(">");

		//Title
		rm.write("<div class='sapUiTreeTitle'");

		if(oTree.getTooltip_AsString()){
			rm.writeAttributeEscaped( "title", oTree.getTooltip_AsString());//Tree tooltip
		}
		rm.write(">");
		rm.writeEscaped(oTree.getTitle());
		rm.write("</div>");


		if(oTree.getShowHeaderIcons()){
			rm.write("<div id='"+oTree.getId()+"-TBCont' class='sapUiTreeTbCont'"); //ToolbarContainer
			rm.writeAttribute('role', 'toolbar');
			rm.write(">");
			rm.renderControl(oTree.oCollapseAllButton);
			rm.renderControl(oTree.oExpandAllButton );

			rm.write("</div>");
		}


		rm.write("</div>");//End of Header
	}

	rm.write("<div id=\""+ oTree.getId() +"-TreeCont\""); //tree container


	rm.addClass("sapUiTreeCont");
	var showScroll = oTree.getShowHorizontalScrollbar();
	if(showScroll){
		rm.addClass("sapUiTreeContScroll");
	}else{
		rm.addClass("sapUiTreeContNoScroll");
	}
	rm.writeClasses();

	rm.write(">");

	// write the HTML into the render manager
	rm.write("<ul class=\"sapUiTreeList\">");

	var aNodes = oTree.getNodes();
	 for(var i=0;i<aNodes.length;i++){
	   sap.ui.commons.TreeRenderer.renderNode(rm, aNodes[i], 1, aNodes.length, i + 1);
	}

	rm.write("</ul>");
	rm.write("</div>");//Tree Container
	rm.write("</div>");//Tree
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oNode an object representation of the control that should be rendered
 * @param {int} iLevel the hierarchical level value of the node
 */
sap.ui.commons.TreeRenderer.renderNode = function(oRenderManager, oNode, iLevel, iSize, iPos){
	// convenience variable
	var rm = oRenderManager;
	var bExpanded;

	// write the HTML into the render manager
	rm.write("<li");
	rm.writeElementData(oNode);
	rm.addClass("sapUiTreeNode");

	if(oNode.getExpanded() && (oNode.getHasExpander() || oNode.hasChildren() )){
		rm.addClass("sapUiTreeNodeExpanded");
		bExpanded = true;
	}
	else if(!oNode.getExpanded() && (oNode.getHasExpander() || oNode.hasChildren() )){

		rm.addClass("sapUiTreeNodeCollapsed");
		bExpanded = false;
	}

	if(oNode.getSelectable() && oNode.getIsSelected()){
		rm.addClass("sapUiTreeNodeSelected");
		rm.writeAttribute('aria-selected', 'true');
	}

	if(! bExpanded && oNode.hasSelectedHiddenChild()){
		rm.addClass("sapUiTreeNodeSelectedParent");
		rm.writeAttribute('aria-selected', 'true');
	}

	rm.writeClasses(oNode);

	//ARIA
	var mProps = {role: 'treeitem', level: iLevel, setsize: iSize, posinset: iPos};

	if(bExpanded){
		mProps["expanded"] = true;
	}
	else{
		// don't write aria expanded attribute if a node has no children
		// if a node has an expander we assume that it also has children
		if (oNode.getHasExpander()) {
			mProps["expanded"] = false;
		}
	}

	rm.writeAccessibilityState(oNode, mProps);

	//Tooltip
	rm.writeAttributeEscaped( "title", oNode.getTooltip_AsString());

	if(!sap.ui.commons.TreeRenderer.bFirstNodeRendered){
		rm.write("tabindex='0'");
		sap.ui.commons.TreeRenderer.bFirstNodeRendered = true;
	}
	rm.write(">");


	rm.write("<span");  //Node Content

	rm.addClass("sapUiTreeNodeContent");
	if(!oNode.getSelectable()){
		rm.addClass("sapUiTreeNodeNotSelectable");
	}
	rm.writeClasses();

	rm.write(">");  //Node Content

	if(oNode.getIcon()){
		rm.writeIcon(oNode.getIcon(), "sapUiTreeIcon");
	}

	rm.writeEscaped( oNode.getText());


	rm.write("</span>"); //Node Content

	rm.write("</li>");

	if(oNode.getNodes()){
		var aSubNodes = oNode.getNodes();
		rm.write("<ul");

		rm.writeAttribute("id", oNode.getId() + "-children");

		rm.addClass("sapUiTreeChildrenNodes");
		if(!bExpanded){
			rm.addClass("sapUiTreeHiddenChildrenNodes");
		}
		else{
			rm.writeAttribute("style", "display: block;");//For animation sake
		}
		rm.writeClasses();

		rm.write(">");
		iLevel ++;
		for(var i=0;i<aSubNodes.length;i++){
			sap.ui.commons.TreeRenderer.renderNode(rm, aSubNodes[i], iLevel, aSubNodes.length, i + 1);
		}
		rm.write("</ul>");
	}
};

}; // end of sap/ui/commons/TreeRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TriStateCheckBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.TriStateCheckBox
jQuery.sap.declare("sap.ui.commons.TriStateCheckBoxRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class
 * @author SAP AG
 * @version 0.1
 * @static
 */
sap.ui.commons.TriStateCheckBoxRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.TriStateCheckBoxRenderer.render = function(oRm, oControl) {

	// Return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	var myTabIndex = 0;
	var bReadOnly = false;

	// Collect state information
  var enabled = !!oControl.getEnabled();
	var editable = !!oControl.getEditable();
	var inErrorState = false;
	var inWarningState = false;
	var selectedState = oControl.getSelectionState();
	var ariaState = selectedState.toLowerCase();
	if (ariaState == "checked"){
		ariaState = true;
	}
	else if(ariaState == "unchecked"){
		ariaState = false;
	}
	var tooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oControl, oControl.getTooltip_AsString());
	var ariaLabelId = "sapUiAriaLabel" + oControl.getIdForLabel();
	if (oControl.getValueState() != null){
		inErrorState = sap.ui.core.ValueState.Error == oControl.getValueState();
		inWarningState = sap.ui.core.ValueState.Warning == oControl.getValueState();
	}

	// write the HTML into the render manager
	//outer span containing aria information, tabindex, text and tooltip etc.
	oRm.write("<span");
	oRm.writeControlData(oControl);

	oRm.addClass("sapUiTriCb");

	if (!!oControl.getWidth()){
		oRm.writeAttribute("style", "width:" + oControl.getWidth() + ";");
	}
	oRm.writeAccessibilityState(oControl, {
		"role" : sap.ui.core.AccessibleRole.Checkbox.toLowerCase(),
		"checked" : ariaState
		});
	oRm.writeClasses();
	if (!enabled){
		myTabIndex = -1;
	}
	oRm.writeAttribute("tabIndex", myTabIndex);
	oRm.write(">");

	// inner span carrying metadata and style according to the current state
	oRm.write("<span");

	oRm.writeAccessibilityState(oControl, {"labelledby": ariaLabelId});

	if (tooltip){
		oRm.writeAttributeEscaped("title", tooltip);
	}

	if (!enabled){
		bReadOnly = true;
		myTabIndex = -1;
		oRm.write(" disabled='disabled'");
	}

	if (!editable){
		bReadOnly = true;
	}

	if (bReadOnly){
		oRm.write(" readOnly='readOnly'");
	}

	oRm.addClass("sapUiTriCbInner");

	if (!enabled){
		oRm.addClass("sapUiTriCbDis");
	}

	if (!editable){
		oRm.addClass("sapUiTriCbRo");
	}

	if (inErrorState){
		oRm.addClass("sapUiTriCbErr");
	}
	else if (inWarningState){
		oRm.addClass("sapUiTriCbWarn");
	}

	// Add classes and properties depending on the state
	if (selectedState === "Checked") {
		oRm.addClass("sapUiTriCbCheck");
	}
	else if (selectedState === "Mixed") {
		oRm.addClass("sapUiTriCbMix");
	}

	oRm.writeClasses();
	oRm.write(">"); // span element
	oRm.write("</span>");

// render text into the outer span
	if (oControl.getText()) {
		this.renderText(ariaLabelId, oRm, oControl.getText(), oControl.getTextDirection());
	}
	oRm.write("</span>");

};

/**
 * Write the descriptive span for the CheckBox along with an explicit "dir" in case the text direction is different from the environment.
 * Add sLabelId as id for aria-labelledby support
 *
 */
 sap.ui.commons.TriStateCheckBoxRenderer.renderText = function(sLabelId, oRenderManager, sText, eTextDirection) {
	var oRm = oRenderManager;
	oRm.write("<span id=" + sLabelId + " class=\"sapUiTriCbLbl\"");
	if (!eTextDirection || eTextDirection == sap.ui.core.TextDirection.Inherit) {
		oRm.write(">");
		oRm.writeEscaped(sText);
	} else {
		oRm.write(" style=\"direction:" + eTextDirection.toLowerCase() + ";\">");
		oRm.writeEscaped(sText);
	}
	oRm.write("</span>");
};
}; // end of sap/ui/commons/TriStateCheckBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ValueHelpFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.ValueHelpField
jQuery.sap.declare("sap.ui.commons.ValueHelpFieldRenderer");


/**
 * @class ValueHelpField renderer.
 * For a common look&feel, the ValueHelpField extends the TextField control,
 * just like the ComboBox does.
 * @static
 */
sap.ui.commons.ValueHelpFieldRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);

/**
 * Hint: "renderOuterAttributes" is a reserved/hard-coded TextField extending function!
 *       It is used to allow extensions to display help icons.
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager currently rendering this control
 * @param {sap.ui.commons.ValueHelpField}
 *            oControl the ValueHelpField whose "value help" should be rendered
 * @private
 */
sap.ui.commons.ValueHelpFieldRenderer.renderOuterAttributes = function(rm, oControl) {
	// To share the overall ComboBox styling:
	// Note: Would be best if a more generic className had been used for this, like
	//       "sapUiTfIconContainer", as ComboBox and DatePicker and ValueHelpField are likely
	//       to always share a common container look. (Only icon should differ.)
	//       Then, in the unlikely case where one of them would want to differ from the
	//       others, then this one would only need to add its own className on top of
	//       the generic one, e.g. "sapUiTfDateContainer" for the DatePicker.
	// Referencing "sapUiTfCombo" for now.
	rm.addClass("sapUiTfCombo");
//as only input field gets focus, render aria info there
	rm.writeAttribute("aria-owns", oControl.getId() + '-input '+oControl.getId() + '-icon');
};

/**
 * Renders additional HTML for the ComboBox to the TextField (sets the icon)
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for
 *                                                 writing to the Render-Output-Buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should
 *                                     be rendered.
 */
sap.ui.commons.ValueHelpFieldRenderer.renderOuterContent = function(rm, oControl){

	var sIconUrl = oControl.getIconURL();
	var aClasses = [];
	var mAttributes = {};
	mAttributes["id"] = oControl.getId() + "-icon";
	mAttributes["role"] = "button";

	// As mentioned above, a more generic "sapUiTfIcon" className could have been used...
	// One would just have had to add its own icon className!
	// Using "sapUiTfValueHelpIcon" for now, as it proved easier to define instead of overwriting
	// the ComboBox image sources and backgrounds.
	aClasses.push("sapUiTfValueHelpIcon");

	if (sIconUrl && sap.ui.core.IconPool.isIconURI(sIconUrl)) {
		oControl.bIsIconURI = true;
	} else {
		oControl.bIsIconURI = false;
		if (oControl.getEnabled() && oControl.getEditable()) {
			aClasses.push("sapUiTfValueHelpRegularIcon");
		}

		sIconUrl = this.renderIcon(rm, oControl, aClasses);
	}

	rm.writeIcon(sIconUrl, aClasses, mAttributes);

};

/**
 * as onBeforeRendering only runs while re-rendering this module is called in renderer
 */
sap.ui.commons.ValueHelpFieldRenderer.renderIcon = function(rm, oControl, aClasses){

	var sIcon = "";

	if (!oControl.getEnabled()) {
		if (oControl.getIconDisabledURL()) {
			oControl.sIconDsblUrl = oControl.getIconDisabledURL();
		} else if (oControl.getIconURL()) {
			oControl.sIconDsblUrl = oControl.getIconURL();
			aClasses.push('sapUiTfValueHelpDsblIcon');
		}
		sIcon = oControl.sIconDsblUrl;
	} else {
		if (oControl.getIconURL()) {
			oControl.sIconRegularUrl = oControl.getIconURL();
		}
		sIcon = oControl.sIconRegularUrl;
	}
	return sIcon;

};

///**
// * Renders ARIA information for the outer DIV
// *
// * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for
// *                                                 writing to the Render-Output-Buffer
// * @param {sap.ui.fw.Control} oControl an object representation of the control that should
// *                                     be rendered
// */
//sap.ui.commons.ValueHelpFieldRenderer.renderARIAInfo = function(rm, oControl) {
//	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
//	// Widgets are discrete user interface objects with which the user can interact.
//	// Widget roles map to standard features in accessibility APIs.
//	// When a user navigates an element assigned any of the non-abstract subclass roles of widget,
//	// assistive technologies that typically intercept standard keyboard events SHOULD switch to
//	// an application browsing mode, and pass keyboard events through to the web application.
//	// The intent is to hint to certain assistive technologies to switch from normal browsing mode
//	// into a mode more appropriate for interacting with a web application; some user agents have
//	// a browse navigation mode where keys, such as up and down arrows, are used to browse the
//	// document, and this native behavior prevents the use of these keys by a web application.
//		rm.writeAttribute('role', 'widget');
//		rm.writeAttribute('aria-haspopup', 'true');
//		// IMPORTANT: According to jQuery forums, DatePicker Accessibility is to be delivered in a
//		//            future release. No release mentionned.
//		// So there is not much point about doing more about this at the moment.
//	}
//};
}; // end of sap/ui/commons/ValueHelpFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.FormLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.commons.form.FormLayoutRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.form.FormLayoutRenderer'); // unlisted dependency retained


sap.ui.commons.form.FormLayoutRenderer = sap.ui.core.Renderer.extend(sap.ui.layout.form.FormLayoutRenderer);
 
}; // end of sap/ui/commons/form/FormLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.FormRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.commons.form.FormRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.form.FormRenderer'); // unlisted dependency retained


sap.ui.commons.form.FormRenderer = sap.ui.core.Renderer.extend(sap.ui.layout.form.FormRenderer);
}; // end of sap/ui/commons/form/FormRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.GridLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.commons.form.GridLayoutRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.form.GridLayoutRenderer'); // unlisted dependency retained


sap.ui.commons.form.GridLayoutRenderer = sap.ui.core.Renderer.extend(sap.ui.layout.form.GridLayoutRenderer);
}; // end of sap/ui/commons/form/GridLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.ResponsiveLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.commons.form.ResponsiveLayoutRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.form.ResponsiveLayoutRenderer'); // unlisted dependency retained


sap.ui.commons.form.ResponsiveLayoutRenderer = sap.ui.core.Renderer.extend(sap.ui.layout.form.ResponsiveLayoutRenderer);
}; // end of sap/ui/commons/form/ResponsiveLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.SimpleFormRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.commons.form.SimpleFormRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.form.SimpleFormRenderer'); // unlisted dependency retained


sap.ui.commons.form.SimpleFormRenderer = sap.ui.core.Renderer.extend(sap.ui.layout.form.SimpleFormRenderer);
}; // end of sap/ui/commons/form/SimpleFormRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.AbsoluteLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.layout.AbsoluteLayout
jQuery.sap.declare("sap.ui.commons.layout.AbsoluteLayoutRenderer");

/**
 * @class AbsoluteLayout renderer.
 * @static
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer = {
};


(function() {

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.render = function(oRenderManager, oControl){
	var rm = oRenderManager;

	oControl.doBeforeRendering();

	if(!oControl.getVisible()) {
		return;
	}

	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapUiLayoutAbs");
	rm.addClass("sapUiLayoutAbsOvrflwY" + oControl.getVerticalScrolling());
	rm.addClass("sapUiLayoutAbsOvrflwX" + oControl.getHorizontalScrolling());
	rm.writeClasses();
	var sStyle = "width:" + oControl.getWidth() + ";height:" + oControl.getHeight() + ";";
	rm.writeAttribute("style", sStyle);
	var sTooltip = oControl.getTooltip_AsString();
	if(sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");

	var aPositions = oControl.getPositions();
	if(aPositions && aPositions.length > 0){
		for(var index=0; index<aPositions.length; index++){
			var oPosition = aPositions[index];
			var oChildControl = oPosition.getControl();
			if(oChildControl) {
				rm.write("<div");
				rm.writeElementData(oPosition);
				rm.writeAttribute("class", "sapUiLayoutAbsPos");
				rm.writeAttribute("style", getComputedStyles(oPosition));
				sTooltip = oPosition.getTooltip_AsString();
				if(sTooltip) {
					rm.writeAttributeEscaped("title", sTooltip);
				}
				rm.write(">");
				rm.renderControl(oChildControl);
				rm.write("</div>");
			}
		}
	}

	rm.write("</div>");
};


/**
 * Updates the size of the layout.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.updateLayoutSize = function(oLayout) {
	jQuery(oLayout.getDomRef()).css("width", oLayout.getWidth()).css("height", oLayout.getHeight());
};


/**
 * Updates the scrolling mode of the layout.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.updateLayoutScolling = function(oLayout) {
	var jLayout = jQuery(oLayout.getDomRef());
	for(var sScrollingType in sap.ui.core.Scrolling) {
		jLayout.removeClass("sapUiLayoutAbsOvrflwY"+sScrollingType).removeClass("sapUiLayoutAbsOvrflwX"+sScrollingType);
	}
	jLayout.addClass("sapUiLayoutAbsOvrflwY"+oLayout.getVerticalScrolling()).addClass("sapUiLayoutAbsOvrflwX"+oLayout.getHorizontalScrolling());
};


/**
 * Updates the styles of the given position in the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionStyles = function(oPosition) {
	jQuery(oPosition.getDomRef()).attr("style", getComputedStyles(oPosition));
};


/**
 * Removes the given position from the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.removePosition = function(oPosition) {
	jQuery(oPosition.getDomRef()).remove();
};


/**
 * Removes all positions of the given layout from the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.removeAllPositions = function(oLayout) {
	jQuery(oLayout.getDomRef()).html("");
};


/**
 * Updates the styles and the content of the given position in the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionedControl = function(oPosition) {
	sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionStyles(oPosition);
	var rm = sap.ui.getCore().createRenderManager();
	rm.renderControl(oPosition.getControl());
	rm.flush(oPosition.getDomRef());
	rm.destroy();
};


/**
 * Inserts the given position into the Dom incl. the content and updating the styles.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayoutRenderer.insertPosition = function(oLayout, oPosition) {
	var index = oLayout.indexOfPosition(oPosition);
	var oPositions = oLayout.getPositions();
	var oPredecessorPosition = null;
	while(index > 0) {
		index--;
		if(oPositions[index].getDomRef()){
			oPredecessorPosition = oPositions[index];
			break;
		}
	}

	var sHTML = "<div id=\""+oPosition.getId()+"\" data-sap-ui=\""+oPosition.getId()+"\" class=\"sapUiLayoutAbsPos\"></div>";
	if(!oPredecessorPosition){
		jQuery(oLayout.getDomRef()).prepend(sHTML);
	}else{
		jQuery(oPredecessorPosition.getDomRef()).after(sHTML);
	}

	sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionedControl(oPosition);
};


/**
 * Computes and returns the CSS styles for the given position.
 *
 * @private
 */
var getComputedStyles = function(oPosition) {
	var oPos = oPosition.getComputedPosition();

	var addStyle = function(oPosition, aBuffer, sPos, sVal){
		if(sVal) {
			aBuffer.push(sPos+":"+sVal+";");
		}
	};

	var aBuffer = [];
	addStyle(oPosition, aBuffer, "top", oPos.top);
	addStyle(oPosition, aBuffer, "bottom", oPos.bottom);
	addStyle(oPosition, aBuffer, "left", oPos.left);
	addStyle(oPosition, aBuffer, "right", oPos.right);
	addStyle(oPosition, aBuffer, "width", oPos.width);
	addStyle(oPosition, aBuffer, "height", oPos.height);

	return aBuffer.join("");
};

}());
}; // end of sap/ui/commons/layout/AbsoluteLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.BorderLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.layout.BorderLayout
jQuery.sap.declare("sap.ui.commons.layout.BorderLayoutRenderer");

jQuery.sap.require('jquery.sap.encoder'); // unlisted dependency retained


/**
 * @class BorderLayout renderer.
 * @static
 */
sap.ui.commons.layout.BorderLayoutRenderer = {};

(function() {
	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 * 
	 * @param {sap.ui.core.RenderManager}
	 *            oRenderManager the RenderManager that can be used for writing
	 *            to the Render-Output-Buffer
	 * @param {sap.ui.core.Control}
	 *            oControl an object representation of the control that should
	 *            be rendered
	 */
	sap.ui.commons.layout.BorderLayoutRenderer.render = function(oRm, oControl) {
		var mAreas = {
			top : oControl.getTop(),
			begin : oControl.getBegin(),
			center : oControl.getCenter(),
			end : oControl.getEnd(),
			bottom : oControl.getBottom()
		};
		var mAreaSizes = {
			top : sizeOf(mAreas.top),
			begin : sizeOf(mAreas.begin),
			center : sizeOf(mAreas.center),
			end : sizeOf(mAreas.end),
			bottom : sizeOf(mAreas.bottom)
		};
		var bRTL = sap.ui.getCore().getConfiguration().getRTL();

		// open the outer HTML tag
		oRm.write("<div");
		// let control data be written so that connection to SAPUI5 eventing
		// gets established
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiBorderLayout");
		oRm.addStyle("width", oControl.getWidth());
		oRm.addStyle("height", oControl.getHeight());
		oRm.writeClasses();
		oRm.writeStyles();
		// don't forget to close the HTML tag
		oRm.write(">");

		/* render areas */
		if (mAreas.top/* && oTop.getVisible() */) {
			renderArea(oRm, "top", mAreas.top, mAreaSizes, bRTL);
		}
		if (mAreas.begin/* && oBegin.getVisible() */) {
			renderArea(oRm, "begin", mAreas.begin, mAreaSizes, bRTL);
		}
		if (mAreas.center && mAreas.center.getVisible()) {
			renderArea(oRm, "center", mAreas.center, mAreaSizes, bRTL);
		}
		if (mAreas.end/* && oEnd.getVisible() */) {
			renderArea(oRm, "end", mAreas.end, mAreaSizes, bRTL);
		}
		if (mAreas.bottom/* && oBottom.getVisible() */) {
			renderArea(oRm, "bottom", mAreas.bottom, mAreaSizes, bRTL);
		}

		// close surrounding div
		oRm.write("</div>");
	};

	sap.ui.commons.layout.BorderLayoutRenderer.animate = function(oArea, bVisible) {
		var oBorderLayout = oArea.getParent();
		// var sBorderLayoutId = oBorderLayout.getId();
		var bRTL = sap.ui.getCore().getConfiguration().getRTL();
		var end = bVisible ? oArea.getSize() : "0";

		switch (oArea.getAreaId()) {
		case "top":
			$area(oArea, "top").animate({
				height : end
			});
			$area(oArea, "begin").animate({
				top : end
			});
			$area(oArea, "center").animate({
				top : end
			});
			$area(oArea, "end").animate({
				top : end
			});
			break;

		case "begin":
			$area(oArea, "begin").animate({
				width : end
			});
			$area(oArea, "center").animate(bRTL ? {
				right : end
			} : {
				left : end
			});
			break;

		case "end":
			$area(oArea, "center").animate(bRTL ? {
				left : end
			} : {
				right : end
			});
			$area(oArea, "end").animate({
				width : end
			});
			break;

		case "bottom":
			$area(oArea, "begin").animate({
				bottom : end
			});
			$area(oArea, "center").animate({
				bottom : end
			});
			$area(oArea, "end").animate({
				bottom : end
			});
			$area(oArea, "bottom").animate({
				height : end
			});
			break;

		default:
			break;
		}

	};

	function sizeOf(oArea) {
		var oSize = oArea && oArea.getVisible() && oArea.getSize();
		return oSize || "0";
	}

	function renderArea(oRm, sAreaId, oArea, mAreaSizes, bRTL) {
		var aAreaControls = oArea.getContent();
		var length = aAreaControls.length;

		oRm.write("<div");
		oRm.writeAttribute("id", oArea.getId());
		// collect styles and classes depending on area type
		switch (sAreaId) {
		case "top":
			oRm.addClass("sapUiBorderLayoutTop");
			oRm.addStyle("height", mAreaSizes.top);
			break;
		case "begin":
			oRm.addClass("sapUiBorderLayoutBegin");
			oRm.addStyle("width", mAreaSizes.begin);
			oRm.addStyle("top", mAreaSizes.top);
			oRm.addStyle("bottom", mAreaSizes.bottom);
			break;
		case "center":
			oRm.addClass("sapUiBorderLayoutCenter");
			oRm.addStyle("top", mAreaSizes.top);
			oRm.addStyle("right", bRTL ? mAreaSizes.begin : mAreaSizes.end);
			oRm.addStyle("bottom", mAreaSizes.bottom);
			oRm.addStyle("left", bRTL ? mAreaSizes.end : mAreaSizes.begin);
			break;
		case "end":
			oRm.addClass("sapUiBorderLayoutEnd");
			oRm.addStyle("width", mAreaSizes.end);
			oRm.addStyle("top", mAreaSizes.top);
			oRm.addStyle("bottom", mAreaSizes.bottom);
			break;
		case "bottom":
			oRm.addClass("sapUiBorderLayoutBottom");
			oRm.addStyle("height", mAreaSizes.bottom);
			break;
		default:
			jQuery.sap.assert("default branch must not be reached");
			break;
		}

		// add overflow definition to the style-attribute value
		oRm.addStyle("overflow-x", jQuery.sap.encodeHTML(oArea.getOverflowX() || ""));
		oRm.addStyle("overflow-y", jQuery.sap.encodeHTML(oArea.getOverflowY() || ""));

		// write alignment
		var sAlign = oArea.getContentAlign();
		if (bRTL) {
			if (sAlign === "right") {
				sAlign = "left";
			} else if (sAlign === "left") {
				sAlign = "right";
			}
		}
		oRm.addStyle("text-align", jQuery.sap.encodeHTML(sAlign || ""));

		oRm.writeClasses(oArea);
		oRm.writeStyles();

		oRm.write(">");

		// render the controls
		for ( var i = 0; i < length; i++) {
			oRm.renderControl(aAreaControls[i]);
		}

		oRm.write("</div>");
	}

	function $area(oArea, sAreaId) {
		var oOtherArea = oArea.getParent().getArea(sAreaId);
		return oOtherArea ? oOtherArea.$() : jQuery();
	}
}());
}; // end of sap/ui/commons/layout/BorderLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.HorizontalLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.commons.layout.HorizontalLayoutRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.HorizontalLayoutRenderer'); // unlisted dependency retained


sap.ui.commons.layout.HorizontalLayoutRenderer = sap.ui.core.Renderer.extend(sap.ui.layout.HorizontalLayoutRenderer);
}; // end of sap/ui/commons/layout/HorizontalLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.MatrixLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.layout.MatrixLayout
jQuery.sap.declare("sap.ui.commons.layout.MatrixLayoutRenderer");

/**
 * @class MatrixLayout renderer.
 *
 * @author d029921
 * @static
 */
sap.ui.commons.layout.MatrixLayoutRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the Render-Output-Buffer.
 * @param {sap.ui.core.Control} oMatrixLayout an object representation of the control that should be rendered
 */
sap.ui.commons.layout.MatrixLayoutRenderer.render = function(oRenderManager, oMatrixLayout) {

	// some convenience variables.
	var rm = oRenderManager;
	var r = sap.ui.commons.layout.MatrixLayoutRenderer;

	// return immediately if control is invisible
	if ( !oMatrixLayout.getVisible() ) {
		return;
	}

	var bRTL = sap.ui.getCore().getConfiguration().getRTL();

	//ARIA
	rm.write("<TABLE role=\"presentation\"");
	rm.writeControlData(oMatrixLayout);
	rm.write(" cellpadding=\"0\" cellspacing=\"0\"");
	rm.addStyle("border-collapse", "collapse");

	var sMatrixWidth = oMatrixLayout.getWidth();
	if(sMatrixWidth){
		rm.addStyle("width", sMatrixWidth);
	}

	var sMatrixHeight = oMatrixLayout.getHeight();
	if(sMatrixHeight && sMatrixHeight != 'auto'){
		rm.addStyle("height", sMatrixHeight);
		// get value and unit of Layout height (to determine row heights if given in %)
		var oMatrixHeight = r.getValueUnit( sMatrixHeight );
	}

	if(oMatrixLayout.getLayoutFixed()){
		// table layout is fixed
		rm.addStyle("table-layout", "fixed");
		if(!sMatrixWidth){
			rm.addStyle("width", "100%");
		}
	}

	rm.addClass("sapUiMlt");
	rm.writeStyles();
	rm.writeClasses();

	if(oMatrixLayout.getTooltip_AsString()) {
		rm.writeAttributeEscaped('title', oMatrixLayout.getTooltip_AsString());
	}

	// close table-start-tag
	rm.write('>');

	var aRows = oMatrixLayout.getRows();
	var iCols = oMatrixLayout.getColumns();
	if(iCols < 1){
		// determine number of columns
		for (var i = 0; i < aRows.length; i++) {
			var oMatrixLayoutRow = aRows[i];
			var aCells = oMatrixLayoutRow.getCells();
			if( iCols < aCells.length){
				iCols = aCells.length;
			}
		}
	}

	// create columns
	if(iCols > 0){
		var aWidths = oMatrixLayout.getWidths();
		rm.write("<colgroup>");
		for (var j = 0; j < iCols; j++) {
			rm.write("<col");
			if(aWidths && aWidths[j] && aWidths[j] != "auto"){
				rm.addStyle('width', aWidths[j]); // use style because col width in HTML supports only be px or %
				rm.writeStyles();
			}
			rm.write("/>");
		}
		rm.write("</colgroup>");
	}

	// in IE9 there is a problem with column width if too much colspans are used and not
	// at least one cell per columns has colspan 1
	// to keep the check simple just check if in every row colspans are used
	var bDummyRow = true;
	var bColspanInRow = false;

	rm.write('<TBODY style="width: 100%; height: 100%">');

	// for each row
	for (var i = 0; i < aRows.length; i++) {
		var oMatrixLayoutRow = aRows[i];

		// get value and unit of Row height (to determine row heights if given in %)
		var sRowHeight = oMatrixLayoutRow.getHeight();
		if (sRowHeight == "auto") {
			//ignore auto because without rowHeight it's auto sized
			sRowHeight = "";
		}
		if (sRowHeight && oMatrixHeight) {
			var oRowHeight = r.getValueUnit( sRowHeight );
			if( oRowHeight.Unit == '%' && oMatrixHeight.Unit != '%'){
				// Matrix has fix height and Row % -> calculate Row height to fix value
				sRowHeight = ( oMatrixHeight.Value * oRowHeight.Value / 100 ) + oMatrixHeight.Unit;
			}
		}

		rm.write("<tr");
		rm.writeElementData(oMatrixLayoutRow);
		rm.writeClasses(oMatrixLayoutRow);
		if(oMatrixLayoutRow.getTooltip_AsString()) {
			rm.writeAttributeEscaped('title', oMatrixLayoutRow.getTooltip_AsString());
		}

		if (sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version >= 9 && sRowHeight) {
			// for IE9 and IE10 in some cases the height is needed on TR, so it's added here.
			// Other browsers don't need it here
			// TD must have the same height even it looks wrong
			// (e.g. TR must have 30% and TD must have 30% to show a 30% height row)
			rm.addStyle("height", sRowHeight);
			rm.writeStyles();
		}
		rm.write(">");

		// for each cell
		var aCells = oMatrixLayoutRow.getCells();

		var iColumns = iCols;
		if(iCols < 1){
			// render only defined cells
			iColumns = aCells.length;
		}

		bColspanInRow = false;
		var iColSpans = 0;
		if(!oMatrixLayoutRow.RowSpanCells){
			oMatrixLayoutRow.RowSpanCells = 0;
		}else {
			bColspanInRow = true; // not really but ok for this case
		}

		for (var j = 0; j < iColumns; j++) {
			if(j >= (iColumns - iColSpans - oMatrixLayoutRow.RowSpanCells)){
			// no more cells because of Colspan
				break;
			}

			var oMatrixLayoutCell = aCells[j];

			rm.write("<td");

			if (sRowHeight && ( !oMatrixLayoutCell || oMatrixLayoutCell.getRowSpan() == 1 )) {
				// set height only if cell has no rowspan or is not specified
				rm.addStyle("height", sRowHeight);
			}

			if(oMatrixLayoutCell){
				// if empty cell only render empty TD
				rm.writeElementData(oMatrixLayoutCell);
				if(oMatrixLayoutCell.getTooltip_AsString()) {
					rm.writeAttributeEscaped('title', oMatrixLayoutCell.getTooltip_AsString());
				}

				if(oMatrixLayout.getLayoutFixed() && oMatrixLayoutCell.getContent().length > 0){
					// table layout is fixed
					rm.addStyle("overflow", "hidden");
					// as in Firefox 10 ellipsis makes problems it is removed.
					// controls inside of matrix cells should bring their own ellipsis function
					// However, ellipsis on cells can only work if included control has 100% size of cell,
					// otherwise (if control is bigger) its only cut.
					//rm.addStyle("text-overflow", "ellipsis");
				}

				var sHAlign = r.getHAlign(oMatrixLayoutCell.getHAlign(), bRTL);
				if (sHAlign) {
					rm.writeAttribute("align", sHAlign);
				}
				var sVAlign = r.getVAlign(oMatrixLayoutCell.getVAlign());
				if (sVAlign && sVAlign != "middle") { //middle is default, not needed
					rm.writeAttribute("valign", sVAlign);
				}
				if (oMatrixLayoutCell.getColSpan() > 1) {
					rm.writeAttribute("colspan", oMatrixLayoutCell.getColSpan());
					iColSpans = iColSpans + oMatrixLayoutCell.getColSpan() - 1;
					bColspanInRow = true;
				}
				if (oMatrixLayoutCell.getRowSpan() > 1) {
					rm.writeAttribute("rowspan", oMatrixLayoutCell.getRowSpan());

					// summarize height of all used rows
					var fValue = 0;
					var sUnit = "";
					for (var x = 0; x < oMatrixLayoutCell.getRowSpan(); x++) {
						var oRow = aRows[i+x];

						if(!oRow){
							sUnit = false;
							break;
						}

						if(!oRow.RowSpanCells){
							oRow.RowSpanCells = 0;
						}

						if(x > 0){
							// add number of cells with rowspan to following rows to not render additional cells
							oRow.RowSpanCells = oRow.RowSpanCells + oMatrixLayoutCell.getColSpan();
						}
						var sHeight = oRow.getHeight();
						if(!sHeight || sHeight == "auto"){
							//no height defined for one row -> no summarize possible
							sUnit = false;
							//break;
						}else{
							var oHeight = r.getValueUnit( sHeight );
							if( oHeight.Unit == '%' && oMatrixHeight.Unit != '%'){
								// Matrix has fix height and Row % -> calculate Row height to fix value
								oHeight.Value = ( oMatrixHeight.Value * oRowHeight.Value / 100 );
								oHeight.Unit  = oMatrixHeight.Unit;
							}
							if(sUnit == ""){
								sUnit = oHeight.Unit;
							}else{
								if(sUnit != oHeight.Unit){
									//different unit -> no summarize possible
									sUnit = false;
									//break;
								}
							}
							fValue = fValue + oHeight.Value;
						}
					}
					if(sUnit != false){
						var sSpanHeight = fValue + sUnit;
						rm.addStyle("height", sSpanHeight);
					}
				}

				// set CSS class for appropriate background
				rm.addClass(r.getBackgroundClass(oMatrixLayoutCell.getBackgroundDesign()));

				// set CSS class for appropriate separator
				rm.addClass(r.getSeparationClass(oMatrixLayoutCell.getSeparation()));

				if(!oMatrixLayout.getLayoutFixed() || !sRowHeight){
					// set CSS class for appropriate padding
					rm.addClass(r.getPaddingClass(oMatrixLayoutCell.getPadding()));

					rm.addClass("sapUiMltCell");
				} else{
					rm.addStyle("white-space", "nowrap");
				}


				rm.writeClasses(oMatrixLayoutCell);
			}
			rm.writeStyles();

			// close td-start-tag
			rm.write(">");

			if(oMatrixLayoutCell){
				// if empty cell only render empty TD

				if(oMatrixLayout.getLayoutFixed() && sRowHeight){
					// table layout is fixed
					// in case of defined height some DIVs are needed.
					// 1. one DIV to define height
					// 2. DIV to set vertical alignment
					// 3. DIV inside 2. DIV to set paddings for control inside.
					rm.write('<div');

					if( oMatrixLayoutCell.getRowSpan() != 1 && sSpanHeight && sSpanHeight.search('%') == -1){
						rm.addStyle("height", sSpanHeight);
					}else if(sRowHeight.search('%') != -1 || (oMatrixLayoutCell.getRowSpan() != 1 && !sSpanHeight)){
						rm.addStyle("height", '100%');
					}else{
						rm.addStyle("height", sRowHeight);
					}

					rm.addStyle("display", "inline-block");
					if (sVAlign) {
						rm.addStyle("vertical-align", sVAlign);
					}
					rm.writeStyles();
					rm.writeClasses(false);
					rm.write("></div>");
					rm.write('<div');
					rm.addStyle("display", "inline-block");
					if (sVAlign) {
						rm.addStyle("vertical-align", sVAlign);
					}
					if( oMatrixLayoutCell.getRowSpan() != 1 && sSpanHeight && sSpanHeight.search('%') == -1){
						rm.addStyle("max-height", sSpanHeight);
					}else if(sRowHeight.search('%') != -1 || (oMatrixLayoutCell.getRowSpan() != 1 && !sSpanHeight)){
						rm.addStyle("max-height", '100%');
					}else{
						rm.addStyle("max-height", sRowHeight);
					}
					/* determine height of content (if its a property there)
					   and set it to DIV (if possible) */
					var sContentHeight;
					var sDivHeight = "0";
					var sDivUnit = "";
					var sInnerDivHeight = "0";
					var aContentControls = oMatrixLayoutCell.getContent();
					for (var index = 0, length = aContentControls.length; index < length; index++) {
						if(aContentControls[index].getHeight && aContentControls[index].getHeight() !=""){
							// check unit
							var oControlHeight = r.getValueUnit( aContentControls[index].getHeight() );
							if (oControlHeight) {
								if(sDivUnit == ""){
									sDivUnit = oControlHeight.Unit;
								}
								if(sDivUnit != oControlHeight.Unit){
									// different units in content controls not allowed -> use 100%
									sDivUnit = "%";
									sDivHeight = "100";
									break;
								}
								if(oControlHeight.Unit == "%"){
									// give %-height to outer DIV but the reverse %-height to the inner DIV
									// -> height of the content is right
									if(parseFloat(sDivHeight) < parseFloat(oControlHeight.Value)){
										sDivHeight = oControlHeight.Value;
										if(sDivHeight != "100"){
											sInnerDivHeight = 10000 / parseFloat(sDivHeight);
										}
									}
								}// for fix units no calculation needed -DIVs get the size automatically
							}
						}
					}
					if(sDivHeight != "0"){
						rm.addStyle("height", sDivHeight+sDivUnit);
					}
					rm.addStyle("white-space", "normal");
					rm.addStyle("width", "100%");
					rm.writeStyles();
					rm.writeClasses(false);

					rm.write("><div");
					rm.addStyle("overflow", "hidden");
					rm.addStyle("text-overflow", "inherit");
					if(sDivHeight != "0"){
						if(sInnerDivHeight != "0"){
							rm.addStyle("height", sInnerDivHeight + "%");
						}else{
							rm.addStyle("height", "100%");
						}
					}
					rm.addClass("sapUiMltCell");

					// set CSS class for appropriate padding
					rm.addClass(r.getPaddingClass(oMatrixLayoutCell.getPadding()));

					rm.writeStyles();
					rm.writeClasses(false);
					rm.write(">"); // DIV
				}
				var aContentControls = oMatrixLayoutCell.getContent();
				for (var index = 0, length = aContentControls.length; index < length; index++) {
					oRenderManager.renderControl(aContentControls[index]);
				}
				if(oMatrixLayout.getLayoutFixed() && sRowHeight){
					// table layout is fixed
					rm.write("</div></div>");
				}
			}

			// close cell
			rm.write("</td>");
		}

		// close row
		rm.write("</tr>");

		// initialize RowSpanCounter after Row is rendered
		oMatrixLayoutRow.RowSpanCells = undefined;

		if (!bColspanInRow) {
			bDummyRow = false;
		}
	} // end of rows-rendering

	if (bDummyRow && sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version >= 9) {
		// render dummy row to help IE9 to calculate column sizes
		rm.write("<tr style='height:0;'>");
		for ( var i = 0; i < iCols; i++) {
			rm.write("<td></td>");
		}
		rm.write("</tr>");
	}

	// close tbody, close table
	rm.write("</TBODY></TABLE>");

};

/**
 * Returns the value for the HTML "align" attribute according to the given
 * horizontal alignment and RTL mode, or NULL if the HTML default is fine.
 *
 * @param {sap.ui.commons.layout.HAlign} oHAlign
 * @param {boolean} bRTL
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getHAlign = function(oHAlign, bRTL) {
  switch (oHAlign) {
	case sap.ui.commons.layout.HAlign.Begin:
	  return null; // this is the HTML default

	case sap.ui.commons.layout.HAlign.Center:
	  return "center";

	case sap.ui.commons.layout.HAlign.End:
	  return bRTL ? "left" : "right";

	case sap.ui.commons.layout.HAlign.Left:
	  return bRTL ? "left" : null;

	case sap.ui.commons.layout.HAlign.Right:
	  return bRTL ? null : "right";
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getHAlign: oHAlign must be a known value");
  return null;
};

/**
 * Returns the value for the HTML "valign" attribute according to the given
 * vertical alignment, or NULL if the HTML default is fine.
 *
 * @param {sap.ui.commons.layout.VAlign} oVAlign
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getVAlign = function(oVAlign) {
  switch (oVAlign) {
	case sap.ui.commons.layout.VAlign.Bottom:
	  return "bottom";

	case sap.ui.commons.layout.VAlign.Middle:
		return "middle";
	case sap.ui.commons.layout.VAlign.Top:
	  return "top";
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getVAlign: oVAlign must be a known value");
  return null;
};

/**
 * Returns the class name according to the given background design or NULL of
 * none is needed.
 *
 * @param {sap.ui.commons.layout.BackgroundDesign} oBackgroundDesign
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getBackgroundClass = function(oBackgroundDesign) {
  switch (oBackgroundDesign) {
	case sap.ui.commons.layout.BackgroundDesign.Border:
	  return "sapUiMltBgBorder";

	case sap.ui.commons.layout.BackgroundDesign.Fill1:
	  return "sapUiMltBgFill1";

	case sap.ui.commons.layout.BackgroundDesign.Fill2:
	  return "sapUiMltBgFill2";

	case sap.ui.commons.layout.BackgroundDesign.Fill3:
	  return "sapUiMltBgFill3";

	case sap.ui.commons.layout.BackgroundDesign.Header:
	  return "sapUiMltBgHeader";

	case sap.ui.commons.layout.BackgroundDesign.Plain:
	  return "sapUiMltBgPlain";

	case sap.ui.commons.layout.BackgroundDesign.Transparent:
	  return null;
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getBackgroundClass: oBackgroundDesign must be a known value");
  return null;
};

/**
 * Returns the class name according to the given padding or NULL of
 * none is needed.
 *
 * @param {sap.ui.commons.layout.Padding} oPadding
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getPaddingClass = function(oPadding) {
  switch (oPadding) {
	case sap.ui.commons.layout.Padding.None:
	  return "sapUiMltPadNone";

	case sap.ui.commons.layout.Padding.Begin:
	  return "sapUiMltPadLeft"; //TODO OK with RTL?

	case sap.ui.commons.layout.Padding.End:
	  return "sapUiMltPadRight"; //TODO OK with RTL?

	case sap.ui.commons.layout.Padding.Both:
	  return "sapUiMltPadBoth";

	case sap.ui.commons.layout.Padding.Neither:
	  return "sapUiMltPadNeither";
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getPaddingClass: oPadding must be a known value");
  return null;
};

/**
 * Returns the class name according to the given separation or NULL of
 * none is needed.
 *
 * @param {sap.ui.commons.layout.Separation} oSeparation
 * @type string
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getSeparationClass = function(oSeparation) {
  switch (oSeparation) {
	case sap.ui.commons.layout.Separation.None:
	  return null;

	case sap.ui.commons.layout.Separation.Small:
	  return "sapUiMltSepS";

	case sap.ui.commons.layout.Separation.SmallWithLine:
	  return "sapUiMltSepSWL";

	case sap.ui.commons.layout.Separation.Medium:
	  return "sapUiMltSepM";

	case sap.ui.commons.layout.Separation.MediumWithLine:
	  return "sapUiMltSepMWL";

	case sap.ui.commons.layout.Separation.Large:
	  return "sapUiMltSepL";

	case sap.ui.commons.layout.Separation.LargeWithLine:
	  return "sapUiMltSepLWL";
  }

  jQuery.sap.assert(false, "MatrixLayoutRenderer.getSeparationClass: oSeparation must be a known value");
  return null;
};

/**
 * get Value and Unit for size
 */
sap.ui.commons.layout.MatrixLayoutRenderer.getValueUnit = function(sSize) {

	var fValue = 0;
	var sUnit = "";

	var iPos = sSize.search('px');
	if(iPos > -1){
		sUnit = "px";
		fValue = parseInt(sSize.slice(0,iPos), 10);
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('pt');
	if(iPos > -1){
		sUnit = "pt";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('in');
	if(iPos > -1){
		sUnit = "in";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('mm');
	if(iPos > -1){
		sUnit = "mm";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('cm');
	if(iPos > -1){
		sUnit = "cm";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('em');
	if(iPos > -1){
		sUnit = "em";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('ex');
	if(iPos > -1){
		sUnit = "ex";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

	iPos = sSize.search('%');
	if(iPos > -1){
		sUnit = "%";
		fValue = parseFloat(sSize.slice(0,iPos));
		return({ Value: fValue, Unit: sUnit })
	}

};

}; // end of sap/ui/commons/layout/MatrixLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.ResponsiveFlowLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.declare("sap.ui.commons.layout.ResponsiveFlowLayoutRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayoutRenderer'); // unlisted dependency retained


sap.ui.commons.layout.ResponsiveFlowLayoutRenderer = sap.ui.core.Renderer.extend(sap.ui.layout.ResponsiveFlowLayoutRenderer);
}; // end of sap/ui/commons/layout/ResponsiveFlowLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.VerticalLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.layout.VerticalLayout
jQuery.sap.declare("sap.ui.commons.layout.VerticalLayoutRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.VerticalLayoutRenderer'); // unlisted dependency retained


sap.ui.commons.layout.VerticalLayoutRenderer = sap.ui.core.Renderer.extend(sap.ui.layout.VerticalLayoutRenderer);

}; // end of sap/ui/commons/layout/VerticalLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ui.commons (1.22.8)
 */
jQuery.sap.declare("sap.ui.commons.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * Common basic controls, mainly intended for desktop scenarios
 *
 * @namespace
 * @name sap.ui.commons
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ui.commons",
  dependencies : ["sap.ui.core","sap.ui.layout"],
  types: [
    "sap.ui.commons.ButtonStyle",
    "sap.ui.commons.HorizontalDividerHeight",
    "sap.ui.commons.HorizontalDividerType",
    "sap.ui.commons.LabelDesign",
    "sap.ui.commons.MenuBarDesign",
    "sap.ui.commons.MessageType",
    "sap.ui.commons.PaginatorEvent",
    "sap.ui.commons.RatingIndicatorVisualMode",
    "sap.ui.commons.RowRepeaterDesign",
    "sap.ui.commons.SplitterSize",
    "sap.ui.commons.TextViewColor",
    "sap.ui.commons.TextViewDesign",
    "sap.ui.core.TitleLevel",
    "sap.ui.commons.ToolbarDesign",
    "sap.ui.commons.ToolbarSeparatorDesign",
    "sap.ui.commons.TreeSelectionMode",
    "sap.ui.commons.TriStateCheckBoxState",
    "sap.ui.commons.enums.AreaDesign",
    "sap.ui.commons.enums.BorderDesign",
    "sap.ui.commons.enums.Orientation",
    "sap.ui.layout.form.GridElementCells",
    "sap.ui.layout.form.SimpleFormLayout",
    "sap.ui.commons.layout.BackgroundDesign",
    "sap.ui.commons.layout.BorderLayoutAreaTypes",
    "sap.ui.commons.layout.HAlign",
    "sap.ui.commons.layout.Padding",
    "sap.ui.commons.layout.Separation",
    "sap.ui.commons.layout.VAlign"
  ],
  interfaces: [
    "sap.ui.commons.FormattedTextViewControl",
    "sap.ui.commons.ToolbarItem"
  ],
  controls: [
    "sap.ui.commons.Accordion",
    "sap.ui.commons.ApplicationHeader",
    "sap.ui.commons.AutoComplete",
    "sap.ui.commons.Button",
    "sap.ui.commons.Callout",
    "sap.ui.commons.CalloutBase",
    "sap.ui.commons.Carousel",
    "sap.ui.commons.CheckBox",
    "sap.ui.commons.ColorPicker",
    "sap.ui.commons.ComboBox",
    "sap.ui.commons.DatePicker",
    "sap.ui.commons.Dialog",
    "sap.ui.commons.DropdownBox",
    "sap.ui.commons.FileUploader",
    "sap.ui.commons.FormattedTextView",
    "sap.ui.commons.HorizontalDivider",
    "sap.ui.commons.Image",
    "sap.ui.commons.ImageMap",
    "sap.ui.commons.InPlaceEdit",
    "sap.ui.commons.Label",
    "sap.ui.commons.Link",
    "sap.ui.commons.ListBox",
    "sap.ui.commons.Menu",
    "sap.ui.commons.MenuBar",
    "sap.ui.commons.MenuButton",
    "sap.ui.commons.Message",
    "sap.ui.commons.MessageBar",
    "sap.ui.commons.MessageList",
    "sap.ui.commons.MessageToast",
    "sap.ui.commons.Paginator",
    "sap.ui.commons.Panel",
    "sap.ui.commons.PasswordField",
    "sap.ui.commons.ProgressIndicator",
    "sap.ui.commons.RadioButton",
    "sap.ui.commons.RadioButtonGroup",
    "sap.ui.commons.RangeSlider",
    "sap.ui.commons.RatingIndicator",
    "sap.ui.commons.ResponsiveContainer",
    "sap.ui.commons.ResponsiveContainerRange",
    "sap.ui.commons.RichTooltip",
    "sap.ui.commons.RoadMap",
    "sap.ui.commons.RowRepeater",
    "sap.ui.commons.SearchField",
    "sap.ui.commons.SegmentedButton",
    "sap.ui.commons.Slider",
    "sap.ui.commons.Splitter",
    "sap.ui.commons.Tab",
    "sap.ui.commons.TabStrip",
    "sap.ui.commons.TextArea",
    "sap.ui.commons.TextField",
    "sap.ui.commons.TextView",
    "sap.ui.commons.ToggleButton",
    "sap.ui.commons.Toolbar",
    "sap.ui.commons.Tree",
    "sap.ui.commons.TriStateCheckBox",
    "sap.ui.commons.ValueHelpField",
    "sap.ui.commons.form.Form",
    "sap.ui.commons.form.FormLayout",
    "sap.ui.commons.form.GridLayout",
    "sap.ui.commons.form.ResponsiveLayout",
    "sap.ui.commons.form.SimpleForm",
    "sap.ui.commons.layout.AbsoluteLayout",
    "sap.ui.commons.layout.BorderLayout",
    "sap.ui.commons.layout.HorizontalLayout",
    "sap.ui.commons.layout.MatrixLayout",
    "sap.ui.commons.layout.ResponsiveFlowLayout",
    "sap.ui.commons.layout.VerticalLayout"
  ],
  elements: [
    "sap.ui.commons.AccordionSection",
    "sap.ui.commons.Area",
    "sap.ui.commons.FileUploaderParameter",
    "sap.ui.commons.MenuItem",
    "sap.ui.commons.MenuItemBase",
    "sap.ui.commons.MenuTextFieldItem",
    "sap.ui.commons.RoadMapStep",
    "sap.ui.commons.RowRepeaterFilter",
    "sap.ui.commons.RowRepeaterSorter",
    "sap.ui.commons.SearchProvider",
    "sap.ui.commons.Title",
    "sap.ui.commons.ToolbarSeparator",
    "sap.ui.commons.TreeNode",
    "sap.ui.commons.form.FormContainer",
    "sap.ui.commons.form.FormElement",
    "sap.ui.commons.form.GridContainerData",
    "sap.ui.commons.form.GridElementData",
    "sap.ui.commons.layout.BorderLayoutArea",
    "sap.ui.commons.layout.MatrixLayoutCell",
    "sap.ui.commons.layout.MatrixLayoutRow",
    "sap.ui.commons.layout.PositionContainer",
    "sap.ui.commons.layout.ResponsiveFlowLayoutData"
  ],
  version: "1.22.8"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.ButtonStyle.
jQuery.sap.declare("sap.ui.commons.ButtonStyle");


/**
 * @class different styles for a button.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.ButtonStyle = {

	/**
	 * Button is emphasized.
	 * @public
	 */
	Emph : "Emph",

	/**
	 * Accept button (normally green).
	 * @public
	 */
	Accept : "Accept",

	/**
	 * Reject button (normally red).
	 * @public
	 */
	Reject : "Reject",

	/**
	 * default style (no special styling).
	 * @public
	 */
	Default : "Default"

};
/**
 * 
 *   		Marker interface for common controls which are suitable for use within a FormattedTextView.
 *   
 *
 * @author SAP
 * @name sap.ui.commons.FormattedTextViewControl
 * @interface
 * @public
 */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.HorizontalDividerHeight.
jQuery.sap.declare("sap.ui.commons.HorizontalDividerHeight");


/**
 * @class Enumeration of possible HorizontalDivider height settings.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.HorizontalDividerHeight = {

	/**
	 * Divider gets no top and bottom margin.
	 * @public
	 */
	Ruleheight : "Ruleheight",

	/**
	 * Divider gets a small top and bottom margin.
	 * @public
	 */
	Small : "Small",

	/**
	 * Divider gets a medium top and bottom margin.
	 * @public
	 */
	Medium : "Medium",

	/**
	 * Divider gets a large top and bottom margin.
	 * @public
	 */
	Large : "Large"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.HorizontalDividerType.
jQuery.sap.declare("sap.ui.commons.HorizontalDividerType");


/**
 * @class Enumeration of possible HorizontalDivider types.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.HorizontalDividerType = {

	/**
	 * Type Area
	 * @public
	 */
	Area : "Area",

	/**
	 * Type Page
	 * @public
	 */
	Page : "Page"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.LabelDesign.
jQuery.sap.declare("sap.ui.commons.LabelDesign");


/**
 * @class Available label display modes.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.LabelDesign = {

	/**
	 * Displays the label in bold.
	 * @public
	 */
	Bold : "Bold",

	/**
	 * Displays the label in normal mode.
	 * @public
	 */
	Standard : "Standard"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.MenuBarDesign.
jQuery.sap.declare("sap.ui.commons.MenuBarDesign");


/**
 * @class Determines the visual design of a MenuBar. The feature might be not supported by all themes.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.MenuBarDesign = {

	/**
	 * The MenuBar appears in standard design.
	 * @public
	 */
	Standard : "Standard",

	/**
	 * The MenuBar appears in header design.
	 * @public
	 */
	Header : "Header"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.MessageType.
jQuery.sap.declare("sap.ui.commons.MessageType");


/**
 * @class [Enter description for MessageType]
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.MessageType = {

	/**
	 * Error message
	 * @public
	 */
	Error : "Error",

	/**
	 * Warning message
	 * @public
	 */
	Warning : "Warning",

	/**
	 * Successful message
	 * @public
	 */
	Success : "Success"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.PaginatorEvent.
jQuery.sap.declare("sap.ui.commons.PaginatorEvent");


/**
 * @class Disctinct paginator event types
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.PaginatorEvent = {

	/**
	 * First page event
	 * @public
	 */
	First : "First",

	/**
	 * Previous page event
	 * @public
	 */
	Previous : "Previous",

	/**
	 * Go to page event
	 * @public
	 */
	Goto : "Goto",

	/**
	 * Next page event
	 * @public
	 */
	Next : "Next",

	/**
	 * Last page event
	 * @public
	 */
	Last : "Last"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.RatingIndicatorVisualMode.
jQuery.sap.declare("sap.ui.commons.RatingIndicatorVisualMode");


/**
 * @class Possible values for the visualization of float values in the RatingIndicator Control.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.RatingIndicatorVisualMode = {

	/**
	 * Values are rounded to the nearest integer value (e.g. 1.7 -> 2).
	 * @public
	 */
	Full : "Full",

	/**
	 * Values are rounded to the nearest half value (e.g. 1.7 -> 1.5).
	 * @public
	 */
	Half : "Half",

	/**
	 * Values are not rounded.
	 * @public
	 */
	Continuous : "Continuous"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.RowRepeaterDesign.
jQuery.sap.declare("sap.ui.commons.RowRepeaterDesign");


/**
 * @class Determines the visual design of a RowRepeater.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.RowRepeaterDesign = {

	/**
	 * The RowRepeater header and footer elements, as well as the row container background, appear solid.
	 * @public
	 */
	Standard : "Standard",

	/**
	 * The RowRepeater header and footer elements, as well as the row container background, appear transparent.
	 * @public
	 */
	Transparent : "Transparent",

	/**
	 * The RowRepeater will be displayed without header, toolbar or footer. Background will be transparent.
	 * @public
	 */
	BareShell : "BareShell"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

// Provides data type sap.ui.commons.SplitterSize
jQuery.sap.declare('sap.ui.commons.SplitterSize');
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained


/**
 * @class A string type that represents subset of CSS size values. For the Splitter only px and % are allowed.
 *
 * @author SAP AG
 * @static
 * @public
 */
sap.ui.commons.SplitterSize = sap.ui.base.DataType.createType('sap.ui.commons.SplitterSize', {
    isValid : function(vValue) {
      return /^((0*|([0-9]+|[0-9]*\.[0-9]+)([pP][xX]|%)))$/.test(vValue);
    }

  },
  sap.ui.base.DataType.getType('string')
);

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.TextViewColor.
jQuery.sap.declare("sap.ui.commons.TextViewColor");


/**
 * @class Semantic Colors of a text.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.TextViewColor = {

	/**
	 * Default color
	 * @public
	 */
	Default : "Default",

	/**
	 * Positive color
	 * @public
	 */
	Positive : "Positive",

	/**
	 * Negative color
	 * @public
	 */
	Negative : "Negative",

	/**
	 * Critical color
	 * @public
	 */
	Critical : "Critical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.TextViewDesign.
jQuery.sap.declare("sap.ui.commons.TextViewDesign");


/**
 * @class Designs for TextView.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.TextViewDesign = {

	/**
	 * Displays the text in standard letters.
	 * @public
	 */
	Standard : "Standard",

	/**
	 * Displays the text in bold letters
	 * @public
	 */
	Bold : "Bold",

	/**
	 * Displays the text in header 1 letters.
	 * @public
	 */
	H1 : "H1",

	/**
	 * Displays the text in header 2 letters.
	 * @public
	 */
	H2 : "H2",

	/**
	 * Displays the text in header 3 letters.
	 * @public
	 */
	H3 : "H3",

	/**
	 * Displays the text in header 4 letters.
	 * @public
	 */
	H4 : "H4",

	/**
	 * Displays the text in header 5 letters.
	 * @public
	 */
	H5 : "H5",

	/**
	 * Displays the text in header 6 letters.
	 * @public
	 */
	H6 : "H6",

	/**
	 * Displays the text in italic letters
	 * @public
	 */
	Italic : "Italic",

	/**
	 * Displays the text in smaller letters.
	 * @public
	 */
	Small : "Small",

	/**
	 * Displays the text in monospace letters.
	 * @public
	 */
	Monospace : "Monospace",

	/**
	 * underlined Text
	 * @public
	 */
	Underline : "Underline"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.ToolbarDesign.
jQuery.sap.declare("sap.ui.commons.ToolbarDesign");


/**
 * @class Determines the visual design of a Toolbar.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.ToolbarDesign = {

	/**
	 * The toolbar elements such as buttons for example have their normal visual design, and the toolbar appears solid.
	 * The feature might be not supported by all themes.
	 * @public
	 */
	Standard : "Standard",

	/**
	 * The controls included in the toolbar have a normal visual design where the toolbar appears transparent.
	 * The feature might be not supported by all themes.
	 * 
	 * @public
	 */
	Transparent : "Transparent",

	/**
	 * The included controls have a very light appearance. The feature might be not supported by all themes.
	 * @public
	 */
	Flat : "Flat"

};
/**
 * 
 *   Marker interface for common controls which are suitable for use within a toolbar.
 *   The most prominent example of a toolbar item is a button which is mostly used with
 *   an icon instead of a text caption.
 *   Toolbar items must have a fixed height compatible with the toolbar being
 *   a single horizontal row. They can refer to the toolbar's marker class
 *   "sapUiTb" to adjust their own theming when used inside a toolbar.
 *   
 *
 * @author d029921
 * @name sap.ui.commons.ToolbarItem
 * @interface
 * @public
 */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.ToolbarSeparatorDesign.
jQuery.sap.declare("sap.ui.commons.ToolbarSeparatorDesign");


/**
 * @class Design of the Toolbar Separator.
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.ToolbarSeparatorDesign = {

	/**
	 * Standard Separator between controls
	 * @public
	 */
	Standard : "Standard",

	/**
	 * 100% height Separator before and after specific controls
	 * @public
	 */
	FullHeight : "FullHeight"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.TreeSelectionMode.
jQuery.sap.declare("sap.ui.commons.TreeSelectionMode");


/**
 * @class Selection mode of the tree
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.TreeSelectionMode = {

	/**
	 * Select multiple rows at a time.
	 * @public
	 */
	Multi : "Multi",

	/**
	 * Select one row at a time.
	 * @public
	 */
	Single : "Single",

	/**
	 * No rows can be selected.
	 * @public
	 */
	None : "None"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.TriStateCheckBoxState.
jQuery.sap.declare("sap.ui.commons.TriStateCheckBoxState");


/**
 * @class States for TriStateCheckBox
 *
 * @version 1.22.8
 * @static
 * @public
 * @since 1.7.2
 */
sap.ui.commons.TriStateCheckBoxState = {

	/**
	 * unchecked, default value for tri-state checkbox
	 * @public
	 */
	Unchecked : "Unchecked",

	/**
	 * mixed state for tri-state checkbox
	 * @public
	 */
	Mixed : "Mixed",

	/**
	 * checked value for tri-state checkbox
	 * @public
	 */
	Checked : "Checked"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.enums.AreaDesign.
jQuery.sap.declare("sap.ui.commons.enums.AreaDesign");


/**
 * @class Value set for the background design of areas
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.enums.AreaDesign = {

	/**
	 * Shows the area in a plain look
	 * @public
	 */
	Plain : "Plain",

	/**
	 * Shows the label in a filled look
	 * @public
	 */
	Fill : "Fill",

	/**
	 * Shows the background as transparent
	 * @public
	 */
	Transparent : "Transparent"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.enums.BorderDesign.
jQuery.sap.declare("sap.ui.commons.enums.BorderDesign");


/**
 * @class Value set for the border design of areas
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.enums.BorderDesign = {

	/**
	 * Draws the border as a box around the area
	 * @public
	 */
	Box : "Box",

	/**
	 * Suppresses the border
	 * @public
	 */
	None : "None"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.enums.Orientation.
jQuery.sap.declare("sap.ui.commons.enums.Orientation");


/**
 * @class Orientation of a UI element
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.enums.Orientation = {

	/**
	 * Horizontal orientation
	 * @public
	 */
	horizontal : "horizontal",

	/**
	 * Vertical orientation
	 * @public
	 */
	vertical : "vertical"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.BackgroundDesign.
jQuery.sap.declare("sap.ui.commons.layout.BackgroundDesign");


/**
 * @class
 * Background design (i.e. color), e.g. of a layout cell.
 * 
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.layout.BackgroundDesign = {

	/**
	 * 
	 * A background design suitable for borders.
	 * 
	 * @public
	 */
	Border : "Border",

	/**
	 * 
	 * An opaque background design that looks dark filled.
	 * 
	 * @public
	 */
	Fill1 : "Fill1",

	/**
	 * 
	 * An opaque background design that looks medium filled.
	 * 
	 * @public
	 */
	Fill2 : "Fill2",

	/**
	 * 
	 * An opaque background design that looks light filled.
	 * 
	 * @public
	 */
	Fill3 : "Fill3",

	/**
	 * 
	 * A background design suitable for headers.
	 * 
	 * @public
	 */
	Header : "Header",

	/**
	 * 
	 * A plain but opaque background design.
	 * 
	 * @public
	 */
	Plain : "Plain",

	/**
	 * 
	 * A transparent background.
	 * 
	 * @public
	 */
	Transparent : "Transparent"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.BorderLayoutAreaTypes.
jQuery.sap.declare("sap.ui.commons.layout.BorderLayoutAreaTypes");


/**
 * @class The type (=position) of a BorderLayoutArea
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.layout.BorderLayoutAreaTypes = {

	/**
	 * Value to identify the top area.
	 * @public
	 */
	top : "top",

	/**
	 * Value to identify the begin area.
	 * @public
	 */
	begin : "begin",

	/**
	 * Value to identify the center area.
	 * @public
	 */
	center : "center",

	/**
	 * Value to identify the end area.
	 * @public
	 */
	end : "end",

	/**
	 * Value to identify the bottom area.
	 * @public
	 */
	bottom : "bottom"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.HAlign.
jQuery.sap.declare("sap.ui.commons.layout.HAlign");


/**
 * @class
 * Horizontal alignment, e.g. of a layout cell's content within the cell's borders.
 * Note that some values depend on the current locale's writing direction while
 * others do not.
 * 
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.layout.HAlign = {

	/**
	 * 
	 * Aligned towards the beginning of a line, in the current locale's writing direction.
	 * 
	 * @public
	 */
	Begin : "Begin",

	/**
	 * 
	 * Horizontally centered.
	 * 
	 * @public
	 */
	Center : "Center",

	/**
	 * 
	 * Aligned towards the end of a line, in the current locale's writing direction.
	 * 
	 * @public
	 */
	End : "End",

	/**
	 * 
	 * Left aligned, regardless of the current locale's writing direction.
	 * 
	 * @public
	 */
	Left : "Left",

	/**
	 * 
	 * Right aligned, regardless of the current locale's writing direction.
	 * 
	 * @public
	 */
	Right : "Right"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.Padding.
jQuery.sap.declare("sap.ui.commons.layout.Padding");


/**
 * @class
 * Padding, e.g. of a layout cell's content within the cell's borders.
 * Note that all options except "None" include a padding of 2px at the top and
 * bottom, and differ only in the presence of a 4px padding towards the beginning
 * or end of a line, in the current locale's writing direction.
 * 
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.layout.Padding = {

	/**
	 * 
	 * No padding at all.
	 * 
	 * @public
	 */
	None : "None",

	/**
	 * 
	 * Top and bottom padding of 2px.
	 * Padding of 4px towards the beginning of a line, in the current locale's
	 * writing direction, but none towards its end.
	 * 
	 * @public
	 */
	Begin : "Begin",

	/**
	 * 
	 * Top and bottom padding of 2px.
	 * Padding of 4px towards the end of a line, in the current locale's
	 * writing direction, but none towards its beginning.
	 * 
	 * @public
	 */
	End : "End",

	/**
	 * 
	 * Top and bottom padding of 2px.
	 * Padding of 4px towards both the beginning and end of a line.
	 * 
	 * @public
	 */
	Both : "Both",

	/**
	 * 
	 * Top and bottom padding of 2px.
	 * No padding towards neither the beginning nor end of a line.
	 * 
	 * @public
	 */
	Neither : "Neither"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.Separation.
jQuery.sap.declare("sap.ui.commons.layout.Separation");


/**
 * @class
 * Separation, e.g. of a layout cell from its neighbor, via a vertical gutter of
 * defined width, with or without a vertical line in its middle.
 * 
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.layout.Separation = {

	/**
	 * 
	 * No gutter at all (0px), and without a vertical line, of course.
	 * 
	 * @public
	 */
	None : "None",

	/**
	 * 
	 * A small (17px) vertical gutter without a vertical line.
	 * 
	 * @public
	 */
	Small : "Small",

	/**
	 * 
	 * A small (17px) vertical gutter with a vertical line in its middle.
	 * 
	 * @public
	 */
	SmallWithLine : "SmallWithLine",

	/**
	 * 
	 * A medium (31px) vertical gutter without a vertical line.
	 * 
	 * @public
	 */
	Medium : "Medium",

	/**
	 * 
	 * A medium (31px) vertical gutter with a vertical line in its middle.
	 * 
	 * @public
	 */
	MediumWithLine : "MediumWithLine",

	/**
	 * 
	 * A large (63px) vertical gutter without a vertical line.
	 * 
	 * @public
	 */
	Large : "Large",

	/**
	 * 
	 * A large (63px) vertical gutter with a vertical line in its middle.
	 * 
	 * @public
	 */
	LargeWithLine : "LargeWithLine"

};
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.commons.layout.VAlign.
jQuery.sap.declare("sap.ui.commons.layout.VAlign");


/**
 * @class
 * Vertical alignment, e.g. of a layout cell's content within the cell's borders.
 * 
 *
 * @version 1.22.8
 * @static
 * @public
 */
sap.ui.commons.layout.VAlign = {

	/**
	 * 
	 * Aligned at the bottom.
	 * 
	 * @public
	 */
	Bottom : "Bottom",

	/**
	 * 
	 * Vertically centered.
	 * 
	 * @public
	 */
	Middle : "Middle",

	/**
	 * 
	 * Aligned at the top.
	 * 
	 * @public
	 */
	Top : "Top"

};

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

// lazy imports for MessageBox
sap.ui.lazyRequire("sap.ui.commons.MessageBox", "alert confirm show");

sap.ui.lazyRequire("sap.ui.commons.MenuItemBase", "new extend getMetadata");

sap.ui.commons.Orientation = {
	// Map the Orientation enum to new enums in core
	"Vertical"   : sap.ui.core.Orientation.Vertical,
	"Horizontal" : sap.ui.core.Orientation.Horizontal,
	// Map the Orientation enum to new enums with uppercase
	"vertical"   : sap.ui.core.Orientation.Vertical,
	"horizontal" : sap.ui.core.Orientation.Horizontal
};

//map the old commons type to new ones after move
sap.ui.commons.form.GridElementCells = sap.ui.layout.form.GridElementCells;
sap.ui.commons.form.SimpleFormLayout = sap.ui.layout.form.SimpleFormLayout;
sap.ui.commons.TitleLevel = sap.ui.core.TitleLevel;

// implement Form helper factory with common controls
if (!sap.ui.layout.form.FormHelper || !sap.ui.layout.form.FormHelper.bFinal) {
	sap.ui.layout.form.FormHelper = {
		createLabel: function(sText){
			return new sap.ui.commons.Label({text: sText});
		},
		createButton: function(sId, fPressFunction, oThis){
			var oButton = new sap.ui.commons.Button(sId,{
				lite: true
				});
			oButton.attachEvent('press', fPressFunction, oThis); // attach event this way to have the right this-reference in handler
			return oButton;
		},
		setButtonContent: function(oButton, sText, sTooltip, sIcon, sIconHovered){
			oButton.setText(sText);
			oButton.setTooltip(sTooltip);
			oButton.setIcon(sIcon);
			oButton.setIconHovered(sIconHovered);
		},
		addFormClass: function(){ return null; },
		bArrowKeySupport: true, /* enables the keyboard support for arrow keys */
		bFinal: false /* to allow mobile to overwrite  */
	};
}

//implement FileUploader helper factory with commons controls
jQuery.sap.setObject("sap.ui.unified.FileUploaderHelper", {
	createTextField: function(sId){
		var oTextField = new sap.ui.commons.TextField(sId);
		return oTextField;
	},
	setTextFieldContent: function(oTextField, sWidth){
		oTextField.setWidth(sWidth);
	},
	createButton: function(){
		var oButton = new sap.ui.commons.Button();
		return oButton;
	},
	bFinal: false /* to allow mobile to overwrite  */
});

//implement table helper factory with m controls
//possible is set before layout lib is loaded.
jQuery.sap.setObject("sap.ui.table.TableHelper", {
	createLabel: function(mConfig){
		return new sap.ui.commons.Label(mConfig);
	},
	createTextView: function(mConfig){
		return new sap.ui.commons.TextView(mConfig);
	},
	createTextField: function(mConfig){
		return new sap.ui.commons.TextField(mConfig);
	},
	createImage: function(mConfig){
		return new sap.ui.commons.Image(mConfig);
	},
	bFinal: false /* to allow mobile to overwrite  */
});

}; // end of sap/ui/commons/library.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Accordion') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Accordion.
jQuery.sap.declare("sap.ui.commons.Accordion");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Accordion.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '200px')</li>
 * <li>{@link #getOpenedSectionsId openedSectionsId} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSections sections} <strong>(default aggregation)</strong> : sap.ui.commons.AccordionSection[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.Accordion#event:sectionOpen sectionOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.Accordion#event:sectionClose sectionClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.Accordion#event:sectionsReorder sectionsReorder} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Contains N sections which act as containers for any library controls
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Accordion
 */
sap.ui.core.Control.extend("sap.ui.commons.Accordion", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"openSection", "closeSection"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '200px'},
		"openedSectionsId" : {type : "string", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "sections",
	aggregations : {
    	"sections" : {type : "sap.ui.commons.AccordionSection", multiple : true, singularName : "section"}
	},
	events : {
		"sectionOpen" : {}, 
		"sectionClose" : {}, 
		"sectionsReorder" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Accordion with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Accordion.extend
 * @function
 */

sap.ui.commons.Accordion.M_EVENTS = {'sectionOpen':'sectionOpen','sectionClose':'sectionClose','sectionsReorder':'sectionsReorder'};


/**
 * Getter for property <code>width</code>.
 * When the width specified is smaller than a section content, a horizontal scroll bar is provided.
 *
 * Default value is <code>200px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Accordion#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>200px</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#setWidth
 * @function
 */


/**
 * Getter for property <code>openedSectionsId</code>.
 * Section IDs that shall be opened by default at application start.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>openedSectionsId</code>
 * @public
 * @name sap.ui.commons.Accordion#getOpenedSectionsId
 * @function
 */

/**
 * Setter for property <code>openedSectionsId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sOpenedSectionsId  new value for property <code>openedSectionsId</code>
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#setOpenedSectionsId
 * @function
 */


/**
 * Getter for aggregation <code>sections</code>.<br/>
 * Empty container used to display any library controls.
 * 
 * <strong>Note</strong>: this is the default aggregation for Accordion.
 * @return {sap.ui.commons.AccordionSection[]}
 * @public
 * @name sap.ui.commons.Accordion#getSections
 * @function
 */


/**
 * Inserts a section into the aggregation named <code>sections</code>.
 *
 * @param {sap.ui.commons.AccordionSection}
 *          oSection the section to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the section should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the section is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the section is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#insertSection
 * @function
 */

/**
 * Adds some section <code>oSection</code> 
 * to the aggregation named <code>sections</code>.
 *
 * @param {sap.ui.commons.AccordionSection}
 *            oSection the section to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#addSection
 * @function
 */

/**
 * Removes an section from the aggregation named <code>sections</code>.
 *
 * @param {int | string | sap.ui.commons.AccordionSection} vSection the section to remove or its index or id
 * @return {sap.ui.commons.AccordionSection} the removed section or null
 * @public
 * @name sap.ui.commons.Accordion#removeSection
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>sections</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.AccordionSection[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Accordion#removeAllSections
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.AccordionSection</code> in the aggregation named <code>sections</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.AccordionSection}
 *            oSection the section whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Accordion#indexOfSection
 * @function
 */
	

/**
 * Destroys all the sections in the aggregation 
 * named <code>sections</code>.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#destroySections
 * @function
 */


/**
 * Event is triggered when the user opens a section. 
 *
 * @name sap.ui.commons.Accordion#sectionOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.openSectionId ID of the opened section
 * @param {string[]} oControlEvent.getParameters.closeSectionIds IDs of the sections that shall be closed. Can be initial in the case of no previously opened section.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'sectionOpen' event of this <code>sap.ui.commons.Accordion</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Accordion</code>.<br/> itself. 
 *  
 * Event is triggered when the user opens a section. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Accordion</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#attachSectionOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'sectionOpen' event of this <code>sap.ui.commons.Accordion</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#detachSectionOpen
 * @function
 */

/**
 * Fire event sectionOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openSectionId' of type <code>string</code> ID of the opened section</li>
 * <li>'closeSectionIds' of type <code>string[]</code> IDs of the sections that shall be closed. Can be initial in the case of no previously opened section.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Accordion#fireSectionOpen
 * @function
 */


/**
 * Event is triggered when the user closes a section. 
 *
 * @name sap.ui.commons.Accordion#sectionClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.closeSectionId ID of the closed section
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'sectionClose' event of this <code>sap.ui.commons.Accordion</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Accordion</code>.<br/> itself. 
 *  
 * Event is triggered when the user closes a section. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Accordion</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#attachSectionClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'sectionClose' event of this <code>sap.ui.commons.Accordion</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#detachSectionClose
 * @function
 */

/**
 * Fire event sectionClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'closeSectionId' of type <code>string</code> ID of the closed section</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Accordion#fireSectionClose
 * @function
 */


/**
 * Triggered when the user changes the position of a section. 
 *
 * @name sap.ui.commons.Accordion#sectionsReorder
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.movedSectionId ID of the moved section.
 * @param {int} oControlEvent.getParameters.newIndex New index of the moved section.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'sectionsReorder' event of this <code>sap.ui.commons.Accordion</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Accordion</code>.<br/> itself. 
 *  
 * Triggered when the user changes the position of a section. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Accordion</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#attachSectionsReorder
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'sectionsReorder' event of this <code>sap.ui.commons.Accordion</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Accordion#detachSectionsReorder
 * @function
 */

/**
 * Fire event sectionsReorder to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'movedSectionId' of type <code>string</code> ID of the moved section.</li>
 * <li>'newIndex' of type <code>int</code> New index of the moved section.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Accordion} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Accordion#fireSectionsReorder
 * @function
 */


/**
 * Opens a section.
 *
 * @name sap.ui.commons.Accordion.prototype.openSection
 * @function
 * @param {string} 
 *         sSectionId
 *         Id of the section that shall be opened

 * @type void
 * @public
 */


/**
 * Closes a section, and opens the default one
 *
 * @name sap.ui.commons.Accordion.prototype.closeSection
 * @function
 * @param {string} 
 *         sSectionId
 *         Id of the section that shall be closed

 * @type void
 * @public
 */


// Start of sap\ui\commons\Accordion.js
/***************************************************
* ACCORDION CONTROL - JAVASCRIPT FUNCTIONS
*
* An accordion is a control that applications can use
* to define N sections in which they can display N
* elements of X types. One section can be opened at
* once and one section is always opened. If the application
* does not provide a default section to be opened,
* the first enabled section is opened by default.
****************************************************/
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained

jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-sortable'); // unlisted dependency retained


//*"*************************************************
//* CONSTANTS DECLARATION - CLASS ATTRIBUTES
//***************************************************
sap.ui.commons.Accordion.CARD_1   = 1;
sap.ui.commons.Accordion.CARD_0_1 = 2;
sap.ui.commons.Accordion.CARD_0_N = 3;
sap.ui.commons.Accordion.CARD_1_N = 4;
sap.ui.commons.Accordion.KEY_TIMEOUT = 500;

sap.ui.commons.Accordion.aAccordionsToReplace = [];
sap.ui.commons.Accordion.aAccordions = [];

//***************************************************
//* INITIALIZATION
//***************************************************
/**
* Initialization of the Accordion control
* @private
*/
sap.ui.commons.Accordion.prototype.init = function(){

   this.bInitialRendering = true;

   // By default, only one section is opened
   this.activationMode = sap.ui.commons.Accordion.CARD_1;

   // Get messagebundle.properties for sap.ui.commons
   this.rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

   // Array used to store all section titles
   this.aSectionTitles = [];

   sap.ui.commons.Accordion.aAccordions.push(this);

};

/***********************************************************************************
* KEYBOARD NAVIGATION
* Note that we rely on 2 mechanisms to support all keyboard shortcuts needed.
* First, for control activation (open/close sections), we rely on UI5 pseudo-events
* which are called before the browser event. These events all start with onsap_xyz.
* For other navigation purposes such as next/previous element, we use itemNavigation.
* Note that to enter the section's content, one needs to use the TAB key which
* will take the browser's default behavior.
***********************************************************************************/

/**
 * SPACE key behavior
 * Opens the section or activates the UI element on SPACE key
 * @param {jQuery.Event} oEvent Browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapspace = function(oEvent){

	this.onclick(oEvent);

};

/**
 * PAGE DOWN key behavior
 * Beware that these shortcuts are used by FF3.6 to navigate between opened tabs in the browsers.
 * So this is declared as a limitation, but behaves as expected in Safari 5
 * Opens the next section and focuses the first element of this opened section
 * @param {jQuery.Event} oEvent Browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.onsappagedownmodifiers = function(oEvent){

	// Get all the sections
	var target = jQuery(oEvent.target);
	var aParents = target.parentsUntil('.sapUiAcd');

	// Get the next section
	var oDOMSection = aParents[aParents.length - 1];
	var oNextSection = jQuery(oDOMSection).next();

	// Skip all disabled sections
	while(!this.getCorrespondingSection(oNextSection[0]).getEnabled()){
		oNextSection = oNextSection.next();
	}
	oNextSection = oNextSection[0];


	// Open the next enabled section
	this.openSection(oNextSection.id);

	// Drill down the DOM to get the next section and focus on its first active element
	var oSection = this.getCorrespondingSection(oNextSection);
	oSection.focusFirstControl();

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

};

/**
 * PAGE UP key behavior
 * Beware that these shortcuts are used by FF3.6 to navigate between opened TABS in the browsers.
 * So this is declared as a limitation, but behaves as expected in Safari 5
 * Opens the previous section and focuses the first element of this opened section
 * @param [jQuery.Event} oEvent Browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.onsappageupmodifiers = function(oEvent){

	// Get all the sections
	var target = jQuery(oEvent.target);
	var aParents = target.parentsUntil('.sapUiAcd');

	// Get the previous section
	var oSection = aParents[aParents.length - 1];
	var oNextSection = jQuery(oSection).prev();

	// Skip all disabled sections
	while(!this.getCorrespondingSection(oNextSection[0]).getEnabled()){
		oNextSection = oNextSection.prev();
	}
	oNextSection = oNextSection[0];

	// Open the previously enabled section
	this.openSection(oNextSection.id);

	// Drill down the DOM to get the previous section and focus its first active element
	var oSection = this.getCorrespondingSection(oNextSection);
	if(oSection){
		oSection.focusFirstControl();
	}

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

};

sap.ui.commons.Accordion.prototype.onsapupmodifiers = function(oEvent){

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

	// Get the section to move
	var aParents	= jQuery(oEvent.target).parentsUntil('.sapUiAcd');
	var oDomSection = aParents[aParents.length - 1];

	// Is the section if the first one. if so, no up possible!
	if(this.__idxOfSec(oDomSection.id)==0){
		return;
	}

	var oDomTargetSection = jQuery(oDomSection).prev().first()[0];
	var bInsertFirst = false;
	if(this.__idxOfSec(oDomTargetSection.id)==0){
		bInsertFirst = true;
	}

	this.dropSection(oDomSection,oDomTargetSection,bInsertFirst);

	// Ensure the focus is on the right section
	var aSections = this.getSections();
	aSections[this.__idxOfSec(oDomSection.id)].focus();

};

sap.ui.commons.Accordion.prototype.onsapdownmodifiers = function(oEvent){

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

	//Get the section to move
	var aParents	= jQuery(oEvent.target).parentsUntil('.sapUiAcd');
	var oDomSection = aParents[aParents.length - 1];

	//Is the section if the first one. if so, no up possible!
	if(this.__idxOfSec(oDomSection.id)==this.getSections().length-1){
		return;
	}

	var oDomTargetSection = jQuery(oDomSection).next().first()[0];
	this.dropSection(oDomSection,oDomTargetSection,false);

	//Ensure the focus is on the right section
	var aSections = this.getSections();
	aSections[this.__idxOfSec(oDomSection.id)].focus();

};

/**
 * Called when the user presses the UP arrow key
 * @param oEvent The event triggered by the user
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapprevious = function(oEvent){

	if (oEvent.srcControl.getMetadata().getName() != "sap.ui.commons.AccordionSection" ) {
		return;
	}

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

	//Get the current section
	var oCurrentSection = this.getCurrentSection(oEvent.target);

	//Extra check to see of we are on the first section, if yes, set the focus on this one
	if (oCurrentSection.id == this.getSections()[0].getId()){
		var oNextFocusableElement = jQuery(oCurrentSection).find("div.sapUiAcdSectionHdr");
		if (oNextFocusableElement){
			oNextFocusableElement.focus();
		}
	}

	//Simply set the focus on the next section if any
	if (oCurrentSection){

		//Get the previous section that is enabled, disregard disabled sections
		var oPreviousSection = jQuery(oCurrentSection).prev();
		while (oPreviousSection && jQuery(oPreviousSection).hasClass("sapUiAcdSectionDis")){
			oPreviousSection = jQuery(oPreviousSection).prev();
		}
		if (oPreviousSection){
			var oNextFocusableElement = jQuery(oPreviousSection).find("div.sapUiAcdSectionHdr");
			if (oNextFocusableElement){
				oNextFocusableElement.focus();
			}
		}
	}

};

/**
 * Called when the user presses the down arrow key
 * @param {jQuery.Event} oEvent The event triggered by the user
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapnext = function(oEvent){

	if (oEvent.srcControl.getMetadata().getName() != "sap.ui.commons.AccordionSection" ) {
		return;
	}

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

	//Get the current section
	var oCurrentSection = this.getCurrentSection(oEvent.target);

	//Simply set the focus on the next section if any
	if (oCurrentSection){

		//Get the next section that is enabled, disregard disabled sections
		var oNextSection = jQuery(oCurrentSection).next();
		while (oNextSection && jQuery(oNextSection).hasClass("sapUiAcdSectionDis")){
			oNextSection = jQuery(oNextSection).next();
		}
		if (oNextSection){
			var oNextFocusableElement = jQuery(oNextSection).find("div.sapUiAcdSectionHdr");
			if (oNextFocusableElement){
				oNextFocusableElement.focus();
			}
		}
	}

};

/**
 * Called when the user presses the home key
 * @param oEvent The event triggered by the user
 * @private
 */
sap.ui.commons.Accordion.prototype.onsaphome = function(oEvent){

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

	//Get the current first section id
	var oFocusableSection = this.getSections()[0].getDomRef();

	//If the section is disabled, get the next section that is enabled, disregard disabled sections
	if (jQuery(oFocusableSection).hasClass("sapUiAcdSectionDis")){
		oFocusableSection = jQuery(oFocusableSection).next();
		while (oFocusableSection && jQuery(oFocusableSection).hasClass("sapUiAcdSectionDis")){
			oFocusableSection = jQuery(oFocusableSection).next();
		}
	}

	//We found one focusable section
	if (oFocusableSection){
		var oNextFocusableElement = jQuery(oFocusableSection).find("div.sapUiAcdSectionHdr");
		if (oNextFocusableElement){
			oNextFocusableElement.focus();
		}
	}

};

/**
 * Called when the user presses the end key
 * @param oEvent The event triggered by the user
 * @private
 */
sap.ui.commons.Accordion.prototype.onsapend = function(oEvent){

	// Stop the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

	//Get the last section
	var iNbSections = this.getSections().length;
	var oFocusableSection = this.getSections()[iNbSections-1].getDomRef();

	//If the section is disabled, get the previous section that is enabled, disregard disabled sections
	if (jQuery(oFocusableSection).hasClass("sapUiAcdSectionDis")){
		oFocusableSection = jQuery(oFocusableSection).prev();
		while (oFocusableSection && jQuery(oFocusableSection).hasClass("sapUiAcdSectionDis")){
			oFocusableSection = jQuery(oFocusableSection).prev();
		}
	}

	//We found one focusable section
	if (oFocusableSection){
		var oNextFocusableElement = jQuery(oFocusableSection).find("div.sapUiAcdSectionHdr");
		if (oNextFocusableElement){
			oNextFocusableElement.focus();
		}
	}

};

/**
 * Utility to get the current section
 * @param {Element} oDomElement The current DOM element from which an event is triggered
 * @private
 */
sap.ui.commons.Accordion.prototype.getCurrentSection = function(oDomElement){

	//Use jQuery to get the parent section
	var oCurrentSection = oDomElement;
	while (!jQuery(oCurrentSection).hasClass("sapUiAcdSection")){
		oCurrentSection = jQuery(oCurrentSection).parent();
	}
	return oCurrentSection[0];

};

/***********************************************************************************
 * DRAG AND DROP
 * Drag and drop is used to move a single section at once up/down in the accordion
 * This can be achieved via a mouse click (down/up) and also via some keyboard
 * shortcuts (Ctrl-up and Ctrl-down)
 ***********************************************************************************/
/**
 * Drops a section to a new index
 * @param {Element} oDomSection	Section to drop to a new index
 * @param {Element} oDomTargetSection Section after which to drop the section
 * @param {boolean} bDropFirst If true, drop at first place
 * @private
 */
sap.ui.commons.Accordion.prototype.dropSection = function(oDomSection, oDomTargetSection, bDropFirst){

	//Get accordion DOM object
	var oDomAccordion = jQuery(oDomSection).parent()[0];

	//We substract 1 as the first child is the drop target and the should not be considered
	var aChildren = jQuery(oDomAccordion).children(".sapUiAcdSection").toArray();
	var iIndexToInsert = jQuery.inArray(oDomTargetSection, aChildren);

	if(bDropFirst){
		iIndexToInsert -= 1;
	}

	//Update accordion with the change
	this.moveSection(oDomSection.id,iIndexToInsert);

};

/**
 * Moves one section to a given new index by adjusting all internal information
 * @param {string} sSectionId The current section ID being moved
 * @param {int} iTargetIndex Where the section is dropped
 * @private
 */
sap.ui.commons.Accordion.prototype.moveSection = function(sSectionId, iTargetIndex){

	//Get previous index
	var iOldIndex = this.__idxOfSec(sSectionId);


	if(iTargetIndex==iOldIndex){
		 //Nothing to do
		 return;
	}


	/****Remove section from arrays*********************************/

	//Remove title for the list
	var sSectionTitle = this.aSectionTitles[iOldIndex];
	this.aSectionTitles.splice(iOldIndex,1);

	//Remove section aggregation
	var aSections = this.getSections();
	var oSection = aSections[iOldIndex];
	this.removeSection(iOldIndex, true);


	/****Add section to new index*********************************/
	if(iTargetIndex != -1){
		this.aSectionTitles.splice(iTargetIndex,0,sSectionTitle);
	}
	else{
		this.aSectionTitles.splice(0,0,sSectionTitle);
	}

	//Update aggregation
	this.insertSection(oSection,iTargetIndex, true);

	//Trigger event for application to react
	this.fireSectionsReorder({movedSectionId:sSectionId, newIndex:iTargetIndex});

};

sap.ui.commons.Accordion.prototype._onSortChange = function(oEvent, oUi){

	oEvent.preventDefault();
	oEvent.stopPropagation();

	var oDomSection = oUi.item[0];
	var SectionId = oUi.item[0].getAttribute("Id");

	//Get accordion DOM object
	var oDomAccordion = jQuery(oDomSection).parent()[0];

	var aChildren = jQuery(oDomAccordion).children(".sapUiAcdSection").toArray();
	var iIndexToInsert = jQuery.inArray(oDomSection, aChildren);

	this.moveSection(SectionId,iIndexToInsert);
};

/***********************************************************************************
 * FUNCTIONALITIES
 * Available functionalities in the Accordion are the following:
 * - Open a section
 * - Close a section
 ***********************************************************************************/

/**
 * Activation of the section - Opens or closes a section.
 * If the focus is on a collapsed section, it will close the currently opened section, and open this one.
 * If the focus is on an expanded section, it will collapse the section and open the default section.
 * This function is called onClick by the mouse, or via ENTER/SPACE keys
 * @param {jQuery.Event} oEvent Browser event
 * @private
 */
sap.ui.commons.Accordion.prototype.onclick = function(oEvent){

	//Click on the accordion itself are not considered
	if(oEvent.srcControl.getId() ==  this.getId()){
		return;
	}

	//Move up in the DOM to get the section (click occurs on the arrow which is an inner html element)
	var target = jQuery(oEvent.target);

	//Disable the possibility to click on the content to open/close a section
	if(target.hasClass("sapUiAcdSectionCont")){
		return;
	}

	if ( !(jQuery(oEvent.target).control(0) instanceof sap.ui.commons.AccordionSection) ) {
		return;
	}

	var oDomSection = oEvent.srcControl.getDomRef();

	//If the section is disabled, we cannot open/close it.
	var oSection = this.getCorrespondingSection(oDomSection);
	if(oSection && !oSection.getEnabled()){
		return;
	}

	//If the section is closed, open it
	if(oEvent.srcControl && oEvent.srcControl.getCollapsed() == true){
		this.openSection(oDomSection.id);
	}
	//If it is opened, close it
	else{
		if (oEvent.srcControl){
			this.closeSection(oDomSection.id);
		}
	}

	//Stop the event here
	oEvent.preventDefault();
	oEvent.stopPropagation();

	//Ensure the focus is on the right section
	var aSections = this.getSections();
	aSections[this.__idxOfSec(oDomSection.id)].focus();

};

/**
 * Opens a given section
 * @param {string} sSectionId, The given section ID
 * @private
 */
sap.ui.commons.Accordion.prototype.openSection = function(sSectionId){

	//Map the section ID to its internal index
	var iIndex = this.__idxOfSec(sSectionId);

	//Get all accordion's sections
	var aSections = this.getSections();

	//Close all sections currently opened
	if (this.activationMode == sap.ui.commons.Accordion.CARD_0_1 || this.activationMode == sap.ui.commons.Accordion.CARD_1){
	  var aClosedSections = this.closeOpenedSections();
	}

	//Open the section with the index retrieved from the importing section ID
	aSections[iIndex]._setCollapsed(false);

	//Trigger event for application to react
	this.fireSectionOpen({openSectionId:sSectionId, closeSectionIds:aClosedSections});

};

/**
 * Closes a given section
 * @param {string} sSectionId, The given section ID
 * @private
 */
sap.ui.commons.Accordion.prototype.closeSection = function(sSectionId){

	//Get the corresponding mapping index
	var iIndex = this.__idxOfSec(sSectionId);

	//Get all accordion's sections
	var aSections = this.getSections();
	var oCurrentSection = aSections[iIndex];

	//Get all default sections that should be opened
	var aDefaultSections = this.getOpenedSectionsId().split(",");

	//If we are in a context that one opened section is required and that the section we are about to
	//close is the default one, we avoid closing and reopening it.
	/**
	if ((	this.activationMode == sap.ui.commons.Accordion.CARD_1_N || this.activationMode == sap.ui.commons.Accordion.CARD_1) &&
			this.getNumberOfOpenedSections() == 1 && jQuery.inArray(oCurrentSection.getId(),aDefaultSections) != -1) {
			return;
	}
	*/

	//Close the given section
	aSections[iIndex]._setCollapsed(true);
	//If there is no section opened and at least one is required to be, we open the default one to respect activationMode
	//if ((this.activationMode == sap.ui.commons.Accordion.CARD_1_N || this.activationMode == sap.ui.commons.Accordion.CARD_1) && this.getNumberOfOpenedSections() == 0){
	//this.openDefaultSections();
	//}

	//Trigger event for application to react
	this.fireSectionClose({closeSectionId:sSectionId});

};

/**
 * Closes all opened sections
 * @private
 */
sap.ui.commons.Accordion.prototype.closeOpenedSections = function(){

	var aClosedSections = [];
	var aSections = this.getSections();

	//Simply loop and close the sections already opened
	for(var i=0;i<aSections.length;i++){
		if ( aSections[i].getCollapsed() == false ){
			aSections[i]._setCollapsed(true);
			aClosedSections.push(aSections[i].getId());
		}
	}

	//Return all sections that were closed
	return aClosedSections;

};

/**
 * Opens the default section; consider activationMode
 * @private
 */
sap.ui.commons.Accordion.prototype.openDefaultSections = function(){

	//Get all accordion's sections
	var aSections = this.getSections();

	//Loop trough all defaulted opened section and open them
	var aDefaultSections = this.getOpenedSectionsId().split(",");
	for(var i=0 ; i<aDefaultSections.length ; i++){
	  //From the default section ID to open, we retrieve the index
	  var oActiveSection = aSections[this.__idxOfSec(aDefaultSections[i])];
	  oActiveSection._setCollapsed(false);
	}

};

/**
 * Returns the number of currently opened sections
 * @return The number of currently opened sections
 * @private
 */
sap.ui.commons.Accordion.prototype.getNumberOfOpenedSections = function(){

	//Initialize the return parameter
	var openedSections  = 0;

	//Get all accordion's sections
	var aSections		= this.getSections();

	//Loop and sum up all opened sections
	for(var i=0;i<aSections.length;i++){
		if ( aSections[i].getCollapsed() == false ){
			openedSections++;
		}
	}
	return openedSections;
};


//*************************************************************************************
// * UTILITIES FUNCTIONS
// * List of all Javascript utilities functions needed to achieve the required behavior
// ************************************************************************************

sap.ui.commons.Accordion.prototype.addSection = function(oSection) {

	this.addAggregation("sections", oSection);

	//Add a default opened section id
	if ( (this.getOpenedSectionsId() == null || this.getOpenedSectionsId() == "" ) && oSection.getEnabled()){
		this.setOpenedSectionsId(oSection.getId());
	}

	this.aSectionTitles.push(oSection.getTitle());

};

/**
 * Returns the index of the given section or Id of a section.
 * @private
 */
sap.ui.commons.Accordion.prototype.__idxOfSec = function(oSection){
	if(typeof(oSection) == "string"){
		oSection = sap.ui.getCore().byId(oSection);
	}
	return this.indexOfSection(oSection);
};

/**
 * Redefinition of the method to add additional handling
 *
 * @param {string} sOpenedSectionsId  New value for property openedSectionsId
 * @return {sap.ui.commons.Accordion} 'this' to allow method chaining
 * @public
 */
sap.ui.commons.Accordion.prototype.setOpenedSectionsId = function(sOpenedSectionsId) {

	var aSections = this.getSections();

	var aDefaultSections = sOpenedSectionsId.split(",");


	if(aDefaultSections.length==1){
		//it can be that the method is called from method AddSection. We don't want to intefere with those
		// call.
		if(this.__idxOfSec(sOpenedSectionsId) < 0){
			this.setProperty("openedSectionsId", sOpenedSectionsId);
			return this;
		}

		if(aSections[this.__idxOfSec(sOpenedSectionsId)].getEnabled()){
			//If the provided section is enabled
			this.setProperty("openedSectionsId", sOpenedSectionsId);
		}
		else{

			//If the provided section is disabled, the open section will be the first enable section starting for the top
			for(var i=0;i<aSections.length;i++){
				if(aSections[i].getEnabled()){
					this.setProperty("openedSectionsId", aSections[i].getId());
					return this;
				}
			}
		}


	}
	else if(aDefaultSections.length==0){
		//If the empty string is provided, we keep the automatically selected section(as selected in method AddSection).
		return this;

	}
	//Several sections were provided, but some can be disabled. Check each of them
	else{
		var sCheckIndices;

		for(var i=0;i<aDefaultSections.length;i++){
			if(aSections[this.__idxOfSec(aDefaultSections[i])].getEnabled()){

				if(sCheckIndices){
					sCheckIndices += "," + aDefaultSections[i];

					//only one section should be opened at once, so return after the first is set
					return;
				}
				else{
					sCheckIndices = aDefaultSections[i];
				}

			}
		}

		if(sCheckIndices){
			//If at least one section remains
			this.setProperty("openedSectionsId", sCheckIndices);
		}


	}

	return this;

};


/**
 * Returns AccordionSection Object corresponding to a given Section DOM Object
 * @param oDomSection The section in a DOM representation object
 * @return The current section control
 * @private
 */
sap.ui.commons.Accordion.prototype.getCorrespondingSection = function (oDomSection) {

	//Look for section index within accordion
	if(jQuery(oDomSection).hasClass("sapUiAcdSection") ){
		var aAccordion	= jQuery(oDomSection).parent();
		var oAccordion  = aAccordion[0];
		var aSections	= jQuery(oAccordion).children();
		var iIndex		= aSections.index( oDomSection );
		var aoSections	= this.getSections();
		//Remove 1 as we have the target div as first child
		return aoSections[iIndex-1];
	}

};

/**
 * Returns true if the current section being processed is the last one of the Accordion
 * @param oSection The current section being processed
 * @return true If the current section being processed is the last one of the Accordion
 * @private
 */
sap.ui.commons.Accordion.prototype.isLastSection = function(oSection) {

	//Get all accordion's sections
	var aSections = this.getSections();

	//Simply check in our internal array containing all titles
	/*if(aSections.indexOf(oSection) == aSections.length-1 ){*/
	if(jQuery.inArray(oSection,aSections) == aSections.length-1 ){
		return true;
	}
	else{
		return false;
	}

};

/**
 * Once the Accordion is rendered, build the list of active controls that will be included
 * in the item navigation object. This support arrow keys navigation.
 * @private
 */
sap.ui.commons.Accordion.prototype.onAfterRendering = function() {

	// Collect the dom references of the items
	var accordion = this.getDomRef();
	var leftBorder = "0px";
	var rightBorder = "0px";
	//neccessary to make sure IE8 does not deliver medium if no border width is set
	if (jQuery(accordion).css("borderLeftStyle") !== "none") {
		leftBorder = jQuery(accordion).css("border-left-width");
	}
	if (jQuery(accordion).css("borderRightStyle") !== "none") {
		rightBorder = jQuery(accordion).css("border-right-width");
	}
	var borderTotal = parseFloat(leftBorder.substring(0, leftBorder.indexOf("px"))) + parseFloat(rightBorder.substring(0, rightBorder.indexOf("px")));
	accordion.style.height = accordion.offsetHeight - borderTotal - 7 + "px";

	this.$().sortable({
		handle: "> div.sapUiAcdSectionHdr > div",
		stop: jQuery.proxy(this._onSortChange, this)
	});
};

}; // end of sap/ui/commons/Accordion.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.AccordionSection') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.AccordionSection.
jQuery.sap.declare("sap.ui.commons.AccordionSection");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new AccordionSection.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxHeight maxHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getCollapsed collapsed} : boolean (default: false)</li>
 * <li>{@link #getTitle title} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.AccordionSection#event:scroll scroll} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents a panel which is a container for other controls. The container does not have any layout function.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.AccordionSection
 */
sap.ui.core.Element.extend("sap.ui.commons.AccordionSection", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"maxHeight" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"collapsed" : {type : "boolean", group : "Behavior", defaultValue : false},
		"title" : {type : "string", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	events : {
		"scroll" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.AccordionSection with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.AccordionSection.extend
 * @function
 */

sap.ui.commons.AccordionSection.M_EVENTS = {'scroll':'scroll'};


/**
 * Getter for property <code>maxHeight</code>.
 * When the section content exceeds maxHeight, a vertical scroll bar appears.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxHeight</code>
 * @public
 * @name sap.ui.commons.AccordionSection#getMaxHeight
 * @function
 */

/**
 * Setter for property <code>maxHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxHeight  new value for property <code>maxHeight</code>
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AccordionSection#setMaxHeight
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Requirement is that the used theme supports the control.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.AccordionSection#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AccordionSection#setEnabled
 * @function
 */


/**
 * Getter for property <code>collapsed</code>.
 * It is recommended to make some settings for the width when the section is set to 'collapsed'.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>collapsed</code>
 * @public
 * @name sap.ui.commons.AccordionSection#getCollapsed
 * @function
 */

/**
 * Setter for property <code>collapsed</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCollapsed  new value for property <code>collapsed</code>
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AccordionSection#setCollapsed
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Text for the section header
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.commons.AccordionSection#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AccordionSection#setTitle
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Aggregates the controls that are contained in the panel. Control layouting is browser-dependent. For a stable content layout, use a layout control as direct single child.
 * When the panel dimensions are set, the child control may have width and height of 100%;
 * when the panel dimensions are not set, the child defines the panel size.
 * 
 * <strong>Note</strong>: this is the default aggregation for AccordionSection.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.AccordionSection#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AccordionSection#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AccordionSection#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.commons.AccordionSection#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.AccordionSection#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.AccordionSection#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AccordionSection#destroyContent
 * @function
 */


/**
 * Event is fired when the user scrolls the panel. 
 *
 * @name sap.ui.commons.AccordionSection#scroll
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.left Horizontal scroll position.
 * @param {int} oControlEvent.getParameters.top Vertical scroll position.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'scroll' event of this <code>sap.ui.commons.AccordionSection</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.AccordionSection</code>.<br/> itself. 
 *  
 * Event is fired when the user scrolls the panel. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.AccordionSection</code>.<br/> itself.
 *
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AccordionSection#attachScroll
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'scroll' event of this <code>sap.ui.commons.AccordionSection</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AccordionSection#detachScroll
 * @function
 */

/**
 * Fire event scroll to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'left' of type <code>int</code> Horizontal scroll position.</li>
 * <li>'top' of type <code>int</code> Vertical scroll position.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.AccordionSection} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.AccordionSection#fireScroll
 * @function
 */


// Start of sap\ui\commons\AccordionSection.js
/**
 * AccordionSection Behavior Implementation
 *
 * Open:
 * - HeaderDesign not implemented yet
 */

/**
 * Do some initialization
 * @private
 */
sap.ui.commons.AccordionSection.prototype.init = function(){
   this.bIgnoreScrollEvent = true; // do not fire a scroll event initially
   this.oScrollDomRef = null;      // points to the content area
};

/**
 * Set focus on the first control
 * @private
 */
sap.ui.commons.AccordionSection.prototype.focusFirstControl = function () {
	var aControls = this.getContent();
	if (aControls[0]) {
		aControls[0].focus();
	}
};

/**
 * Set focus the arrow
 * @private
 */
sap.ui.commons.AccordionSection.prototype.focus = function () {

	var header = this.getDomRef("hdr");
	header.focus();
};

/**
 * Called after the theme has been switched, required for adjustments
 * @private
 */
sap.ui.commons.AccordionSection.prototype.onThemeChanged = function () {
	var hdrLeft = this.getDomRef("hdrL");

	if (hdrLeft) {
		hdrLeft.style.width = "auto";
		var obj = this;
		setTimeout(function() {obj.onAfterRendering();}, 0); // TODO: there is a problem in IE8, depending on what the surrounding container is...
	}

}

/**
 * Adapts size settings of the rendered HTML
 * @private
 */;
sap.ui.commons.AccordionSection.prototype.onAfterRendering = function () {

	this.oScrollDomRef = this.getDomRef("cont");
	var cont	  = this.oScrollDomRef;
	var root	  = this.getDomRef();
	var accordion = this.getParent().getDomRef();
	// if only height is set, the content area's height needs to be adapted  (should be a rare use-case)
	if (!sap.ui.commons.AccordionSection._isSizeSet(this.getParent().getWidth()) && sap.ui.commons.AccordionSection._isSizeSet(this.getMaxHeight())) {
		if (cont) {
			var contTop = cont.offsetTop;
			var targetHeight = (root.offsetHeight - contTop);
			cont.style.height = targetHeight + "px";

			var actualContHeight = cont.offsetHeight;
			if (actualContHeight > targetHeight) {
				cont.style.height = targetHeight - (actualContHeight - targetHeight) + "px";
			}
		}

	}

	var leftBorder	= jQuery(accordion).css("border-left-width");
	var rightBorder = jQuery(accordion).css("border-right-width");


	var borderTotal = parseFloat(leftBorder.substring(0, leftBorder.indexOf("px") )) + parseFloat(rightBorder.substring(0, rightBorder.indexOf("px") ));
	var oDomLabel = this.getDomRef("lbl");
	root.style.width = accordion.offsetWidth - borderTotal + "px";
	oDomLabel.style.width = accordion.offsetWidth - 30 + "px";

	//Bind the scroll event (does not bubble)
	var fnScrollProxy = this.__scrollproxy__;
	if (!fnScrollProxy) {
		fnScrollProxy = this.__scrollproxy__ = jQuery.proxy(this.onscroll, this);
	}
	this.$("cont").bind("scroll", fnScrollProxy);

};

sap.ui.commons.AccordionSection.prototype.onBeforeRendering = function() {
	var fnScrollProxy = this.__scrollproxy__;
	if (fnScrollProxy) {
		this.$("cont").unbind("scroll", fnScrollProxy);
	}
};

/**
 * Property setter for the "enabled" state
 *
 * @param bEnabled Whether the AccordionSection should be enabled, or not
 * @return {sap.ui.commons.AccordionSection} 'this' to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled, true); // no re-rendering!
	var root = this.getDomRef();
	if (root) {
		// if already rendered, adapt rendered control without complete re-rendering
		if (bEnabled) {
			jQuery(root).removeClass("sapUiAcdSectionDis");
		} else {
			jQuery(root).addClass("sapUiAcdSectionDis");
		}
	}
	return this;
};


/**
 * Property setter for the "collapsed" state
 *
 * @param bCollapsed Whether the AccordionSection should be collapsed, or not
 * @private
 */
sap.ui.commons.AccordionSection.prototype._setCollapsed = function(bCollapsed) {
	this.setProperty("collapsed", bCollapsed, true); // no re-rendering!
	this._setCollapsedState(bCollapsed); // adapt rendered control without complete re-rendering
};

/**
 * Property setter for the "collapsed" state
 *
 * @param bCollapsed Whether the AccordionSection should be collapsed, or not
 * @return {sap.ui.commons.AccordionSection} 'this' to allow method chaining
 * @public
 */
sap.ui.commons.AccordionSection.prototype.setCollapsed = function(bCollapsed) {
	if(this.getParent()){

		if(!bCollapsed){
			this.getParent().openSection(this.getId());
		}
		else{
			this.getParent().closeSection(this.getId());
		}
	}
	else{
		this._setCollapsed(bCollapsed);
	}
	return this;
};


/**
 * Internal method for applying a "collapsed" state to the rendered HTML
 *
 * @param bCollapsed Whether the AccordionSection should be collapsed, or not
 * @private
 */
sap.ui.commons.AccordionSection.prototype._setCollapsedState = function(bCollapsed) {

	if (this.getDomRef()) {
		// after AccordionSection has been rendered
		if (bCollapsed) {
			var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();

			// collapsing
			if (!this.getParent().getWidth()) {
				this.getDomRef().style.width = this.getDomRef().offsetWidth + "px"; // maintain the current width
			}
			jQuery(this.getDomRef()).addClass("sapUiAcdSectionColl");
			var tb = this.getDomRef("tb");
			if (tb) {
				tb.style.display = "none";
			}

			var cont = this.getDomRef("cont");
			cont.style.display = "none";
			if (accessibility) {
				cont.setAttribute("aria-expanded", "false");
				cont.setAttribute("aria-hidden", "true");
			}

			this.rerender();

		} else {
			// expanding
			if (!this.getDomRef("cont")) {
				// content has not been rendered yet, so render it now
				this.rerender(); // TODO: potentially restore focus to collapse icon/button
			} else {
				// content exists already, just make it visible again
				jQuery(this.getDomRef()).removeClass("sapUiAcdSectionColl");
				var tb = this.getDomRef("tb");
				if (tb) {
					tb.style.display = "block";
				}

				var cont = this.getDomRef("cont");
				cont.style.display = "block";
				if (accessibility) {
					cont.setAttribute("aria-expanded", "true");
				}

				if (this.getMaxHeight()) {
					this.getDomRef().style.height = this.getMaxHeight(); // restore the set height
				}
			}
		}
	}
}


/**
 * Static method that finds out whether the given CSS size is actually set.
 * Returns "true" for absolute and relative sizes, returns "false" if "null", "inherit" or "auto" is given.
 *
 * @static
 * @param sCssSize A CSS size string which must be a valid CSS size, or null
 * @private
 */;
sap.ui.commons.AccordionSection._isSizeSet = function(sCssSize) {
	return (sCssSize && !(sCssSize =="auto") && !(sCssSize == "inherit"));
}


/*   Event Handling   */

/**
 * Handles any "triggering" actions like click and space
 *
 * @param {jQuery.Event} oEvent
 * @private
 */;
sap.ui.commons.AccordionSection.prototype._handleTrigger = function(oEvent) {
	// minimize button toggled
	if((oEvent.target.id === this.getId() + "-minL") ||
			(oEvent.target.id === this.getId() + "-minR")) {
		var bCollapsed = !this.getProperty("collapsed");
		this._setCollapsed(bCollapsed);
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Handles the scroll event of the browser
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.AccordionSection.prototype.onscroll = function (oEvent) {
	/**
	if (this.bIgnoreScrollEvent) { // bIgnoreScrollEvent is set to "true" if the scrollbar is moved via API calls
		this.bIgnoreScrollEvent = false;
		return;
	}
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		this.fireScroll(oDomRef.scrollTop, oDomRef.scrollLeft);
	}
	 */
};
}; // end of sap/ui/commons/AccordionSection.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ApplicationHeader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ApplicationHeader.
jQuery.sap.declare("sap.ui.commons.ApplicationHeader");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ApplicationHeader.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLogoSrc logoSrc} : sap.ui.core.URI</li>
 * <li>{@link #getLogoText logoText} : string</li>
 * <li>{@link #getDisplayLogoff displayLogoff} : boolean (default: true)</li>
 * <li>{@link #getUserName userName} : string</li>
 * <li>{@link #getDisplayWelcome displayWelcome} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.ApplicationHeader#event:logoff logoff} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The application header control stands on the top of any application page. It consists basically of 4 areas. Logo area/Function area provided by application/Search area/Logout area
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ApplicationHeader
 */
sap.ui.core.Control.extend("sap.ui.commons.ApplicationHeader", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"logoSrc" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"logoText" : {type : "string", group : "Misc", defaultValue : null},
		"displayLogoff" : {type : "boolean", group : "Misc", defaultValue : true},
		"userName" : {type : "string", group : "Misc", defaultValue : null},
		"displayWelcome" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"logoff" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ApplicationHeader with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ApplicationHeader.extend
 * @function
 */

sap.ui.commons.ApplicationHeader.M_EVENTS = {'logoff':'logoff'};


/**
 * Getter for property <code>logoSrc</code>.
 * Path (src) to the logo icon to be displayed in the application header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>logoSrc</code>
 * @public
 * @name sap.ui.commons.ApplicationHeader#getLogoSrc
 * @function
 */

/**
 * Setter for property <code>logoSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLogoSrc  new value for property <code>logoSrc</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ApplicationHeader#setLogoSrc
 * @function
 */


/**
 * Getter for property <code>logoText</code>.
 * The text that will be displayed beside the logo in the application header. This property is optional.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>logoText</code>
 * @public
 * @name sap.ui.commons.ApplicationHeader#getLogoText
 * @function
 */

/**
 * Setter for property <code>logoText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLogoText  new value for property <code>logoText</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ApplicationHeader#setLogoText
 * @function
 */


/**
 * Getter for property <code>displayLogoff</code>.
 * If set to true, the logoff area will be displayed at the right hand side of the application header.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>displayLogoff</code>
 * @public
 * @name sap.ui.commons.ApplicationHeader#getDisplayLogoff
 * @function
 */

/**
 * Setter for property <code>displayLogoff</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDisplayLogoff  new value for property <code>displayLogoff</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ApplicationHeader#setDisplayLogoff
 * @function
 */


/**
 * Getter for property <code>userName</code>.
 * User name that will be displayed beside the welcome text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>userName</code>
 * @public
 * @name sap.ui.commons.ApplicationHeader#getUserName
 * @function
 */

/**
 * Setter for property <code>userName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUserName  new value for property <code>userName</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ApplicationHeader#setUserName
 * @function
 */


/**
 * Getter for property <code>displayWelcome</code>.
 * By default, set to true and dislpays the welcome text
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>displayWelcome</code>
 * @public
 * @name sap.ui.commons.ApplicationHeader#getDisplayWelcome
 * @function
 */

/**
 * Setter for property <code>displayWelcome</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDisplayWelcome  new value for property <code>displayWelcome</code>
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ApplicationHeader#setDisplayWelcome
 * @function
 */


/**
 * Fires an event to log off the user from the application.
 * No parameters. 
 *
 * @name sap.ui.commons.ApplicationHeader#logoff
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'logoff' event of this <code>sap.ui.commons.ApplicationHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.ApplicationHeader</code>.<br/> itself. 
 *  
 * Fires an event to log off the user from the application.
 * No parameters. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.ApplicationHeader</code>.<br/> itself.
 *
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ApplicationHeader#attachLogoff
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'logoff' event of this <code>sap.ui.commons.ApplicationHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ApplicationHeader#detachLogoff
 * @function
 */

/**
 * Fire event logoff to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ApplicationHeader} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.ApplicationHeader#fireLogoff
 * @function
 */


// Start of sap\ui\commons\ApplicationHeader.js
///**
// * This file defines behavior for the control,
// */
sap.ui.commons.ApplicationHeader.prototype.init = function(){
	this.initializationDone = false;
};

sap.ui.commons.ApplicationHeader.prototype.exit = function() {
	this.oLogo && this.oLogo.destroy();
	this.oLogoText && this.oLogoText.destroy();
	this.oLogoffBtn && this.oLogoffBtn.destroy();
};

/**
 * Create the composite parts out of the current settings.
 * Called by the renderer just before rendering
 * @private
 */
sap.ui.commons.ApplicationHeader.prototype.initControls = function() {

	//Application header to build sub-controls ids
	var appHeaderId = this.getId();

	//Get the texts from the resources bundle
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	//Create the logo image control and the title (textView) control
	this.oLogo && this.oLogo.destroy();
	this.oLogo = new sap.ui.commons.Image(appHeaderId + "-logoImg");
	this.oLogo.setTooltip(rb.getText("APPHDR_LOGO_TOOLTIP"));
	this.oLogo.setParent(this);
	this.oLogoText && this.oLogoText.destroy();
	this.oLogoText = new sap.ui.commons.TextView(appHeaderId + "-logoText");
	this.oLogoText.setAccessibleRole(sap.ui.core.AccessibleRole.Heading);
	this.oLogoText.setParent(this);

	//Log off button
	this.oLogoffBtn && this.oLogoffBtn.destroy();
	this.oLogoffBtn = new sap.ui.commons.Button(appHeaderId + "-logoffBtn");
	var sLogOffText = rb.getText("APPHDR_LOGOFF");
	this.oLogoffBtn.setText(sLogOffText);
	this.oLogoffBtn.setTooltip(sLogOffText);
	this.oLogoffBtn.attachPress(this.logoff,this);
	this.oLogoffBtn.setParent(this);
	this.oLogoffBtn.setLite(true);
}


/**
*  This event is fired when the user clicks on the Log Off button
*  @param oEvent The event triggered
*  @private
*/;
sap.ui.commons.ApplicationHeader.prototype.logoff = function(oEvent){
	this.fireLogoff();
};


// ---- Overwritten property setters to make sure the full area is rerendered correctly ----

sap.ui.commons.ApplicationHeader.prototype.setLogoSrc = function(sLogoSrc) {
	this.initializationDone = false;
	this.setProperty("logoSrc", sLogoSrc);
	return this;
};

sap.ui.commons.ApplicationHeader.prototype.setLogoText = function(sLogoText) {
	this.initializationDone = false;
	this.setProperty("logoText", sLogoText);
	return this;
};

sap.ui.commons.ApplicationHeader.prototype.setUserName = function(sUserName){
	this.initializationDone = false;
	this.setProperty("userName", sUserName);
	return this;
};

sap.ui.commons.ApplicationHeader.prototype.setDisplayWelcome = function(bDisplayWelcome) {
	this.initializationDone = false;
	this.setProperty("displayWelcome", bDisplayWelcome);
	return this;
};

sap.ui.commons.ApplicationHeader.prototype.setDisplayLogoff = function(bDisplayLogoff) {
	this.initializationDone = false;
	this.setProperty("displayLogoff", bDisplayLogoff);
	return this;
};
}; // end of sap/ui/commons/ApplicationHeader.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Area') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Area.
jQuery.sap.declare("sap.ui.commons.Area");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Area.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShape shape} : string</li>
 * <li>{@link #getCoords coords} : string</li>
 * <li>{@link #getHref href} : sap.ui.core.URI</li>
 * <li>{@link #getAlt alt} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Used for defining areas in an image map. At runtime, the user can trigger an action, or start a URL, from the single image areas.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Area
 */
sap.ui.core.Element.extend("sap.ui.commons.Area", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"shape" : {type : "string", group : "Misc", defaultValue : null},
		"coords" : {type : "string", group : "Misc", defaultValue : null},
		"href" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"alt" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Area with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Area.extend
 * @function
 */


/**
 * Getter for property <code>shape</code>.
 * The value is a string and can be 'rect' for rectangle, 'poly' for poligon, 'circle', or default.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>shape</code>
 * @public
 * @name sap.ui.commons.Area#getShape
 * @function
 */

/**
 * Setter for property <code>shape</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sShape  new value for property <code>shape</code>
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Area#setShape
 * @function
 */


/**
 * Getter for property <code>coords</code>.
 * Coordinates of the area
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>coords</code>
 * @public
 * @name sap.ui.commons.Area#getCoords
 * @function
 */

/**
 * Setter for property <code>coords</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCoords  new value for property <code>coords</code>
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Area#setCoords
 * @function
 */


/**
 * Getter for property <code>href</code>.
 * Hyper link that is executed when the area is clicked
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>href</code>
 * @public
 * @name sap.ui.commons.Area#getHref
 * @function
 */

/**
 * Setter for property <code>href</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sHref  new value for property <code>href</code>
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Area#setHref
 * @function
 */


/**
 * Getter for property <code>alt</code>.
 * Alternative text that is displayed in the case the image is not available
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>alt</code>
 * @public
 * @name sap.ui.commons.Area#getAlt
 * @function
 */

/**
 * Setter for property <code>alt</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAlt  new value for property <code>alt</code>
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Area#setAlt
 * @function
 */


// Start of sap\ui\commons\Area.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.dev.Area.prototype.init = function(){
//   // do something for initialization...
//};

/**
 * Function is called when Link is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Area.prototype.onclick = function(oEvent) {

	// The Element or Control that initiated the event. For example the id of the area if image map is defined for the current image.
	var oEventSource = jQuery(oEvent.target).control(0);

    // Fire event on Image Map
	this.getParent().firePress({areaId: oEventSource.getId()});
};
}; // end of sap/ui/commons/Area.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Button') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Button.
jQuery.sap.declare("sap.ui.commons.Button");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Button.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHelpId helpId} : string (default: '')</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li>
 * <li>{@link #getIconHovered iconHovered} : sap.ui.core.URI (default: '')</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI (default: '')</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getStyled styled} : boolean (default: true)</li>
 * <li>{@link #getLite lite} : boolean (default: false)</li>
 * <li>{@link #getStyle style} : sap.ui.commons.ButtonStyle (default: sap.ui.commons.ButtonStyle.Default)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.Button#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to trigger actions such as save or print. For the button UI, you can define some text or an icon, or both.
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.commons.ToolbarItem
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Button
 */
sap.ui.core.Control.extend("sap.ui.commons.Button", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem"
	],
	publicMethods : [
		// methods
		"focus"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"text" : {type : "string", group : "Appearance", defaultValue : ''},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"helpId" : {type : "string", group : "Behavior", defaultValue : ''},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : ''},
		"iconHovered" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : ''},
		"iconSelected" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : ''},
		"iconFirst" : {type : "boolean", group : "Appearance", defaultValue : true},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"styled" : {type : "boolean", group : "Appearance", defaultValue : true},
		"lite" : {type : "boolean", group : "Appearance", defaultValue : false},
		"style" : {type : "sap.ui.commons.ButtonStyle", group : "Appearance", defaultValue : sap.ui.commons.ButtonStyle.Default}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Button with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Button.extend
 * @function
 */

sap.ui.commons.Button.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>text</code>.
 * 
 * Button text displayed at runtime.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.Button#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setText
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * 
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.Button#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * 
 * Invisible buttons are not rendered
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.Button#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * 
 * Control width as common CSS-size (px or % as unit, for example)
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Button#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setWidth
 * @function
 */


/**
 * Getter for property <code>helpId</code>.
 * 
 * Unique identifier used for help service
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>helpId</code>
 * @public
 * @name sap.ui.commons.Button#getHelpId
 * @function
 */

/**
 * Setter for property <code>helpId</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sHelpId  new value for property <code>helpId</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setHelpId
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the button.
 * This can be an URI to an image or an icon font URI.
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.commons.Button#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setIcon
 * @function
 */


/**
 * Getter for property <code>iconHovered</code>.
 * Icon to be displayed as graphical element within the button when it is hovered (only if also a base icon was specified). If not specified the base icon is used.
 * If a icon font icon is used, this property is ignored.
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconHovered</code>
 * @public
 * @name sap.ui.commons.Button#getIconHovered
 * @function
 */

/**
 * Setter for property <code>iconHovered</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.URI} sIconHovered  new value for property <code>iconHovered</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setIconHovered
 * @function
 */


/**
 * Getter for property <code>iconSelected</code>.
 * Icon to be displayed as graphical element within the button when it is selected (only if also a base icon was specified). If not specified the base or hovered icon is used.
 * If a icon font icon is used, this property is ignored.
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSelected</code>
 * @public
 * @name sap.ui.commons.Button#getIconSelected
 * @function
 */

/**
 * Setter for property <code>iconSelected</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.URI} sIconSelected  new value for property <code>iconSelected</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setIconSelected
 * @function
 */


/**
 * Getter for property <code>iconFirst</code>.
 * 
 * If set to true (default), the display sequence is 1. icon 2. control text .
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * @name sap.ui.commons.Button#getIconFirst
 * @function
 */

/**
 * Setter for property <code>iconFirst</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconFirst  new value for property <code>iconFirst</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setIconFirst
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Specifies the button height. If this property is set, the height which is specified by the underlying theme is not used any longer.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.Button#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setHeight
 * @function
 */


/**
 * Getter for property <code>styled</code>.
 * Indicates if the button is styled. If not it is rendered as native HTML-button. In this case a custom styling can be added usig addStyleClass.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>styled</code>
 * @public
 * @name sap.ui.commons.Button#getStyled
 * @function
 */

/**
 * Setter for property <code>styled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bStyled  new value for property <code>styled</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setStyled
 * @function
 */


/**
 * Getter for property <code>lite</code>.
 * The button is rendered as lite button.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>lite</code>
 * @public
 * @name sap.ui.commons.Button#getLite
 * @function
 */

/**
 * Setter for property <code>lite</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLite  new value for property <code>lite</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setLite
 * @function
 */


/**
 * Getter for property <code>style</code>.
 * Style of the button.
 * (e.g. emphasized)
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code>
 *
 * @return {sap.ui.commons.ButtonStyle} the value of property <code>style</code>
 * @public
 * @name sap.ui.commons.Button#getStyle
 * @function
 */

/**
 * Setter for property <code>style</code>.
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code> 
 *
 * @param {sap.ui.commons.ButtonStyle} oStyle  new value for property <code>style</code>
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#setStyle
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.Button#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.Button#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Button#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.Button#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.Button#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Button#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * 
 * Event is fired when the user presses the control.
 *  
 *
 * @name sap.ui.commons.Button#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.Button</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Button</code>.<br/> itself. 
 *  
 * 
 * Event is fired when the user presses the control.
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Button</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.Button</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Button#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Button} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Button#firePress
 * @function
 */


/**
 * Puts the focus to the button.
 *
 * @name sap.ui.commons.Button.prototype.focus
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\commons\Button.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.ui.core.EnabledPropagator.call(sap.ui.commons.Button.prototype);

/**
 * Function is called when button is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onclick = function(oEvent) {
	if (this.getEnabled()){
		this.firePress({/* no parameters */});
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Handles the sapenter event does not bubble
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onsapenter = function(oEvent) {
	oEvent.stopPropagation();
};

/**
 * Function is called when mouse key is clicked down. The button style classes
 * are replaced then.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onmousedown = function(oEvent) {
	this.handleMouseDown(oEvent, true);
};

/**
 * Function to handle the mouse down event.
 *
 * @param {jQuery.Event} oEvent The causing event.
 * @param {boolean} [bFocus=false] Whether to set the focus on the selected element in a delayed call.
 * @private
 */
sap.ui.commons.Button.prototype.handleMouseDown = function(oEvent, bFocus) {
	if (this.getEnabled() && this.getRenderer().onactive) {
		this.getRenderer().onactive(this);
	}
	// webkit && firefox on mac does not focus a Button on click, it even unfocuses it onmousedown!
	if (bFocus && (!!sap.ui.Device.browser.webkit || (!!sap.ui.Device.browser.firefox && navigator.platform.indexOf("Mac") === 0))) { 
		if(sap.ui.Device.browser.mobile && !!sap.ui.Device.browser.webkit){
			//In mobile Webkit Browsers (IPad) the focus must be set immediately to ensure that a focusout happens whereever the
			//focus currently is. The deleayedCall below is still needed due to the reason described above. (CSN 2536817 2012)
			this.focus();
		}
		jQuery.sap.delayedCall(0, this, function(){
			this.focus();
		}); 
	}
};

/**
 * When mouse key is up again, reset the background images to normal.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onmouseup = function(oEvent) {
	if (this.getEnabled() && this.getRenderer().ondeactive) {
		this.getRenderer().ondeactive(this);
	}
};

/**
 * When mouse is going out of the control, reset the background images to normal.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onmouseout = function(oEvent) {
	if (this.getEnabled() && this.getRenderer().onmouseout) {
		this.getRenderer().onmouseout(this);
	}
};

/**
 * When mouse is going over the control a hover effect is done.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onmouseover = function(oEvent) {
	if (this.getEnabled() && this.getRenderer().onmouseover) {
		this.getRenderer().onmouseover(this);
	}
};

/**
 * When the button looses the focus, this method is called.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onfocusout = function(oEvent) {
	if (this.getEnabled() && this.getRenderer().onblur) {
		this.getRenderer().onblur(this);
	}
};

/**
 * When the button gets the focus, this method is called.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Button.prototype.onfocusin = function(oEvent) {
	if (this.getEnabled() && this.getRenderer().onfocus) {
		this.getRenderer().onfocus(this);
	}
};

/*
 * If Icon has just changed don't rerender.
 */
sap.ui.commons.Button.prototype.setIcon = function(sIcon) {

	this._setIcon(sIcon, "icon");

	return this;

};

sap.ui.commons.Button.prototype.setIconHovered = function(sIcon) {

	this._setIcon(sIcon, "iconHovered");

	return this;

};

sap.ui.commons.Button.prototype.setIconSelected = function(sIcon) {

	this._setIcon(sIcon, "iconSelected");

	return this;

};

/*
 * helper function to set different icons
 */
sap.ui.commons.Button.prototype._setIcon = function(sIcon, sProperty) {

	var sIconOld = this.getProperty(sProperty);

	if (sIconOld == sIcon) {
		// icon not changed -> nothing to do
		return;
	}

	var bUseIconFontOld = false;
	if (sap.ui.core.IconPool.isIconURI(sIconOld)) {
		bUseIconFontOld = true;
	}

	var bUseIconFontNew = false;
	if (sap.ui.core.IconPool.isIconURI(sIcon)) {
		bUseIconFontNew = true;
	}

	var bSupressRerender = true;
	if ((!sIconOld && sIcon) || (sIconOld && !sIcon) || (bUseIconFontOld != bUseIconFontNew)) {
		// Icon new added or removed -> need to rerender
		bSupressRerender = false;
	}

	this.setProperty(sProperty, sIcon, bSupressRerender);

	if (bSupressRerender == true && this.getDomRef() && this.getRenderer().changeIcon) {
		this.getRenderer().changeIcon(this);
	}

};

}; // end of sap/ui/commons/Button.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.CalloutBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.CalloutBase.
jQuery.sap.declare("sap.ui.commons.CalloutBase");

jQuery.sap.require('sap.ui.core.TooltipBase'); // unlisted dependency retained



/**
 * Constructor for a new CalloutBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.CalloutBase#event:open open} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.CalloutBase#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.CalloutBase#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.CalloutBase#event:opened opened} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.TooltipBase#constructor sap.ui.core.TooltipBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * CalloutBase is a building block for Callout. Do not use it directly. Use the Callout control instead
 * @extends sap.ui.core.TooltipBase
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.CalloutBase
 */
sap.ui.core.TooltipBase.extend("sap.ui.commons.CalloutBase", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"adjustPosition", "close", "setPosition"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	events : {
		"open" : {}, 
		"close" : {}, 
		"beforeOpen" : {allowPreventDefault : true}, 
		"opened" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.CalloutBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.CalloutBase.extend
 * @function
 */

sap.ui.commons.CalloutBase.M_EVENTS = {'open':'open','close':'close','beforeOpen':'beforeOpen','opened':'opened'};


/**
 * The event is fired when the popup is opened. 
 *
 * @name sap.ui.commons.CalloutBase#open
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.parent Parent control that has this Callout as a tooltip
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'open' event of this <code>sap.ui.commons.CalloutBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.CalloutBase</code>.<br/> itself. 
 *  
 * The event is fired when the popup is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.CalloutBase</code>.<br/> itself.
 *
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CalloutBase#attachOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'open' event of this <code>sap.ui.commons.CalloutBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CalloutBase#detachOpen
 * @function
 */

/**
 * Fire event open to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'parent' of type <code>sap.ui.core.Control</code> Parent control that has this Callout as a tooltip</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.CalloutBase#fireOpen
 * @function
 */


/**
 * Event is fired when the Callout window is closed. 
 *
 * @name sap.ui.commons.CalloutBase#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.commons.CalloutBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.CalloutBase</code>.<br/> itself. 
 *  
 * Event is fired when the Callout window is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.CalloutBase</code>.<br/> itself.
 *
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CalloutBase#attachClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.commons.CalloutBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CalloutBase#detachClose
 * @function
 */

/**
 * Fire event close to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.CalloutBase#fireClose
 * @function
 */


/**
 * Event is fired before a Callout is displayed. Call the preventDefault method of the event object to postpone opening. Application may use this event to start asynchronous Ajax call to load the Callout content 
 *
 * @name sap.ui.commons.CalloutBase#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.parent Parent control that has this Callout as a tooltip
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.ui.commons.CalloutBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.CalloutBase</code>.<br/> itself. 
 *  
 * Event is fired before a Callout is displayed. Call the preventDefault method of the event object to postpone opening. Application may use this event to start asynchronous Ajax call to load the Callout content 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.CalloutBase</code>.<br/> itself.
 *
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CalloutBase#attachBeforeOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.ui.commons.CalloutBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CalloutBase#detachBeforeOpen
 * @function
 */

/**
 * Fire event beforeOpen to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'parent' of type <code>sap.ui.core.Control</code> Parent control that has this Callout as a tooltip</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.commons.CalloutBase#fireBeforeOpen
 * @function
 */


/**
 * Is fired when the Callout has been opened 
 *
 * @name sap.ui.commons.CalloutBase#opened
 * @event
 * @since 1.11.0
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'opened' event of this <code>sap.ui.commons.CalloutBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.CalloutBase</code>.<br/> itself. 
 *  
 * Is fired when the Callout has been opened 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.CalloutBase</code>.<br/> itself.
 *
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.0
 * @name sap.ui.commons.CalloutBase#attachOpened
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'opened' event of this <code>sap.ui.commons.CalloutBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.0
 * @name sap.ui.commons.CalloutBase#detachOpened
 * @function
 */

/**
 * Fire event opened to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @protected
 * @since 1.11.0
 * @name sap.ui.commons.CalloutBase#fireOpened
 * @function
 */


/**
 * Adjust position of the already opened Callout window.
 * Call this method each time when the size of the opened
 * Callout window may be changed due to new or changed
 * contents.
 *
 * @name sap.ui.commons.CalloutBase.prototype.adjustPosition
 * @function

 * @type void
 * @public
 */


/**
 * Closes Callout
 *
 * @name sap.ui.commons.CalloutBase.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * Helper function to set position of the Callout window relative to the parent control. It automatically calculates and sets the correct offset, so it is recommended to use this function instead of setMyPosition and setAtPosition
 *
 * @name sap.ui.commons.CalloutBase.prototype.setPosition
 * @function
 * @param {sap.ui.core.Dock} 
 *         sMyPosition
 *         Docking position of the Callout
 * @param {sap.ui.core.Dock} 
 *         sAtPosition
 *         Docking position of the Callout

 * @type sap.ui.commons.CalloutBase
 * @public
 */


// Start of sap\ui\commons\CalloutBase.js
///**
// * This file defines behavior for the Callout control
// */

/**
 * Initializes a new callout base.
 * Overrides default popup placement and offset of the TooltipBase control
 *
 * @private
 */
sap.ui.commons.CalloutBase.prototype.init = function() {
	this.oPopup = new sap.ui.core.Popup();
	this.oPopup.setShadow(true);
	
	// resource bundle
	this.oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	// override the default position and offset of TooltipBase:
	this.setPosition(sap.ui.core.Popup.Dock.BeginBottom, sap.ui.core.Popup.Dock.BeginTop);

	// listen to global events outside of the callout to close it when needed
	this.fAnyEventHandlerProxy = jQuery.proxy(this.onAnyEvent, this);

	// make this.oPopup call this.setTip each time after its position is changed
	var that = this;
	this.oPopup._applyPosition = function(oPosition){
		sap.ui.core.Popup.prototype._applyPosition.call(this, oPosition);
		that.setTip();
	};
	
	// enable the Callout to fix its position when scolling occurs
	this.oPopup.setFollowOf(true);
};

/**
 * Destroys this instance of the callout, called by Element#destroy()
 * @private
 */
sap.ui.commons.CalloutBase.prototype.exit = function() {
	this.oPopup.close();
	this.oPopup.detachEvent("opened", this.handleOpened, this);
	this.oPopup.detachEvent("closed", this.handleClosed, this);
	this.oPopup.destroy();
	delete this.oPopup;
	delete this.oRb;
	jQuery.sap.unbindAnyEvent(this.fAnyEventHandlerProxy);
};

/**
 * Return the popup to use. Each callout has own popup.
 * (Allow multiple call-outs taking into account pin-up functionality in the next version).
 * Overrides {sap.ui.core.TooltipBase} that has a single common popup for all instances.
 * @type sap.ui.commons.Popup
 * @return The popup to use
 * @private
 */
sap.ui.commons.CalloutBase.prototype._getPopup = function(){
	return this.oPopup;
};

/**
 * Check if the given DOM reference is child of this control
 * @param {oDOMNode}
 * DOM node reference
 * @private
 */
sap.ui.commons.CalloutBase.prototype.hasChild = function(oDOMNode) {
	return oDOMNode && !!(jQuery(oDOMNode).closest(this.getDomRef()).length);
};

/**
 * Check if the given DOM reference is part of a SAPUI5 popup
 * @param {oDOMNode}
 * DOM node reference
 * @private
 */
sap.ui.commons.CalloutBase.prototype.isPopupElement = function(oDOMNode) {
	if(!oDOMNode){ return false; }
	if(this.hasChild(oDOMNode)){ return true; }

	var oStatic = sap.ui.getCore().getStaticAreaRef();
	// if oDOMNode belongs to a static area child, get z-index of this child:
	var thatZ = parseInt(jQuery(oDOMNode).closest(jQuery(oStatic).children()).css("z-index"), 10);
	// z-index of this:
	var thisZ = parseInt(this.$().css("z-index"), 10);

	// true if the element has the z-index inside of static area that is higher as the z-index of my control
	return thatZ && thisZ && thatZ >= thisZ;
};

/**
 * Set tip arrow below or above the callout window depending on the popup placement
 * @private
 */
sap.ui.commons.CalloutBase.prototype.setTip = function() {

	if (!this.oPopup || !this.oPopup.isOpen()) {
		return;
	}

	var $parent = this._currentControl.$(),
		$this = this.$(),
		$arrow = this.$("arrow"),
		$offset = $this.offset(),
		$pOffset = $parent.offset(),
		bShow = true,
		dock = {},
		tRect = {
			l:$offset.left,
			r:$offset.left+$this.outerWidth(),
			w:$this.outerWidth(),
			t:$offset.top,
			b:$offset.top+$this.outerHeight(),
			h:$this.outerHeight()
		},
		pRect = {
			l:$pOffset.left,
			r:$pOffset.left+$parent.outerWidth(),
			w:$parent.outerWidth(),
			t:$pOffset.top,
			b:$pOffset.top+$parent.outerHeight(),
			h:$parent.outerHeight()
		},
		borderWidth = ($this.outerWidth() - $this.innerWidth()) / 2,
		arrowWidth = $arrow.outerWidth() * 1.4,
		aw = $arrow.outerWidth() / 5, // (width*sqrt(2)-width)/2
		tipOffset = aw - borderWidth - 8, // offset of the tip to the border should be 8px
		myPosition = this.getMyPosition();

	// right-left pointer
	if ( tRect.r < pRect.l - tipOffset ){ dock.x = "right"; }
	else if ( tRect.l - tipOffset > pRect.r ){ dock.x = "left"; }

	// top-bottom pointer
	if ( tRect.t > pRect.b - tipOffset ){ dock.y = "top"; }
	else if ( tRect.b < pRect.t + tipOffset ){ dock.y = "bottom"; }

	if(dock.x){ // pointer on the left or right side

		var vPos = 0;
		// Set the vertical position of the pointer, relative to callout:
		//   dock top: top, dock bottom: bottom, dock center: center
		if(myPosition.indexOf("top") > -1){
			vPos = 20;
		} else if (myPosition.indexOf("bottom") > -1){
			vPos = tRect.h - 20 - arrowWidth;
		} else { // center
			vPos = (tRect.h -arrowWidth) / 2;
		}

		// adjust if it points outside of the parent or the parent is too small
		// - put it into the middle of intersection
		var tipY = tRect.t + vPos + arrowWidth / 2 + borderWidth;
		if( (tipY < pRect.t) || (tipY > pRect.b) || (pRect.t > tRect.t && pRect.b < tRect.b)){
			vPos = (Math.max(tRect.t, pRect.t) + Math.min(tRect.b, pRect.b))/2 - tRect.t -  arrowWidth / 2;
		}

		if(!!sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version == 8 && dock.x == "left"){
			tipOffset = tipOffset - 8;
		}
		$arrow.css(dock.x, tipOffset + "px");
		$arrow.css("top", vPos);

		// do not show pointer if it cannot be placed inside
		if( vPos < 0 || vPos > tRect.h - arrowWidth){
			bShow = false;
		}
	}

	if(dock.y){ // pointer on the top or bottom border
		// switch right to left in case of RTL for the relevant docking (begin & end):
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();
		if(bRtl){ myPosition.replace("begin", "right").replace("end", "left"); }
		var hPos = 0;

		// Set horizontal position of the pointer, relative to callout:
		//   dock left: left, dock right: right, dock center: center
		if((myPosition.indexOf("begin") > -1) || (myPosition.indexOf("left") > -1)){
			hPos = 20;
		} else if ((myPosition.indexOf("right") > -1) || (myPosition.indexOf("end") > -1)){
			hPos = tRect.w - 20 - arrowWidth;
		} else { // center
			hPos = (tRect.w -arrowWidth) / 2;
		}

		// adjust if it points outside of the parent - put it into the middle of intersection
		var tipX = tRect.l + hPos + arrowWidth / 2 + borderWidth;
		if( (tipX < pRect.l) || (tipX > pRect.r)){
			hPos = (Math.max(tRect.l, pRect.l) + Math.min(tRect.r, pRect.r))/2 - tRect.l - arrowWidth / 2;
		}

		if(!!sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version == 8 && dock.y == "top"){
			tipOffset = tipOffset - 8;
		}
		$arrow.css(dock.y, tipOffset + "px");
		$arrow.css("left", hPos + "px");

		// do not show pointer if it cannot be placed inside
		if( hPos < 0 || hPos > tRect.w - arrowWidth){
			bShow = false;
		}
	}

	if(dock.x && dock.y || !dock.x && !dock.y){ bShow = false; }

	// hide if the pointer cannot be shown
	$arrow.toggle(bShow);
};

sap.ui.commons.CalloutBase.prototype.adjustPosition = function() {

	function _adjust(){
		// adjust popup position
		if (this.oPopup) {
			var oParentDomRef = this._currentControl.getDomRef();
			this.oPopup.setPosition(this.getMyPosition(), this.getAtPosition(), oParentDomRef, this.getOffset(), this.getCollision());
		}
	}

	setTimeout( jQuery.proxy( _adjust, this ), 0 );
};

/**
 * @see sap.ui.core.Element.prototype.focus As the callout itself is just a
 *      frame, focus the first focusable content
 * @private
 */
sap.ui.commons.CalloutBase.prototype.focus = function() {
	if(this.oPopup && this.oPopup.isOpen()){
		// Focus the first focusable child. If the callout is empty, focus the content container div.
		// Empty callout should be focused too because the contents may appear at a later time point
		// and we need input focus to react to the ESC key.
		var $Content = this.$("cont");
		jQuery.sap.focus($Content.firstFocusableDomRef() || $Content.get(0));
	}
};

/**
 * Open the callout window.
 *
 * @param {sap.ui.core.Control}
 *       parent control that contains the callout
 * @private
 */
sap.ui.commons.CalloutBase.prototype.openPopup = function(oSC) {

	if(!this.oPopup || this.oPopup.isOpen()){ 
		return;
	}

	if (sap.ui.core.TooltipBase.sOpenTimeout) {
		jQuery.sap.clearDelayedCall(sap.ui.core.TooltipBase.sOpenTimeout);
		sap.ui.core.TooltipBase.sOpenTimeout = undefined;
	}

	// TODO this._parentControl member not defined! Can't we use oSC instead?
	// fire the "beforeOpen" event and delay display of the Callout if the application requests this
	if(!this.fireEvent("beforeOpen", {parent:this._currentControl}, true, false)){
		if(!this.sCloseNowTimeout){
			// postpone opening for 200ms
			sap.ui.core.TooltipBase.sOpenTimeout = jQuery.sap.delayedCall(200, this, "openPopup", [this._currentControl]);
		}
		return;
	};

	// save parent focus info to be restored after close
	this.oParentFocusInfo = oSC.getFocusInfo();

	this.oPopup.attachEvent("opened", this.handleOpened, this);

	// use TooltipBase to open the pop-up
	sap.ui.core.TooltipBase.prototype.openPopup.call(this, oSC);

	this.adjustPosition();

	this.fireOpen({ parent : this._currentControl });
};

/**
 * Close the Callout popup.
 *
 * @public
 */
sap.ui.commons.CalloutBase.prototype.close = function() {
	if(this.oPopup && this.oPopup.isOpen() && !this.sCloseNowTimeout){
		if (sap.ui.core.TooltipBase.sOpenTimeout) {
			jQuery.sap.clearDelayedCall(sap.ui.core.TooltipBase.sOpenTimeout);
			sap.ui.core.TooltipBase.sOpenTimeout = undefined;
		}
		this.closePopup();
	}
};

/**
 * Close CalloutBase. Fire the close event.
 *
 * @private
 */
sap.ui.commons.CalloutBase.prototype.closePopup = function() {
	var bWasOpen = this.oPopup !== undefined && this.oPopup.isOpen();

	if(this.fAnyEventHandlerProxy){
		jQuery.sap.unbindAnyEvent(this.onAnyEvent);
	}

	// This also attaches the handleClosed function to the closed-event
	sap.ui.core.TooltipBase.prototype.closePopup.call(this);

	// Set focus to the parent control.
	// Accessibility requirement: a focused Callout should set focus to its parent after close,
	// and not to a control where it could be found originally (In the scenario when a Callout
	// is opened on hover and a control inside it was clicked on with the mouse. This would
	// implicitly mean that a user has moved focus to the parent control intentionally)
	if (bWasOpen && this._currentControl && this.bFocused) {
		this._currentControl.applyFocusInfo(this.oParentFocusInfo);
		this.bFocused = false;
	}

	// inform the application
	this.fireClose();
};

/**
 * Attaches the Callout to the Popup's closed-event and forwards it accordingly to the attached listeners
 * @private
 */
sap.ui.commons.CalloutBase.prototype.handleClosed = function(){
	if (this.oPopup){
		this.oPopup.detachEvent("closed", this.handleClosed, this);
		this.fireClosed();
	}
};

/**
 * Handle the key down event for ESCAPE and Ctrl-I.
 *
 * @param {jQuery.Event}
 *            oEvent - the event that occurred on the Parent of the Callout.
 * @private
 */
sap.ui.commons.CalloutBase.prototype.onkeydown = function(oEvent) {

	var bCtrlI = oEvent.ctrlKey && oEvent.which == jQuery.sap.KeyCodes.I;
	var bEsc = oEvent.which == jQuery.sap.KeyCodes.ESCAPE;

	if(!bCtrlI && !bEsc){
		if(jQuery(oEvent.target).control(0) === this._currentControl){
			// Close callout by any key press on the parent control except for Ctrl-I
			this.close();
		}
		return;
	}

	// do not try to open the same callout twice
	if (bCtrlI) {
		if (this.oPopup && this.oPopup.isOpen()){
			return; // this is already opened
		}
		this.bDoFocus = true; // accessibility: request focus
	}

	// let the TooltipBase remove/set standard tooltips and open/close the popup
	sap.ui.core.TooltipBase.prototype.onkeydown.call(this, oEvent);
};

/**
 * If the callout has been opened with a keyboard command, the mouse
 * pointer is most probably outside: the callout does not receive any
 * mouseover and mouseout events. Arrange a global mousemove listener
 * temporarily.
 * Use case: accessibility testing; advanced users that prefer to work with
 * keyboard instead of mouse.
 *
 * @private
 */
sap.ui.commons.CalloutBase.prototype.handleOpened = function() {
	this.oPopup.detachEvent("opened", this.handleOpened, this);

	// The following is needed only of the callout was opened with the keyboard:
	// - request focus (accessibility requirement)
	if (this.bDoFocus) {
		this.focus();
		this.bDoFocus = false;
		this.bFocused = true; // Remember to set focus to parent on close
	}
	
	this.fireOpened();
	
	// - listen to mouse over events outside
	//   do always because the Callout can lose focus to child popup controls
	jQuery.sap.bindAnyEvent(this.fAnyEventHandlerProxy);
};

/**
 * Event handler for the focusin event.
 * Organize a local tab chain inside of a callout.
 * If it occurs on the focus handler elements at the beginning of the callout,
 * the focus is set to the end, and vice versa.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.CalloutBase.prototype.onfocusin = function(oEvent){

	// Some element has been focused inside of the popup.
	// Focus will be set to the parent after popup close.
	this.bFocused = true;

	var oSourceDomRef = oEvent.target;

	// The same logic as in the Dialog.control:
	if (oSourceDomRef.id === this.getId() + "-fhfe") {
		// the FocusHandlingFirstElement was focused and thus the focus should move to the last element.
		jQuery.sap.focus(this.$("cont").lastFocusableDomRef());
	} else if (oSourceDomRef.id === this.getId() + "-fhee") {
		// the FocusHandlingEndElement was focused and thus the focus should move to the first element.
		jQuery.sap.focus(this.$("cont").firstFocusableDomRef());
	}
};

/**
 * When a control that has a Callout looses the focus to the Callout contents,
 * do not close it. Override the onfocusout event handler of TooltipBalse.
 * @param {jQuery.EventObject} the event indication that the focus is lost
 * @private
 */
sap.ui.commons.CalloutBase.prototype.onfocusout = function(oEvent) {
	return;
};

/**
* Handle the mouseover event: do not close if a child control has a simple tooltip
* @param {jQuery.EventObject} oEvent The event that occurred in the callout
* @private
 */
sap.ui.commons.CalloutBase.prototype.onmouseover = function(oEvent) {
	// do not close my pop-up if it was opened already
	if (this.oPopup && (this.oPopup.isOpen() && this.oPopup.getContent() == this)) {
		if (this.sCloseNowTimeout){
			jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
			this.sCloseNowTimeout = null; }
		return;
	} else {
		sap.ui.core.TooltipBase.prototype.onmouseover.call(this, oEvent);
	}
};

/**
 * Handle the mouseout event of a Callout. Override the default TooltipBase behavior when 
 * the mouse pointer is over some other popup on the screen
 * @param {jQuery.EventObject} oEvent mouseout Event.
 * @private
 */
sap.ui.commons.CalloutBase.prototype.onmouseout = function(oEvent) {
	// Do not close callout when the mouse goes to a popup (like menu)
	if(this.oPopup && (this.oPopup.isOpen() && this.isPopupElement(oEvent.relatedTarget))) {
		return;
	}
	sap.ui.core.TooltipBase.prototype.onmouseout.call(this, oEvent);
};

/**
 * Always close Callout when the user clicks on the parent control.
 * @param {jQuery.EventObject} the event
 * @private
 */
sap.ui.commons.CalloutBase.prototype.onmousedown = function(oEvent) {
	if(jQuery(oEvent.target).control(0) === this._currentControl){
		this.close();
	}
};

/**
 * Handles the outer event of the popup.
 * @param {sap.ui.core.Event} oControlEvent The event
 * @private
 */
sap.ui.commons.CalloutBase.prototype.onAnyEvent = function(oEvent){

	if((this.oPopup && !this.oPopup.isOpen()) || oEvent.type != "mouseover" || this.hasChild(oEvent.target)) {
		return;
	}

	// do not close if the hovered element is a top level popup or it is the parent of the callout
	var bDoNotClose = this.isPopupElement(oEvent.target) || jQuery(oEvent.target).control(0) === this._currentControl;
	if(!bDoNotClose && !this.sCloseNowTimeout && !sap.ui.core.TooltipBase.sOpenTimeout){
		// schedule close if mouse moved outside of the Popup
		this.sCloseNowTimeout = jQuery.sap.delayedCall(400, this, "closePopup");
	}
	if (bDoNotClose && this.sCloseNowTimeout) {
		// do not close when inside
		jQuery.sap.clearDelayedCall(this.sCloseNowTimeout);
		this.sCloseNowTimeout = null;
	}
};

/**
 * Set position of the Callout window relative to the parent control.
 * This function automatically calculates and sets the correct offset,
 * use it instead of <code>setMyPosition/setAtPosition</code>.
 * @param {sap.ui.core.Popup.Dock} myPosition docking position of the Callout
 * @param {sap.ui.core.Popup.Dock} atPosition docking position of the parent control
 * @return {sap.ui.commons.CalloutBase} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.CalloutBase.prototype.setPosition = function(myPosition, atPosition){

	var myPos = myPosition || sap.ui.core.Popup.Dock.BeginBottom;
	var atPos = atPosition || sap.ui.core.Popup.Dock.BeginTop;

	var myX = 0, myY = 0, atX = 0, atY = 0, gap = 5;

	if((myPos.indexOf("begin") > -1) || (myPos.indexOf("left") > -1)){
		myX = -1;
	} else if ((myPos.indexOf("right") > -1) || (myPos.indexOf("end") > -1)){
		myX = 1;
	}

	if((atPos.indexOf("begin") > -1) || (atPos.indexOf("left") > -1)){
		atX = -1;
	} else if ((atPos.indexOf("right") > -1) || (atPos.indexOf("end") > -1)){
		atX = 1;
	}

	if(myPos.indexOf("top") > -1){
		myY = -1;
	} else if (myPos.indexOf("bottom") > -1){
		myY = 1;
	}

	if(atPos.indexOf("top") > -1){
		atY = -1;
	} else if (atPos.indexOf("bottom") > -1){
		atY = 1;
	}

	var offset = ((myX - atX) * myX * atX * gap) + " " + ((myY - atY) * myY * atY * gap);

	this.setMyPosition(myPos);
	this.setAtPosition(atPos);
	this.setOffset(offset);

	return this;
};


}; // end of sap/ui/commons/CalloutBase.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Carousel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Carousel.
jQuery.sap.declare("sap.ui.commons.Carousel");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Carousel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getOrientation orientation} : sap.ui.commons.enums.Orientation (default: sap.ui.commons.enums.Orientation.horizontal)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDefaultItemHeight defaultItemHeight} : int (default: 150)</li>
 * <li>{@link #getDefaultItemWidth defaultItemWidth} : int (default: 150)</li>
 * <li>{@link #getAnimationDuration animationDuration} : int (default: 500)</li>
 * <li>{@link #getVisibleItems visibleItems} : int</li>
 * <li>{@link #getHandleSize handleSize} : int (default: 22)</li>
 * <li>{@link #getFirstVisibleIndex firstVisibleIndex} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Carousel holds multiple controls and displays them vertical or horizontal next to each other. You can define how many content items should be displayed at once or let the carousel determine that for you. Navigation is done through buttons or keys.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.8.0
 * @name sap.ui.commons.Carousel
 */
sap.ui.core.Control.extend("sap.ui.commons.Carousel", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"showNext", "showPrevious", "showElementWithId"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"orientation" : {type : "sap.ui.commons.enums.Orientation", group : "Misc", defaultValue : sap.ui.commons.enums.Orientation.horizontal},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"defaultItemHeight" : {type : "int", group : "Misc", defaultValue : 150},
		"defaultItemWidth" : {type : "int", group : "Misc", defaultValue : 150},
		"animationDuration" : {type : "int", group : "Misc", defaultValue : 500},
		"visibleItems" : {type : "int", group : "Misc", defaultValue : null},
		"handleSize" : {type : "int", group : "Misc", defaultValue : 22},
		"firstVisibleIndex" : {type : "int", group : "Appearance", defaultValue : 0}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Carousel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Carousel.extend
 * @function
 */


/**
 * Getter for property <code>orientation</code>.
 * Can be either "horizontal" or "vertical"
 *
 * Default value is <code>horizontal</code>
 *
 * @return {sap.ui.commons.enums.Orientation} the value of property <code>orientation</code>
 * @public
 * @name sap.ui.commons.Carousel#getOrientation
 * @function
 */

/**
 * Setter for property <code>orientation</code>.
 *
 * Default value is <code>horizontal</code> 
 *
 * @param {sap.ui.commons.enums.Orientation} oOrientation  new value for property <code>orientation</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#setOrientation
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of carousel
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Carousel#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of carousel
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.Carousel#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#setHeight
 * @function
 */


/**
 * Getter for property <code>defaultItemHeight</code>.
 * Default height of item in carousel if no height can be determined
 *
 * Default value is <code>150</code>
 *
 * @return {int} the value of property <code>defaultItemHeight</code>
 * @public
 * @name sap.ui.commons.Carousel#getDefaultItemHeight
 * @function
 */

/**
 * Setter for property <code>defaultItemHeight</code>.
 *
 * Default value is <code>150</code> 
 *
 * @param {int} iDefaultItemHeight  new value for property <code>defaultItemHeight</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#setDefaultItemHeight
 * @function
 */


/**
 * Getter for property <code>defaultItemWidth</code>.
 * Default width of item in carousel if no height can be determined
 *
 * Default value is <code>150</code>
 *
 * @return {int} the value of property <code>defaultItemWidth</code>
 * @public
 * @name sap.ui.commons.Carousel#getDefaultItemWidth
 * @function
 */

/**
 * Setter for property <code>defaultItemWidth</code>.
 *
 * Default value is <code>150</code> 
 *
 * @param {int} iDefaultItemWidth  new value for property <code>defaultItemWidth</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#setDefaultItemWidth
 * @function
 */


/**
 * Getter for property <code>animationDuration</code>.
 * Duration for animation when navigating through children
 *
 * Default value is <code>500</code>
 *
 * @return {int} the value of property <code>animationDuration</code>
 * @public
 * @name sap.ui.commons.Carousel#getAnimationDuration
 * @function
 */

/**
 * Setter for property <code>animationDuration</code>.
 *
 * Default value is <code>500</code> 
 *
 * @param {int} iAnimationDuration  new value for property <code>animationDuration</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#setAnimationDuration
 * @function
 */


/**
 * Getter for property <code>visibleItems</code>.
 * If defined, the carousel displays the number of items defined. Items will be resized to fit the area.
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>visibleItems</code>
 * @public
 * @name sap.ui.commons.Carousel#getVisibleItems
 * @function
 */

/**
 * Setter for property <code>visibleItems</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iVisibleItems  new value for property <code>visibleItems</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#setVisibleItems
 * @function
 */


/**
 * Getter for property <code>handleSize</code>.
 * Size of the handle in pixels. (Height for vertical carousel, width for horizontal carousel)
 *
 * Default value is <code>22</code>
 *
 * @return {int} the value of property <code>handleSize</code>
 * @public
 * @name sap.ui.commons.Carousel#getHandleSize
 * @function
 */

/**
 * Setter for property <code>handleSize</code>.
 *
 * Default value is <code>22</code> 
 *
 * @param {int} iHandleSize  new value for property <code>handleSize</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#setHandleSize
 * @function
 */


/**
 * Getter for property <code>firstVisibleIndex</code>.
 * The index of the element in the content aggreation which is displayed first on rendering
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>firstVisibleIndex</code>
 * @public
 * @since 1.11.0
 * @name sap.ui.commons.Carousel#getFirstVisibleIndex
 * @function
 */

/**
 * Setter for property <code>firstVisibleIndex</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iFirstVisibleIndex  new value for property <code>firstVisibleIndex</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.0
 * @name sap.ui.commons.Carousel#setFirstVisibleIndex
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Controls which are displayed inside the carousel
 * 
 * <strong>Note</strong>: this is the default aggregation for Carousel.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.Carousel#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.commons.Carousel#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Carousel#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Carousel#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#destroyContent
 * @function
 */


/**
 * Binder for aggregation <code>content</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#bindContent
 * @function
 */

/**
 * Unbinder for aggregation <code>content</code>.
 *
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Carousel#unbindContent
 * @function
 */


/**
 * Shows next item in carousel. This can be only used after the component is rendered.
 *
 * @name sap.ui.commons.Carousel.prototype.showNext
 * @function

 * @type void
 * @public
 */


/**
 * Shows previous item in carousel. This can be only used after the component is rendered.
 *
 * @name sap.ui.commons.Carousel.prototype.showPrevious
 * @function

 * @type void
 * @public
 */


/**
 * Shows the element with id specified. This can be only used after the component is rendered.
 *
 * @name sap.ui.commons.Carousel.prototype.showElementWithId
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\commons\Carousel.js
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


/**
 * Initialize the carousel control
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.init = function() {
	this._visibleItems = 0;
};

/**
 * Clean up control when it is destroyed
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.exit = function() {
	// Cleanup resize event registration on exit
	if (this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
	this._destroyItemNavigation();
};

/**
 * If one of the navigation buttons is clicked we trigger the navigation
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onclick = function(oEvent) {
	var sCarouselId = this.getId();

	switch (oEvent.target) {
	case jQuery.sap.byId(sCarouselId + '-prevbutton')[0]:
		this.showPrevious();
		break;
	case jQuery.sap.byId(sCarouselId + '-nextbutton')[0]:
		this.showNext();
		break;
	default:
		return;
	}
};

/**
 * Used for before-rendering initialization.
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onBeforeRendering = function() {
	// Cleanup resize event registration before re-rendering
	if (this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};

/**
 * Used for after-rendering initialization.
 *
 * @private
 */
sap.ui.commons.Carousel.prototype.onAfterRendering = function() {
	// Define which attribute needs to be animated
	if (this.getOrientation() == "vertical") {
		this._sAnimationAttribute = 'margin-top';
	} else {
		if (sap.ui.getCore().getConfiguration().getRTL()) {
			this._sAnimationAttribute = 'margin-right';
		} else {
			this._sAnimationAttribute = 'margin-left';
		}
	}

	this.showElementWithId(this._getItemIdByIndex(this.getFirstVisibleIndex()));

	this.calculateAndSetSize();
	this.oDomRef = this.getDomRef();
	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.oDomRef, jQuery.proxy(this.onresize, this));
	
	this._initItemNavigation();
};

/**
 * Initialize item navigation
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype._initItemNavigation = function() {
	var $this = this.$();
	var $scrollList = this.$("scrolllist");

	if (!this._oItemNavigation) {
		this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this._oItemNavigation.setCycling(true);
		this.addDelegate(this._oItemNavigation);
		//Setting focus on next to an invisible element changes the scollPosition and messes up correct display
		//So after setting the focus, we need to reset the left scrollpos
		this._oItemNavigation.attachEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus, function(oEvent) {
			var $ContentArea = this.$("contentarea"),
				$ScrollList = this.$("scrolllist");

			// ItemNavigation should only handle keyboard, do not set the focus on a carousel item if clicked on control inside
			var oOrgEvent = oEvent.getParameter("event");
			if (oOrgEvent && oOrgEvent.type == "mousedown") {
				var bItem = false;
				for ( var i = 0; i < $ScrollList.children().length; i++) {
					var oItem = $ScrollList.children()[i];
					if (oOrgEvent.target.id == oItem.id) {
						bItem = true;
						break;
					}
				}
				if (!bItem) {
					// something inside carousel item clicked -> focus this one
					oOrgEvent.target.focus();
				}
			}

			if (sap.ui.getCore().getConfiguration().getRTL()) {
				$ContentArea.scrollLeft($ScrollList.width()  - $ContentArea.width());
			} else {
				$ContentArea.scrollLeft(0);
			}
		}, this);
	}

	this._oItemNavigation.setRootDomRef($scrollList[0]);
	this._oItemNavigation.setItemDomRefs($scrollList.children());
}

/**
 * Destroy item navigation
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype._destroyItemNavigation = function() {
	if (this._oItemNavigation) {
		this._oItemNavigation.destroy();
		this._oItemNavigation = undefined;
	}
}

/**
 * Called after the theme has been switched. Some adjustments required.
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onThemeChanged = function (oEvent) {
	this.calculateAndSetSize();
};

/**
 * Focus in handling
 * handles the focus when you tab into the control
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onfocusin = function(oEvent) {
	var $target = jQuery(oEvent.target);
	// KEYBOARD HANDLING (_bIgnoreFocusIn is set in onsaptabXXX)
	if (!this._bIgnoreFocusIn && ($target.hasClass("sapUiCrslBefore") || $target.hasClass("sapUiCrslAfter"))) {
		// when entering the before or after helper DOM elements we put the
		// focus on the current focus element of the item navigation and we
		// leave the action mode!
		this._leaveActionMode();
		// set the focus on the last focused dom ref of the item navigation or
		// in case if not set yet (tab previous into item nav) then we set the
		// focus to the root domref
		jQuery(this._oItemNavigation.getFocusedDomRef() || this._oItemNavigation.getRootDomRef()).focus();
	}
};

/**
 * If we are in action mode we only allow tabbing within the selected element
 * else we focus on the next element in the tab chain (not in the carousel item)
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onsaptabnext = function(oEvent) {
	var $this = this.$();
	if (this._bActionMode) {
		if ($this.find(".sapUiCrslScl").lastFocusableDomRef() === oEvent.target) {
			$this.find(".sapUiCrslScl").firstFocusableDomRef().focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	} else {
		if (this._oItemNavigation.getFocusedDomRef() === oEvent.target) {
			this._bIgnoreFocusIn = true;
			$this.find(".sapUiCrslAfter").focus();
			this._bIgnoreFocusIn = false;
		}
	}
};

/**
 * If we are in action mode we only allow tabbing within the selected element
 * else we focus on the previous element in the tab chain (not in the carousel item)
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onsaptabprevious = function(oEvent) {
	var $this = this.$();
	if (this._bActionMode) {
		if ($this.find(".sapUiCrslScl").firstFocusableDomRef() === oEvent.target) {
			$this.find(".sapUiCrslScl").lastFocusableDomRef().focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	} else {
		if (this._oItemNavigation.getFocusedDomRef() === oEvent.target &&
				jQuery.sap.containsOrEquals($this.find(".sapUiCrslScl").get(0), oEvent.target)) {
			this._bIgnoreFocusIn = true;
			$this.find(".sapUiCrslBefore").focus();
			this._bIgnoreFocusIn = false;
		}
	}
};

/**
 * handle the ESCAPE key to leave the action mode
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onsapescape = function(oEvent) {
	this._leaveActionMode(oEvent);
};

/**
 * Trigger the navigation to the next item and stop current animations (if available)
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onsapnext = function(oEvent) {
	var $target = jQuery(oEvent.target);
	var $ScrollList = this.$("scrolllist");
	$ScrollList.stop(true, true);
	if ($target.hasClass('sapUiCrslItm') && $target.nextAll(':visible').length < 2) {
		this.showNext();
		oEvent.preventDefault();
	}
};

/**
 * Trigger the navigation to the previous item and stop current animations (if available)
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onsapprevious = function(oEvent) {
	var $target = jQuery(oEvent.target);
	var $ScrollList = this.$("scrolllist");
	$ScrollList.stop(true, true);
	if ($target.hasClass('sapUiCrslItm') && $target.prevAll(':visible').length < 2) {
		this.showPrevious();
		oEvent.preventDefault();
	}
};

/**
 * If in action mode and F2 is pressed we leave the action mode
 * If not in action mode and F2 or enter is pressed we enter the action mode
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onkeydown = function(oEvent) {
	var $this = this.$();
	if (!this._bActionMode &&
		oEvent.keyCode == jQuery.sap.KeyCodes.F2 ||
		oEvent.keyCode == jQuery.sap.KeyCodes.ENTER) {
		if ($this.find(".sapUiCrslScl li:focus").length > 0) {
			this._enterActionMode($this.find(".sapUiCrslScl li:focus :sapFocusable").get(0));
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	} else if (this._bActionMode &&
		oEvent.keyCode == jQuery.sap.KeyCodes.F2) {
		this._leaveActionMode(oEvent);
	} 
};

/**
 * Handle clicking into elements
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype.onmouseup = function(oEvent) {
	if (this.$().find(".sapUiCrslScl li :focus").length > 0) {
		// when clicking into a focusable control we enter the action mode!
		this._enterActionMode(this.$().find(".sapUiCrslScl li :focus").get(0));
	} else {
		// when clicking anywhere else in the table we leave the action mode!
		this._leaveActionMode(oEvent);
	}
};

sap.ui.commons.Carousel.prototype.onswipeleft = function(oEvent) {
	this.showNext();
};

sap.ui.commons.Carousel.prototype.onswiperight = function(oEvent) {
	this.showPrevious();
};


/**
 * Enter action mode
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype._enterActionMode = function(oDomRef) {
	// only enter the action mode when not already in action mode
	if (oDomRef && !this._bActionMode) {

		// in the action mode we need no item navigation
		this._bActionMode = true;
		this.removeDelegate(this._oItemNavigation);

		// remove the tab index from the item navigation
		jQuery(this._oItemNavigation.getFocusedDomRef()).attr("tabindex", "-1");
		
		//set aria active descendent
		this.$("scrolllist").attr("aria-activedescendant", jQuery(this._oItemNavigation.getFocusedDomRef()).attr("id"));

		// set the focus to the active control
		jQuery(oDomRef).focus();
	}
};

/**
 * Leave action mode
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype._leaveActionMode = function(oEvent) {
	if (this._bActionMode) {

		// in the navigation mode we use the item navigation
		this._bActionMode = false;
		this.addDelegate(this._oItemNavigation);

		// reset the tabindex of the focused domref of the item navigation
		jQuery(this._oItemNavigation.getFocusedDomRef()).attr("tabindex", "0");

		//remove aria active descendent
		this.$("scrolllist").removeAttr("aria-activedescendant");

		// when we have an event which is responsible to leave the action mode
		// we search for the closest
		if (oEvent) {
			if (jQuery(oEvent.target).closest("li[tabindex=-1]").length > 0) {
				// triggered when clicking into an item, then we focus the item
				var iIndex = jQuery(this._oItemNavigation.aItemDomRefs).index(jQuery(oEvent.target).closest("li[tabindex=-1]").get(0));
				this._oItemNavigation.focusItem(iIndex, null);
			} else {
				// somewhere else means whe check if the click happend inside
				// the container, then we focus the last focused element
				if (jQuery.sap.containsOrEquals(this.$().find(".sapUiCrslScl").get(0), oEvent.target)) {
					this._oItemNavigation.focusItem(this._oItemNavigation.getFocusedIndex(), null);
				}
			}
		} else {
			// when no event is given we just focus the last focused index
			this._oItemNavigation.focusItem(this._oItemNavigation.getFocusedIndex(), null);
		}
	}
};

/**
 * Function is called when window is resized
 *
 * @param {jQuery.Event}
 *            oEvent
 * @private
 */
sap.ui.commons.Carousel.prototype.onresize = function(oEvent) {
	if (!this.getDomRef()) {
		// carousel is not rendered, maybe deleted from DOM -> deregister resize
		// handler and do nothing
		// Cleanup resize event registration on exit
		if (this.sResizeListenerId) {
			sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
			this.sResizeListenerId = null;
		}
		return;
	}

	this.calculateAndSetSize();
};

/**
 * Slide to previous element
 *
 * @public
 */
sap.ui.commons.Carousel.prototype.showPrevious = function() {
	var mAnimationArguments = {};
	mAnimationArguments[this._sAnimationAttribute] = 0;
	var $ScrollList = this.$("scrolllist");
	var $ContentArea = this.$("contentarea");
	if ($ScrollList.children('li').length < 2) {
		return;
	}
	$ScrollList.stop(true, true);
	$ScrollList.css(this._sAnimationAttribute, -this._iMaxWidth);
	var $lastItem = $ScrollList.children('li:last');
	var $firstItem = $ScrollList.children('li:first');
	this._showAllItems();
	$lastItem.insertBefore($firstItem);
	$ScrollList.append($lastItem.sapExtendedClone(true));
	var me = this;
	$ScrollList.animate(mAnimationArguments, this.getAnimationDuration(), function() {
			$ScrollList.children('li:last').remove();
			me.setProperty("firstVisibleIndex", me._getContentIndex($ScrollList.children('li:first').attr('id')), true);
			me._hideInvisibleItems();
		});
};

/**
 * Slide to next element
 *
 * @public
 */
sap.ui.commons.Carousel.prototype.showNext = function() {
	var mAnimationArguments = {};
	mAnimationArguments[this._sAnimationAttribute] = -this._iMaxWidth;
	var $ScrollList = this.$("scrolllist");
	var $ContentArea = this.$("contentarea");
	if ($ScrollList.children('li').length < 2) {
		return;
	}
	$ScrollList.stop(true, true);
	this._showAllItems();
	var sAnimationAttribute = this._sAnimationAttribute;
	var me = this;
	var $firstItem = $ScrollList.children('li:first');
	$firstItem.appendTo($ScrollList);
	$firstItem.sapExtendedClone(true).insertBefore($ScrollList.children('li:first'));
	$ScrollList.animate(mAnimationArguments, this.getAnimationDuration(), function() {
			$ScrollList.children('li:first').remove();
			jQuery(this).css(sAnimationAttribute, '0px');
			me.setProperty("firstVisibleIndex", me._getContentIndex($ScrollList.children('li:first').attr('id')), true);
			me._hideInvisibleItems();
		});
};

/**
 * Slide to specific element
 *
 * @public
 * @param {string} sElementId
 */
sap.ui.commons.Carousel.prototype.showElementWithId = function(sElementId) {
	this._showAllItems();
	var $ScrollList = this.$("scrolllist");
	sElementId = this.getId() + "-item-" + sElementId;
	var index = $ScrollList.children('li').index(jQuery.sap.byId(sElementId));
	$ScrollList.children('li:lt(' + index + ')').appendTo($ScrollList);
	this._hideInvisibleItems();
};

sap.ui.commons.Carousel.prototype.calculateAndSetSize = function() {
	var aContent = this.getContent();
	var sCarouselId = this.getId();

	this._showAllItems();

	if (aContent.length > 0) {
		var maxWidth = 0;
		var maxHeight = 0;

		for ( var i = 0; i < aContent.length; i++) {
			var childWidth, childHeight;
			try {
				childWidth = aContent[i].getWidth();
				if (childWidth.substr(-1) == "%") {
					childWidth = this.getDefaultItemWidth();
				}
			} catch (e) {
				childWidth = this.getDefaultItemWidth();
			}
			try {
				childHeight = aContent[i].getHeight();
				if (childHeight.substr(-1) == "%") {
					childHeight = this.getDefaultItemHeight();
				}
			} catch (e) {
				childHeight = this.getDefaultItemHeight();
			}
			maxWidth = Math.max(maxWidth, parseInt(childWidth, 10));
			maxHeight = Math.max(maxHeight, parseInt(childHeight, 10));
		}

		if (maxWidth == 0 || isNaN(maxWidth)) {
			maxWidth = this.getDefaultItemWidth();
		}
		if (maxHeight == 0 || isNaN(maxHeight)) {
			maxHeight = this.getDefaultItemHeight();
		}

		var contentBarSize;
		var visibleItems = this.getVisibleItems();
		var $Me = jQuery.sap.byId(sCarouselId);
		var $NextButton = jQuery.sap.byId(sCarouselId + '-nextbutton');
		var $PrevButton = jQuery.sap.byId(sCarouselId + '-prevbutton');
		var $ContentArea = jQuery.sap.byId(sCarouselId + '-contentarea');

		if (this.getWidth() && this.getOrientation() == "vertical") {
			maxWidth = $Me.width();
		}
		if (this.getHeight() && this.getOrientation() == "horizontal") {
			maxHeight = $Me.height();
		}

		this.$().addClass('sapUiCrsl' + jQuery.sap.charToUpperCase(this.getOrientation(), 0));

		if (this.getOrientation() == "horizontal") {
			contentBarSize = $Me.width() - this.getHandleSize() * 2 - 1;
			$ContentArea.css('left', this.getHandleSize() + "px").css('right', this.getHandleSize() + "px");

			if (visibleItems == 0) {
				visibleItems = Math.floor(contentBarSize / maxWidth);
			}

			maxWidth = contentBarSize / visibleItems;
			this._iMaxWidth = maxWidth;

			var cLineHeight = maxHeight + "px";
			$ContentArea.find('.sapUiCrslItm').css("width", maxWidth + "px").css("height", maxHeight + "px");
			$PrevButton.css("height", maxHeight).css("line-height", cLineHeight);
			$NextButton.css("height", maxHeight).css("line-height", cLineHeight);
			$ContentArea.height(maxHeight);
			$Me.height(maxHeight);
		} else {
			contentBarSize = $Me.height() - this.getHandleSize() * 2 - 1;
			$ContentArea.css('top', this.getHandleSize() + "px").css('bottom', this.getHandleSize() + "px");

			if (visibleItems == 0) {
				visibleItems = Math.floor(contentBarSize / maxHeight);
			}

			maxHeight = contentBarSize / visibleItems;
			this._iMaxWidth = maxHeight;

			$ContentArea.find('.sapUiCrslItm').css("width", maxWidth + "px").css("height", maxHeight + "px");
			$PrevButton.width(maxWidth).after($ContentArea);
			$NextButton.width(maxWidth);
			$ContentArea.width(maxWidth);
			$Me.width(maxWidth);
		}
		this._visibleItems = visibleItems;
		this._hideInvisibleItems();
	}
};

sap.ui.commons.Carousel.prototype.getFocusDomRef = function() {
	return this.oContentArea;
};

/**
 * Make all carousel items visible
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype._showAllItems = function() {
	var $ContentArea = this.$("contentarea");
	$ContentArea.find('.sapUiCrslItm').show();
};

/**
 * Hide all carousel items
 * 
 * @private
 */
sap.ui.commons.Carousel.prototype._hideInvisibleItems = function() {
	var $ContentArea = this.$("contentarea");
	$ContentArea.find('.sapUiCrslItm:gt(' + (this._visibleItems - 1)  + ')').hide();
};

sap.ui.commons.Carousel.prototype._getContentIndex = function(sId) {
	var aIdParts = sId.split("-item-");
	return jQuery.inArray(sap.ui.getCore().byId(aIdParts[1]), this.getContent());
};

sap.ui.commons.Carousel.prototype._getItemIdByIndex = function(iIndex) {
	var oContent = this.getContent()[iIndex];
	if (!oContent) {
		return null;
	}
	return oContent.getId();
};

/**
 * Setter for property <code>firstVisibleIndex</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iFirstVisibleIndex  new value for property <code>firstVisibleIndex</code>
 * @return {sap.ui.commons.Carousel} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.0
 * @name sap.ui.commons.Carousel#setFirstVisibleIndex
 * @function
 */
sap.ui.commons.Carousel.prototype.setFirstVisibleIndex = function(iFirstVisibleIndex) {
	this.setProperty("firstVisibleIndex", iFirstVisibleIndex, true);
	this.showElementWithId(this._getItemIdByIndex(iFirstVisibleIndex));
	if (this._oItemNavigation) {
		this._oItemNavigation.focusItem(iFirstVisibleIndex);
	}
	return this;
};


//Fix because jQuery clone doesn't support cloning textarea values
//jQuery Ticket #3016 (http://bugs.jquery.com/ticket/3016)

//Textarea and select clone() bug workaround | Spencer Tipping
//Licensed under the terms of the MIT source code license

//Motivation.
//jQuery's clone() method works in most cases, but it fails to copy the value of textareas and select elements. This patch replaces jQuery's clone() method with a wrapper that fills in the
//values after the fact.

//An interesting error case submitted by Piotr Przybył: If two <select> options had the same value, the clone() method would select the wrong one in the cloned box. The fix, suggested by Piotr
//and implemented here, is to use the selectedIndex property on the <select> box itself rather than relying on jQuery's value-based val().

(function (original) {
	jQuery.fn.sapExtendedClone = function () {
		var result           = original.apply(this, arguments);
		var my_textareas     = this.find('textarea').add(this.filter('textarea'));
		var result_textareas = result.find('textarea').add(result.filter('textarea'));
		var my_selects       = this.find('select').add(this.filter('select'));
		var result_selects   = result.find('select').add(result.filter('select'));

		for (var i = 0, l = my_textareas.length; i < l; ++i) {
			jQuery(result_textareas[i]).val(jQuery(my_textareas[i]).val());
		}
		for (var i = 0, l = my_selects.length;   i < l; ++i) {
			result_selects[i].selectedIndex = my_selects[i].selectedIndex;
		}

		return result;
	};
}) (jQuery.fn.clone);
}; // end of sap/ui/commons/Carousel.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.CheckBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.CheckBox.
jQuery.sap.declare("sap.ui.commons.CheckBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new CheckBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getChecked checked} : boolean (default: false)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getName name} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.CheckBox#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Provides a box which can be flagged, the box has a label. A check box can either stand alone, or in a group with other check boxes. As an option, the boxes can initially be set to status 'Not Editable'.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.CheckBox
 */
sap.ui.core.Control.extend("sap.ui.commons.CheckBox", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"toggle"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"checked" : {type : "boolean", group : "Data", defaultValue : false, bindable : "bindable"},
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"name" : {type : "string", group : "Misc", defaultValue : null}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.CheckBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.CheckBox.extend
 * @function
 */

sap.ui.commons.CheckBox.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>checked</code>.
 * Contains the state of the control whether it is flagged with a check mark, or not
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>checked</code>
 * @public
 * @name sap.ui.commons.CheckBox#getChecked
 * @function
 */

/**
 * Setter for property <code>checked</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bChecked  new value for property <code>checked</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#setChecked
 * @function
 */


/**
 * Binder for property <code>checked</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#bindChecked
 * @function
 */

/**
 * Unbinder for property <code>checked</code>.
 *
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#unbindChecked
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the check box
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.CheckBox#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#setText
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.CheckBox#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Using this property, the control could be disabled, if required.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.CheckBox#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#setEnabled
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Specifies whether the user shall be allowed to flag the check box
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.commons.CheckBox#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#setEditable
 * @function
 */


/**
 * Getter for property <code>valueState</code>.
 * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.ui.commons.CheckBox#getValueState
 * @function
 */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#setValueState
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width can be set to an absolute value. If no value is set, the control width results from the text length.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.CheckBox#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#setWidth
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * The value can be set to LTR or RTL. Otherwise, the control inherits the text direction from its parent control.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.ui.commons.CheckBox#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#setTextDirection
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.ui.commons.CheckBox#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#setName
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.CheckBox#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.CheckBox#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.CheckBox#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.CheckBox#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.CheckBox#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.CheckBox#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * 
 * Event is triggered when the control status is changed by the user by flagging or unflagging the checkbox.
 *  
 *
 * @name sap.ui.commons.CheckBox#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.checked
 *         Checks whether the box is flagged or not flagged.
 * 
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.CheckBox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.CheckBox</code>.<br/> itself. 
 *  
 * 
 * Event is triggered when the control status is changed by the user by flagging or unflagging the checkbox.
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.CheckBox</code>.<br/> itself.
 *
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.CheckBox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.CheckBox#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'checked' of type <code>boolean</code> 
					Checks whether the box is flagged or not flagged.
					</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.CheckBox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.CheckBox#fireChange
 * @function
 */


/**
 * 
 * Inverts the current value of the control.
 * 
 *
 * @name sap.ui.commons.CheckBox.prototype.toggle
 * @function

 * @type sap.ui.commons.CheckBox
 * @public
 */


// Start of sap\ui\commons\CheckBox.js
/**
 * Event handler called when the check box is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.CheckBox.prototype.onclick = function(oEvent) {
	//According to CSN2581852 2012 a readonly CB should be in the tabchain
	// This changed in 2013 back to not in the tabchain: see CSN 0002937527 2013
	// Let's see how often this will be changed back and forth in the future... Accessibility fun! :-D
	// End of 2013 is have to be again in the tabchain.
	// But not in the Form. But this is handled in the FromLayout control
	// Let's see what happens 2014... ;-)
	if(!!sap.ui.Device.browser.internet_explorer && !this.getEnabled()){
		// in IE tabindex = -1 hides focus, so in readOnly/disabled case tabindex must be temporarily set to 0
		// as long as CheckBox is focused
		this.$().attr("tabindex", 0).addClass("sapUiCbFoc"); // the CSS class itself is not used, but IE only draws the standard focus outline when it is added
	}

	this.userToggle(oEvent);
};

/**
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.CheckBox.prototype.onfocusout = function(oEvent) {
	//According to CSN2581852 2012 a readonly CB should be in the tabchain
	// This changed in 2013 back to not in the tabchain: see CSN 0002937527 2013
	// Let's see how often this will be changed back and forth in the future... Accessibility fun! :-D
	// End of 2013 is have to be again in the tabchain.
	// But not in the Form. But this is handled in the FromLayout control
	// Let's see what happens 2014... ;-)
	if(!!sap.ui.Device.browser.internet_explorer && !this.getEnabled()){
		// in IE tabindex = -1 hides focus, so in readOnly/disabled case tabindex must be temporarily set to 0
		// as long as CheckBox is focused - now unset this again
		this.$().attr("tabindex", -1).removeClass("sapUiCbFoc");
	}
};

/**
 * Event handler called when the space key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.CheckBox.prototype.onsapspace = function(oEvent) {
	this.userToggle(oEvent);
};

/**
 * This method is used internally whenever the user toggles the check box value.
 * Purpose: Event cancellation and change event firing.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.CheckBox.prototype.userToggle = function(oEvent) {
	oEvent.preventDefault();
	if (this.getEnabled() && this.getEditable()) {
		this.toggle();
		this.fireChange({checked: this.getChecked()});
	} else {
		// CheckBox has been activated by the user, but value cannot be changed
		// do nothing, but restore the focus to the complete control, as the user might have clicked the <input> element which also can get the focus
		this.getDomRef().focus();
	}
};

// implement public method toggle()
sap.ui.commons.CheckBox.prototype.toggle = function() {
	this.setChecked(!this.getChecked());
	return this;
};

}; // end of sap/ui/commons/CheckBox.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ColorPicker') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ColorPicker.
jQuery.sap.declare("sap.ui.commons.ColorPicker");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ColorPicker.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColorString colorString} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.ColorPicker#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.ColorPicker#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control gives the user the opportunity to choose a color. The color can be defined using HEX-, RGB- or HSV-values or a CSS colorname.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ColorPicker
 */
sap.ui.core.Control.extend("sap.ui.commons.ColorPicker", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getRGB"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"colorString" : {type : "string", group : "Misc", defaultValue : null}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ColorPicker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ColorPicker.extend
 * @function
 */

sap.ui.commons.ColorPicker.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>colorString</code>.
 * This is the import-parameter of the ColorPicker.
 * As input-parameter, it can be a Hexadecimal string (#FFFFFF), a RGB-string rgb(255,255,255), a HSV-string hsv(360,100,100) or a CSS-colorname 'red'.
 * As output-parameter it is a RGB-string containing the current color.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>colorString</code>
 * @public
 * @name sap.ui.commons.ColorPicker#getColorString
 * @function
 */

/**
 * Setter for property <code>colorString</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sColorString  new value for property <code>colorString</code>
 * @return {sap.ui.commons.ColorPicker} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ColorPicker#setColorString
 * @function
 */


/**
 * Value was changed. This event is fired if the value has changed by an user action. 
 *
 * @name sap.ui.commons.ColorPicker#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.r Parameter containing the RED value (0-255)
 * @param {int} oControlEvent.getParameters.g Parameter containing the GREEN value (0-255)
 * @param {int} oControlEvent.getParameters.b Parameter containing the BLUE value (0-255)
 * @param {int} oControlEvent.getParameters.h Parameter containing the HUE value (0-360)
 * @param {int} oControlEvent.getParameters.s Parameter containing the SATURATION value (0-100)
 * @param {int} oControlEvent.getParameters.v Parameter containing the VALUE value (0-100)
 * @param {string} oControlEvent.getParameters.hex Parameter containing the Hexadecimal string (#FFFFFF)
 * @param {string} oControlEvent.getParameters.alpha Parameter containing the alpha value (transparency)
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.ColorPicker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.ColorPicker</code>.<br/> itself. 
 *  
 * Value was changed. This event is fired if the value has changed by an user action. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.ColorPicker</code>.<br/> itself.
 *
 * @return {sap.ui.commons.ColorPicker} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ColorPicker#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.ColorPicker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.ColorPicker} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ColorPicker#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'r' of type <code>int</code> Parameter containing the RED value (0-255)</li>
 * <li>'g' of type <code>int</code> Parameter containing the GREEN value (0-255)</li>
 * <li>'b' of type <code>int</code> Parameter containing the BLUE value (0-255)</li>
 * <li>'h' of type <code>int</code> Parameter containing the HUE value (0-360)</li>
 * <li>'s' of type <code>int</code> Parameter containing the SATURATION value (0-100)</li>
 * <li>'v' of type <code>int</code> Parameter containing the VALUE value (0-100)</li>
 * <li>'hex' of type <code>string</code> Parameter containing the Hexadecimal string (#FFFFFF)</li>
 * <li>'alpha' of type <code>string</code> Parameter containing the alpha value (transparency)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ColorPicker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.ColorPicker#fireChange
 * @function
 */


/**
 * Value was changed. This event is fired during the mouse move. The normal change event ist only fired by mouseup. 
 *
 * @name sap.ui.commons.ColorPicker#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.r Parameter containing the RED value (0-255)
 * @param {int} oControlEvent.getParameters.g Parameter containing the GREEN value (0-255)
 * @param {int} oControlEvent.getParameters.b Parameter containing the BLUE value (0-255)
 * @param {int} oControlEvent.getParameters.h Parameter containing the HUE value (0-360)
 * @param {int} oControlEvent.getParameters.s Parameter containing the SATURATION value (0-100)
 * @param {int} oControlEvent.getParameters.v Parameter containing the VALUE value (0-100)
 * @param {string} oControlEvent.getParameters.hex Parameter containing the Hexadecimal string (#FFFFFF)
 * @param {string} oControlEvent.getParameters.alpha Parameter containing the alpha value (transparency)
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.ui.commons.ColorPicker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.ColorPicker</code>.<br/> itself. 
 *  
 * Value was changed. This event is fired during the mouse move. The normal change event ist only fired by mouseup. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.ColorPicker</code>.<br/> itself.
 *
 * @return {sap.ui.commons.ColorPicker} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ColorPicker#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.ui.commons.ColorPicker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.ColorPicker} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ColorPicker#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'r' of type <code>int</code> Parameter containing the RED value (0-255)</li>
 * <li>'g' of type <code>int</code> Parameter containing the GREEN value (0-255)</li>
 * <li>'b' of type <code>int</code> Parameter containing the BLUE value (0-255)</li>
 * <li>'h' of type <code>int</code> Parameter containing the HUE value (0-360)</li>
 * <li>'s' of type <code>int</code> Parameter containing the SATURATION value (0-100)</li>
 * <li>'v' of type <code>int</code> Parameter containing the VALUE value (0-100)</li>
 * <li>'hex' of type <code>string</code> Parameter containing the Hexadecimal string (#FFFFFF)</li>
 * <li>'alpha' of type <code>string</code> Parameter containing the alpha value (transparency)</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ColorPicker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.ColorPicker#fireLiveChange
 * @function
 */


/**
 * This method delivers the current RGB-values
 *
 * @name sap.ui.commons.ColorPicker.prototype.getRGB
 * @function

 * @type object
 * @public
 */


// Start of sap\ui\commons\ColorPicker.js
/**
 * This file defines behavior for the control sap.ui.commons.ColorPicker
 */


/**
 * Initialization hook... creating composite parts
 */
sap.ui.commons.ColorPicker.prototype.init = function(){

	//	declare global variable for the ColorObject
	this.Color = {
			r   :  255,
			g   :  255,
			b   :  255,
			h   :  0,
			s   :  0,
			v   :  100,
			a	:  1,
			a_old: 1,
			hex :  "#FFFFFF",
			old :  "#FFFFFF"
	};

	//	create global variables
	this.HexString = "FFFFFF";
	this.rgbString = "";
	this.$cpBox = null;
	this.$cpCur = null;
	this.RGB = {
			r : 0,
			g : 0,
			b : 0
	};

	//	check if we are in RTL mode
	this.bRtl  = sap.ui.getCore().getConfiguration().getRTL();

	//	create Matrix layout (outer control)
	this.oMatrix = new sap.ui.commons.layout.MatrixLayout({
		layoutFixed : true,
		columns : 3,
		width : "270px",
		widths : [ "117px", "84px", "69px"]
	});
	this.oMatrix.setParent(this);
	this.oMatrix.addStyleClass("sapUiColorPicker-ColorPickerMatrix");

	//	HTML-Control containing the ColorPickerBox
	var cpBoxID = this.getId() + '-cpBox';
	var cpCurID = this.getId() + '-cpCur';
	this.oHtmlBox = new sap.ui.core.HTML({
		content : "<DIV id=" + cpBoxID + " class=sapUiColorPicker-ColorPickerBox><DIV id=" + cpCurID + " class=sapUiColorPicker-ColorPickerCircle></DIV></DIV>"
	});

	//	HTML-Control containing the Old Color Box
	var ocBoxID = this.getId() + '-ocBox';
	this.oHtmlOldCol = new sap.ui.core.HTML({
		content : "<DIV id=" + ocBoxID + " class=sapUiColorPicker-ColorPickerOldColor></DIV>"
	});

	//	HTML-Control containing the New Color Box
	var ncBoxID = this.getId() + '-ncBox';
	this.oHtmlNewCol = new sap.ui.core.HTML({
		content : "<DIV id=" + ncBoxID + " class=sapUiColorPicker-ColorPickerNewColor></DIV>"
	});

	//	label and input field for Hexadecimal value
	var inpID = this.getId() + '-hxF';
	var hexValue = this.Color.hex.substr(1);
	this.oHexField = new sap.ui.commons.TextField({id: inpID, value : hexValue});
	this.oHexField.addStyleClass("sapUiColorPicker-ColorPickerHexField");
	this.oHexLabel = new sap.ui.commons.Label();
	this.oHexLabel.addStyleClass("sapUiColorPicker-ColorPickerLabels");
	this.oHexLabel.setText("#:");
	this.oHexLabel.setLabelFor(this.oHexField);

	//	label and input field for Red Value
	inpID = this.getId() + '-rF';
	this.oRedField = new sap.ui.commons.TextField({id: inpID, value: this.Color.r, width:"3em"});
	this.oRedField.addStyleClass("sapUiColorPicker-ColorPickerInputFieldsLeft");
	this.oRedLabel = new sap.ui.commons.Label();
	this.oRedLabel.addStyleClass("sapUiColorPicker-ColorPickerLabels");
	this.oRedLabel.setText("R:");
	this.oRedLabel.setLabelFor(this.oRedField);

	//	label and input field for Green Value
	inpID = this.getId() + '-gF';
	this.oGreenField = new sap.ui.commons.TextField({id: inpID, value : this.Color.g, width:"3em"});
	this.oGreenField.addStyleClass("sapUiColorPicker-ColorPickerInputFieldsLeft");
	this.oGreenLabel = new sap.ui.commons.Label();
	this.oGreenLabel.addStyleClass("sapUiColorPicker-ColorPickerLabels");
	this.oGreenLabel.setText("G:");
	this.oGreenLabel.setLabelFor(this.oGreenField);

	//	label and input field for Blue Value
	inpID = this.getId() + '-bF';
	this.oBlueField = new sap.ui.commons.TextField({id: inpID, value : this.Color.b, width:"3em"});
	this.oBlueField.addStyleClass("sapUiColorPicker-ColorPickerInputFieldsLeft");
	this.oBlueLabel = new sap.ui.commons.Label();
	this.oBlueLabel.addStyleClass("sapUiColorPicker-ColorPickerLabels");
	this.oBlueLabel.setText("B:");
	this.oBlueLabel.setLabelFor(this.oBlueField);

	//	label and input field for Hue Value
	inpID = this.getId() + '-hF';
	this.oHueField = new sap.ui.commons.TextField({id: inpID, value : this.Color.h, width:"3em"});
	this.oHueField.addStyleClass("sapUiColorPicker-ColorPickerInputFieldsRight");
	this.oHueLabel = new sap.ui.commons.Label();
	this.oHueLabel.addStyleClass("sapUiColorPicker-ColorPickerLabels");
	this.oHueLabel.setText("H:");
	this.oHueLabel.setLabelFor(this.oHueField);

	//	label and input field for Saturation Value
	inpID = this.getId() + '-sF';
	this.oSatField = new sap.ui.commons.TextField({id: inpID, value : this.Color.s, width:"3em"});
	this.oSatField.addStyleClass("sapUiColorPicker-ColorPickerInputFieldsRight");
	this.oSatLabel = new sap.ui.commons.Label();
	this.oSatLabel.addStyleClass("sapUiColorPicker-ColorPickerLabels");
	this.oSatLabel.setText("S:");
	this.oSatLabel.setLabelFor(this.oSatField);

	//	label and input field for Value
	inpID = this.getId() + '-vF';
	this.oValField = new sap.ui.commons.TextField({id: inpID, value : this.Color.v, width:"3em"});
	this.oValField.addStyleClass("sapUiColorPicker-ColorPickerInputFieldsRight");
	this.oValLabel = new sap.ui.commons.Label();
	this.oValLabel.addStyleClass("sapUiColorPicker-ColorPickerLabels");
	this.oValLabel.setText("V:");
	this.oValLabel.setLabelFor(this.oValField);

	//	slider
	inpID = this.getId() + '-hSLD';
	this.oSlider = new sap.ui.commons.Slider({id: inpID});
	this.oSlider.setMax(360);
	this.oSlider.setValue(parseInt(this.oHueField.getValue()),10);
	this.oSlider.addStyleClass("sapUiColorPicker-ColorPickerSlider");

	// alpha slider
	inpID = this.getId() + '-aSLD';
	this.oAlphaSlider = new sap.ui.commons.Slider({id: inpID});
	this.oAlphaSlider.setMax(1);
	this.oAlphaSlider.setValue(1);
	this.oAlphaSlider.setSmallStepWidth(.01);
	this.oAlphaSlider.addStyleClass("sapUiColorPicker-ColorPickerAlphaSlider");

	//	1.Horizontal Layout
	this.oHLayout1 = new sap.ui.layout.HorizontalLayout({
		content: [this.oRedLabel, this.oRedField]
	});

	//	2.Horizontal Layout
	this.oHLayout2 = new sap.ui.layout.HorizontalLayout({
		content: [this.oGreenLabel, this.oGreenField]
	});

	//	3.Horizontal Layout
	this.oHLayout3 = new sap.ui.layout.HorizontalLayout({
		content: [this.oBlueLabel, this.oBlueField]
	});

	//	4.Horizontal Layout
	this.oHLayout4 = new sap.ui.layout.HorizontalLayout({
		content: [this.oHexLabel, this.oHexField]
	});

	//	5.Horizontal Layout
	this.oHLayout5 = new sap.ui.layout.HorizontalLayout({
		content: [this.oHueLabel, this.oHueField]
	});

	//	6.Horizontal Layout
	this.oHLayout6 = new sap.ui.layout.HorizontalLayout({
		content: [this.oSatLabel, this.oSatField]
	});

	//	7.Horizontal Layout
	this.oHLayout7 = new sap.ui.layout.HorizontalLayout({
		content: [this.oValLabel, this.oValField]
	});

	//	8.Horizontal Layout
	this.oHLayout8 = new sap.ui.layout.HorizontalLayout({
		content: [this.oHtmlOldCol, this.oHtmlNewCol]
	});
	
	//	Vertical Layout1 containing first four horizontal layouts
	this.oVLayout1 = new sap.ui.layout.VerticalLayout({
		content:[ this.oHLayout1, this.oHLayout2, this.oHLayout3, this.oHLayout4]
	});

	//	Vertical Layout2 containing 2.nd four horizontal layouts
	this.oVLayout2 = new sap.ui.layout.VerticalLayout({
		content:[ this.oHLayout5, this.oHLayout6, this.oHLayout7, this.oHLayout8]
	});
	this.oVLayout2.addStyleClass("sapUiColorPicker-ColorPickerLastColumn");

	//	add first Row to the Matrix Layout
	this.oMatrix.createRow(this.oHtmlBox, this.oVLayout1, this.oVLayout2);

	//	create second Row containing slider
	this.oRow2 = new sap.ui.commons.layout.MatrixLayoutRow();
	this.oCell = new sap.ui.commons.layout.MatrixLayoutCell({ colSpan : 3 });
	this.oCell.addContent(this.oSlider);
	this.oRow2.addCell(this.oCell);

	//	add second Row to the Matrix Layout
	this.oMatrix.addRow(this.oRow2);

	// add another row for the alpha slider
	this.oRow3 = new sap.ui.commons.layout.MatrixLayoutRow();
	this.oCell = new sap.ui.commons.layout.MatrixLayoutCell({ colSpan : 3 });
	this.oCell.addContent(this.oAlphaSlider);
	this.oRow3.addCell(this.oCell);

	//	add third Row to the Matrix Layout
	this.oMatrix.addRow(this.oRow3);

	//	attach Eventhandler
	this.oHexField.attachChange(jQuery.proxy(this._handleHexValueChange,this));
	this.oRedField.attachChange(jQuery.proxy(this._handleRedValueChange,this));
	this.oGreenField.attachChange(jQuery.proxy(this._handleGreenValueChange,this));
	this.oBlueField.attachChange(jQuery.proxy(this._handleBlueValueChange,this));
	this.oHueField.attachChange(jQuery.proxy(this._handleHueValueChange,this));
	this.oSatField.attachChange(jQuery.proxy(this._handleSatValueChange,this));
	this.oValField.attachChange(jQuery.proxy(this._handleValValueChange,this));
	this.oSlider.attachLiveChange(jQuery.proxy(this._handleSliderLiveChange,this));
	this.oSlider.attachChange(jQuery.proxy(this._handleSliderChange,this));
	this.oAlphaSlider.attachLiveChange(jQuery.proxy(this._handleAlphaSliderLiveChange,this));
	this.oAlphaSlider.attachChange(jQuery.proxy(this._handleAlphaSliderChange,this));
}



/**
 * Clean-up hook... destroying composite parts.
 */
sap.ui.commons.ColorPicker.prototype.exit = function(){

	//	unbind Mouse-Event-Handler
	if (this.$cpBox) {
		this.$cpBox.unbind("mousedown", this.handleMouseDown);
	}

	jQuery(document)
	.unbind("mousemove", this.handleMousePos)
	.unbind("mouseup", this.handleMouseUp);

	//	destroy Objects
	this.oMatrix.destroy();
}



/**
 * Evaluate parameter values
 */
sap.ui.commons.ColorPicker.prototype.setColorString = function(iColorString) {

	//	parse string; get the color object
	this._parseColorString(iColorString);

	//	update UI
	this.oHexField.setValue(this.Color.hex.substr(1));
	this.oRedField.setValue(this.Color.r);
	this.oGreenField.setValue(this.Color.g);
	this.oBlueField.setValue(this.Color.b);
	this.oHueField.setValue(this.Color.h);
	this.oSatField.setValue(this.Color.s);
	this.oValField.setValue(this.Color.v);
	this.oSlider.setValue(this.Color.h);
	this.oAlphaSlider.setValue(this.Color.a);

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler of the mouse down event
 */
sap.ui.commons.ColorPicker.prototype.handleMouseDown = function(e) {

	//	exit if the HEXfield is errorneous
	if (this.oHexField.getValueState() == sap.ui.core.ValueState.Error) return;

	//	call mouse position handler
	this.handleMousePos(e);
	jQuery(document)
	.bind("mousemove", jQuery.proxy(this.handleMousePos, this))
	.bind("mouseup", jQuery.proxy(this.handleMouseUp, this));
}



/**
 * Event handler of the mouse up event
 */
sap.ui.commons.ColorPicker.prototype.handleMouseUp = function(e) {

	//	exit if the HEXfield is errorneous
	if (this.oHexField.getValueState() == sap.ui.core.ValueState.Error) return;

	//	call mouse position handler
	this.handleMousePos(e);
	jQuery(document)
	.unbind("mousemove", this.handleMousePos)
	.unbind("mouseup", this.handleMouseUp);

	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for the mouse position
 */
sap.ui.commons.ColorPicker.prototype.handleMousePos = function(e) {

	//	get offset of the colorpicker box
	var cpBoxOffset = this.$cpBox.offset();

	//	get width & height if the colorpicker box
	var cpBoxWidth  = this.$cpBox.width();
	var cpBoxHeight = this.$cpBox.height();

	//	calculate the hue and saturation values from the mouse position
	var x = e.pageX - cpBoxOffset.left;
	var y = e.pageY - cpBoxOffset.top;
	x = Math.min(Math.max(x, 0), cpBoxWidth);
	//	handle RTL - mode
	if(this.bRtl){
		var rX = cpBoxWidth - x;
		x = rX;
	};
	y = Math.min(Math.max(y, 0), cpBoxHeight);
	var valValue = parseInt(x/cpBoxWidth * 100,10);
	var satValue = parseInt((1 - y/cpBoxHeight) * 100,10);

	//	set the new values
	this.oSatField.setValue(satValue);
	this.oValField.setValue(valValue);

	//	process changes
	this._processHSVchanges();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for Slider LIVE changes
 */
sap.ui.commons.ColorPicker.prototype._handleSliderLiveChange = function() {

	//	get the new value
	var sliderValue = parseInt(this.oSlider.getValue(),10);

	//	set the new hue value in the hue inut field
	this.oHueField.setValue(sliderValue);

	//	process changes
	this._processHSVchanges();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for Slider changes
 */
sap.ui.commons.ColorPicker.prototype._handleSliderChange = function() {

	//	get the new value
	var sliderValue = parseInt(this.oSlider.getValue(),10);

	//	set the new hue value in the hue inut field
	this.oHueField.setValue(sliderValue);

	//	process changes
	this._processHSVchanges();

	//	fire Change event
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
* Event handler for Alpha-Slider LIVE changes
*/
sap.ui.commons.ColorPicker.prototype._handleAlphaSliderLiveChange = function() {

	// get the new value
	this.Color.a = this.oAlphaSlider.getValue();
	
	//	process changes
	this._processHSVchanges();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for Alpha-Slider changes
 */
sap.ui.commons.ColorPicker.prototype._handleAlphaSliderChange = function() {

	//	get the new value
	this.Color.a = this.oAlphaSlider.getValue();
	
	//	process changes
	this._processHSVchanges();

	//	fire Change event
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for changes of hue input field
 */
sap.ui.commons.ColorPicker.prototype._handleHueValueChange = function(){

	//	get the new value
	var hueValue = parseInt(this.oHueField.getValue(),10);

	//	check for correct value (0 - 360)
	if (hueValue < 0 || isNaN(hueValue)) hueValue = 0;
	if (hueValue > 360) hueValue = 359.9;

	//	set the new value (maybe the value has been changed in the above lines)
	this.oHueField.setValue(hueValue);

	//	update slider value
	this.oSlider.setValue(hueValue);

	//	process Changes
	this._processHSVchanges();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for changes of saturation input field
 */
sap.ui.commons.ColorPicker.prototype._handleSatValueChange =  function(){

	//	get the new value
	var satValue = parseInt(this.oSatField.getValue(),10);

	//	check for correct value (0-100)
	if (satValue < 0 || isNaN(satValue)) satValue = 0;
	if (satValue > 100) satValue = 100;

	//	set the new value (maybe the value has been changed in the above lines)
	this.oSatField.setValue(satValue);

	//	process Changes
	this._processHSVchanges();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for changes of value input field
 */
sap.ui.commons.ColorPicker.prototype._handleValValueChange = function(){

	//	get the new value
	var valValue = parseInt(this.oValField.getValue(),10);

	//	check for correct value (0-100)
	if (valValue < 0 || isNaN(valValue)) valValue = 0;
	if (valValue > 100) valValue = 100;

	//	set the new value (maybe the value has been changed in the above lines)
	this.oValField.setValue(valValue);

	//	process Changes
	this._processHSVchanges();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for changes of RED input field
 */
sap.ui.commons.ColorPicker.prototype._handleRedValueChange = function(){

	//	get the new value
	var redValue = parseInt(this.oRedField.getValue(),10);

	//	check for correct value (0-255)
	if (redValue < 0 || isNaN(redValue)) redValue = 0;
	if (redValue > 255) redValue = 255;

	//	set the new value (maybe the value has been changed in the above lines)
	this.oRedField.setValue(redValue);

	//	process changes
	this._processRGBchanges();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for changes of GREEN input field
 */
sap.ui.commons.ColorPicker.prototype._handleGreenValueChange = function(){

	//	get the new value
	var greenValue = parseInt(this.oGreenField.getValue(),10);

	//	check for correct value
	if (greenValue < 0 || isNaN(greenValue)) greenValue = 0;
	if (greenValue > 255) greenValue = 255;

	//	set the new value (maybe the value has been changed in the above lines)
	this.oGreenField.setValue(greenValue);

	//	process changes
	this._processRGBchanges();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Event handler for changes of BLUE input field
 */
sap.ui.commons.ColorPicker.prototype._handleBlueValueChange = function(){

	//	get the new value
	var blueValue = parseInt(this.oBlueField.getValue(),10);

	//	check for correct value
	if (blueValue < 0 || isNaN(blueValue)) blueValue = 0;
	if (blueValue > 255) blueValue = 255;

	//	set the new value (maybe the value has been changed in the above lines)
	this.oBlueField.setValue(blueValue);

	//	process changes
	this._processRGBchanges();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Process changes of Hue, Value and Saturation
 */
sap.ui.commons.ColorPicker.prototype._processHSVchanges = function(){

	//	get HSV-values
	var hueValue   = parseInt(this.oHueField.getValue(),10);
	var satValue   = parseInt(this.oSatField.getValue(),10);
	var valValue   = parseInt(this.oValField.getValue(),10);

	//	calculate and set new RGB-values
	this._calculateRGB(hueValue, satValue, valValue);
	this.Color.r = this.RGB.r;
	this.Color.g = this.RGB.g;
	this.Color.b = this.RGB.b;
	this.oRedField.setValue(this.Color.r);
	this.oGreenField.setValue(this.Color.g);
	this.oBlueField.setValue(this.Color.b);

	//	calculate and set HEX-values from the RGB-values
	this._calculateHEX(this.Color.r,this.Color.g,this.Color.b);
	this.oHexField.setValue(this.HexString);
	this.Color.hex =  "#" + this.oHexField.getValue();

	//	set HSV-values
	this.Color.h = hueValue;
	this.Color.s = satValue;
	this.Color.v = valValue;
	this.oHueField.setValue(this.Color.h);
	this.oSatField.setValue(this.Color.s);
	this.oValField.setValue(this.Color.v);

	//	update gradient box background
	this._updateGradientBoxBackground(this.Color.h);

	//	update cursor position
	this._updateCursorPosition();

	//	update selected color background
	this._updateSelColorBackground();
}



/**
 * Process changes of Red, Green and Blue values
 */
sap.ui.commons.ColorPicker.prototype._processRGBchanges = function(){

	//	calculate and set HEX-value from the RGB-values
	var redValue   = Math.round(parseInt(this.oRedField.getValue(),10));
	var greenValue = Math.round(parseInt(this.oGreenField.getValue(),10));
	var blueValue  = Math.round(parseInt(this.oBlueField.getValue(),10));
	this._calculateHEX(redValue, greenValue, blueValue);
	this.oHexField.setValue(this.HexString);

	//	calculate and set HSV-values from the RGB-values
	this._calculateHSV(redValue, greenValue, blueValue);
	this.oHueField.setValue(this.Color.h);
	this.oSatField.setValue(this.Color.s);
	this.oValField.setValue(this.Color.v);

	//	update slider value
	this.oSlider.setValue(parseInt(this.oHueField.getValue(),10));

	//	store the values in variable
	this.Color.r   = redValue;
	this.Color.g   = greenValue;
	this.Color.b   = blueValue;
	this.Color.hex =  "#" + this.oHexField.getValue();

	//	update gradient box background
	this._updateGradientBoxBackground(this.Color.h);

	//	update cursor position
	this._updateCursorPosition();

	//	update selected color background
	this._updateSelColorBackground();
}



/**
 * Event handler for changes of HEX input field
 */
sap.ui.commons.ColorPicker.prototype._handleHexValueChange = function(){

	//	get the new value and convert to uppercase
	var hexValue = this.oHexField.getValue().toUpperCase();

	//	check for correct value
	if (hexValue.substr(0, 1) == '#') hexValue = hexValue.substr(1);
	var re=/^([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;
	if (re.test(hexValue) == false){
		this.oHexField.setValueState(sap.ui.core.ValueState.Error);
		this.oSlider.setEnabled(false);
		this.oAlphaSlider.setEnabled(false);
		this.oHueField.setEnabled(false);
		this.oRedField.setEnabled(false);
		this.oGreenField.setEnabled(false);
		this.oBlueField.setEnabled(false);
		this.oSatField.setEnabled(false);
		this.oValField.setEnabled(false);
		return false;
	} else if(this.oHexField.getValueState()  == sap.ui.core.ValueState.Error){
		this.oHexField.setValueState(sap.ui.core.ValueState.None);
		this.oSlider.setEnabled(true);
		this.oAlphaSlider.setEnabled(true);
		this.oHueField.setEnabled(true);
		this.oRedField.setEnabled(true);
		this.oGreenField.setEnabled(true);
		this.oBlueField.setEnabled(true);
		this.oSatField.setEnabled(true);
		this.oValField.setEnabled(true);
	};

	//	convert from short to long hex (if needed)
	if (hexValue.length == 3){
		var tempValue = hexValue.charAt(0)+hexValue.charAt(0)+hexValue.charAt(1)+hexValue.charAt(1)+hexValue.charAt(2)+hexValue.charAt(2);
		hexValue = tempValue;
	};

	//	process Changes
	this._processHexChanges(hexValue);

	//	update UI
	this.oHexField.setValue(hexValue);
	this.oRedField.setValue(this.Color.r);
	this.oGreenField.setValue(this.Color.g);
	this.oBlueField.setValue(this.Color.b);
	this.oHueField.setValue(this.Color.h);
	this.oSatField.setValue(this.Color.s);
	this.oValField.setValue(this.Color.v);
	this.oSlider.setValue(parseInt(this.oHueField.getValue(),10));
	this.oAlphaSlider.setValue(1);

	//	update gradient box background
	this._updateGradientBoxBackground(this.Color.h);

	//	update cursor position
	this._updateCursorPosition();

	//	update selected color background
	this._updateSelColorBackground();

	//	fire events & update property
	this.fireLiveChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.fireChange({r:this.Color.r, g:this.Color.g, b:this.Color.b, h:this.Color.h, s:this.Color.s, v:this.Color.v, alpha:this.Color.a, hex:this.Color.hex});
	this.setProperty('colorString', this._getRGBString(), true); // No re-rendering!
}



/**
 * Hex-Values have changed ==> process changes
 */
sap.ui.commons.ColorPicker.prototype._processHexChanges = function (ihexValue){

	//	convert RGB-values
	this._convertRGB(ihexValue);

	//	calculate and set HSV-values from the RGB-values
	this._calculateHSV(this.Color.r, this.Color.g, this.Color.b);

	//	all values except hex set; set the hex value
	this.Color.hex = "#" + ihexValue.toUpperCase();
}



/**
 * Update Cursor position in the ColorPicker Box
 */
sap.ui.commons.ColorPicker.prototype._updateCursorPosition = function(){

	//	get the width & height
	var cpCurWidth  = this.$cpCur.width();
	var cpCurHeight = this.$cpCur.height();
	var cpBoxWidth  = this.$cpBox.width();
	var cpBoxHeight = this.$cpBox.height();

	//	get the saturation and value
	var satValue = this.oSatField.getValue();
	var valValue = this.oValField.getValue();

	//	calculate the x and y values
	var x = parseInt(valValue * cpBoxWidth /100,10);
	//	calculate x if we are in RTL mode
	if(this.bRtl){
		var rX = cpBoxWidth - x;
		x = rX;
	};
	var y = parseInt((1-satValue/100)*cpBoxHeight,10);
	x = Math.min(Math.max(x, 0), cpBoxWidth-cpCurWidth/2) -cpCurWidth/2;
	y = Math.min(Math.max(y, 0), cpBoxHeight-cpCurHeight/2) -cpCurHeight/2;

	//	set the new cursor position
	this.$cpCur.css("left", x).css("top", y);
}



/**
 * Calculate RGB-Values from Hue/Saturation/Value
 */
sap.ui.commons.ColorPicker.prototype._calculateRGB = function( hue, sat, val){

	//hue value is cyclic, so 360 = 0
	if (hue == 360) {
		hue = 0;
	}
	hue /= 60;
	sat /= 100;
	val /= 100;
	
	
	//Formula taken from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm
	var c = val * sat;
	var x = c * (1 - Math.abs(hue % 2 - 1));
	var m = val - c;
	
	// calculate values
	var redValue = 0, greenValue = 0, blueValue = 0;
	var i = Math.floor(hue);
	
	switch (i) {
		case 0:
			redValue   = c;
			greenValue = x;
			break;
		case 1:
			redValue   = x;
			greenValue = c;
			break;
		case 2:
			greenValue = c;
			blueValue  = x;
			break;
		case 3:
			greenValue = x;
			blueValue  = c;
			break;
		case 4:
			redValue   = x;
			blueValue  = c;
			break;
		case 5:
			redValue   = c;
			blueValue  = x;
			break;
	}
	
	this.RGB.r = Math.floor((redValue + m) * 255);
	this.RGB.g = Math.floor((greenValue + m) * 255);
	this.RGB.b = Math.floor((blueValue + m) * 255);
}



/**
 * Get RGB-String from the current RGB-Values
 */
sap.ui.commons.ColorPicker.prototype._getRGBString = function( ){
	if(this.Color.a < 1){
		return "rgba(" + this.Color.r + "," + this.Color.g + "," + this.Color.b + ", " + this.Color.a + ")";
	} else {
		return "rgb(" + this.Color.r + "," + this.Color.g + "," + this.Color.b + ")";
	}
}



/**
 * Calculate HEX-Values when RGB-values change
 */
sap.ui.commons.ColorPicker.prototype._calculateHEX = function(red,green,blue){

	//	convert values
	var redStr     = red.toString(16);
	var greenStr   = green.toString(16);
	var blueStr    = blue.toString(16);
	if (redStr.length == 1)   redStr   = '0' + redStr;
	if (greenStr.length == 1) greenStr = '0' + greenStr;
	if (blueStr.length == 1)  blueStr  = '0' + blueStr;

	//	return the HexValue
	this.HexString = (redStr + greenStr + blueStr).toUpperCase();
}



/**
 * Calculate HSV-Values from RGB-values
 */
sap.ui.commons.ColorPicker.prototype._calculateHSV = function (red, green, blue){

	//	calculate values
	var max			= Math.max(Math.max(red, green), blue);
	var min			= Math.min(Math.min(red, green), blue);
	var delta		= (max - min);
	var valValue	= Math.round(max*100/255);
	var satValue = (max==0.0)?0:(100*delta/max);
	var hueValue = 0;
	if (satValue==0) hueValue=0;
	else if (red==max)   hueValue=60.0*(green-blue)/delta;
	else if (green==max) hueValue=120.0+60.0*(blue-red)/delta;
	else if (blue==max)  hueValue=240.0+60.0*(red-green)/delta;
	if (hueValue<0.0) hueValue+=359.9;
	hueValue=Math.round(hueValue);
	satValue=Math.round(satValue);

	//	store the new values
	this.Color.h = hueValue;
	this.Color.s = satValue;
	this.Color.v = valValue;
}



/**
 * Convert HEX-Value to RGB-Values
 */
sap.ui.commons.ColorPicker.prototype._convertRGB = function(hex){

	//	calculate the new values
	var red   = parseInt(hex.substr(0, 2), 16);
	var green = parseInt(hex.substr(2, 2), 16);
	var blue  = parseInt(hex.substr(4, 2), 16);

	//	return the new values
	this.Color.r = red;
	this.Color.g = green;
	this.Color.b = blue;
}



/**
 * Update GradientBox Background
 */
sap.ui.commons.ColorPicker.prototype._updateGradientBoxBackground = function(hue){

	//	calculate RGB-values
	this._calculateRGB(hue, 100, 100);

	//	calculate Hex-value
	this._calculateHEX(this.RGB.r,this.RGB.g,this.RGB.b);
	var hexCol    =  "#" + this.HexString;

	//	set backgroundColor
	this.$cpBox.css('background-color','rgb(' + this.RGB.r + ', '  + this.RGB.g + ', ' + this.RGB.b + ')');
}



/**
 * Update background of "new color box"
 */
sap.ui.commons.ColorPicker.prototype._updateSelColorBackground = function(){

	//	set the new color
	this.$("ncBox").css('background-color',this._getRGBString());

}



/**
 * Parse Input Parameter; evaluate color
 */
sap.ui.commons.ColorPicker.prototype._parseColorString = function(iColorString){

	//	delete #, trim and convert to lower case
	if (iColorString.substr(0, 1) == '#') iColorString = iColorString.substr(1);
	iColorString = iColorString.replace(/ /g,'');
	iColorString = iColorString.toLowerCase();

	//	parse Names
	var searchKey = "";
	var hexValue = "";
	var colorNames = {
			aliceblue: 				'f0f8ff',
			antiquewhite: 			'faebd7',
			aqua: 					'00ffff',
			aquamarine: 			'7fffd4',
			azure: 					'f0ffff',
			beige: 					'f5f5dc',
			bisque: 				'ffe4c4',
			black: 					'000000',
			blanchedalmond:			'ffebcd',
			blue: 					'0000ff',
			blueviolet:				'8a2be2',
			brown:					'a52a2a',
			burlywood: 				'deb887',
			cadetblue: 				'5f9ea0',
			chartreuse: 			'7fff00',
			chocolate: 				'd2691e',
			coral: 					'ff7f50',
			cornflowerblue: 		'6495ed',
			cornsilk: 				'fff8dc',
			crimson: 				'dc143c',
			cyan: 					'00ffff',
			darkblue: 				'00008b',
			darkcyan: 				'008b8b',
			darkgoldenrod: 			'b8860b',
			darkgray: 				'a9a9a9',
			darkgreen: 				'006400',
			darkkhaki: 				'bdb76b',
			darkmagenta: 			'8b008b',
			darkolivegreen: 		'556b2f',
			darkorange: 			'ff8c00',
			darkorchid: 			'9932cc',
			darkred: 				'8b0000',
			darksalmon: 			'e9967a',
			darkseagreen: 			'8fbc8f',
			darkslateblue: 			'483d8b',
			darkslategray: 			'2f4f4f',
			darkturquoise: 			'00ced1',
			darkviolet: 			'9400d3',
			deeppink: 				'ff1493',
			deepskyblue: 			'00bfff',
			dimgray: 				'696969',
			dodgerblue: 			'1e90ff',
			feldspar: 				'd19275',
			firebrick: 				'b22222',
			floralwhite: 			'fffaf0',
			forestgreen: 			'228b22',
			fuchsia: 				'ff00ff',
			gainsboro: 				'dcdcdc',
			ghostwhite: 			'f8f8ff',
			gold: 					'ffd700',
			goldenrod: 				'daa520',
			gray: 					'808080',
			green: 					'008000',
			greenyellow: 			'adff2f',
			honeydew: 				'f0fff0',
			hotpink: 				'ff69b4',
			indianred : 			'cd5c5c',
			indigo : 				'4b0082',
			ivory: 					'fffff0',
			khaki: 					'f0e68c',
			lavender: 				'e6e6fa',
			lavenderblush: 			'fff0f5',
			lawngreen: 				'7cfc00',
			lemonchiffon: 			'fffacd',
			lightblue: 				'add8e6',
			lightcoral: 			'f08080',
			lightcyan: 				'e0ffff',
			lightgoldenrodyellow:	'fafad2',
			lightgrey: 				'd3d3d3',
			lightgreen: 			'90ee90',
			lightpink: 				'ffb6c1',
			lightsalmon: 			'ffa07a',
			lightseagreen: 			'20b2aa',
			lightskyblue: 			'87cefa',
			lightslateblue: 		'8470ff',
			lightslategray: 		'778899',
			lightsteelblue: 		'b0c4de',
			lightyellow: 			'ffffe0',
			lime: 					'00ff00',
			limegreen: 				'32cd32',
			linen: 					'faf0e6',
			magenta: 				'ff00ff',
			maroon: 				'800000',
			mediumaquamarine: 		'66cdaa',
			mediumblue: 			'0000cd',
			mediumorchid: 			'ba55d3',
			mediumpurple: 			'9370d8',
			mediumseagreen: 		'3cb371',
			mediumslateblue: 		'7b68ee',
			mediumspringgreen: 		'00fa9a',
			mediumturquoise: 		'48d1cc',
			mediumvioletred:		'c71585',
			midnightblue: 			'191970',
			mintcream: 				'f5fffa',
			mistyrose: 				'ffe4e1',
			moccasin: 				'ffe4b5',
			navajowhite: 			'ffdead',
			navy: 					'000080',
			oldlace: 				'fdf5e6',
			olive: 					'808000',
			olivedrab: 				'6b8e23',
			orange: 				'ffa500',
			orangered: 				'ff4500',
			orchid: 				'da70d6',
			palegoldenrod: 			'eee8aa',
			palegreen: 				'98fb98',
			paleturquoise: 			'afeeee',
			palevioletred: 			'd87093',
			papayawhip: 			'ffefd5',
			peachpuff: 				'ffdab9',
			peru: 					'cd853f',
			pink: 					'ffc0cb',
			plum: 					'dda0dd',
			powderblue: 			'b0e0e6',
			purple: 				'800080',
			red: 					'ff0000',
			rosybrown: 				'bc8f8f',
			royalblue: 				'4169e1',
			saddlebrown: 			'8b4513',
			salmon: 				'fa8072',
			sandybrown: 			'f4a460',
			seagreen: 				'2e8b57',
			seashell: 				'fff5ee',
			sienna: 				'a0522d',
			silver: 				'c0c0c0',
			skyblue: 				'87ceeb',
			slateblue: 				'6a5acd',
			slategray: 				'708090',
			snow: 					'fffafa',
			springgreen: 			'00ff7f',
			steelblue: 				'4682b4',
			tan: 					'd2b48c',
			teal: 					'008080',
			thistle: 				'd8bfd8',
			tomato: 				'ff6347',
			turquoise: 				'40e0d0',
			violet: 				'ee82ee',
			violetred: 				'd02090',
			wheat: 					'f5deb3',
			white: 					'ffffff',
			whitesmoke: 			'f5f5f5',
			yellow: 				'ffff00',
			yellowgreen: 			'9acd32'
	};

	for (searchKey in colorNames) {
		if (iColorString == searchKey) {
			hexValue = colorNames[searchKey].toUpperCase();
		}
	};

	if (hexValue !=""){
		//Found a name; get RGB and HSV values
		this._processHexChanges(hexValue);
		this.Color.old = this.Color.hex;
	};


	//	parse HEX
	//	allowed input: #aabbcc, aabbcc, #abc, abc
	//	'#' has already been deleted, search only for values
	//  check for correct value using regular expression
	var re=/^([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/;
	if (re.test(iColorString) == true){
		//it's a hex value; check if its aabbcc or abc
		if (iColorString.length == 3){
			var hexValue = iColorString.charAt(0)+iColorString.charAt(0)+iColorString.charAt(1)+iColorString.charAt(1)+iColorString.charAt(2)+iColorString.charAt(2);
		}
		else {
			hexValue = iColorString;
		};
		//get RGB and HSV values
		this._processHexChanges(hexValue);
		this.Color.old = this.Color.hex;
	};


	//	parse RGBA
	//	allowed input: rgba(255,255,255,0.3); rgba255,255,255,0.3
	//	check if the string begins with "rgba"
	if (iColorString.substr(0, 4) == 'rgba'){
		// remove rgba, "(", ")" and blanks
		iColorString = iColorString.substr(4);
		iColorString = iColorString.replace("(",'');
		iColorString = iColorString.replace(")",'');
		iColorString = iColorString.split(' ').join('');
		var re=/^(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])),){2}(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])),){1}(([0]\.[0-9]*)|(\.[0-9]{2})|[1]){1}$/;
		if (re.test(iColorString) == true){
			//it's a rgba string, get the values and convert to Hex
			var RGBColor = iColorString.split(",");
			var sAlpha = iColorString.substr(iColorString.lastIndexOf(",")+1, (iColorString.length-iColorString.lastIndexOf(",")));
			this._calculateHEX(parseInt(RGBColor[0],10), parseInt(RGBColor[1],10), parseInt(RGBColor[2],10));
			//get HSV values
			this._processHexChanges(this.HexString);
			this.Color.old = this.Color.hex;
			this.Color.a = this.Color.a_old = parseFloat(sAlpha);
		};
	};

	
	//	parse RGB
	//	allowed input: rgb(255,255,255); rgb255,255,255
	//	check if the string begins with "rgb"
	if (iColorString.substr(0, 3) == 'rgb'){
		// remove rgb, "(", ")" and blanks
		iColorString = iColorString.substr(3);
		iColorString = iColorString.replace("(",'');
		iColorString = iColorString.replace(")",'');
		iColorString = iColorString.split(' ').join('');
		var re=/^(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])),){2}(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))){1}$/;
		if (re.test(iColorString) == true){
			//it's a rgb string, get the values and convert to Hex
			var RGBColor = iColorString.split(",");
			this._calculateHEX(parseInt(RGBColor[0],10), parseInt(RGBColor[1],10), parseInt(RGBColor[2],10));
			//get HSV values
			this._processHexChanges(this.HexString);
			this.Color.old = this.Color.hex;
		};
	};


	//	parse HSV
	//	allowed input: hsv(360,100,100); hsv360,100,100; [hsv(360,0.5,0.5); hsv360,0.5,0.5 later]
	//	check if the string begins with "rgb"
	if (iColorString.substr(0, 3) == 'hsv'){
		// remove hsv, "(", ")" and blanks
		iColorString = iColorString.substr(3);
		iColorString = iColorString.replace("(",'');
		iColorString = iColorString.replace(")",'');
		iColorString = iColorString.split(' ').join('');
		var re=/^(((\d{1,2})|([1,2]\d{2})|(3[0-5]\d)|(360)),){1}(((\d{1,2})|(100)),){1}((\d{1,2})|(100)){1}$/;
		if (re.test(iColorString) == true){
			//it's a hsv string, get the values
			var HSVColor = iColorString.split(",");
			//get RGB values
			this._calculateRGB(parseInt(HSVColor[0],10), parseInt(HSVColor[1],10), parseInt(HSVColor[2],10));
			//get Hex values
			this._calculateHEX(this.RGB.r, this.RGB.g, this.RGB.b);
			//store the values
			this.Color.r   = this.RGB.r;
			this.Color.g   = this.RGB.g;
			this.Color.b   = this.RGB.b;
			this.Color.h   = parseInt(HSVColor[0],10);
			this.Color.s   = parseInt(HSVColor[1],10);
			this.Color.v   = parseInt(HSVColor[2],10);
			this.Color.hex = "#" + this.HexString;
			this.Color.old = this.Color.hex;
		};
	}
	else return false;
}



/**
 * Event after rendering the page
 */
sap.ui.commons.ColorPicker.prototype.onAfterRendering = function (){

	// get the jQuery-Object for cpBox and cpCur
	this.$cpBox = this.$("cpBox");
	this.$cpCur = this.$("cpCur");

	//	add Mousehandler for ColorPickerBox
	this.$cpBox.bind("mousedown", jQuery.proxy(this.handleMouseDown, this));

	//	set the background color of the Color Boxes
	this.$("ncBox").css('background-color',this._getRGBString());
	this.$("ocBox").css('background-color',this._getRGBString());

	//	update the background color of the 'new color box'
	this._updateGradientBoxBackground(this.Color.h);

	//	update cursor position
	this._updateCursorPosition();
}



/**
 * Event before rendering the page
 */
sap.ui.commons.ColorPicker.prototype.onBeforeRendering = function (){

	//	unbind Mousehandler for ColorPickerBox
	this.$("cpBox").unbind("mousedown", this.handleMouseDown);

}



/**
 * Deliver current RGB-values
 */
sap.ui.commons.ColorPicker.prototype.getRGB = function (){

	return {r:this.Color.r, g:this.Color.g, b:this.Color.b};

}

}; // end of sap/ui/commons/ColorPicker.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ComboBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.ComboBox
jQuery.sap.declare("sap.ui.commons.ComboBoxRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class Renderer for the sap.ui.commons.ComboBox
 * @static
 */
sap.ui.commons.ComboBoxRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);

/**
 * Renders the outer &lt;div&gt; for the ComboBox to the TextField
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.ComboBoxRenderer.renderOuterAttributes = function(rm, oCmb) {
	rm.addClass("sapUiTfCombo");
	this.renderComboARIAInfo(rm, oCmb);
};

/**
 * Renders additional HTML for the ComboBox to the TextField before the INPUT element (sets the icon)
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oCmb an object representation of the control that should be rendered
 */
sap.ui.commons.ComboBoxRenderer.renderOuterContentBefore = function(rm, oCmb){

	this.renderExpander(rm, oCmb);
	this.renderSelectBox(rm, oCmb, '-1');

};

sap.ui.commons.ComboBoxRenderer.renderExpander = function(rm, oCmb){

	rm.write("<div");
	rm.writeAttributeEscaped('id', oCmb.getId() + '-icon');
	rm.writeAttribute('unselectable', 'on');
	if ( sap.ui.getCore().getConfiguration().getAccessibility()){
		rm.writeAttribute("role", "presentation");
	}
	rm.addClass("sapUiTfComboIcon");
	rm.writeClasses();
	rm.write(">&#9660;</div>");//Symbol for HCB Theme (Must be hidden in other themes)

};

sap.ui.commons.ComboBoxRenderer.renderSelectBox = function(rm, oCmb, sTabindex){

	if (oCmb.mobile) {
		// for mobile devices render SELECT box
		// it lays over the button but should be transparent. So a click on the button opens the select box
		rm.write("<select");
		rm.writeAttributeEscaped('id', oCmb.getId() + '-select');
		rm.writeAttribute('tabindex', sTabindex);
		if (!oCmb.getEnabled() || !oCmb.getEditable()) {
			rm.writeAttribute('disabled', 'disabled');
		}
		rm.write(">");
		for ( var i = 0; i < oCmb.getItems().length; i++) {
			var oItem = oCmb.getItems()[i];
			rm.write("<option");
			// combine comboBox ID with Item ID because items can be in more than one ComboBox vi the same List
			rm.writeAttributeEscaped('id', oCmb.getId()+"-"+oItem.getId());
			if (!oItem.getEnabled()) {
				rm.writeAttribute("disabled", "disabled");
			}
			rm.write(">"+oItem.getText()+"</option>");
		}
		rm.write("</select>");
	}

};

/**
 * Renders the inner &lt;div&gt; for the ComboBox to the TextField
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oCmb an object representation of the control that should be rendered
 */
sap.ui.commons.ComboBoxRenderer.renderInnerAttributes = function(rm, oCmb) {

	if (oCmb.mobile) {
		rm.writeAttribute('autocapitalize', 'off');
		rm.writeAttribute('autocorrect', 'off');
	}

};

/*
 * Renders ARIA information for the combobox (outer &lt;div&gt;)
 * @param {sap.ui.fw.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.ComboBoxRenderer.renderComboARIAInfo = function(rm, oCmb) {

	// to not force creation if internal ListBox do not use _getListBox()
	var sListBox = oCmb.getListBox();
	if (!sListBox && oCmb._oListBox) {
		sListBox = oCmb._oListBox.getId();
	}

	var mProps = {
		role: "combobox",
		owns: oCmb.getId() + "-input " + sListBox
		};

	if (!oCmb.getEnabled()) {
		mProps["disabled"] = true;
	}

	rm.writeAccessibilityState(null,  //null because otherwise automatic generated attributes will be rendered twice
		mProps);

};

/*
 * Renders ARIA information for the given input field (called from 'parent'-renderer, i.e. sap.ui.commons.TextFieldRenderer)
 * As the input tag has the focus all controls aria attributes should be here
 * @param {sap.ui.fw.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.ComboBoxRenderer.renderARIAInfo = function(rm, oCmb) {

	var iPosInSet = -1;
	if(oCmb.getSelectedItemId()){
		for ( var i = 0; i < oCmb.getItems().length; i++) {
			var oItem = oCmb.getItems()[i];
			if (oItem.getId() == oCmb.getSelectedItemId()) {
				iPosInSet =  i+1;
				break;
			}
		}
	}

	var mProps = {
			autocomplete: "inline",
			live: "polite",
			setsize: oCmb.getItems().length,
			posinset: (iPosInSet >= 0) ? iPosInSet : undefined
		};

	if (oCmb.getValueState() == sap.ui.core.ValueState.Error) {
		mProps["invalid"] = true;
	}

	rm.writeAccessibilityState(oCmb, mProps);

};

sap.ui.commons.ComboBoxRenderer.setEditable = function(oCmb, bEditable) {

	if (oCmb.mobile) {
		var $Select = oCmb.$("select");
		if (bEditable && oCmb.getEnabled()) {
			$Select.removeAttr("disabled");
		} else {
			$Select.attr("disabled", "disabled");
		}
	}

	sap.ui.commons.TextFieldRenderer.setEditable.apply(this, arguments);

};

sap.ui.commons.ComboBoxRenderer.setEnabled = function(oCmb, bEnabled) {

	if (oCmb.mobile) {
		var $Select = oCmb.$("select");
		if (bEnabled && oCmb.getEditable()) {
			$Select.removeAttr("disabled");
		} else {
			$Select.attr("disabled", "disabled");
		}
	}

	sap.ui.commons.TextFieldRenderer.setEnabled.apply(this, arguments);

};
}; // end of sap/ui/commons/ComboBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Dialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Dialog.
jQuery.sap.declare("sap.ui.commons.Dialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Dialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getScrollLeft scrollLeft} : int (default: 0)</li>
 * <li>{@link #getScrollTop scrollTop} : int (default: 0)</li>
 * <li>{@link #getTitle title} : string (default: '')</li>
 * <li>{@link #getApplyContentPadding applyContentPadding} : boolean (default: true)</li>
 * <li>{@link #getShowCloseButton showCloseButton} : boolean (default: true)</li>
 * <li>{@link #getResizable resizable} : boolean (default: true)</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMinHeight minHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxHeight maxHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentBorderDesign contentBorderDesign} : sap.ui.commons.enums.BorderDesign (default: sap.ui.commons.enums.BorderDesign.None)</li>
 * <li>{@link #getModal modal} : boolean (default: false)</li>
 * <li>{@link #getAccessibleRole accessibleRole} : sap.ui.core.AccessibleRole (default: sap.ui.core.AccessibleRole.Dialog)</li>
 * <li>{@link #getKeepInWindow keepInWindow} : boolean (default: false)</li>
 * <li>{@link #getAutoClose autoClose} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.ui.core.Control[]</li>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getDefaultButton defaultButton} : string | sap.ui.commons.Button</li>
 * <li>{@link #getInitialFocus initialFocus} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.Dialog#event:closed closed} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An interactive window appearing on request displaying information to the user. The API supports features such as popups with fixed sizes, popups with unlimited width, scrolling bars for large windows, and control nesting (for example, a drop-down list can be included in the window).
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.PopupInterface
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Dialog
 */
sap.ui.core.Control.extend("sap.ui.commons.Dialog", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.core.PopupInterface"
	],
	publicMethods : [
		// methods
		"open", "close", "isOpen", "getOpenState"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"scrollLeft" : {type : "int", group : "Behavior", defaultValue : 0},
		"scrollTop" : {type : "int", group : "Behavior", defaultValue : 0},
		"title" : {type : "string", group : "Misc", defaultValue : ''},
		"applyContentPadding" : {type : "boolean", group : "Appearance", defaultValue : true},
		"showCloseButton" : {type : "boolean", group : "Behavior", defaultValue : true},
		"resizable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"minWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"minHeight" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"maxWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"maxHeight" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"contentBorderDesign" : {type : "sap.ui.commons.enums.BorderDesign", group : "Appearance", defaultValue : sap.ui.commons.enums.BorderDesign.None},
		"modal" : {type : "boolean", group : "Misc", defaultValue : false},
		"accessibleRole" : {type : "sap.ui.core.AccessibleRole", group : "Accessibility", defaultValue : sap.ui.core.AccessibleRole.Dialog},
		"keepInWindow" : {type : "boolean", group : "Behavior", defaultValue : false},
		"autoClose" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	defaultAggregation : "content",
	aggregations : {
    	"buttons" : {type : "sap.ui.core.Control", multiple : true, singularName : "button"}, 
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	associations : {
		"defaultButton" : {type : "sap.ui.commons.Button", multiple : false}, 
		"initialFocus" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"closed" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Dialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Dialog.extend
 * @function
 */

sap.ui.commons.Dialog.M_EVENTS = {'closed':'closed'};


/**
 * Getter for property <code>width</code>.
 * 
 * Outer width of dialog window. When not set and not constrained by one of the width parameters (minWidth/maxWidth), the window size is automatically adapted to the content.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Dialog#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * 
 * Outer height of dialog window. When not set and not constrained by one of the height parameters (minHeight/maxHeight), the window size is automatically adapted to the content.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.Dialog#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setHeight
 * @function
 */


/**
 * Getter for property <code>scrollLeft</code>.
 * 
 * Scroll position from left to right. "0" means leftmost position.
 * 
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>scrollLeft</code>
 * @public
 * @name sap.ui.commons.Dialog#getScrollLeft
 * @function
 */

/**
 * Setter for property <code>scrollLeft</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iScrollLeft  new value for property <code>scrollLeft</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setScrollLeft
 * @function
 */


/**
 * Getter for property <code>scrollTop</code>.
 * 
 * Scroll position from top to buttom. "0" means topmost position.
 * 
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>scrollTop</code>
 * @public
 * @name sap.ui.commons.Dialog#getScrollTop
 * @function
 */

/**
 * Setter for property <code>scrollTop</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iScrollTop  new value for property <code>scrollTop</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setScrollTop
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * 
 * Dialog title displayed in the header.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.commons.Dialog#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setTitle
 * @function
 */


/**
 * Getter for property <code>applyContentPadding</code>.
 * 
 * Padding is theme-dependent. When set to "false", the content extends to the dialog borders.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>applyContentPadding</code>
 * @public
 * @name sap.ui.commons.Dialog#getApplyContentPadding
 * @function
 */

/**
 * Setter for property <code>applyContentPadding</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bApplyContentPadding  new value for property <code>applyContentPadding</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setApplyContentPadding
 * @function
 */


/**
 * Getter for property <code>showCloseButton</code>.
 * 
 * Displays a close button in the title bar.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCloseButton</code>
 * @public
 * @name sap.ui.commons.Dialog#getShowCloseButton
 * @function
 */

/**
 * Setter for property <code>showCloseButton</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCloseButton  new value for property <code>showCloseButton</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setShowCloseButton
 * @function
 */


/**
 * Getter for property <code>resizable</code>.
 * 
 * Specifies whether the dialog window can be resized by the user. The dialog frame contains the visual symbol.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>resizable</code>
 * @public
 * @name sap.ui.commons.Dialog#getResizable
 * @function
 */

/**
 * Setter for property <code>resizable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bResizable  new value for property <code>resizable</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setResizable
 * @function
 */


/**
 * Getter for property <code>minWidth</code>.
 * 
 * Minimum outer width of the dialog window. When set, neither the user nor some layout settings can make the window smaller.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * @name sap.ui.commons.Dialog#getMinWidth
 * @function
 */

/**
 * Setter for property <code>minWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setMinWidth
 * @function
 */


/**
 * Getter for property <code>minHeight</code>.
 * 
 * Minimum outer height of the dialog window. When set, neither the user nor some layout settings can make the window smaller.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minHeight</code>
 * @public
 * @name sap.ui.commons.Dialog#getMinHeight
 * @function
 */

/**
 * Setter for property <code>minHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinHeight  new value for property <code>minHeight</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setMinHeight
 * @function
 */


/**
 * Getter for property <code>maxWidth</code>.
 * 
 * Maximum outer width of the dialog window. If set, neither the user nor some layout settings can make the window larger.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * @name sap.ui.commons.Dialog#getMaxWidth
 * @function
 */

/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setMaxWidth
 * @function
 */


/**
 * Getter for property <code>maxHeight</code>.
 * 
 * Maximum outer height of the dialog window. If set, neither the user nor some layout settings can make the window larger.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxHeight</code>
 * @public
 * @name sap.ui.commons.Dialog#getMaxHeight
 * @function
 */

/**
 * Setter for property <code>maxHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxHeight  new value for property <code>maxHeight</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setMaxHeight
 * @function
 */


/**
 * Getter for property <code>contentBorderDesign</code>.
 * 
 * Border design is theme-dependent.
 * 
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.commons.enums.BorderDesign} the value of property <code>contentBorderDesign</code>
 * @public
 * @name sap.ui.commons.Dialog#getContentBorderDesign
 * @function
 */

/**
 * Setter for property <code>contentBorderDesign</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.commons.enums.BorderDesign} oContentBorderDesign  new value for property <code>contentBorderDesign</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setContentBorderDesign
 * @function
 */


/**
 * Getter for property <code>modal</code>.
 * Specify whether the dialog should be modal, or not. In case of <code>true</code> the focus is kept inside the dialog.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * @name sap.ui.commons.Dialog#getModal
 * @function
 */

/**
 * Setter for property <code>modal</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bModal  new value for property <code>modal</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setModal
 * @function
 */


/**
 * Getter for property <code>accessibleRole</code>.
 * The ARIA role for the control. E.g. for alert-style Dialogs this can be set to "AlertDialog".
 *
 * Default value is <code>Dialog</code>
 *
 * @return {sap.ui.core.AccessibleRole} the value of property <code>accessibleRole</code>
 * @public
 * @name sap.ui.commons.Dialog#getAccessibleRole
 * @function
 */

/**
 * Setter for property <code>accessibleRole</code>.
 *
 * Default value is <code>Dialog</code> 
 *
 * @param {sap.ui.core.AccessibleRole} oAccessibleRole  new value for property <code>accessibleRole</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setAccessibleRole
 * @function
 */


/**
 * Getter for property <code>keepInWindow</code>.
 * Whether Dialog movement should be restricted to the visible area of the window. This only affects drag&drop movements by the user. This doesn't affect modal dialogs -> modal dialogs always stay in the window.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>keepInWindow</code>
 * @public
 * @since 1.9.0
 * @name sap.ui.commons.Dialog#getKeepInWindow
 * @function
 */

/**
 * Setter for property <code>keepInWindow</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bKeepInWindow  new value for property <code>keepInWindow</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.ui.commons.Dialog#setKeepInWindow
 * @function
 */


/**
 * Getter for property <code>autoClose</code>.
 * If this property is set to true the Dialog will close if the Dialog loses its focus
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>autoClose</code>
 * @public
 * @since 1.10
 * @name sap.ui.commons.Dialog#getAutoClose
 * @function
 */

/**
 * Setter for property <code>autoClose</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAutoClose  new value for property <code>autoClose</code>
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.10
 * @name sap.ui.commons.Dialog#setAutoClose
 * @function
 */


/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * Aggregating the buttons to display at the bottom of the dialog, for example OK and Cancel. Association defaultButton can be used for one of the defined buttons.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.Dialog#getButtons
 * @function
 */


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.core.Control}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#insertButton
 * @function
 */

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.core.Control}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#addButton
 * @function
 */

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.ui.core.Control} vButton the button to remove or its index or id
 * @return {sap.ui.core.Control} the removed button or null
 * @public
 * @name sap.ui.commons.Dialog#removeButton
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Dialog#removeAllButtons
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Dialog#indexOfButton
 * @function
 */
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#destroyButtons
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Aggregating the content of the dialog (one or more controls).
 * 
 * Caveat: when content is added with width given as a percentage, the Dialog itself should have a width set.
 * 
 * <strong>Note</strong>: this is the default aggregation for Dialog.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.Dialog#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.commons.Dialog#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Dialog#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Dialog#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#destroyContent
 * @function
 */


/**
 * 
 * Defines one of the buttons that have been provided via button aggregation to be the default button. This default button is initially selected, if no control is set via the initialFocus association explicitly. The default button is activated when Enter is pressed in the context of the dialog and when the currently selected element does not handle the Enter event itself.
 *
 * @return {string} Id of the element which is the current target of the <code>defaultButton</code> association, or null
 * @public
 * @name sap.ui.commons.Dialog#getDefaultButton
 * @function
 */

/**
 * 
 * Defines one of the buttons that have been provided via button aggregation to be the default button. This default button is initially selected, if no control is set via the initialFocus association explicitly. The default button is activated when Enter is pressed in the context of the dialog and when the currently selected element does not handle the Enter event itself.
 *
 * @param {string | sap.ui.commons.Button} vDefaultButton 
 *    Id of an element which becomes the new target of this <code>defaultButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setDefaultButton
 * @function
 */


	
/**
 * 
 * Defines the control that shall get the focus when the dialog is opened.
 *
 * @return {string} Id of the element which is the current target of the <code>initialFocus</code> association, or null
 * @public
 * @name sap.ui.commons.Dialog#getInitialFocus
 * @function
 */

/**
 * 
 * Defines the control that shall get the focus when the dialog is opened.
 *
 * @param {string | sap.ui.core.Control} vInitialFocus 
 *    Id of an element which becomes the new target of this <code>initialFocus</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#setInitialFocus
 * @function
 */


	
/**
 * 
 * Event is fired when the user closes the dialog window. Event parameters provide information about last position and last size.
 *  
 *
 * @name sap.ui.commons.Dialog#closed
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.width the width of the dialog when closed
 * @param {int} oControlEvent.getParameters.height the height of the dialog when closed
 * @param {int} oControlEvent.getParameters.top the top position of the dialog when closed
 * @param {int} oControlEvent.getParameters.left the left position of the dialog when closed
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'closed' event of this <code>sap.ui.commons.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Dialog</code>.<br/> itself. 
 *  
 * 
 * Event is fired when the user closes the dialog window. Event parameters provide information about last position and last size.
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Dialog</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#attachClosed
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'closed' event of this <code>sap.ui.commons.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Dialog#detachClosed
 * @function
 */

/**
 * Fire event closed to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'width' of type <code>int</code> the width of the dialog when closed</li>
 * <li>'height' of type <code>int</code> the height of the dialog when closed</li>
 * <li>'top' of type <code>int</code> the top position of the dialog when closed</li>
 * <li>'left' of type <code>int</code> the left position of the dialog when closed</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Dialog#fireClosed
 * @function
 */


/**
 * Opens the dialog control instance.
 *
 * @name sap.ui.commons.Dialog.prototype.open
 * @function

 * @type void
 * @public
 */


/**
 * Closes the dialog control instance.
 *
 * @name sap.ui.commons.Dialog.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * Returns whether the Dialog is open (this includes opening and closing animations). For more detailed information about the current state check Dialog.getOpenState().
 *
 * @name sap.ui.commons.Dialog.prototype.isOpen
 * @function

 * @type boolean
 * @public
 */


/**
 * Returns whether the Dialog is currently open, closed, or transitioning between these states.
 *
 * @name sap.ui.commons.Dialog.prototype.getOpenState
 * @function

 * @type sap.ui.core.OpenState
 * @public
 */


// Start of sap\ui\commons\Dialog.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * Initialization hook for the dialog.
 * It creates the instance of the Popup helper service and does some basic configuration for it.
 *
 * @private
 */
sap.ui.commons.Dialog.prototype.init = function() {
   // do something for initialization...
   this.oPopup = new sap.ui.core.Popup(this, true, true);
   var eDock = sap.ui.core.Popup.Dock;
   this.oPopup.setPosition(eDock.CenterCenter, eDock.CenterCenter, window);

   this._minWidth = 64; // the technical minWidth, not the one set via API; will be calculated after rendering
   this._minHeight = 48; // the technical minHeight, not the one set via API; will be calculated after rendering
   // TODO: re-calculate after theme switch?!!

   this.allowTextSelection(false);
};

sap.ui.commons.Dialog.prototype.setInitialFocus = function(sId) {
	if (sId != null && typeof(sId) != "string") {
		sId = sId.getId();
	}
	this.oPopup.setInitialFocusId(sId);
	this.setAssociation("initialFocus", sId, true);
};

/**
 * Required adaptations after rendering.
 * @private
 */
sap.ui.commons.Dialog.prototype.onAfterRendering = function() {
	var $content = this.$("cont");

	// if content has 100% width, but Dialog has no width, set content width to auto
	if (!sap.ui.commons.Dialog._isSizeSet(this.getWidth()) && !sap.ui.commons.Dialog._isSizeSet(this.getMaxWidth())) {
		$content.children().each(function(index, element) {
			if (jQuery.trim(this.style.width) == "100%") {
				this.style.width = "auto";
			}
		});
	}

	// IE9+10 fix where subpixel font rendering may lead to rounding errors in RTL mode when the content has a width of "xyz.5px"
	if (!!sap.ui.Device.browser.internet_explorer && (sap.ui.Device.browser.version == 9 || sap.ui.Device.browser.version == 10) && ($content.length > 0)) {
		var elm = $content[0];
		if (sap.ui.getCore().getConfiguration().getRTL() && !sap.ui.commons.Dialog._isSizeSet(this.getWidth())) {
			if (elm.ownerDocument && elm.ownerDocument.defaultView && elm.ownerDocument.defaultView.getComputedStyle) {
				var width = elm.ownerDocument.defaultView.getComputedStyle(elm).getPropertyValue("width");
				if (width) {
					var fWidth = parseFloat(width, 10);
					if (fWidth % 1 == 0.5) {
						$content[0].style.width = (fWidth + 0.01) + "px"; // if aaaalll these conditions are fulfilled, the Dialog must be a LITTLE bit wider to avoid rounding errors
					}
				}
			}
		}
	}
	
	// if height is not set, but min-height is set, the Dialog is in a mixed mode between fixed height and flexible height 
	// (denoted by sapUiDlgFlexHeight), where sometimes the content pushes the height (when it is tall enough) and sometimes
	// the Dialog needs to take care to push the button row to the bottom (when there is less content than what would fit into a Dialog
	// with min-height size).
	// Therefore we need to check which one of both cases is currently active.
	if (!sap.ui.commons.Dialog._isSizeSet(this.getHeight()) && sap.ui.commons.Dialog._isSizeSet(this.getMinHeight())) {
		// height is not set, so the content height should push the height - denoted by the CSS class "sapUiDlgFlexHeight" which applies a simple layout
		// where header, content, and footer are stacked on top of each other
		
		// however, when there is a minHeight set which is larger than the natural height, the footer would be not at the bottom, so let's check whether the Dialog
		// is now smaller than the min-height:
		var footer = this.getDomRef("footer");
		var footerBottom = footer.offsetTop + footer.offsetHeight;
		var dialogBottom = this.getDomRef().offsetHeight;
		if (footerBottom < dialogBottom) {
			this.$().removeClass("sapUiDlgFlexHeight");
		} else { 
			// normal case: Dialog content pushes its height to or beyond its minimum height - this works fine with "sapUiDlgFlexHeight"
		}
	}

	// Calculate min size
	var _minSize = this.getMinSize();
	this._minWidth = _minSize.width;
	this._minHeight = _minSize.height;
};

/**
 * Handle the click event happening on the dialog instance.
 *
 * TODO also raise some event when click on 'x'
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onclick = function(oEvent) {
	switch(oEvent.target.id) {
	case this.getId() + "-close":
		this.close();
		oEvent.preventDefault(); // avoid onbeforeunload event which happens at least in IE9 because of the javascript:void(0); link target
		break;
	};
	return false;
};

/**
 * Opens this instance of dialog
 * @public
 */
sap.ui.commons.Dialog.prototype.open = function() {

	if ( !this.oPopup ) {
		// TODO discuss behavior of destroyed controls in general
		jQuery.sap.log.fatal("This dialog instance has been destroyed already");
		return;
	}
	if ( this._bOpen ) {
		return;
	}

	// Save current focused element to restore the focus after closing the dialog
	this._oPreviousFocus = sap.ui.core.Popup.getCurrentFocusInfo();

	this.oPopup.attachEvent("opened", this.handleOpened, this);
	this.oPopup.attachEvent("closed", this.handleClosed, this);
	this.oPopup.setModal(this.getModal());
	this.oPopup.setAutoClose(this.getAutoClose());
	this.oPopup.open(400);
	this._bOpen = true;
};


/**
 * @private
 */
sap.ui.commons.Dialog.prototype._handleOpened = function() {
	var sInitFocus = this.getInitialFocus(),
	oFocusCtrl;
	if(sInitFocus && (oFocusCtrl = sap.ui.getCore().getControl(sInitFocus))){ // an additional previous check was  oFocusCtrl.getParent() === this  which prevented nested children from being focused
		oFocusCtrl.focus();
		this._bInitialFocusSet = true;
	} else {
		sInitFocus = this.getDefaultButton();
		if(sInitFocus && (oFocusCtrl = sap.ui.getCore().getControl(sInitFocus)) && oFocusCtrl.getParent() === this){
			oFocusCtrl.focus();
			this._bInitialFocusSet = true;
		} else if (this.getButtons().length > 0) {
			this.getButtons()[0].focus();// TODO is this wanted?
			this._bInitialFocusSet = true;
		} else if(this.getContent().length > 0){
			// let's at least focus something in the Dialog
			this.getContent()[0].focus();
			this._bInitialFocusSet = true;
		}
	}
};

sap.ui.commons.Dialog.prototype.handleOpened = function() {
	this.oPopup.detachEvent("opened", this.handleOpened, this);

	if (sap.ui.Device.browser.internet_explorer &&  sap.ui.Device.browser.version === 11) {
		// a delayed call is needed for IE11. Since it fires the opened event before all stuff
		// is visible. All stuff is added to the DOM though and all operations can be done
		// but a focus seems to work (there is no error) but the focus can't be set to something
		// that isn't really visible
		jQuery.sap.clearDelayedCall(this._delayedCallId);
		this._delayedCallId = jQuery.sap.delayedCall(0, this, this._handleOpened); 
	} else {
		this._handleOpened();
	}
};

/**
 * Closes this Dialog
 * @public
 */
sap.ui.commons.Dialog.prototype.close = function() {

	if ( !this._bOpen ) {
		return;
	}

	var oRect = this.$().rect();

	this._bOpen = false;
	this._bInitialFocusSet = false;
	this.oPopup.close(400);

	// do this delayed or it possibly won't work because of popup closing animations
	jQuery.sap.delayedCall(400, this, "restorePreviousFocus");

	jQuery.each(oRect, function(key, val){
		oRect[key] = parseInt(val, 10);
	});
	
	this._oRect = oRect;
};

sap.ui.commons.Dialog.prototype.handleClosed = function() {
	this.oPopup.detachEvent("closed", this.handleClosed, this);

	this.fireClosed(this._oRect);
	this.close();
};

/**
 * restore the focus when the dialog was closed to the control which opened the dialog.
 * This is independent of the dialogs modal state. The popup also restores focus when using modal popups/dialogs.
 * @private
 */
sap.ui.commons.Dialog.prototype.restorePreviousFocus = function() {
	sap.ui.core.Popup.applyFocusInfo(this._oPreviousFocus);
};


sap.ui.commons.Dialog.prototype.setTitle = function (sText) {
	this.setProperty("title", sText, true); // last parameter avoids invalidation
	this.$("lbl").text(sText);
	return this;
};

/**
 * Destroys this instance of dialog, called by Element#destroy()
 * @private
 */
sap.ui.commons.Dialog.prototype.exit = function() {
	// only fire the closed event if the dialog was open
	var bWasOpen = this.isOpen();
	this.close();

	// just to ensure that any attached event is being detached
	this.oPopup.detachEvent("opened", this.handleOpened, this);
	this.oPopup.detachEvent("closed", this.handleClosed, this);
	
	this.oPopup.destroy();
	if (bWasOpen) {
		this.fireClosed(this._oRect);
	}
	this.oPopup = null;
};

/**
 * Checks whether the given sCssSize is an explicit value, or not (e.g. auto, inherit).
 *
 * @param {string} sCssSize The CSS string to check for being explicit value.
 * @return {boolean} whether The given sCssSize is an explicit value, or not (e.g. auto, inherit).
 * @private
 */
sap.ui.commons.Dialog._isSizeSet = function(sCssSize) {
	return (sCssSize && !(sCssSize == "auto") && !(sCssSize == "inherit"));
};

/**
 * Handles the sapescape event, triggers closing of the window.
 * TODO also raise some event like with the click on 'x'
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onsapescape = function(oEvent) {
	this.close();

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Handles the sapenter event, triggers the default button of the dialog.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onsapenter = function(oEvent) {
	// See open-method
	var oFocusCtrl,
		sInitFocus = this.getDefaultButton();

	// trigger the default button if it exists and is inside the Dialog
	if(sInitFocus && (oFocusCtrl = sap.ui.getCore().byId(sInitFocus)) && jQuery.contains(this.getDomRef(), oFocusCtrl.getDomRef())) {
		// Okay, we have the control
		if (oFocusCtrl instanceof sap.ui.commons.Button) {
			oFocusCtrl.onclick(oEvent);
		} // FIXME is this really the way it should be?
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Event handler for the focusin event.
 * If it occurs on the focus handler elements at the beginning of the dialog, the focus is set to the end, and vice versa.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onfocusin = function(oEvent){
	this.sLastRelevantNavigation = null;
	
	if (!this._bInitialFocusSet) {
		// since IE9 calls first "onfocusin" it has to be checked if the initial focus was set already
		return;
	}

	var sFirstFocusable = this.getId() + "-fhfe";
	var sLastFocusable = this.getId() + "-fhee";
	
	var oSourceDomRef = oEvent.target;
	var oFocusDomRef = undefined;
	var $FocusablesCont = jQuery(":sapFocusable", this.$("cont"));
	var $FocusablesFoot = jQuery(":sapFocusable", this.$("footer"));

	/*
	 * It's not needed to check if buttons are set since jQuery(":focusable", jQuery.sap.byId(this.getId() + "-fhfe")) 
	 * or jQuery(":sapFocusable", jQuery.sap.byId(this.getId() + "-fhfe")) returns an empty array. Therefore these
	 * elements won't be found via 'lastFocusableDomRef()'
	 */
	if (oSourceDomRef.id === sFirstFocusable) {
		// the FocusHandlingFirstElement was focused and thus the focus should move to the last element.
		if ($FocusablesFoot.length > 0) {
			oFocusDomRef = $FocusablesFoot[$FocusablesFoot.length-1];
		} else {
			oFocusDomRef = $FocusablesCont[$FocusablesCont.length-1];
		}
	} else if (oSourceDomRef.id === sLastFocusable) {
		// the FocusHandlingEndElement was focused and thus the focus should move to the first element.
		if ($FocusablesCont.length > 0) {
			oFocusDomRef = $FocusablesCont[0];
		} else {
			oFocusDomRef = $FocusablesFoot[0];
		}
	}
	
	if (oFocusDomRef) {
		/*
		 * This check especially for IE9 is needed because when IE9 is used together with JAWS the element that will be 
		 * focused isn't read when the focus happens too fast. Therefore a delay is added to JAWS can read the newly
		 * focused element. 
		 */
		var iDelay = sap.ui.Device.browser.msie &&  sap.ui.Device.browser.version === 9 ? 100 : 0;

		jQuery.sap.delayedCall(iDelay, this, function(){
			// if the element is a control the focus should be called via the control
			// especially if the control has an individual focus DOM-ref
			if (sap.ui.getCore().byId(oFocusDomRef.id) instanceof sap.ui.core.Control) {
				oFocusDomRef.focus(); 
			} else {
				jQuery.sap.focus(oFocusDomRef); 
			}
		});
	}
};

/**
 * Restores the focus in case it got lost beforehand e.g. by leaving the dialog or the whole window.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.restoreFocus = function() {
	if (this.oRestoreFocusInfo && this.oPopup.bOpen) { // do not restore the focus if Dialog is no longer open  TODO: where is the focus going, then? The Toolbar testpage at least works fine.
		var oCtrl = sap.ui.getCore().getControl(this.oRestoreFocusInfo.sFocusId);
		if (oCtrl) {
			oCtrl.applyFocusInfo(this.oRestoreFocusInfo.oFocusInfo);
		}
	}
};

/**
 * Handles or cancels the selectstart event when occuring in parts of the dialog.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onselectstart = function(oEvent) {
	if (!jQuery.sap.containsOrEquals(this.getDomRef("cont"), oEvent.target)) {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Get minimal reasonable size of the dialog given its inner elements. Call is recommended after rendering.
 *
 * @return {Object} An object with inner structure {width:{int}, height:{int}}
 * @private
 */
sap.ui.commons.Dialog.prototype.getMinSize = function () {

	var oDialog = jQuery.sap.domById(this.sId), oTitle = jQuery.sap.domById(this.sId + "-hdr"), oFooter = jQuery.sap.domById(this.sId + "-footer"),
		heightTitle=0, widthFooter=0, heightFooter=0;

	var oFooterBtns = jQuery(oFooter).children("DIV").get(0);
	widthFooter = oFooterBtns.offsetWidth;

	var addValue = 0;
	// add border and padding of footer...not margin
	addValue += jQuery(oFooter).outerWidth(false) - jQuery(oFooter).width();
	// add border and padding of footer...not margin
	addValue += jQuery(oDialog).outerWidth(false) - jQuery(oDialog).width();

	// if there is a too small specific border value add +20 for certainty to avoid wrapping
	if (addValue <= 20) {
	 addValue = 20;
	}

	widthFooter += addValue;

	if (isNaN(widthFooter) || widthFooter < 100) {
		widthFooter = 100;
	}

	heightTitle = oTitle.offsetHeight;
	heightFooter = oFooter.offsetHeight;
	return {
		width: widthFooter,
		height: heightTitle + heightFooter + 36 /* min. height content */
	};
};


// Implementation of API method isOpen
sap.ui.commons.Dialog.prototype.isOpen = function(){
	return this.oPopup.isOpen();
};

// Implementation of API method isOpen
sap.ui.commons.Dialog.prototype.getOpenState = function(){
	return this.oPopup.getOpenState();
};

/**
 * Whether the dialog is currently enabled or not.
 * 
 * Applications can't control the enabled state via a property. A dialog is implicitly 
 * enabled depending on its <code>openState</code>. Descendant controls that honor the 
 * enabled state of their ancestors will appear disabled after the dialog is closed.
 * 
 * @experimental Whether a dialog is regarded as "enabled" during the state transitions 
 * (OPENING, CLOSING) is not fully decided. Currently, it is enabled during the OPENING phase 
 * and disabled during the CLOSING phase. The only potential change would be to treat the 
 * OPENING phase as disabled as well. Applications should be prepared to receive events from
 * "enabled" controls after they called open() on the dialog until close() is called on it.
 * If the mentioned potential change should happen, the dialog will become enabled only 
 * after the transition to OPEN. Events from "enabled" children then can still only arrive 
 * between open() and close(), so applications that obey the previous rule should continue 
 * to work. Only end users or code  that explicitly triggers pseudo user events will notice 
 * a difference. <br>
 * A second aspect that might change is the visual behavior of the content: during the CLOSING 
 * phase it 'looks' enabled but in fact it is already disabled. This avoids unnecessary redraws 
 * for content that becomes hidden soon. Should this show to be confusing for end users, it might 
 * be changed.
 * 
 * @return {boolean} whether the dialog is currently enabled or not.
 * @public
 */
sap.ui.commons.Dialog.prototype.getEnabled = function() {
  var eState = this.getOpenState();
  // TODO the check for state OPENING is a compromise. Without that, the content of the dialog will render 
  // in disabled state but will be enabled. As an alternative, the dialog could render again after OPEN is reached
  // and after switching to CLOSING (to properly reflect the changed enabled state in the descendants) 
  return eState === sap.ui.core.OpenState.OPENING || eState === sap.ui.core.OpenState.OPEN;
};

// **************************************************
// 'Legacy' Resize and Move handling including jQuery-UI parts for that would bring in 70k (uncompressed)
// **************************************************

/**
* Handles the dragstart event.
* In case of resize currently ongoing, this cancels the dragstart.
* @param {sap.ui.core.BroserEvent} oEvent The forwarded browser event
* @private
*/
sap.ui.commons.Dialog.prototype.ondragstart = function(oEvent){
	if(this.sDragMode == "resize" || this.sDragMode == "move") {
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Initializes drag and move capabilities.

 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.onmousedown = function (oEvent) {

	var oSource = oEvent.target,
		sId = this.getId();

	this._bRtlMode = sap.ui.getCore().getConfiguration().getRTL(); // remember the RTL mode for the starting resize operation

	if(jQuery.sap.containsOrEquals(this.getDomRef("hdr"), oSource)) {
		if (oSource.id != (sId + "-close")) {
			this.sDragMode = "move";
			this._RootWidth = this.getDomRef().offsetWidth;
			this._RootHeight = this.getDomRef().offsetHeight;
		}
	} else if(oSource.id == sId + "-grip") {
		this.sDragMode = "resize";

		// Now the dialog is fixed-width and fixed-height; write them to the element and adapt its classes to switch positioning
		var oDomRef = this.getDomRef();
		var sWidth = oDomRef.offsetWidth + "px";
		oDomRef.style.width = sWidth;
		var sHeight = oDomRef.offsetHeight + "px";
		oDomRef.style.height = sHeight;
		jQuery(oDomRef).removeClass("sapUiDlgFlexHeight sapUiDlgFlexWidth");
		// ...also remember the dimensions for the future (e.g. for after rerendering) - but do not cause rerendering now
		this.setProperty("width", sWidth, true);
		this.setProperty("height", sHeight, true);
	}

	if (this.sDragMode == null) {
		return;
	}

	// save current focused control for restoring later in restore focus
	var oActElement = document.activeElement;
	if (oActElement && oActElement.id){
		var oCtrl = jQuery.sap.byId(oActElement.id).control(0);
		if(oCtrl) {
			this.oRestoreFocusInfo = {sFocusId: oCtrl.getId(), oFocusInfo: oCtrl.getFocusInfo()};
		}
	}

	// Calculate event X,Y coordinates
	this.startDragX = oEvent.screenX;
	this.startDragY = oEvent.screenY;

	this.originalRectangle = this.$().rect();

	jQuery(window.document).bind("selectstart", jQuery.proxy(this.ondragstart, this));
	jQuery(window.document).bind("mousemove", jQuery.proxy(this.handleMove, this));
	jQuery(window.document).bind("mouseup", jQuery.proxy(this.handleMouseUp, this));

	var outerDoc = sap.ui.commons.Dialog._findSameDomainParentWinDoc();
	if (outerDoc) {
		jQuery(outerDoc).bind("selectstart", jQuery.proxy(this.ondragstart, this));
		jQuery(outerDoc).bind("mousemove", jQuery.proxy(this.handleMove, this));
		jQuery(outerDoc).bind("mouseup", jQuery.proxy(this.handleMouseUp, this));
	}

};


/**
 * Returns the document of the parent window which is highest up in the hierarchy of parent windows, but still belongs
 * to the same domain (so its document is accessible)
 *
 * @private
 */
sap.ui.commons.Dialog._findSameDomainParentWinDoc = function() {
	var outerDoc = null;
	try {
		var win = window;
		while (win.parent && (win.parent != win)) {
			if (win.parent.document) {
				outerDoc = win.parent.document;
				win = win.parent;
			}
		}
	} catch(e) {
		// parent is in a different domain, so we cannot listen to mouse events there
		// outerWindow is now either null or the highest possible parent window (!= the document's window) in the same domain
	}
	return outerDoc;
};


/**
 * Handles the move event taking the current dragMode into account.
 * @param {DOMEvent} event The event raised by the browser.
 * @private
 */
sap.ui.commons.Dialog.prototype.handleMove = function (event) {

	if (!this.sDragMode) {
		return;
	}

	event = event || window.event;

	if (this.sDragMode == "resize") {

		var deltaX = event.screenX - this.startDragX;
		var deltaY = event.screenY - this.startDragY;

		var w = (this._bRtlMode ? this.originalRectangle.width - deltaX : this.originalRectangle.width + deltaX);
		var h = this.originalRectangle.height + deltaY;

		w = Math.max(w, this._minWidth);
		h = Math.max(h, this._minHeight);

		// The dimension constraints set via API could be in any CSS unit, so just set the size and do checks
		// (min/max override what was set here)
		var oDomRef = this.getDomRef();
		oDomRef.style.width = w + "px";
		oDomRef.style.height = h + "px";

		// Now use the actual size of the dialog, which might have been constrained by min-*/max-* for resizing the popup and the shadow
		w = this.getDomRef().offsetWidth;
		h = this.getDomRef().offsetHeight;

		// In IE8, style.width/height will still have the old values - possibly outside this Dialog's size constraints.
		// The Dialog box itself will stay correctly constrained, but its child elements will be positioned as if the style.width/height
		// values were the actual size, so for this browser - and to be cleaner - explicitly set these sizes. This is an IE8 bug.
		oDomRef.style.width = w + "px";
		oDomRef.style.height = h + "px";

		// Also remember the dimensions for the future (e.g. for after rerendering) - but do not cause rerendering now
		this.setProperty("width", w+"px", true);
		this.setProperty("height", h+"px", true);

	} else if (this.sDragMode == "move") {

		var iLeft = this.originalRectangle.left + event.screenX - this.startDragX;
		var iTop = this.originalRectangle.top + event.screenY - this.startDragY;

		iTop = Math.max(iTop, 0); // should not move the Dialog beyond the top border - otherwise it cannot be moved back
		if (this._bRtlMode || this._keepInWindow()) {
			iLeft = Math.min(iLeft, document.documentElement.clientWidth - this._RootWidth); // in RTL mode, do not move beyond the right window border
		}
		if (!this._bRtlMode || this._keepInWindow()) {
			iLeft = Math.max(iLeft, 0); // in LTR mode do not move the Dialog beyond the left border
		}
		if (this._keepInWindow()) {
			iTop = Math.min(iTop, document.documentElement.clientHeight - this._RootHeight);
		}

		this.oPopup.setPosition(sap.ui.core.Popup.Dock.LeftTop, {left:iLeft, top:iTop});
	}

	event.cancelBubble = true;
	return false;
};

/**
 * This function checks if the "keepInWindow" property is set or if the Dialog is modal.
 * Modal Dialogs mustn't not leave the window also.
 * 
 * @returns {boolean} if the Dialog must leave the window area
 * @private
 */
sap.ui.commons.Dialog.prototype._keepInWindow = function () {
	return this.getKeepInWindow() || this.getModal();
};


/**
 * Handle mouseup event.
 * This does the cleanup after drag and move handling.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.ui.commons.Dialog.prototype.handleMouseUp = function (oEvent) {

	if (this.sDragMode == null) {
		return;
	}

	jQuery(window.document).unbind("selectstart", this.ondragstart);
	jQuery(window.document).unbind("mousemove", this.handleMove);
	jQuery(window.document).unbind("mouseup", this.handleMouseUp);

	var outerDoc = sap.ui.commons.Dialog._findSameDomainParentWinDoc();
	if (outerDoc) {
		jQuery(outerDoc).unbind("selectstart", this.ondragstart);
		jQuery(outerDoc).unbind("mousemove", this.handleMove);
		jQuery(outerDoc).unbind("mouseup", this.handleMouseUp);
	}

	if(!!sap.ui.Device.browser.webkit){
		//Force Webkit Browsers to do a repaint
		sap.ui.core.RenderManager.forceRepaint(this.getId());
	}

	// Set back focus to previously focused element
	this.restoreFocus();
	this.sDragMode = null;

};

sap.ui.commons.Dialog.setAutoClose = function(bAutoclose){
	this.oPopup.setAutoClose(bAutoclose);
};
sap.ui.commons.Dialog.getAutoClose = function(){
	this.oPopup.getAutoClose();
};

}; // end of sap/ui/commons/Dialog.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.DropdownBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.DropdownBox
jQuery.sap.declare("sap.ui.commons.DropdownBoxRenderer");


/**
 * @class DropdownBox renderer.
 * @static
 */
sap.ui.commons.DropdownBoxRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.ComboBoxRenderer);

/**
 * Renders additional HTML for the DropdownBox to the TextField before the INPUT element (sets the icon)
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oDdb an object representation of the control that should be rendered
 */
sap.ui.commons.DropdownBoxRenderer.renderOuterContentBefore = function(rm, oDdb){

	this.renderExpander(rm, oDdb);

};

/**
 * Renders additional HTML for the DropdownBox to the TextField after the INPUT element (sets the select box)
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oDdb an object representation of the control that should be rendered
 */
sap.ui.commons.DropdownBoxRenderer.renderOuterContent = function(rm, oDdb){

	this.renderSelectBox(rm, oDdb, '0');

};

/**
 * Used to set the tabindex of the dropdownbox to -1
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oDdb an object representation of the control that should be rendered
 */
sap.ui.commons.DropdownBoxRenderer.renderTextFieldEnabled = function(rm, oDdb) {

	if (oDdb.mobile) {
		rm.writeAttribute('tabindex', '-1');
	}else if(!oDdb.getEnabled()){
		rm.writeAttribute('disabled', 'disabled');
		rm.writeAttribute('tabindex', '-1');
	}else if(!oDdb.getEditable()){
		rm.writeAttribute('tabindex', '0');
	}else{
		rm.writeAttribute('tabindex', '0');
	}

};

/*
 * Renders ARIA information for the dropdownbox (outer &lt;div&gt;)
 * @param {sap.ui.fw.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should be rendered
 * @private
 */
sap.ui.commons.DropdownBoxRenderer.renderARIAInfo = function(rm, oDdb) {

	var iPosInSet = -1;
	if(oDdb.getSelectedItemId()){
		for ( var i = 0; i < oDdb.getItems().length; i++) {
			var oItem = oDdb.getItems()[i];
			if (oItem.getId() == oDdb.getSelectedItemId()) {
				iPosInSet =  i+1;
				break;
			}
		}
	}

	var mProps = {
			autocomplete: "list",
			live: "polite",
			setsize: oDdb.getItems().length,
			posinset: (iPosInSet >= 0) ? iPosInSet : undefined
		};

	if (oDdb.getValueState() == sap.ui.core.ValueState.Error) {
		mProps["invalid"] = true;
	}

	rm.writeAccessibilityState(oDdb, mProps);

};
}; // end of sap/ui/commons/DropdownBoxRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.FileUploader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.FileUploader.
jQuery.sap.declare("sap.ui.commons.FileUploader");

jQuery.sap.require('sap.ui.unified.FileUploader'); // unlisted dependency retained



/**
 * Constructor for a new FileUploader.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.unified.FileUploader#constructor sap.ui.unified.FileUploader}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The framework generates an input field and a button with text "Browse ...". The API supports features such as on change uploads (the upload starts immediately after a file has been selected), file uploads with explicit calls, adjustable control sizes, text display after uploads, or tooltips containing complete file paths.
 * @extends sap.ui.unified.FileUploader
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.21.0. 
 * Please use the control sap.ui.unified.FileUploader of the library sap.ui.unified instead.
 * @name sap.ui.commons.FileUploader
 */
sap.ui.unified.FileUploader.extend("sap.ui.commons.FileUploader", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.FileUploader with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.FileUploader.extend
 * @function
 */


// Start of sap\ui\commons\FileUploader.js
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.ui.commons.FileUploader");

(function(){

	try{
		sap.ui.getCore().loadLibrary("sap.ui.unified");
	}catch(e){
		alert("The control 'sap.ui.commons.FileUploader' needs library 'sap.ui.unified'.");
		throw(e);
	}

})();
}; // end of sap/ui/commons/FileUploader.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.FileUploaderParameter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.FileUploaderParameter.
jQuery.sap.declare("sap.ui.commons.FileUploaderParameter");

jQuery.sap.require('sap.ui.unified.FileUploaderParameter'); // unlisted dependency retained



/**
 * Constructor for a new FileUploaderParameter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.unified.FileUploaderParameter#constructor sap.ui.unified.FileUploaderParameter}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents a parameter for the FileUploader which is rendered as a hidden inputfield.
 * @extends sap.ui.unified.FileUploaderParameter
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.21.0. 
 * Please use the element sap.ui.unified.FileUploaderParameter of the library sap.ui.unified instead.
 * @name sap.ui.commons.FileUploaderParameter
 */
sap.ui.unified.FileUploaderParameter.extend("sap.ui.commons.FileUploaderParameter", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.FileUploaderParameter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.FileUploaderParameter.extend
 * @function
 */


// Start of sap\ui\commons\FileUploaderParameter.js
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.ui.commons.FileUploaderParameter");

(function(){

	try{
		sap.ui.getCore().loadLibrary("sap.ui.unified");
	}catch(e){
		alert("The element 'sap.ui.commons.FileUploaderParameter' needs library 'sap.ui.unified'.");
		throw(e);
	}

})();
}; // end of sap/ui/commons/FileUploaderParameter.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.FormattedTextView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.FormattedTextView.
jQuery.sap.declare("sap.ui.commons.FormattedTextView");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FormattedTextView.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getAccessibleRole accessibleRole} : sap.ui.core.AccessibleRole (default: sap.ui.core.AccessibleRole.Document)</li>
 * <li>{@link #getHtmlText htmlText} : string (default: "")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getControls controls} : sap.ui.commons.FormattedTextViewControl[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Allows to use a limited set of HTML tags for display
 * 
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.0
 * @name sap.ui.commons.FormattedTextView
 */
sap.ui.core.Control.extend("sap.ui.commons.FormattedTextView", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setContent"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"accessibleRole" : {type : "sap.ui.core.AccessibleRole", group : "Accessibility", defaultValue : sap.ui.core.AccessibleRole.Document},
		"htmlText" : {type : "string", group : "Misc", defaultValue : ""}
	},
	aggregations : {
    	"controls" : {type : "sap.ui.commons.FormattedTextViewControl", multiple : true, singularName : "control"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.FormattedTextView with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.FormattedTextView.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Flag to suppress rendering of the FormattedTextView control
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.FormattedTextView#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.FormattedTextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.FormattedTextView#setVisible
 * @function
 */


/**
 * Getter for property <code>accessibleRole</code>.
 * The ARIA role for the control.
 *
 * Default value is <code>Document</code>
 *
 * @return {sap.ui.core.AccessibleRole} the value of property <code>accessibleRole</code>
 * @public
 * @name sap.ui.commons.FormattedTextView#getAccessibleRole
 * @function
 */

/**
 * Setter for property <code>accessibleRole</code>.
 *
 * Default value is <code>Document</code> 
 *
 * @param {sap.ui.core.AccessibleRole} oAccessibleRole  new value for property <code>accessibleRole</code>
 * @return {sap.ui.commons.FormattedTextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.FormattedTextView#setAccessibleRole
 * @function
 */


/**
 * Getter for property <code>htmlText</code>.
 * Text with placeholders
 *
 * Default value is <code>""</code>
 *
 * @return {string} the value of property <code>htmlText</code>
 * @public
 * @name sap.ui.commons.FormattedTextView#getHtmlText
 * @function
 */

/**
 * Setter for property <code>htmlText</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {string} sHtmlText  new value for property <code>htmlText</code>
 * @return {sap.ui.commons.FormattedTextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.FormattedTextView#setHtmlText
 * @function
 */


/**
 * Getter for aggregation <code>controls</code>.<br/>
 * Array of controls that should be replaced within htmlText
 * 
 * @return {sap.ui.commons.FormattedTextViewControl[]}
 * @public
 * @name sap.ui.commons.FormattedTextView#getControls
 * @function
 */


/**
 * Inserts a control into the aggregation named <code>controls</code>.
 *
 * @param {sap.ui.commons.FormattedTextViewControl}
 *          oControl the control to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the control should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the control is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the control is inserted at 
 *             the last position        
 * @return {sap.ui.commons.FormattedTextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.FormattedTextView#insertControl
 * @function
 */

/**
 * Adds some control <code>oControl</code> 
 * to the aggregation named <code>controls</code>.
 *
 * @param {sap.ui.commons.FormattedTextViewControl}
 *            oControl the control to add; if empty, nothing is inserted
 * @return {sap.ui.commons.FormattedTextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.FormattedTextView#addControl
 * @function
 */

/**
 * Removes an control from the aggregation named <code>controls</code>.
 *
 * @param {int | string | sap.ui.commons.FormattedTextViewControl} vControl the control to remove or its index or id
 * @return {sap.ui.commons.FormattedTextViewControl} the removed control or null
 * @public
 * @name sap.ui.commons.FormattedTextView#removeControl
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>controls</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.FormattedTextViewControl[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.FormattedTextView#removeAllControls
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.FormattedTextViewControl</code> in the aggregation named <code>controls</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.FormattedTextViewControl}
 *            oControl the control whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.FormattedTextView#indexOfControl
 * @function
 */
	

/**
 * Destroys all the controls in the aggregation 
 * named <code>controls</code>.
 * @return {sap.ui.commons.FormattedTextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.FormattedTextView#destroyControls
 * @function
 */


/**
 * Sets text with placeholders and given array of controls
 *
 * @name sap.ui.commons.FormattedTextView.prototype.setContent
 * @function
 * @param {string} 
 *         sHtmlText
 *         Contains the corresponding HTML-text
 * @param {sap.ui.commons.FormattedTextViewControl} 
 *         oControls
 *         Array of controls that should be used within given HTML-text

 * @type void
 * @public
 */


// Start of sap\ui\commons\FormattedTextView.js
jQuery.sap.require('jquery.sap.encoder'); // unlisted dependency retained


(function() {
	sap.ui.commons.FormattedTextView.prototype.init = function() {
		this._aAllowedInterfaces = [];
		this._aAllowedInterfaces[0] = "sap.ui.commons.FormattedTextViewControl";

		/*
		 * these are the rules for the FormattedTextView
		 */
		this._ftv = {};

		// rules for the allowed attributes
		this._ftv.ATTRIBS = {
			'span::class' : 1,
			'div::class' : 1,
			'div::id' : 1,
			'span::id' : 1,
			'embed::data-index' : 1
		};

		// rules for the allowed tags
		this._ftv.ELEMENTS = {
			// Text Module Tags
			'abbr' : 1,
			'acronym' : 1,
			'address' : 1,
			'blockquote' : 1,
			'br' : 1,
			'cite' : 1,
			'code' : 1,
			'dfn' : 1,
			'div' : 1,
			'em' : 1,
			'h1' : 1,
			'h2' : 1,
			'h3' : 1,
			'h4' : 1,
			'h5' : 1,
			'h6' : 1,
			'kbd' : 1,
			'p' : 1,
			'pre' : 1,
			'q' : 1,
			'samp' : 1,
			'strong' : 1,
			'span' : 1,
			'var' : 1,

			// List Module Tags
			'dl' : 1,
			'dt' : 1,
			'dd' : 1,
			'ol' : 1,
			'ul' : 1,
			'li' : 1,

			// Special Tags
			// this is the placeholder for the controls
			'embed' : 1

		// TODO maybe add these tags (if someone really need this)
		// 'a' : 1, currently used via Link-Control
		// 'img' : 1, currently used via Image-Control
		};
	};
	sap.ui.commons.FormattedTextView.prototype.exit = function() {
		delete this._aAllowedInterfaces;

		delete this._ftv;
	};

	sap.ui.commons.FormattedTextView.prototype.hasControls = function() {
		var aControls = this.getAggregation("controls");
		if (aControls && aControls.length > 0) {
			return true;
		}
		return false;
	};

	/**
	 * Sanitizes attributes on an HTML tag.
	 *
	 * @private
	 * @param {string}
	 *            tagName An HTML tag name in lowercase.
	 * @param {Array.
	 *            <?string>} attribs An array of alternating names and values.
	 * @return {Array.<?string>} The sanitized attributes as a list of
	 *         alternating names and values, where a null value means to omit
	 *         the attribute.
	 */
	var fnSanitizeAttribs = function(tagName, attribs) {
		for ( var i = 0; i < attribs.length; i += 2) {
			// attribs[i] is the name of the tag's attribute.
			// attribs[i+1] is its corresponding value.
			// (i.e. <span class="foo"> -> attribs[i] = "class" | attribs[i+1] =
			// "foo")

			var sAttribKey = tagName + "::" + attribs[i];

			if (this._ftv.ATTRIBS[sAttribKey]) {
				// keep the value of this class
				if (tagName === "embed") {
					var intPattern = /^[0-9]*$/;
					if (!attribs[i + 1].match(intPattern)) {
						// attribs[i + 1] = null;
						return null;
					}
				}
			} else {
				var sWarning = '<' + tagName + '> with attribute [' + attribs[i] + '="' + attribs[i + 1] + '"] is not allowed and cut';
				jQuery.sap.log.warning(sWarning, this);

				// to remove this attribute by the sanitizer the value has to be
				// set to null
				attribs[i + 1] = null;
			}

		}
		return attribs;
	};

	/**
	 * Sanitizes HTML tags and attributes according to a given policy.
	 *
	 * @private
	 * @param {string}
	 *            inputHtml The HTML to sanitize.
	 * @param {function(string,string[])} tagPolicy A function that decides which
	 *            tags to accept and sanitizes their attributes (see
	 *            makeHtmlSanitizer above for details).
	 * @return {string} The sanitized HTML.
	 */
	var fnPolicy = function(tagName, attribs) {
		if (this._ftv.ELEMENTS[tagName]) {
			var proxiedSanatizedAttribs = jQuery.proxy(fnSanitizeAttribs, this);
			return proxiedSanatizedAttribs(tagName, attribs);
		} else {
			var sWarning = '<' + tagName + '> is not allowed and cut (and its content)';
			jQuery.sap.log.warning(sWarning, this);
		}
	};

	sap.ui.commons.FormattedTextView.prototype.setHtmlText = function(sText) {
		var sSanitizedText = "";

		// use a proxy for policy to access the control's private variables
		var fnProxiedPolicy = jQuery.proxy(fnPolicy, this);

		// using the sanitizer that is already set to the encoder
		sSanitizedText = jQuery.sap._sanitizeHTML(sText, {
			tagPolicy : fnProxiedPolicy
		});

		this.setProperty("htmlText", sSanitizedText);
	};

	var fnSetControls = function(aControls, oThis) {
		if (oThis.hasControls()) {
			oThis.removeAllAggregation("controls");
		}

		var bIsArray = jQuery.isArray(aControls);
		if (bIsArray && aControls.length > 0) {
			// iterate through the given array but suppress invalidate
			for ( var i = 0; i < aControls.length; i++) {
				oThis.addAggregation("controls", aControls[i], true);
			}
			oThis.invalidate();
		}
	};

	sap.ui.commons.FormattedTextView.prototype.setContent = function(sHtmlText, aControls) {
		// set the text using existing checks and method
		this.setHtmlText(sHtmlText);

		// validate and set content of controls corresponding to given HTML-text
		// with place holders
		fnSetControls(aControls, this);
	};
}());
}; // end of sap/ui/commons/FormattedTextView.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.HorizontalDivider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.HorizontalDivider.
jQuery.sap.declare("sap.ui.commons.HorizontalDivider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new HorizontalDivider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getType type} : sap.ui.commons.HorizontalDividerType (default: sap.ui.commons.HorizontalDividerType.Area)</li>
 * <li>{@link #getHeight height} : sap.ui.commons.HorizontalDividerHeight (default: sap.ui.commons.HorizontalDividerHeight.Medium)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Divides the screen in visual areas.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.HorizontalDivider
 */
sap.ui.core.Control.extend("sap.ui.commons.HorizontalDivider", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'},
		"type" : {type : "sap.ui.commons.HorizontalDividerType", group : "Appearance", defaultValue : sap.ui.commons.HorizontalDividerType.Area},
		"height" : {type : "sap.ui.commons.HorizontalDividerHeight", group : "Appearance", defaultValue : sap.ui.commons.HorizontalDividerHeight.Medium}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.HorizontalDivider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.HorizontalDivider.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible dividers are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.HorizontalDivider#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.HorizontalDivider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.HorizontalDivider#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the divider.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.HorizontalDivider#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.HorizontalDivider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.HorizontalDivider#setWidth
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Defines the type of the divider.
 *
 * Default value is <code>Area</code>
 *
 * @return {sap.ui.commons.HorizontalDividerType} the value of property <code>type</code>
 * @public
 * @name sap.ui.commons.HorizontalDivider#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Area</code> 
 *
 * @param {sap.ui.commons.HorizontalDividerType} oType  new value for property <code>type</code>
 * @return {sap.ui.commons.HorizontalDivider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.HorizontalDivider#setType
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Defines the height of the divider.
 *
 * Default value is <code>Medium</code>
 *
 * @return {sap.ui.commons.HorizontalDividerHeight} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.HorizontalDivider#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>Medium</code> 
 *
 * @param {sap.ui.commons.HorizontalDividerHeight} oHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.HorizontalDivider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.HorizontalDivider#setHeight
 * @function
 */


// Start of sap\ui\commons\HorizontalDivider.js
// No Behaviour
}; // end of sap/ui/commons/HorizontalDivider.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Image') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Image.
jQuery.sap.declare("sap.ui.commons.Image");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Image.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li>
 * <li>{@link #getAlt alt} : string</li>
 * <li>{@link #getUseMap useMap} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.Image#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A wrapper around the IMG tag. The image can be loaded from a remote or local server.
 * There are various size setting options available, and the images can be combined with actions.
 * @extends sap.ui.core.Control
 * @implements sap.ui.commons.ToolbarItem,sap.ui.commons.FormattedTextViewControl
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Image
 */
sap.ui.core.Control.extend("sap.ui.commons.Image", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem",
		"sap.ui.commons.FormattedTextViewControl"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"src" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"decorative" : {type : "boolean", group : "Accessibility", defaultValue : true},
		"alt" : {type : "string", group : "Accessibility", defaultValue : null},
		"useMap" : {type : "string", group : "Misc", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Image with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Image.extend
 * @function
 */

sap.ui.commons.Image.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>src</code>.
 * Relative or absolute path to URL where the image file is stored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>src</code>
 * @public
 * @name sap.ui.commons.Image#getSrc
 * @function
 */

/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sSrc  new value for property <code>src</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Image#setSrc
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible images are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.Image#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Image#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the overall size is maintained then, considering the aspect ratio.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Image#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Image#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the overall size is maintained then, considering the aspect ratio.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.Image#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Image#setHeight
 * @function
 */


/**
 * Getter for property <code>decorative</code>.
 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>decorative</code>
 * @public
 * @name sap.ui.commons.Image#getDecorative
 * @function
 */

/**
 * Setter for property <code>decorative</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDecorative  new value for property <code>decorative</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Image#setDecorative
 * @function
 */


/**
 * Getter for property <code>alt</code>.
 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
 * If the image is set to decorative this property is ignored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>alt</code>
 * @public
 * @name sap.ui.commons.Image#getAlt
 * @function
 */

/**
 * Setter for property <code>alt</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAlt  new value for property <code>alt</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Image#setAlt
 * @function
 */


/**
 * Getter for property <code>useMap</code>.
 * The name of the image map that defines the clickable areas
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>useMap</code>
 * @public
 * @name sap.ui.commons.Image#getUseMap
 * @function
 */

/**
 * Setter for property <code>useMap</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUseMap  new value for property <code>useMap</code>
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Image#setUseMap
 * @function
 */


/**
 * Event is fired when the user clicks on the control. 
 *
 * @name sap.ui.commons.Image#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.Image</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Image</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Image</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Image#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.Image</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Image#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Image} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Image#firePress
 * @function
 */


// Start of sap\ui\commons\Image.js
/**
 * Function is called when image is clicked.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Image.prototype.onclick = function(oEvent) {
	this.firePress({/* no parameters */});
};

/**
 * Function is called when "enter" keydown happens on image.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Image.prototype.onsapenter = sap.ui.commons.Image.prototype.onclick;

}; // end of sap/ui/commons/Image.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ImageMap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ImageMap.
jQuery.sap.declare("sap.ui.commons.ImageMap");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ImageMap.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAreas areas} : sap.ui.commons.Area[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.ImageMap#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Combination of image areas where at runtime these areas are starting points for hyperlinks or actions
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ImageMap
 */
sap.ui.core.Control.extend("sap.ui.commons.ImageMap", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"createArea"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"name" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
    	"areas" : {type : "sap.ui.commons.Area", multiple : true, singularName : "area"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ImageMap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ImageMap.extend
 * @function
 */

sap.ui.commons.ImageMap.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>name</code>.
 * Name for the image that serves as reference
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.ui.commons.ImageMap#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ImageMap#setName
 * @function
 */


/**
 * Getter for aggregation <code>areas</code>.<br/>
 * Area representing the reference to the target location
 * 
 * @return {sap.ui.commons.Area[]}
 * @public
 * @name sap.ui.commons.ImageMap#getAreas
 * @function
 */


/**
 * Inserts a area into the aggregation named <code>areas</code>.
 *
 * @param {sap.ui.commons.Area}
 *          oArea the area to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the area should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the area is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the area is inserted at 
 *             the last position        
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ImageMap#insertArea
 * @function
 */

/**
 * Adds some area <code>oArea</code> 
 * to the aggregation named <code>areas</code>.
 *
 * @param {sap.ui.commons.Area}
 *            oArea the area to add; if empty, nothing is inserted
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ImageMap#addArea
 * @function
 */

/**
 * Removes an area from the aggregation named <code>areas</code>.
 *
 * @param {int | string | sap.ui.commons.Area} vArea the area to remove or its index or id
 * @return {sap.ui.commons.Area} the removed area or null
 * @public
 * @name sap.ui.commons.ImageMap#removeArea
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>areas</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Area[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.ImageMap#removeAllAreas
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.Area</code> in the aggregation named <code>areas</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Area}
 *            oArea the area whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.ImageMap#indexOfArea
 * @function
 */
	

/**
 * Destroys all the areas in the aggregation 
 * named <code>areas</code>.
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ImageMap#destroyAreas
 * @function
 */


/**
 * Event for the areas that can be clicked in an ImageMap 
 *
 * @name sap.ui.commons.ImageMap#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.areaId Id of clicked Area.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.ImageMap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.ImageMap</code>.<br/> itself. 
 *  
 * Event for the areas that can be clicked in an ImageMap 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.ImageMap</code>.<br/> itself.
 *
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ImageMap#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.ImageMap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ImageMap#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'areaId' of type <code>string</code> Id of clicked Area.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ImageMap} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.ImageMap#firePress
 * @function
 */


/**
 * Adds an area to the ImageMap
 *
 * @name sap.ui.commons.ImageMap.prototype.createArea
 * @function
 * @param {string[]} 
 *         aArea
 * 

 * @type void
 * @public
 */


// Start of sap\ui\commons\ImageMap.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


/**
 * Adds areas to the Image Map. Each argument must be either a JSon object or a
 * list of objects or the area element or elements.
 *
 * @param {sap.ui.commons.Area|string} Area to add
 * @return {sap.ui.commons.Area} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ImageMap.prototype.createArea = function() {
	var oArea = new sap.ui.commons.Area();

	for ( var i = 0; i < arguments.length; i++) {
		var oContent = arguments[i];
		var oArea;
		if (oContent instanceof sap.ui.commons.Area) {
			oArea = oContent;
		} else {
			oArea = new sap.ui.commons.Area(oContent);
		}
		this.addArea(oArea);
	}
	return this;
};

/**
 * Used for after-rendering initialization.
 *
 * @private
 */
sap.ui.commons.ImageMap.prototype.onAfterRendering = function() {

	this.oDomRef = this.getDomRef();

	// Initialize the ItemNavigation if does not exist yet
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
	}

	if (!!sap.ui.Device.browser.internet_explorer) {

		var that = this;
		var aImageControls = [];
		this.oItemNavigation.setTabIndex0();

		// Find the Image control and add delegate to it
		var $Images = jQuery("img[useMap=#" + this.getName() + "]");
		$Images.each(function(i, image) {
			var id = image.getAttribute("id");
			var imageControl = sap.ui.getCore().byId(id);
			imageControl.addDelegate(that.oItemNavigation);
			that.oItemNavigation.setRootDomRef(image);
			aImageControls.push(imageControl);
		});

		this.aImageControls = aImageControls;
	} else {

		this.addDelegate(this.oItemNavigation);
		this.oItemNavigation.setRootDomRef(this.oDomRef);
	}

	// Set navigations items = Areas inside of Image map
	var aItemDomRefs = [];
	var aAllAreas = this.getAreas();
	for ( var i = 0; i < aAllAreas.length; i++) {
		var oDomRef = aAllAreas[i].getFocusDomRef();
		if (oDomRef) { // separators return null here
			aItemDomRefs.push(oDomRef);
		}
	}

	this.oItemNavigation.setItemDomRefs(aItemDomRefs);
	this.oItemNavigation.setCycling(true);
	this.oItemNavigation.setSelectedIndex(-1);
	this.oItemNavigation.setFocusedIndex(-1);

};

/**
 * Does all the cleanup when the Image Map is to be destroyed. Called from the
 * element's destroy() method.
 *
 * @private
 */
sap.ui.commons.ImageMap.prototype.exit = function() {
	// Remove the item navigation delegate
	if (this.oItemNavigation) {
		if (!!sap.ui.Device.browser.internet_explorer) {
			for ( var i = 0; i < this.aImageControls.length; i++) {
				this.aImageControls[i].removeDelegate(this.oItemNavigation);
			}
		} else {
			this.removeDelegate(this.oItemNavigation);
		}
		this.oItemNavigation.destroy();
		delete this.oItemNavigation;
	}

	// No super.exit() to call
};
}; // end of sap/ui/commons/ImageMap.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Label') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Label.
jQuery.sap.declare("sap.ui.commons.Label");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Label.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDesign design} : sap.ui.commons.LabelDesign (default: sap.ui.commons.LabelDesign.Standard)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: false)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getRequired required} : boolean (default: false)</li>
 * <li>{@link #getRequiredAtBegin requiredAtBegin} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLabelFor labelFor} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Is used for labeling other controls. The API provides formatting options, for example for bold display or alignment. A label can have an icon.
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.commons.ToolbarItem,sap.ui.core.Label
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Label
 */
sap.ui.core.Control.extend("sap.ui.commons.Label", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem",
		"sap.ui.core.Label"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"design" : {type : "sap.ui.commons.LabelDesign", group : "Appearance", defaultValue : sap.ui.commons.LabelDesign.Standard},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"wrapping" : {type : "boolean", group : "Appearance", defaultValue : false},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"text" : {type : "string", group : "Misc", defaultValue : ''},
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"required" : {type : "boolean", group : "Appearance", defaultValue : false},
		"requiredAtBegin" : {type : "boolean", group : "Misc", defaultValue : null}
	},
	associations : {
		"labelFor" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Label with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Label.extend
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * 
 * Labels can have bold format.
 * 
 *
 * Default value is <code>sap.ui.commons.LabelDesign.Standard</code>
 *
 * @return {sap.ui.commons.LabelDesign} the value of property <code>design</code>
 * @public
 * @name sap.ui.commons.Label#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>sap.ui.commons.LabelDesign.Standard</code> 
 *
 * @param {sap.ui.commons.LabelDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Label#setDesign
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * 
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 * 
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.ui.commons.Label#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Label#setTextDirection
 * @function
 */


/**
 * Getter for property <code>wrapping</code>.
 * Specifies whether a line wrapping shall be displayed when the text value is longer than the width
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * @name sap.ui.commons.Label#getWrapping
 * @function
 */

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Label#setWrapping
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * 
 * Control width as common CSS-size (px or % as unit, for example).
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Label#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Label#setWidth
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * 
 * Text to be displayed.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.Label#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Label#setText
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * 
 * Invisible labels are not rendered.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @since 1.14.0
 * @name sap.ui.commons.Label#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @since 1.14.0
 * @name sap.ui.commons.Label#setVisible
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed in the control.
 * This can be an URI to an image or an icon font URI.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.commons.Label#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Label#setIcon
 * @function
 */


/**
 * Getter for property <code>textAlign</code>.
 * 
 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.ui.commons.Label#getTextAlign
 * @function
 */

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Label#setTextAlign
 * @function
 */


/**
 * Getter for property <code>required</code>.
 * Allows to enforce the required indicator even when the associated control doesn't have a getRequired method (a required property) or when the flag is not set.
 * If the associated control has a required property, the values of both required flags are combined with the OR operator, so a Label can't override a required=true value.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>required</code>
 * @public
 * @since 1.11.0
 * @name sap.ui.commons.Label#getRequired
 * @function
 */

/**
 * Setter for property <code>required</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRequired  new value for property <code>required</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.0
 * @name sap.ui.commons.Label#setRequired
 * @function
 */


/**
 * Getter for property <code>requiredAtBegin</code>.
 * If set the required indicator is at the begin of the label, if not set at the end.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>requiredAtBegin</code>
 * @public
 * @since 1.14.0
 * @name sap.ui.commons.Label#getRequiredAtBegin
 * @function
 */

/**
 * Setter for property <code>requiredAtBegin</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bRequiredAtBegin  new value for property <code>requiredAtBegin</code>
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @since 1.14.0
 * @name sap.ui.commons.Label#setRequiredAtBegin
 * @function
 */


/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @return {string} Id of the element which is the current target of the <code>labelFor</code> association, or null
 * @public
 * @name sap.ui.commons.Label#getLabelFor
 * @function
 */

/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @param {string | sap.ui.core.Control} vLabelFor 
 *    Id of an element which becomes the new target of this <code>labelFor</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Label#setLabelFor
 * @function
 */


	
// Start of sap\ui\commons\Label.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


sap.ui.commons.Label.prototype.onAfterRendering = function () {

	var sFor = this.getLabelForRendering();

	if (sFor) {
		var oFor = sap.ui.getCore().byId(sFor);

		if (oFor) {
			if (this.getTooltip_AsString() == "" || !(this.getTooltip() instanceof sap.ui.core.TooltipBase)) {
				// no own tooltip use RichTooltip of labeled control if available
				if (oFor.getTooltip() instanceof sap.ui.core.TooltipBase) {
					this.oForTooltip = oFor.getTooltip();
					this.addDelegate(this.oForTooltip);
				}
			}

			// attach to change of required flag of labeled control
			oFor.attachEvent("requiredChanged",this._handleRequiredChanged, this);
			this._oFor = oFor;
		}
	}

};

sap.ui.commons.Label.prototype.onBeforeRendering = function () {

	if (this.oForTooltip) {
		this.removeDelegate(this.oForTooltip);
		this.oForTooltip = null;
	}

	if (this._oPopup) {
		this._oPopup.destroy();
		delete this._oPopup;
	}

	if (this._oFor) {
		this._oFor.detachEvent("requiredChanged",this._handleRequiredChanged, this);
		this._oFor = undefined;
	}

};

sap.ui.commons.Label.prototype.exit = function(){

	if (this.oForTooltip) {
		this.removeDelegate(this.oForTooltip);
		this.oForTooltip = null;
	}

	if (this._oPopup) {
		this._oPopup.destroy();
		delete this._oPopup;
	}

	if (this._oFor) {
		this._oFor.detachEvent("requiredChanged",this._handleRequiredChanged, this);
		this._oFor = undefined;
	}

};

/**
 * Checks whether either the label itself or the associated control is marked as required.
 */
sap.ui.commons.Label.prototype.isRequired = function(){

	// the value of the local required flag is ORed with the result of a "getRequired" 
	// method of the associated "labelFor" control. If the associated control doesn't 
	// have a getRequired method, this is treated like a return value of "false".
	var oFor = sap.ui.getCore().byId(this.getLabelForRendering());
	return this.getRequired() || (oFor && oFor.getRequired && oFor.getRequired() === true);

};

/*
 * if required flag of labeled control changes after Label is rendered,
 * Label must be rendered again
 */
sap.ui.commons.Label.prototype._handleRequiredChanged = function(){

	this.invalidate();

};

/*
 * As own function to make possible to overwrite it (e.G. from Form).
 */
sap.ui.commons.Label.prototype.getLabelForRendering = function(){

	return this.getLabelFor();

};


/**
 * @deprecated
 */
sap.ui.commons.Label.prototype.setReqiuredAtBegin = function(bReqiuredAtBegin){
	return this.setRequiredAtBegin(bReqiuredAtBegin);
};

/**
 * @deprecated
 */
sap.ui.commons.Label.prototype.getReqiuredAtBegin = function(){
	return this.getRequiredAtBegin();
};
/*
sap.ui.commons.Label.prototype.onmouseover = function(oEvent) {
	var oRef = this.getDomRef();
	if (Math.abs(oRef.clientWidth - oRef.scrollWidth) < 2){
		return;
	}

	if (!this._oPopup) {
		 this._oPopup = new sap.ui.core.Popup();
		 this._oPopup.setDurations(0, 0); // no animations
		 this._oPopup.setContent(this._createInfo());
		 this._oPopup.attachOpened(this._handleOpened, this);
	}

	var eDock = sap.ui.core.Popup.Dock;
	this._oPopup.open(0, eDock.BeginTop, eDock.BeginTop, this, "0 1", "fit", true);
};

sap.ui.commons.Label.prototype._createInfo = function(){
	var $Me   = jQuery(this.getDomRef());
	var sText = $Me.html();
	var sHtml = "<span id='" + this.getId()+'-info' + "' class='sapUiLblInfo " + $Me.attr("class") + "'>" + sText + "</span>";

	var oDomRef = jQuery(sHtml).appendTo(sap.ui.getCore().getStaticAreaRef());
	var that = this;
	jQuery(oDomRef).mouseout([this.getId()], function(oEvent){
		that._oPopup.close();
	});
	return oDomRef;
};

sap.ui.commons.Label.prototype._handleOpened = function(){
	var that = this;
	jQuery.sap.byId(this.getId()+'-info').mouseout([this.getId()], function(oEvent){
		that._oPopup.close();
	});
};*/
}; // end of sap/ui/commons/Label.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Link') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Link.
jQuery.sap.declare("sap.ui.commons.Link");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Link.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHelpId helpId} : string (default: '')</li>
 * <li>{@link #getHref href} : sap.ui.core.URI</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.Link#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Provides an absolute or relative reference to an internal or external URL. The classical target parameters are supported.
 * Another usage scenario is triggering an action, for example to open a popup window. In both cases, the link is a hypertext link.
 * 
 * @extends sap.ui.core.Control
 * @implements sap.ui.commons.ToolbarItem,sap.ui.commons.FormattedTextViewControl
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Link
 */
sap.ui.core.Control.extend("sap.ui.commons.Link", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem",
		"sap.ui.commons.FormattedTextViewControl"
	],
	publicMethods : [
		// methods
		"focus"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"text" : {type : "string", group : "Appearance", defaultValue : ''},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"helpId" : {type : "string", group : "Behavior", defaultValue : ''},
		"href" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"target" : {type : "string", group : "Data", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"press" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Link with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Link.extend
 * @function
 */

sap.ui.commons.Link.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>text</code>.
 * 
 * Link text to be displayed.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.Link#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#setText
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Whether the link can be triggered by the user.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.Link#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * 
 * Invisible links are not rendered.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.Link#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#setVisible
 * @function
 */


/**
 * Getter for property <code>helpId</code>.
 * 
 * Unique identifier used for help service.
 * 
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>helpId</code>
 * @public
 * @name sap.ui.commons.Link#getHelpId
 * @function
 */

/**
 * Setter for property <code>helpId</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sHelpId  new value for property <code>helpId</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#setHelpId
 * @function
 */


/**
 * Getter for property <code>href</code>.
 * The link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>href</code>
 * @public
 * @name sap.ui.commons.Link#getHref
 * @function
 */

/**
 * Setter for property <code>href</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sHref  new value for property <code>href</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#setHref
 * @function
 */


/**
 * Getter for property <code>target</code>.
 * 
 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>target</code>
 * @public
 * @name sap.ui.commons.Link#getTarget
 * @function
 */

/**
 * Setter for property <code>target</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#setTarget
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of text link. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text defines the size.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @since 1.8.0
 * @name sap.ui.commons.Link#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @since 1.8.0
 * @name sap.ui.commons.Link#setWidth
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.Link#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.Link#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Link#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.Link#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.Link#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Link#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * 
 * Event is fired when the user clicks the control.
 *  
 *
 * @name sap.ui.commons.Link#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.Link</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Link</code>.<br/> itself. 
 *  
 * 
 * Event is fired when the user clicks the control.
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Link</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.Link</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Link#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.commons.Link#firePress
 * @function
 */


/**
 * Puts the focus to the link.
 *
 * @name sap.ui.commons.Link.prototype.focus
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\commons\Link.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.ui.core.EnabledPropagator.call(sap.ui.commons.Link.prototype);

/**
 * Also trigger link activation when space is pressed on the focused control
 */
sap.ui.commons.Link.prototype.onsapspace = function(oEvent) {
	sap.ui.commons.Link.prototype.onclick.apply(this, arguments);
};

/**
 * Function is called when Link is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Link.prototype.onclick = function(oEvent) {
	if (this.getEnabled()) {
		// the default behavior will be supressed, when oEvent.preventDefault() is 
		// called or when the link doesn't contain a valid href (javascript:void(0)).
		// The last thing will trigger the onbeforeunload event in IE when not 
		// preventing the default behavior
		if (!this.firePress() || !this.getHref()) {
			oEvent.preventDefault();
		}
	} else {
		oEvent.preventDefault();
	}
};

/**
 * The Link handles the enter by itself
 * @since 1.16.2
 */
sap.ui.commons.Link.prototype.onsapenter = function(oEvent) {
	oEvent.stopPropagation();
};
}; // end of sap/ui/commons/Link.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ListBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ListBox.
jQuery.sap.declare("sap.ui.commons.ListBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ListBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getAllowMultiSelect allowMultiSelect} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getScrollTop scrollTop} : int (default: -1)</li>
 * <li>{@link #getDisplayIcons displayIcons} : boolean (default: false)</li>
 * <li>{@link #getDisplaySecondaryValues displaySecondaryValues} : boolean (default: false)</li>
 * <li>{@link #getValueTextAlign valueTextAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getSecondaryValueTextAlign secondaryValueTextAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getVisibleItems visibleItems} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.ListBox#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Provides a list of items from which users can choose an item. For the design of the list box, features such as defining the list box height,
 * fixing the number of visible items, choosing one item to be the item that is marked by default when the list box is shown, or a scroll bar for large list boxes
 * are available.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ListBox
 */
sap.ui.core.Control.extend("sap.ui.commons.ListBox", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getSelectedIndex", "setSelectedIndex", "addSelectedIndex", "removeSelectedIndex", "getSelectedIndices", "setSelectedIndices", "addSelectedIndices", "isIndexSelected", "getSelectedItem", "getSelectedItems", "clearSelection", "scrollToIndex", "setItems", "setSelectedKeys", "getSelectedKeys"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"allowMultiSelect" : {type : "boolean", group : "Behavior", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"scrollTop" : {type : "int", group : "Behavior", defaultValue : -1},
		"displayIcons" : {type : "boolean", group : "Behavior", defaultValue : false},
		"displaySecondaryValues" : {type : "boolean", group : "Misc", defaultValue : false},
		"valueTextAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"secondaryValueTextAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"minWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"maxWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"visibleItems" : {type : "int", group : "Dimension", defaultValue : null}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.core.Item", multiple : true, singularName : "item"}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ListBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ListBox.extend
 * @function
 */

sap.ui.commons.ListBox.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>editable</code>.
 * Value "true" makes the list box interactive.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.commons.ListBox#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setEditable
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Disabled controls have another color display depending on custom settings.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.ListBox#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setEnabled
 * @function
 */


/**
 * Getter for property <code>allowMultiSelect</code>.
 * Specifies whether multiple selection is allowed.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>allowMultiSelect</code>
 * @public
 * @name sap.ui.commons.ListBox#getAllowMultiSelect
 * @function
 */

/**
 * Setter for property <code>allowMultiSelect</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAllowMultiSelect  new value for property <code>allowMultiSelect</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setAllowMultiSelect
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.ListBox#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Control width as common CSS-size (px or % as unit, for example).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.ListBox#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Control height as common CSS-size (px or % as unit, for example).
 * The setting overrides any definitions made for the setVisibleItems() method.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.ListBox#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setHeight
 * @function
 */


/**
 * Getter for property <code>scrollTop</code>.
 * Scroll bar position from the top. Setting the scrollTop property and calling scrollToIndex are two operations influencing the same "physical" property, so the last call "wins".
 *
 * Default value is <code>-1</code>
 *
 * @return {int} the value of property <code>scrollTop</code>
 * @public
 * @name sap.ui.commons.ListBox#getScrollTop
 * @function
 */

/**
 * Setter for property <code>scrollTop</code>.
 *
 * Default value is <code>-1</code> 
 *
 * @param {int} iScrollTop  new value for property <code>scrollTop</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setScrollTop
 * @function
 */


/**
 * Getter for property <code>displayIcons</code>.
 * Defines whether the icons of the list items shall also be displayed. Enabling icons requires some space to be reserved for them. Displaying icons can also
 * influence the width and height of a single item, which affects the overall height of the ListBox when defined in number of items.
 * Note that the number of icons that can be displayed in the ListBox depends on the size of the icons themselves and of the total ListBox height.
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displayIcons</code>
 * @public
 * @name sap.ui.commons.ListBox#getDisplayIcons
 * @function
 */

/**
 * Setter for property <code>displayIcons</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplayIcons  new value for property <code>displayIcons</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setDisplayIcons
 * @function
 */


/**
 * Getter for property <code>displaySecondaryValues</code>.
 * Specifies whether the text values from the additionalText property (see sap.ui.core.ListItems) shall be displayed.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displaySecondaryValues</code>
 * @public
 * @name sap.ui.commons.ListBox#getDisplaySecondaryValues
 * @function
 */

/**
 * Setter for property <code>displaySecondaryValues</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplaySecondaryValues  new value for property <code>displaySecondaryValues</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setDisplaySecondaryValues
 * @function
 */


/**
 * Getter for property <code>valueTextAlign</code>.
 * The text alignment in the primary ListBox column.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>valueTextAlign</code>
 * @public
 * @name sap.ui.commons.ListBox#getValueTextAlign
 * @function
 */

/**
 * Setter for property <code>valueTextAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oValueTextAlign  new value for property <code>valueTextAlign</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setValueTextAlign
 * @function
 */


/**
 * Getter for property <code>secondaryValueTextAlign</code>.
 * The text alignment in the secondary ListBox text column (if available).
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>secondaryValueTextAlign</code>
 * @public
 * @name sap.ui.commons.ListBox#getSecondaryValueTextAlign
 * @function
 */

/**
 * Setter for property <code>secondaryValueTextAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oSecondaryValueTextAlign  new value for property <code>secondaryValueTextAlign</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setSecondaryValueTextAlign
 * @function
 */


/**
 * Getter for property <code>minWidth</code>.
 * The minimum width of the ListBox. If not set, there is no minimum width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * @name sap.ui.commons.ListBox#getMinWidth
 * @function
 */

/**
 * Setter for property <code>minWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setMinWidth
 * @function
 */


/**
 * Getter for property <code>maxWidth</code>.
 * The maximum width of the ListBox. If not set, there is no maximum width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * @name sap.ui.commons.ListBox#getMaxWidth
 * @function
 */

/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setMaxWidth
 * @function
 */


/**
 * Getter for property <code>visibleItems</code>.
 * The ListBox height in number of items that are initially displayed without scrolling. This setting overwrites height
 * settings in terms of CSS size that have been made. When the items have different heights, the height of the first item is used for all
 * other item height calculations. Note that if there are one or more separators between the visible ListBox items, the displayed items
 * might not relate 1:1 to the initially specified number of items. When the value is retrieved, it equals the previously set value if it was set;
 * otherwise, it will be the number of items completely fitting into the ListBox without scrolling in the case the control was already rendered.
 * Note that if the control was not rendered, the behavior will be undefined, it may return -1 or any other number.
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>visibleItems</code>
 * @public
 * @name sap.ui.commons.ListBox#getVisibleItems
 * @function
 */

/**
 * Setter for property <code>visibleItems</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iVisibleItems  new value for property <code>visibleItems</code>
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#setVisibleItems
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of items to be displayed. Must be either of type sap.ui.core.ListItem or sap.ui.core.SeparatorItem.
 * 
 * <strong>Note</strong>: this is the default aggregation for ListBox.
 * @return {sap.ui.core.Item[]}
 * @public
 * @name sap.ui.commons.ListBox#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id
 * @return {sap.ui.core.Item} the removed item or null
 * @public
 * @name sap.ui.commons.ListBox#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.ListBox#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.ListBox#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#destroyItems
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.ListBox#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.ListBox#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.ListBox#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.ListBox#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.ListBox#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.ListBox#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * Event is fired when selection is changed by user interaction. 
 *
 * @name sap.ui.commons.ListBox#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.id ID of the ListBox which triggered the event.
 * @param {int} oControlEvent.getParameters.selectedIndex The currently selected index of the ListBox. In the case of multiple selection, this is exactly one of the selected indices - the one whose selection has triggered the selection change; to get all currently selected indices, use selectedIndices.
 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The currently selected item of the ListBox. In the case of multiple selection, this is exactly one of the selected items - the one whose selection has triggered the selection change.
 * @param {int[]} oControlEvent.getParameters.selectedIndices Array containing the indices which are selected.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.ListBox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.ListBox</code>.<br/> itself. 
 *  
 * Event is fired when selection is changed by user interaction. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.ListBox</code>.<br/> itself.
 *
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.ListBox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ListBox#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'id' of type <code>string</code> ID of the ListBox which triggered the event.</li>
 * <li>'selectedIndex' of type <code>int</code> The currently selected index of the ListBox. In the case of multiple selection, this is exactly one of the selected indices - the one whose selection has triggered the selection change; to get all currently selected indices, use selectedIndices.</li>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> The currently selected item of the ListBox. In the case of multiple selection, this is exactly one of the selected items - the one whose selection has triggered the selection change.</li>
 * <li>'selectedIndices' of type <code>int[]</code> Array containing the indices which are selected.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.ListBox#fireSelect
 * @function
 */


/**
 * Zero-based index of selected item. Index value for no selection is -1. When multiple selection is enabled and multiple items are selected, the method returns the first selected item.
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedIndex
 * @function

 * @type int
 * @public
 */


/**
 * Sets the zero-based index of the currently selected item. This method removes any previous selections. When the given index is invalid, the call is ignored.
 *
 * @name sap.ui.commons.ListBox.prototype.setSelectedIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index to be selected

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Adds the given index to current selection. When multiple selection is disabled, this replaces the current selection. When the given index is invalid, the call is ignored.
 *
 * @name sap.ui.commons.ListBox.prototype.addSelectedIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index to add to selection.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Removes the given index from this selection. When the index is invalid or not selected, the call is ignored.
 *
 * @name sap.ui.commons.ListBox.prototype.removeSelectedIndex
 * @function
 * @param {int} 
 *         iIndex
 *         Index that shall be removed from selection.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedIndices
 * @function

 * @type int[]
 * @public
 */


/**
 * Zero-based indices of selected items, wrapped in an array. An empty array means "no selection".
 * When multiple selection is disabled and multiple items are given, the selection is set to the index of the first valid index in the given array.
 * Any invalid indices are ignored.
 * The previous selection is in any case replaced.
 *
 * @name sap.ui.commons.ListBox.prototype.setSelectedIndices
 * @function
 * @param {int[]} 
 *         aIndices
 *         Indices of the items to be selected.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Adds the given indices to selection. Any invalid indices are ignored.
 *
 * @name sap.ui.commons.ListBox.prototype.addSelectedIndices
 * @function
 * @param {int[]} 
 *         aIndices
 *         Indices of the items that shall additionally be selected.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Returns whether the given index is selected.
 *
 * @name sap.ui.commons.ListBox.prototype.isIndexSelected
 * @function
 * @param {int} 
 *         iIndex
 *         Index which is checked for selection state.

 * @type boolean
 * @public
 */


/**
 * Returns selected item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedItem
 * @function

 * @type sap.ui.core.Item
 * @public
 */


/**
 * Returns an array containing the selected items. In the case of no selection, an empty array is returned.
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedItems
 * @function

 * @type sap.ui.core.Item[]
 * @public
 */


/**
 * Removes complete selection.
 *
 * @name sap.ui.commons.ListBox.prototype.clearSelection
 * @function

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * If the ListBox has a scroll bar because the number of items is larger than the number of visible items, this method scrolls to the item with the given index. If there are enough items, this item will then appear at the topmost visible position in the ListBox. If bLazy is true, it only scrolls as far as required to make the item visible.
 * Setting the scrollTop property and calling scrollToIndex are two operations influencing the same "physical" property, so the last call "wins".
 *
 * @name sap.ui.commons.ListBox.prototype.scrollToIndex
 * @function
 * @param {int} 
 *         iIndex
 *         The index to which the ListBox should scroll.
 * @param {boolean} 
 *         bLazy
 *         If set to true, the ListBox only scrolls if the item is not completely visible, and it scrolls for exactly the space to make it fully visible. If set to false, the item is scrolled to the top position (if possible).

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Allows setting the list items as array for this instance of ListBox.
 *
 * @name sap.ui.commons.ListBox.prototype.setItems
 * @function
 * @param {sap.ui.core.ListItem[]} 
 *         aItems
 *         The items to set for this ListBox.
 * @param {boolean} 
 *         bDestroyItems
 *         Optional boolean parameter to indicate that the formerly set items should be destroyed, instead of just removed.

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Keys of the items to be selected, wrapped in an array. An empty array means no selection. When multiple selection is disabled,
 * and multiple keys are given, the selection is set to the item with the first valid key in the given array. Any invalid keys are ignored.
 * The previous selection is replaced in any case.
 *
 * @name sap.ui.commons.ListBox.prototype.setSelectedKeys
 * @function
 * @param {string[]} 
 *         aKeys
 *         The keys of the items to be selected

 * @type sap.ui.commons.ListBox
 * @public
 */


/**
 * Returns the keys of the selected items in an array. If a selected item does not have a key, the respective array entry will be undefined.
 *
 * @name sap.ui.commons.ListBox.prototype.getSelectedKeys
 * @function

 * @type string[]
 * @public
 */


// Start of sap\ui\commons\ListBox.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.strings'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * Initializes the ListBox control
 * @private
 */
sap.ui.commons.ListBox.prototype.init = function () {
	this.allowTextSelection(false);
	if (!this._bHeightInItems) { // otherwise setVisibleItems was already called by the JSON constructor
		this._bHeightInItems = false; // decides whether the height is set as CSS size (height is in height property then) or in multiples of an item height (height is in this._iVisibleItems then)
		this._iVisibleItems = -1;     // initially -1, this subsequently must be the number of items that are visible without scrolling; the value is either set directly if the height is given in items, or calculated in onAfterRendering
	}
	this._sTotalHeight = null;    // if height is set in items, this contains the
	if (sap.ui.commons.ListBox._fItemHeight === undefined) {
		sap.ui.commons.ListBox._fItemHeight = -1;
	}
	if (sap.ui.commons.ListBox._iBordersAndStuff === undefined) {
		sap.ui.commons.ListBox._iBordersAndStuff = -1;
	}

	this._aSelectionMap = [];
	this._iLastDirectlySelectedIndex = -1;

	//FIXME Mapping from activeItems index to the id of it for item navigation purposes
	this._aActiveItems = null;
	
	if(sap.ui.Device.support.touch){
		jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
		this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId()+"-list", {
			   vertical: true,
			   zynga: true,
			   preventDefault: true
		});
	}
	
};


/**
 * Re-initializes the ListBox, so all sizes are fine after a theme switch
 * @private
 */
sap.ui.commons.ListBox.prototype.onThemeChanged = function () {
	sap.ui.commons.ListBox._fItemHeight = -1;
	sap.ui.commons.ListBox._iBordersAndStuff = -1;
	this._sTotalHeight = null;
	if (!this._bHeightInItems) {
		this._iVisibleItems = -1; // re-calculation only required for ItemNavigation - shouldn't change when explicitly set
	}
	this._skipStoreScrollTop = true; // Skip remembering the scrolltop in next onBeforeRendering due to theme change
	if (this.getDomRef()) {
		this.invalidate();
	}
};


/**
 * Called before rendering. Required for storing the scroll position.
 * @private
 */
sap.ui.commons.ListBox.prototype.onBeforeRendering = function () {
	if(this._skipStoreScrollTop){
		delete this._skipStoreScrollTop;
		return;
	}
	
	this.getScrollTop(); // store current ScrollTop
	// TODO: store focus??
};


/**
 * Called after rendering. Required for calculating and setting the correct heights.
 * @private
 */
sap.ui.commons.ListBox.prototype.onAfterRendering = function () {
	var oDomRef = this.getDomRef();

	// calculate item height
	if (sap.ui.commons.ListBox._fItemHeight <= 0) { // TODO: merge with width measurement which is currently in renderer
		
		// create dummy ListBox with dummy item
		var oStaticArea = sap.ui.getCore().getStaticAreaRef();
		var div = document.createElement("div");
		div.id = "sap-ui-commons-ListBox-sizeDummy";
		oStaticArea.appendChild(div);
		div.innerHTML = '<div class="sapUiLbx sapUiLbxFlexWidth sapUiLbxStd"><ul><li class="sapUiLbxI"><span class="sapUiLbxITxt">&nbsp;</span></li></ul></div>';
		var oItemDomRef = div.firstChild.firstChild.firstChild;
		sap.ui.commons.ListBox._fItemHeight = oItemDomRef.offsetHeight;

		// subpixel rendering strategy in IE >= 9 can lead to the total being larger than the sum of heights
		if (!!sap.ui.Device.browser.internet_explorer && (document.documentMode == 9 || document.documentMode == 10)) { // TODO: browser version check... not good...
			var cs = document.defaultView.getComputedStyle(oItemDomRef.firstChild, "");
			var h = parseFloat(cs.getPropertyValue("height").split("px")[0]);
			if (!(typeof h === "number") || !(h > 0)) { // sometimes cs.getPropertyValue("height") seems to return "auto"
				h = jQuery(oItemDomRef.firstChild).height();
			}
			var pt = parseFloat(cs.getPropertyValue("padding-top").split("px")[0]);
			var pb = parseFloat(cs.getPropertyValue("padding-bottom").split("px")[0]);
			var bt = parseFloat(cs.getPropertyValue("border-top-width").split("px")[0]);
			var bb = parseFloat(cs.getPropertyValue("border-bottom-width").split("px")[0]);
			sap.ui.commons.ListBox._fItemHeight = h + pt + pb + bt + bb;
		}

		// remove the dummy
		oStaticArea.removeChild(div);
	}

	// calculate height of ListBox borders and padding
	if (sap.ui.commons.ListBox._iBordersAndStuff == -1) {
		var $DomRef = jQuery(this.getDomRef());
		var outerHeight = $DomRef.outerHeight();
		var innerHeight = $DomRef.height();
		sap.ui.commons.ListBox._iBordersAndStuff = outerHeight - innerHeight;
	}

	// Height is set in number of visible items
	if (this._bHeightInItems) {
		if(this._sTotalHeight == null) {
			//...but the height needs to be calculated first
			this._calcTotalHeight(); // TODO: verify this._sTotalHeight is > 0

			// now set height
			oDomRef.style.height = this._sTotalHeight;
		} else {
			// height was already set in the renderer!
		}
	}

	// find out how many items are visible because the ItemNavigation needs to know
	if (this._iVisibleItems = -1) {
		this._updatePageSize();
	}

	// Collect items for ItemNavigation   TODO: make it cleaner
	var oFocusRef = this.getFocusDomRef(),
			aRows = oFocusRef.childNodes,
			aDomRefs = [],
			aItems = this.getItems();
	this._aActiveItems = [];
	var aActiveItems = this._aActiveItems;
	for (var i=0; i < aRows.length; i++) {
		if (!(aItems[i] instanceof sap.ui.core.SeparatorItem)) {
			aActiveItems[aDomRefs.length] = i;
			aDomRefs.push(aRows[i]);
		}
	}

	// init ItemNavigation
	if (!this.oItemNavigation) {
		var bNotInTabChain = (!this.getEnabled() || !this.getEditable());
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation(null, null, bNotInTabChain);
		this.oItemNavigation.attachEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus, this._handleAfterFocus, this);
		this.addDelegate(this.oItemNavigation);
	}
	this.oItemNavigation.setRootDomRef(oFocusRef);
	this.oItemNavigation.setItemDomRefs(aDomRefs);
	this.oItemNavigation.setCycling(false);
	this.oItemNavigation.setSelectedIndex(this._getNavigationIndexForRealIndex(this.getSelectedIndex()));
	this.oItemNavigation.setPageSize(this._iVisibleItems); // Page down by number of visible items

	// Apply scrollTop


	// if scrolling to a certain item index is currently requested (but was not done because the control was not rendered before), do it now
	if (this.oScrollToIndexRequest) {
		this.scrollToIndex(this.oScrollToIndexRequest.iIndex, this.oScrollToIndexRequest.bLazy); // keep the oScrollToIndexRequest for the timeouted call
	} else {
		var scrollTop = this.getProperty("scrollTop");
		if (scrollTop > -1) {
			oDomRef.scrollTop = scrollTop;
		}
	}

	// sometimes this did not work, so repeat it after a timeout (consciously done twice, yes)
	var that = this;
	window.setTimeout(function() { // needs to be delayed because in Firefox sometimes the scrolling seems to come too early
		// if scrolling to a certain item index is currently requested (but was not done because the control was not rendered before), do it now
		if (that.oScrollToIndexRequest) {
			that.scrollToIndex(that.oScrollToIndexRequest.iIndex, that.oScrollToIndexRequest.bLazy);
			that.oScrollToIndexRequest = null;
		} else {
			var scrollTop = that.getProperty("scrollTop");
			if (scrollTop > -1) {
				oDomRef.scrollTop = scrollTop;
			}
		}
	}, 0);
};


/**
 * For the given iIndex, this method calculates the index of the respective item within the ItemNavigation set.
 * (if there are separators, the ItemNavigation does not know them)
 * Prerequisite: the iIndex points to an element which is NOT a Separator or disabled (= it must be known to the ItemNavigation)
 * @private
 */
sap.ui.commons.ListBox.prototype._getNavigationIndexForRealIndex = function(iIndex) {
	var aItems = this.getItems();
	var iNavIndex = iIndex;
	for (var i = 0; i < iIndex; i++) {
		if (aItems[i] instanceof sap.ui.core.SeparatorItem) {
			iNavIndex--;
		}
	}
	return iNavIndex;
};


/**
 * Calculates the number of visible items. Must happen after rendering and whenever the height is changed without rerendering.
 * @private
 */
sap.ui.commons.ListBox.prototype._updatePageSize = function() {
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		if (sap.ui.commons.ListBox._fItemHeight > 0) {
			this._iVisibleItems = Math.floor(oDomRef.clientHeight / sap.ui.commons.ListBox._fItemHeight);
		} else {
			// TODO: shouldn't happen
		}
	}
	// else: nothing to do, item navigation will be initialized after rendering
};

/*
 * Scrolls the item with the given index into view, preferably at the topmost position.
 */
sap.ui.commons.ListBox.prototype.scrollToIndex = function(iIndex, bLazy) {
	var oDomRef = this.getDomRef();
	if (oDomRef) { // only if already rendered
		var oItem = this.$("list").children("li[data-sap-ui-lbx-index=" + iIndex + "]");
		oItem = oItem.get(0);
		if (oItem) {
			var iScrollTop = oItem.offsetTop;
			if (!bLazy) {
				// scroll there without any conditions
				this.setScrollTop(iScrollTop);
			} else {
				// "lazy" means we should only scroll if required and as far as required
				var iCurrentScrollTop = oDomRef.scrollTop;
				var iViewPortHeight = jQuery(oDomRef).height();
				if (iCurrentScrollTop >= iScrollTop) {
					// if we have to scroll up, the behavior is fine already
					this.setScrollTop(iScrollTop);
				} else if ((iScrollTop + sap.ui.commons.ListBox._fItemHeight) > (iCurrentScrollTop + iViewPortHeight)) { // bottom Edge of item > bottom edge of viewport
					// the item is - at least partly - below the current viewport of the ListBox, so scroll down. But only as far as required
					this.setScrollTop(Math.ceil(iScrollTop + sap.ui.commons.ListBox._fItemHeight - iViewPortHeight)); // round because of _fItemHeight
				} else {
					// if the item is already fully visible, do nothing
				}
			}
		}
		// store the actual position
		this.getScrollTop();
	} else {
		// control not yet rendered, thus item height is unknown, so remember request for after rendering
		this.oScrollToIndexRequest = {iIndex:iIndex,bLazy:bLazy};
	}
	return this;
};

sap.ui.commons.ListBox.prototype.getVisibleItems = function() {
	return this._iVisibleItems;
};

/**
 * Makes the ListBox render with a height that allows it to display exactly the given number of items.
 *
 * @param {int} iItemCount the number of items that should fit into the ListBox without scrolling
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setVisibleItems = function(iItemCount) {
 /*
	*For the calculation, the size of the first item is used; if no item is present, an invisible dummy item
	* is rendered and instantly removed again.
	* Therefore, this method will not work for items with different heights and if actual items have a different
	* size than generic empty dummy items.
	*/
	// TODO: prevent values less than 1, or make them go back to CSS heights
	this.setProperty("visibleItems", iItemCount, true);

	this._iVisibleItems = iItemCount;
	if (iItemCount < 0) {
		this._bHeightInItems = false;
	} else {
		this._bHeightInItems = true;
	}

	// the actual height to set must be calculated now or later
	this._sTotalHeight = null;

	// if already rendered, calculate and set the height
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		if (this._bHeightInItems) {
			var oFirstItem = oDomRef.firstChild ? oDomRef.firstChild.firstChild : null;
			if (oFirstItem || ((sap.ui.commons.ListBox._fItemHeight > 0) && (sap.ui.commons.ListBox._iBordersAndStuff > 0))) {
				oDomRef.style.height = this._calcTotalHeight();
			} else {
				// already rendered, but no dummy item!
				this.invalidate();
			}
		} else {
			oDomRef.style.height = this.getHeight();
			this._updatePageSize();
			if (this.oItemNavigation) {
				this.oItemNavigation.setPageSize(this._iVisibleItems); // Page down by number of visible items
			}
		}
	}

	if (this._sTotalHeight == null) { // this is the "else" clause covering all cases where the height was not set above
		// called before rendering, so the calculation and setting of the actual CSS height to set must be done later
	}

	return this;
};


/**
 * Calculates the outer height of the ListBox from the known item height and number of items that should fit.
 * The result (a CSS size string) is returned as well as assigned to this._sTotalHeight.
 * Precondition: the control is rendered, this._iVisibleItems, sap.ui.commons.ListBox._iBordersAndStuff and
 * sap.ui.commons.ListBox._fItemHeight are initialized.
 *
 * @returns {string} the required outer height as CSS size
 * @private
 */
sap.ui.commons.ListBox.prototype._calcTotalHeight = function() {
	// TODO: check preconditions
	var desiredHeight = this._iVisibleItems * sap.ui.commons.ListBox._fItemHeight;
	this._sTotalHeight = (desiredHeight + sap.ui.commons.ListBox._iBordersAndStuff) + "px";
	return this._sTotalHeight;
};


/**
 * Sets the height of this ListBox in CSS units

 * @param {string} sHeight
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setHeight = function(sHeight) {
	this._bHeightInItems = false;
	this._iVisibleItems = -1;

	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.height = sHeight;
		this._updatePageSize();
		if (this.oItemNavigation) {
			this.oItemNavigation.setPageSize(this._iVisibleItems); // Page down by number of visible items
		}
	}

	this.setProperty("height", sHeight, true); // no re-rendering
	return this;
};

/**
 * Setter for property width.
 *
 * @param {string} sWidth
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setWidth = function(sWidth) {
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.width = sWidth;
	}
	this.setProperty("width", sWidth, true); // no re-rendering
	return this;
};

/**
 * Positions the ListBox contents that are scrolled-down by the given number of pixels
 *
 * @param {int} iScrollTip Vertical scroll position in pixels
 * @return {sap.ui.commons.ListBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ListBox.prototype.setScrollTop = function (iScrollTop) {
	var scrollDomRef = this.getDomRef();
	this.oScrollToIndexRequest = null; // delete any pending scroll request
	if (scrollDomRef) {
		scrollDomRef.scrollTop = iScrollTop;
	}
	this.setProperty("scrollTop", iScrollTop, true); // no rerendering
	return this;
};

/**
 * Returns how many pixels the ListBox contents are currently scrolled down
 *
 * @return {int} Vertical scroll position
 * @public
 */
sap.ui.commons.ListBox.prototype.getScrollTop = function () {
	var scrollDomRef = this.getDomRef();
	if (scrollDomRef) {
		var scrollTop = scrollDomRef.scrollTop;
		this.setProperty("scrollTop", scrollTop, true);
		return scrollTop;
	} else {
		return this.getProperty("scrollTop");
	}
};



/* --- user interaction handling methods --- */

sap.ui.commons.ListBox.prototype.onfocusin = function (oEvent) {
	if(!!sap.ui.Device.browser.internet_explorer && ((sap.ui.Device.browser.version == 7) || (sap.ui.Device.browser.version == 8)) /* =IE8! */ && (oEvent.target != this.getDomRef()) && (oEvent.target.className != "sapUiLbxI")) {
		var parent = oEvent.target.parentNode;

		if (jQuery(parent).hasClass("sapUiLbxI")) {
			parent.focus();
		}
	}
};

sap.ui.commons.ListBox.prototype.onmousedown = function(oEvent) {
	if (!!sap.ui.Device.browser.webkit && oEvent.target && oEvent.target.id === this.getId()) { // ListBox scrollbar has been clicked; webkit completely removes the focus, which breaks autoclose popups
		var idToFocus = document.activeElement ? document.activeElement.id : this.getId();
		var that = this;
		window.setTimeout(function(){
			var scrollPos = that.getDomRef().scrollTop; // yes, this scrollPosition is the right one to use. The one before setTimeout works for the scrollbar grip, but not for the arrows
			jQuery.sap.focus(jQuery.sap.domById(idToFocus)); // re-set the focus
			that.getDomRef().scrollTop = scrollPos; // re-apply the scroll position (otherwise the focus() call would scroll the focused element into view)
		},0);
	}
};

sap.ui.commons.ListBox.prototype.onclick = function (oEvent) {
	this._handleUserActivation(oEvent);
};

sap.ui.commons.ListBox.prototype.onsapspace = function (oEvent) {
	this._handleUserActivation(oEvent);
};

/*
 * Ensure the sapspace event with modifiers is also handled as well as the respective "enter" events
 */

sap.ui.commons.ListBox.prototype.onsapspacemodifiers = sap.ui.commons.ListBox.prototype.onsapspace;
sap.ui.commons.ListBox.prototype.onsapenter = sap.ui.commons.ListBox.prototype.onsapspace;
sap.ui.commons.ListBox.prototype.onsapentermodifiers = sap.ui.commons.ListBox.prototype.onsapspace;

/**
 * Internal method invoked when the user activates an item. Differentiates and dispatches according to modifier key
 * and current selection.
 *
 * @private
 */
sap.ui.commons.ListBox.prototype._handleUserActivation = function (oEvent) {
	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	var oSource = oEvent.target;
	if (oSource.id === "" || jQuery.sap.endsWith(oSource.id, "-txt")) {
		oSource = oSource.parentNode;
		if (oSource.id === "") { // could be the image inside the first cell
			oSource = oSource.parentNode;
		}
	}
	var attr = jQuery(oSource).attr("data-sap-ui-lbx-index");
	if (typeof attr == "string" && attr.length > 0) {
		var iIndex = parseInt(attr, 10); // Get the selected index from the HTML

		var aItems = this.getItems();
		var oItem = aItems[iIndex]; // oItem could be a separator, though!

		// It could be the case that the list of items changed during the click event handling. Ensure the item is still the one in
		if (aItems.length <= iIndex) {  // TODO: very questionable! Why set the index to the last position? And why allow removing items during the processing?  Remove!
			iIndex = aItems.length - 1;
		}

		if (iIndex >= 0 && iIndex < aItems.length) { // TODO: this should be known by now
			if (oItem.getEnabled() && !(oItem instanceof sap.ui.core.SeparatorItem)) {
				// Take care of selection and select event
				if (oEvent.ctrlKey || oEvent.metaKey) { // = CTRL
						this._handleUserActivationCtrl(iIndex, oItem);
				} else {
					if (oEvent.shiftKey) {
						this.setSelectedIndices(this._getUserSelectionRange(iIndex));
						this.fireSelect({
							id:this.getId(),
							selectedIndex:iIndex,
							selectedIndices:this.getSelectedIndices(), /* NEW (do not use hungarian prefixes!) */
							selectedItem:oItem,
							sId:this.getId(),
							aSelectedIndices:this.getSelectedIndices() /* OLD */
						});
						this._iLastDirectlySelectedIndex = iIndex;
					} else {
						this._handleUserActivationPlain(iIndex, oItem);
					}
				}
			}
		}
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Called when the user triggers an item without holding a modifier key.
 * Changes the selection in the expected way.
 *
 * @private
 */
sap.ui.commons.ListBox.prototype._handleUserActivationPlain = function (iIndex, oItem) {
	this._iLastDirectlySelectedIndex = iIndex;
	this.oItemNavigation.setSelectedIndex(this._getNavigationIndexForRealIndex(iIndex));
	if (this.getSelectedIndex() != iIndex || this.getSelectedIndices().length > 1) {
		this.setSelectedIndex(iIndex); // Replace selection

		this.fireSelect({
			id:this.getId(),
			selectedIndex:iIndex,
			selectedIndices:this.getSelectedIndices(), /* NEW (do not use hungarian prefixes!) */
			selectedItem:oItem,
			sId:this.getId(),
			aSelectedIndices:this.getSelectedIndices() /* OLD */
		});
	}
};

/**
 * Called when the user triggers an item while pressing the Ctrl key.
 * Changes the selection in the expected way for the "Ctrl" case.
 *
 * @private
 */
sap.ui.commons.ListBox.prototype._handleUserActivationCtrl = function (iIndex, oItem) {
	this._iLastDirectlySelectedIndex = iIndex;
	this.oItemNavigation.setSelectedIndex(this._getNavigationIndexForRealIndex(iIndex));
	if (this.isIndexSelected(iIndex)) {
		this.removeSelectedIndex(iIndex); // Remove from multi-selection
	} else {
		this.addSelectedIndex(iIndex); // Add to multi-selection
	}

	this.fireSelect({
		id:this.getId(),
		selectedIndex:iIndex,
		selectedIndices:this.getSelectedIndices(), /* NEW (do not use hungarian prefixes!) */
		selectedItem:oItem,
		sId:this.getId(),
		aSelectedIndices:this.getSelectedIndices() /* OLD */
	});
};

/**
 * Calculates the list of indices ranging from the previously selected item to the
 * given index. Used internally for calculating the new selection range when the user holds the "shift" key
 * while clicking in the ListBox.
 *
 * @private
 */
sap.ui.commons.ListBox.prototype._getUserSelectionRange = function (iIndex) {
	if (this._iLastDirectlySelectedIndex == -1) {
		// TODO: Use focus and continue execution
		return [];
	}

	var aItems = this.getItems();
	var aRange = [];
	if (this._iLastDirectlySelectedIndex <= iIndex) {
		for (var i = this._iLastDirectlySelectedIndex; i <= iIndex; i++) {
			if ((i > -1) && (aItems[i].getEnabled() && !(aItems[i] instanceof sap.ui.core.SeparatorItem))) {
				aRange.push(i);
			}
		}
	} else {
		for (var i = iIndex; i <= this._iLastDirectlySelectedIndex; i++) {
			if ((i > -1) && (aItems[i].getEnabled() && !(aItems[i] instanceof sap.ui.core.SeparatorItem))) {
				aRange.push(i);
			}
		}
	}
	return aRange;
};



/* --- Overwritten setters and getters affecting the selection --- */

sap.ui.commons.ListBox.prototype.getSelectedIndex = function() {
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			return i;
		}
	}
	return -1;
};

sap.ui.commons.ListBox.prototype.setSelectedIndex = function(iSelectedIndex) {
	if ((iSelectedIndex < -1) || (iSelectedIndex > this._aSelectionMap.length-1)) {
		return;
	} // Invalid index

	// do not select a disabled or separator item
	var aItems = this.getItems();
	if ((iSelectedIndex > -1) && (!aItems[iSelectedIndex].getEnabled() || (aItems[iSelectedIndex] instanceof sap.ui.core.SeparatorItem))) {
		return;
	}

	for (var i = 0; i < this._aSelectionMap.length; i++) {
		this._aSelectionMap[i] = false;
	}
	this._aSelectionMap[iSelectedIndex] = true;
	// And inform the itemNavigation about this, too
	if(this.oItemNavigation) {
		this.oItemNavigation.setSelectedIndex(this._getNavigationIndexForRealIndex(iSelectedIndex));
	}
	this.getRenderer().handleSelectionChanged(this);

	return this;
};

sap.ui.commons.ListBox.prototype.addSelectedIndex = function(iSelectedIndex) {
	if (!this.getAllowMultiSelect()) { // If multi-selection is not allowed, this call equals setSelectedIndex
		this.setSelectedIndex(iSelectedIndex);
	}

	// Multi-selectable case
	if ((iSelectedIndex < -1) || (iSelectedIndex > this._aSelectionMap.length-1)) {
		return;
	} // Invalid index

	// do not select a disabled or separator item
	var aItems = this.getItems();
	if ((iSelectedIndex > -1) && (!aItems[iSelectedIndex].getEnabled() || (aItems[iSelectedIndex] instanceof sap.ui.core.SeparatorItem))) {
		return;
	}

	if (this._aSelectionMap[iSelectedIndex]) {
		return;
	} // Selection does not change

	// Was not selected before
	this._aSelectionMap[iSelectedIndex] = true;
	this.getRenderer().handleSelectionChanged(this);

	return this;
};

sap.ui.commons.ListBox.prototype.removeSelectedIndex = function(iIndex) {
	if ((iIndex < 0) || (iIndex > this._aSelectionMap.length-1)) {
		return;
	} // Invalid index

	if (!this._aSelectionMap[iIndex]) {
		return;
	} // Selection does not change

	// Was selected before
	this._aSelectionMap[iIndex] = false;
	this.getRenderer().handleSelectionChanged(this);

	return this;
};

sap.ui.commons.ListBox.prototype.clearSelection = function() {
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			this._aSelectionMap[i] = false;
		}
	}
	// More or less re-initialized
	this._iLastDirectlySelectedIndex = -1;
	// Reset the index also in ItemNavigation
	if(this.oItemNavigation) {
		this.oItemNavigation.setSelectedIndex(-1);
	}
	this.getRenderer().handleSelectionChanged(this);

	return this;
};



sap.ui.commons.ListBox.prototype.getSelectedIndices = function() {
	var aResult = [];
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			aResult.push(i);
		}
	}
	return aResult;
};

sap.ui.commons.ListBox.prototype.setSelectedIndices = function(aSelectedIndices) {
	var indicesToSet = [];
	var aItems = this.getItems();
	for (var i = 0; i < aSelectedIndices.length; i++) {
		if ((aSelectedIndices[i] > -1) && (aSelectedIndices[i] < this._aSelectionMap.length)) {
			if (aItems[aSelectedIndices[i]].getEnabled() && !(aItems[aSelectedIndices[i]] instanceof sap.ui.core.SeparatorItem)) {
				indicesToSet.push(aSelectedIndices[i]);
			}
		}
	}

	if (indicesToSet.length > 0) { // TODO: Disable event listening to items??
		// With multi-selection disabled, use the first valid index only
		if (!this.getAllowMultiSelect()) {
			indicesToSet = [indicesToSet[0]];
		}
	}

	for (var i = 0; i < this._aSelectionMap.length; i++) {
		this._aSelectionMap[i] = false;
	}

	// O(n+m)
	for (var i = 0; i < indicesToSet.length; i++) {
		this._aSelectionMap[indicesToSet[i]] = true;
	}
	this.getRenderer().handleSelectionChanged(this);

	return this;
};

sap.ui.commons.ListBox.prototype.addSelectedIndices = function(aSelectedIndices) {
	var indicesToSet = [];
	var aItems = this.getItems();
	for (var i = 0; i < aSelectedIndices.length; i++) {
		if ((aSelectedIndices[i] > -1) && (aSelectedIndices[i] < this._aSelectionMap.length)) {
			// do not select a disabled or separator item
			if (aItems[aSelectedIndices[i]].getEnabled() && !(aItems[aSelectedIndices[i]] instanceof sap.ui.core.SeparatorItem)) {
				indicesToSet.push(aSelectedIndices[i]);
			}
		}
	}

	if (indicesToSet.length > 0) { // TODO: Disable event listening to items??
		// With multi-selection disabled, use the first valid index only
		if (!this.getAllowMultiSelect()) {
			indicesToSet = [indicesToSet[0]];
		}

		// O(n+m)
		for (var i = 0; i < indicesToSet.length; i++) {
			this._aSelectionMap[indicesToSet[i]] = true;
		}
		this.getRenderer().handleSelectionChanged(this);
	}
	return this;
};


sap.ui.commons.ListBox.prototype.isIndexSelected = function(iIndex) {
	if ((iIndex < -1) || (iIndex > this._aSelectionMap.length-1)) {
		return false; // Invalid index -> not selected
	}

	return this._aSelectionMap[iIndex];
};


sap.ui.commons.ListBox.prototype.setSelectedKeys = function(aSelectedKeys) {
	var aItems = this.getItems();

	var key;
	var mKeyMap = {};
	for (var i = 0; i < aSelectedKeys.length; i++) { // put the keys into a map to hopefully search faster below
		mKeyMap[aSelectedKeys[i]] = true;
	}

	var aIndices = [];
	for (var j = 0; j < aItems.length; j++) {
		if (mKeyMap[aItems[j].getKey()]) {
			aIndices.push(j);
		}
	}

	return this.setSelectedIndices(aIndices);
};

sap.ui.commons.ListBox.prototype.getSelectedKeys = function() {
	var aItems = this.getItems();
	var aResult = [];
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			aResult.push(aItems[i].getKey());
		}
	}
	return aResult;
};


sap.ui.commons.ListBox.prototype.getSelectedItem = function() {
	var iIndex = this.getSelectedIndex();
	if ((iIndex < 0) || (iIndex >= this._aSelectionMap.length)) {
		return null;
	}
	return this.getItems()[iIndex];
};

sap.ui.commons.ListBox.prototype.getSelectedItems = function() {
	var aItems = this.getItems();
	var aResult = [];
	for (var i = 0; i < this._aSelectionMap.length; i++) {
		if (this._aSelectionMap[i]) {
			aResult.push(aItems[i]);
		}
	}
	return aResult;
};

sap.ui.commons.ListBox.prototype.setAllowMultiSelect = function(bAllowMultiSelect) {
	this.setProperty("allowMultiSelect", bAllowMultiSelect);
	var oneWasSelected = false;
	var twoWereSelected = false;
	if (!bAllowMultiSelect && this._aSelectionMap) {
		for (var i = 0; i < this._aSelectionMap.length; i++) {
			if (this._aSelectionMap[i]) {
				if (!oneWasSelected) {
					oneWasSelected = true;
				} else {
					this._aSelectionMap[i] = false;
					twoWereSelected = true;
				}
			}
		}
	}
	if (twoWereSelected) {
		this.getRenderer().handleSelectionChanged(this);
	}
	return this;
};


/**
 * Handles the event that gets fired by the {@link sap.ui.core.delegate.ItemNavigation} delegate.
 *
 * @param {sap.ui.base.Event} oControlEvent The event that gets fired by the {@link sap.ui.core.delegate.ItemNavigation} delegate.
 * @private
 */
sap.ui.commons.ListBox.prototype._handleAfterFocus = function(oControlEvent) {
	var iIndex = oControlEvent.getParameter("index");
	iIndex = ((iIndex !== undefined && iIndex >= 0) ? this._aActiveItems[iIndex] : 0);

	this.getRenderer().handleARIAActivedescendant(this, iIndex);
};

/* --- "items" aggregation methods, overwritten to update _aSelectionMap and allow filteredItems --- */

/*
 * Implementation of API method setItems.
 * Semantically belonging to "items" aggregation but not part of generated method set.
 * @param bNoItemsChanged not in official API, only needed in DropdownBox TypeAhead
 */
sap.ui.commons.ListBox.prototype.setItems = function(aItems, bDestroyItems, bNoItemsChanged) {
	this.bNoItemsChangeEvent = true;
	if(bDestroyItems) {
		this.destroyItems();
	} else {
		this.removeAllItems();
	}
	for(var i = 0, l = aItems.length; i < l; i++){
		this.addItem(aItems[i]);
	}
	this.bNoItemsChangeEvent = undefined;
	if (!bNoItemsChanged) {
		this.fireEvent("itemsChanged", {event: "setItems", items: aItems}); //private event used in DropdownBox
	}
	return this;
};

sap.ui.commons.ListBox.prototype.addItem = function(oItem) {
	this.bNoItemInvalidateEvent = true;
	this.addAggregation("items", oItem);
	this.bNoItemInvalidateEvent = false;
	if ( !this._aSelectionMap ) {
		this._aSelectionMap = [];
	}
	this._aSelectionMap.push(false);

	if (!this.bNoItemsChangeEvent) {
		this.fireEvent("itemsChanged", {event: "addItem", item: oItem}); //private event used in DropdownBox
	}

	oItem.attachEvent("_change", this._handleItemChanged, this);

	return this;
};

sap.ui.commons.ListBox.prototype.insertItem = function(oItem, iIndex) {
	if ((iIndex < 0) || (iIndex > this._aSelectionMap.length)) {
		return;
	} // Ignore invalid index TODO:: check behavior for iIndex=length
	// TODO: Negative indices might be used to count from end of array

	this.bNoItemInvalidateEvent = true;
	this.insertAggregation("items", oItem, iIndex);
	this.bNoItemInvalidateEvent = false;
	this._aSelectionMap.splice(iIndex, 0, false);

	this.invalidate();

	if (!this.bNoItemsChangeEvent) {
		this.fireEvent("itemsChanged", {event: "insertItems", item: oItem, index: iIndex}); //private event used in DropdownBox
	}

	oItem.attachEvent("_change", this._handleItemChanged, this);

	return this;
};

sap.ui.commons.ListBox.prototype.removeItem = function(vElement) {
	var iIndex = vElement;
	if (typeof(vElement) == "string") { // ID of the element is given
		vElement = sap.ui.getCore().byId(vElement);
	}
	if (typeof(vElement) == "object") { // the element itself is given or has just been retrieved
		iIndex = this.indexOfItem(vElement);
	}

	if ((iIndex < 0) || (iIndex > this._aSelectionMap.length-1)) {
		if (!this.bNoItemsChangeEvent) {
			this.fireEvent("itemsChanged", {event: "removeItem", item: vElement}); //private event used in DropdownBox
		}
		return;
	} // Ignore invalid index

	this.bNoItemInvalidateEvent = true;
	var oRemoved = this.removeAggregation("items", iIndex);
	this.bNoItemInvalidateEvent = false;
	this._aSelectionMap.splice(iIndex, 1);

	this.invalidate();

	if (!this.bNoItemsChangeEvent) {
		this.fireEvent("itemsChanged", {event: "removeItem", item: oRemoved}); //private event used in DropdownBox
	}

	oRemoved.detachEvent("_change", this._handleItemChanged, this);

	return oRemoved;
};

sap.ui.commons.ListBox.prototype.removeAllItems = function() {
	this.bNoItemInvalidateEvent = true;
	var oRemoved = this.removeAllAggregation("items");
	this.bNoItemInvalidateEvent = false;

	this._aSelectionMap = [];

	this.invalidate();

	if (!this.bNoItemsChangeEvent) {
		this.fireEvent("itemsChanged", {event: "removeAllItems"}); //private event used in DropdownBox
	}

	for ( var i = 0; i < oRemoved.length; i++) {
		oRemoved[i].detachEvent("_change", this._handleItemChanged, this);
	}

	return oRemoved;
};

sap.ui.commons.ListBox.prototype.destroyItems = function() {

	var aItems = this.getItems();
	for ( var i = 0; i < aItems.length; i++) {
		aItems[i].detachEvent("_change", this._handleItemChanged, this);
	}

	this.bNoItemInvalidateEvent = true;
	var destroyed = this.destroyAggregation("items");
	this.bNoItemInvalidateEvent = false;

	this._aSelectionMap = [];

	this.invalidate();

	if (!this.bNoItemsChangeEvent) {
		this.fireEvent("itemsChanged", {event: "destroyItems"}); //private event used in DropdownBox
	}

	return destroyed;
};

sap.ui.commons.ListBox.prototype.updateItems = function(){

	this.bNoItemsChangeEvent = true;

	this.updateAggregation("items");

	this.bNoItemsChangeEvent = undefined;

	this.fireEvent("itemsChanged", {event: "updateItems"}); //private event used in DropdownBox

};

/**
 * Does all the cleanup when the ListBox is to be destroyed.
 * Called from the element's destroy() method.
 * @private
 */
sap.ui.commons.ListBox.prototype.exit = function (){
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
		delete this.oItemNavigation;
	}
	
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}

	// No super.exit() to call
};

/*
 * Overrides getFocusDomRef of base element class.
 * @public
 */
sap.ui.commons.ListBox.prototype.getFocusDomRef = function() {
	return this.getDomRef("list");
};

/*
 * Overwrites default implementation
 * the label must point to the UL element
 * @public
 */
sap.ui.commons.ListBox.prototype.getIdForLabel = function () {
	return this.getId()+'-list';
};

/*
 * inform ComboBox if an item has changed
*/
sap.ui.commons.ListBox.prototype._handleItemChanged = function(oEvent) {

	if (!this.bNoItemInvalidateEvent) {
		this.fireEvent("itemInvalidated", {item: oEvent.oSource}); //private event used in ComboBox
	}

};

}; // end of sap/ui/commons/ListBox.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Menu') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Menu.
jQuery.sap.declare("sap.ui.commons.Menu");

jQuery.sap.require('sap.ui.unified.Menu'); // unlisted dependency retained



/**
 * Constructor for a new Menu.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.unified.Menu#constructor sap.ui.unified.Menu}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container for menu items. When the space in the browser is not large enough to display all defined items, a scroll bar is provided.
 * @extends sap.ui.unified.Menu
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.21.0. 
 * Please use the control sap.ui.unified.Menu of the library sap.ui.unified instead.
 * @name sap.ui.commons.Menu
 */
sap.ui.unified.Menu.extend("sap.ui.commons.Menu", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.Menu with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Menu.extend
 * @function
 */


// Start of sap\ui\commons\Menu.js
 /*Ensure MenuItemBase is loaded (incl. loading of unified library)*/
}; // end of sap/ui/commons/Menu.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MenuButton.
jQuery.sap.declare("sap.ui.commons.MenuButton");




/**
 * Constructor for a new MenuButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDockButton dockButton} : string</li>
 * <li>{@link #getDockMenu dockMenu} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenu menu} <strong>(default aggregation)</strong> : sap.ui.unified.Menu</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.MenuButton#event:itemSelected itemSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.Button#constructor sap.ui.commons.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Common button control that opens a menu when clicked by the user. The control provides an API for configuring the docking position
 * of the menu.
 * 
 * @extends sap.ui.commons.Button
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.MenuButton
 */
sap.ui.commons.Button.extend("sap.ui.commons.MenuButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"dockButton" : {type : "string", group : "Misc", defaultValue : null},
		"dockMenu" : {type : "string", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "menu",
	aggregations : {
    	"menu" : {type : "sap.ui.unified.Menu", multiple : false}
	},
	events : {
		"itemSelected" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.MenuButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.MenuButton.extend
 * @function
 */

sap.ui.commons.MenuButton.M_EVENTS = {'itemSelected':'itemSelected'};


/**
 * Getter for property <code>dockButton</code>.
 * The position / edge (see sap.ui.core.Popup.Dock) of the button where the menu is docked. Default is 'begin bottom'.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>dockButton</code>
 * @public
 * @name sap.ui.commons.MenuButton#getDockButton
 * @function
 */

/**
 * Setter for property <code>dockButton</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDockButton  new value for property <code>dockButton</code>
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuButton#setDockButton
 * @function
 */


/**
 * Getter for property <code>dockMenu</code>.
 * The position / edge (see sap.ui.core.Popup.Dock) of the menu which is docked to the button. Default is 'begin top'.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>dockMenu</code>
 * @public
 * @name sap.ui.commons.MenuButton#getDockMenu
 * @function
 */

/**
 * Setter for property <code>dockMenu</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDockMenu  new value for property <code>dockMenu</code>
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuButton#setDockMenu
 * @function
 */


/**
 * Getter for aggregation <code>menu</code>.<br/>
 * Menu that shall be opened when the button is clicked
 * 
 * <strong>Note</strong>: this is the default aggregation for MenuButton.
 * @return {sap.ui.unified.Menu}
 * @public
 * @name sap.ui.commons.MenuButton#getMenu
 * @function
 */


/**
 * Setter for the aggregated <code>menu</code>.
 * @param {sap.ui.unified.Menu} oMenu
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuButton#setMenu
 * @function
 */
	

/**
 * Destroys the menu in the aggregation 
 * named <code>menu</code>.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuButton#destroyMenu
 * @function
 */


/**
 * Event that is fired when a menu item is selected by the user 
 *
 * @name sap.ui.commons.MenuButton#itemSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.itemId The ID of the selected item
 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item The selected item
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'itemSelected' event of this <code>sap.ui.commons.MenuButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.MenuButton</code>.<br/> itself. 
 *  
 * Event that is fired when a menu item is selected by the user 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.MenuButton</code>.<br/> itself.
 *
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuButton#attachItemSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'itemSelected' event of this <code>sap.ui.commons.MenuButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuButton#detachItemSelected
 * @function
 */

/**
 * Fire event itemSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'itemId' of type <code>string</code> The ID of the selected item</li>
 * <li>'item' of type <code>sap.ui.commons.MenuItemBase</code> The selected item</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.MenuButton#fireItemSelected
 * @function
 */


// Start of sap\ui\commons\MenuButton.js
 /*Ensure MenuItemBase is loaded (incl. loading of unified library)*/


(function() {
	
sap.ui.commons.MenuButton.prototype.init = function() {
	this.addStyleClass("sapUiMenuButton");
	this.bWithKeyboard = false;
};

/**
 * Function is called when button is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuButton.prototype.onclick = function(oEvent) {
	if(this.getEnabled() && !this._bSkipOpen){
		var oTooltip = this.getTooltip();
		if(oTooltip && oTooltip instanceof sap.ui.core.TooltipBase){
			oTooltip._closeOrPreventOpen(); //CSN 1762131 2013
		}
		var sDockButton = this.getDockButton() ? this.getDockButton() : sap.ui.core.Popup.Dock.BeginBottom;
		var sDockMenu = this.getDockMenu() ? this.getDockMenu() : sap.ui.core.Popup.Dock.BeginTop;
		this.getMenu().open(this.bWithKeyboard, this, sDockMenu, sDockButton, this);
	}
	this.bWithKeyboard = false;
	this._bSkipOpen = false;
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when mouse key is clicked down.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuButton.prototype.onmousedown = function(oEvent) {
	this.handleMouseDown(oEvent, false);
	this._bSkipOpen = this.getMenu() && this.getMenu().bOpen;
};


/**
 * Function is called when mouse leaves the control.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuButton.prototype.onmouseout = function(oEvent) {
	if(sap.ui.commons.Button.prototype.onmouseout){
		sap.ui.commons.Button.prototype.onmouseout.apply(this, arguments);
	}
	if(this._bSkipOpen && jQuery.sap.checkMouseEnterOrLeave(oEvent, this.getDomRef())){
		this._bSkipOpen = false;
	}
};


/**
 * Function is called when enter key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuButton.prototype.onsapenter = function(oEvent){
	//It is sufficient to set this flag here only. A click event to open the menu will follow.
	this.bWithKeyboard = true;
};

/**
 * Function is called when space key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuButton.prototype.onsapspace = function(oEvent){
	//It is sufficient to set this flag here only. A click event to open the menu will follow.
	this.bWithKeyboard = true;
};

/**
 * Function is called when down key is pressed with a modifier key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
//Requested by UX, see CSN 0120061532 0001379793 2011
sap.ui.commons.MenuButton.prototype.onsapdownmodifiers = function(oEvent){
	if(oEvent.altKey){
		this.bWithKeyboard = true;
		this.onclick(oEvent);
	}
};

sap.ui.commons.MenuButton.prototype.clone = function(sIdSuffix, aLocalIds) {
	//Deregister event listener before cloning
	updateMenuEventRegistration(this);
	var oClone = sap.ui.commons.Button.prototype.clone.apply(this, arguments);
	updateMenuEventRegistration(this, this.getMenu());
	return oClone;
};

/**
 * Setter for the aggregated <code>menu</code>.
 * @param oMenu {sap.ui.commons.Menu}
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.setMenu = function(oMenu) {
	updateMenuEventRegistration(this, oMenu);
	this.setAggregation("menu", oMenu);
	return this;
};

/**
 * Destroys the menu in the aggregation
 * named <code>menu</code>.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MenuButton.prototype.destroyMenu = function() {
	updateMenuEventRegistration(this, null);
	this.destroyAggregation("menu");
	return this;
};

//********** Private **********

// Detaches the select event handler from the current menu and attaches it to the new menu
var updateMenuEventRegistration = function(oThis, oNewMenu){
	var oMenu = oThis.getMenu();
	if(oMenu) {
		oMenu.detachItemSelect(oThis._fItemSelectHandler);
	}
	oThis._fItemSelectHandler = jQuery.proxy(onItemSelected, oThis);
	if(oNewMenu) {
		oNewMenu.attachItemSelect(oThis._fItemSelectHandler);
	}
};

//Function is called when an item in the menu was selected.
var onItemSelected = function(oEvent){
	var oItem = oEvent.getParameter("item");
	this.fireItemSelected({itemId: oItem.getId(), item: oItem});
	this.firePress({itemId: oItem.getId(), item: oItem});
};

}());

// to overwrite JS doc for inherited press event

/**
 * Fired when an item from the menu was selected.
 *
 * @see sap.ui.commons.MenuButton#itemSelected
 *
 * @name sap.ui.commons.MenuButton#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 *
 * @param {string} oControlEvent.getParameters.itemId The id of the selected item
 * @param {sap.ui.commons.MenuItemBase} oControlEvent.getParameters.item The selected item
 * @public
 */

/**
 * Attach event-handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.commons.MenuButton</code>.<br/>
 *
 * Event is fired when an item from the menu was selected.
 *
 * @see sap.ui.commons.MenuButton#attachItemSelected
 *
 * @param {object}
 *            [oData] The object, that should be passed along with the event-object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs. This function will be called on the
 *            oListener-instance (if present) or in a 'static way'.
 * @param {object}
 *            [oListener] Object on which to call the given function. If empty, the global context (window) is used.
 *
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */

/**
 * Detach event-handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.commons.MenuButton</code>.<br/>
 *
 * The passed function and listener object must match the ones previously used for event registration.
 *
 * @see sap.ui.commons.MenuButton#detachItemSelected
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Object on which the given function had to be called.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @public
 */

/**
 * Fire event press to attached listeners.
 *
 * @see sap.ui.commons.MenuButton#fireItemSelected
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.MenuButton} <code>this</code> to allow method chaining
 * @protected
 */
}; // end of sap/ui/commons/MenuButton.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MenuItem.
jQuery.sap.declare("sap.ui.commons.MenuItem");

jQuery.sap.require('sap.ui.unified.MenuItem'); // unlisted dependency retained



/**
 * Constructor for a new MenuItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.unified.MenuItem#constructor sap.ui.unified.MenuItem}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Smallest unit in the menu hierarchy. An item can be a direct part of a menu bar, of a menu, or of a sub menu.
 * 
 * @extends sap.ui.unified.MenuItem
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.21.0. 
 * Please use the control sap.ui.unified.MenuItem of the library sap.ui.unified instead.
 * @name sap.ui.commons.MenuItem
 */
sap.ui.unified.MenuItem.extend("sap.ui.commons.MenuItem", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.MenuItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.MenuItem.extend
 * @function
 */


// Start of sap\ui\commons\MenuItem.js
 /*Ensure MenuItemBase is loaded (incl. loading of unified library)*/
}; // end of sap/ui/commons/MenuItem.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuTextFieldItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MenuTextFieldItem.
jQuery.sap.declare("sap.ui.commons.MenuTextFieldItem");

jQuery.sap.require('sap.ui.unified.MenuTextFieldItem'); // unlisted dependency retained



/**
 * Constructor for a new MenuTextFieldItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.unified.MenuTextFieldItem#constructor sap.ui.unified.MenuTextFieldItem}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Menu item which contains an text field. This menu item is e.g. helpful for filters.
 * The aggregation 'submenu' (inherited from parent class) is not supported for this type of menu item.
 * @extends sap.ui.unified.MenuTextFieldItem
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.21.0. 
 * Please use the control sap.ui.unified.MenuTextFieldItem of the library sap.ui.unified instead.
 * @name sap.ui.commons.MenuTextFieldItem
 */
sap.ui.unified.MenuTextFieldItem.extend("sap.ui.commons.MenuTextFieldItem", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.MenuTextFieldItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.MenuTextFieldItem.extend
 * @function
 */


// Start of sap\ui\commons\MenuTextFieldItem.js
 /*Ensure MenuItemBase is loaded (incl. loading of unified library)*/
}; // end of sap/ui/commons/MenuTextFieldItem.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Message') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Message.
jQuery.sap.declare("sap.ui.commons.Message");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Message.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.ui.commons.MessageType</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getAssociatedElementId associatedElementId} : string</li>
 * <li>{@link #getDesign design} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Creates the "Message"s to be supplied to the "MessageBar" Control.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.4.0. 
 * A new messaging concept will be created in future. Therefore this control might be removed in one of the next versions.
 * @name sap.ui.commons.Message
 */
sap.ui.core.Control.extend("sap.ui.commons.Message", { metadata : {

	// ---- object ----
	deprecated : true,
	publicMethods : [
		// methods
		"bindDetails"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"type" : {type : "sap.ui.commons.MessageType", group : "Behavior", defaultValue : null},
		"text" : {type : "string", group : "Data", defaultValue : null},
		"associatedElementId" : {type : "string", group : "Data", defaultValue : null},
		"design" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Message with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Message.extend
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * "Success", or "Warning", or "Error" messages. (Mandatory)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.commons.MessageType} the value of property <code>type</code>
 * @public
 * @name sap.ui.commons.Message#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.commons.MessageType} oType  new value for property <code>type</code>
 * @return {sap.ui.commons.Message} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Message#setType
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Message short text. (Mandatory)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.Message#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Message} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Message#setText
 * @function
 */


/**
 * Getter for property <code>associatedElementId</code>.
 * Associated UI element ID. (Optional)
 * For navigation to error field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>associatedElementId</code>
 * @public
 * @name sap.ui.commons.Message#getAssociatedElementId
 * @function
 */

/**
 * Setter for property <code>associatedElementId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAssociatedElementId  new value for property <code>associatedElementId</code>
 * @return {sap.ui.commons.Message} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Message#setAssociatedElementId
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Internal attribute, used to force the display of the "short" or the "long" text only.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>design</code>
 * @public
 * @name sap.ui.commons.Message#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.Message} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Message#setDesign
 * @function
 */


/**
 * Registers a callback function to be invoked if long text Details are to be made available. This callback function will be supplied the corresponding Message "id", and should return the HTML string to be displayed within the Message Details Dialog.
 * E.g.: myMessage.bindDetails(getDetails);
 * where
 * function getDetails(sId) {... return htmlString;}
 *
 * @name sap.ui.commons.Message.prototype.bindDetails
 * @function

 * @type string
 * @public
 */


// Start of sap\ui\commons\Message.js


sap.ui.commons.Message.prototype.init = function(){
	// Defining some private data...
	this.isRTL = sap.ui.getCore().getConfiguration().getRTL();

	// The "Details" related Controls.
  this.fnCallBack    = null; // Supplied only if a longText is to be provided on demand.
	this.oLink         = null; // Created only if a longText exists. This is the link opening the Details Dialog.
	this.oContainer    = null; // Created only if a longText exists. This is the "Dialog" hosting the Details.
	this.oDetails      = null; // Created only if a longText exists. This is the Controller rendering the Details.
	this.oBtnOK        = null; // Created only if a longText exists. This is the OK button found within the Dialog.
};

/**
 * Destroys this Control instance, called by Element#destroy()
 * @private
 */
sap.ui.commons.Message.prototype.exit = function() {
	if (this.oLink) {
		this.oLink.destroy();
		this.oLink = null;
	}
	if (this.oDetails) {
		this.oDetails.destroy();
		this.oDetails = null;
	}
	if (this.oContainer) {
		this.oContainer.destroy();
		this.oContainer = null;
	}
	if (this.oBtnOK) {
		this.oBtnOK.destroy();
		this.oBtnOK = null;
	}
};

// #############################################################################
// Internal Utilities
// #############################################################################
/**
 * This utility is for closing the Message Details from its OK button.
 * @private
 */
sap.ui.commons.Message.closeDetails = function(oControlEvent) {
  oControlEvent.getSource().getParent().close();
};
/**
 * This utility closes THIS Message's Details.
 * @private
 */
sap.ui.commons.Message.prototype.closeDetails = function() {
  // If Details have been opened, can attempt to close them:
  if (this.oContainer) {
	this.oContainer.close();
  }
};

/**
 * This utility renders the Message Details.
 * Current Specifications are those of JPaaS:
 *    Supported by:               "Dialog"              "MessageBox"
 *  - Title:                       Yes                   Yes
 *  - Non-blocking:                Yes, configurable.    No, modal only
 *  - Accepts HTML string:         Yes, via oContent.    No, sMessage only
 *  - Bottom-Right resize handle:  Yes                   No
 *  - No icon:                     Yes                   Possible
 * @private
 */
sap.ui.commons.Message.prototype.openDetails = function() {
  if (!this.oContainer) {
	var rb          = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	var OK          = rb.getText("MSGBAR_DETAILS_DIALOG_CLOSE");
	var title       = rb.getText("MSGBAR_DETAILS_DIALOG_TITLE");
	// Reading the HTML details as is, styles included:
	var	htmlDetails = this.fnCallBack(this.getId());
	this.oDetails   = new sap.ui.commons.Message({type: this.getType(), text: htmlDetails});
	this.oBtnOK     = new sap.ui.commons.Button({text: OK, press:sap.ui.commons.Message.closeDetails});
	this.oContainer = new sap.ui.commons.Dialog();
	this.oContainer.addContent(this.oDetails);
	this.oContainer.setTitle(title);
		this.oContainer.addButton(this.oBtnOK);
  //this.oContainer.setDefaultButton(this.oBtnOK); // Already the default since the only button...
  }
	// Other visible Dialogs around?
  var sContainerId = this.oContainer.getId();
  var iOthersMaxZIndex = 0;
  var oOtherOpenDialogs = jQuery('.sapUiDlg');
  for (var i=oOtherOpenDialogs.length-1; i>=0; i--) {
	if (jQuery(oOtherOpenDialogs[i]).css('visibility') != "visible") {
	  oOtherOpenDialogs.splice(i, 1);
	} else if (oOtherOpenDialogs[i].id == sContainerId) {
	  oOtherOpenDialogs.splice(i, 1);
	} else {
	  iOthersMaxZIndex = Math.max(iOthersMaxZIndex,jQuery(oOtherOpenDialogs[i]).css('zIndex'));
	}
  }

  // Taking note for later:
  var bWasOpen = this.oContainer.isOpen();
  // No matter what, we have to open the new Details, so:
  this.oContainer.open();

  // jQuery version of our OPEN Dialog Container:
	var jContainer = this.oContainer.$();

  // Starting a new Stack in the default Dialog's location:
  var jContainerRect = jContainer.rect(); // For Height and Width...
	if (oOtherOpenDialogs.length == 0) {
		// "offsets.right" & "offsets.left" should be identical as plain Dialogs are centered,
		// but in case there is a bug (like in Safari RTL):
		if (this.isRTL) {
		  // Will be using "left" invariably for RTL or LTR:
			jContainerRect.left = Number(jContainer.css('right').replace("px", ""));
		}
		this.setLastOffsets(jContainerRect);
		// Nothing else to do:
		return;
	}

  // Dialog limitation. Work-around:
  if (bWasOpen) {
		if (iOthersMaxZIndex > jContainer.css('zIndex')) {
			// zIndex not raised via previous re-open()...
			// Have to raise it ourselves.
		jContainer.css('zIndex',iOthersMaxZIndex+1);
		}
		// Nothing else to do:
	return;
  }

  //*************** Stacking process starts ***************
  // 1st rendering the new Dialog on top of the old one...
  var oNextOffsets = this.getNextOffsets();
	jContainer.css('top',  (oNextOffsets.top -sap.ui.commons.Message.TOP_INCR ) + "px");
  if (this.isRTL) {
		jContainer.css('right', (oNextOffsets.left-sap.ui.commons.Message.LEFT_INCR) + "px");
  } else {
	jContainer.css('left',  (oNextOffsets.left-sap.ui.commons.Message.LEFT_INCR) + "px");
  }

  // Figuring what should the next coordinates be:
  var jContainerRect = jContainer.rect(); // For Height and Width...
  var scrollTop   = jQuery(window).scrollTop();
  var scrollLeft  = jQuery(window).scrollLeft(); // Negative in RTL
  var scrollRight = -scrollLeft;
  // Checking if the new coordinates fit within the window:
  if ((jQuery(window).height()+scrollTop) < (oNextOffsets.top+jContainerRect.height)) {
	// ReStacking from the top:
	oNextOffsets.top = scrollTop;
	this.setLastOffsets(oNextOffsets);
  }
  if (this.isRTL) {
	  if ((jQuery(window).width()+scrollRight) < (oNextOffsets.left+jContainerRect.width)) {
		// ReStacking from the right:
		oNextOffsets.left = scrollRight;
		this.setLastOffsets(oNextOffsets);
	  }
		// Animating the Dialog to its new offset position:
		jContainer.animate({top:oNextOffsets.top+"px", right:oNextOffsets.left+"px"}, 200);
  } else {
	  if ((jQuery(window).width()+scrollLeft) < (oNextOffsets.left+jContainerRect.width)) {
		// ReStacking from the left:
		oNextOffsets.left = scrollLeft;
		this.setLastOffsets(oNextOffsets);
	  }
		// Animating the Dialog to its new offset position:
		jContainer.animate({top:oNextOffsets.top+"px", left:oNextOffsets.left+"px"}, 200);
  }

//MESSAGEBOX BACKUP: Issues: Only Modal, Doesn't accept HTML string, No Resize-Area.
//	var rb    = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
//  var ICON  = this.getType().toUpperCase();		// ERROR, WARNING, ...
//  var title = rb.getText("MSGTYPE_" + ICON);
//  var text  = this.getLongText();
//  sap.ui.commons.MessageBox.show(text, ICON, title);
};

sap.ui.commons.Message.TOP_INCR  = 20;
sap.ui.commons.Message.LEFT_INCR = 10;


// Begin of Dialog-Offsets-Stacking facilities
(function() {
	var oLastOffsets = null;
	/**
	 * @static
	 */
	sap.ui.commons.Message.setLastOffsets = function(oOffsets){
		oLastOffsets = oOffsets;
	};
	sap.ui.commons.Message.prototype.setLastOffsets = function(oOffsets){
		sap.ui.commons.Message.setLastOffsets(oOffsets);
	};
	sap.ui.commons.Message.getNextOffsets = function(){
	  oLastOffsets.top   += sap.ui.commons.Message.TOP_INCR;
	  oLastOffsets.left  += sap.ui.commons.Message.LEFT_INCR;
		return oLastOffsets;
	};
	sap.ui.commons.Message.prototype.getNextOffsets = function(){
		return sap.ui.commons.Message.getNextOffsets();
	};
}());
// End of Dialog-Offsets-Stacking facilities


// #############################################################################
// Public APIs
// #############################################################################
/**
 * This interface registers a CallBack function, to be called for rendering
 * the longText Details of a Message.
 * This function will be supplied the ID of the Message.
 * This function is expected to return the (simple) HTML string giving the
 * details belonging to this message ID.
 * @public
 */
sap.ui.commons.Message.prototype.bindDetails = function(fnCallBack) {
  this.fnCallBack = fnCallBack;
};
}; // end of sap/ui/commons/Message.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MessageBar.
jQuery.sap.declare("sap.ui.commons.MessageBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new MessageBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAnchorID anchorID} : string (default: '')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMaxToasted maxToasted} : int (default: 3)</li>
 * <li>{@link #getMaxListed maxListed} : int (default: 7)</li>
 * <li>{@link #getAnchorSnapPoint anchorSnapPoint} : string (default: "begin top")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Creates an instance of a "MessageBar" Control, for displaying "Message"s.
 * There is no imposed limit on the number of "MessageBar"s that can be created, but using only 1 makes sense, specially if accessing it (via Ctl-m) becomes a necessity.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.4.0. 
 * A new messaging concept will be created in future. Therefore this control might be removed in one of the next versions.
 * @name sap.ui.commons.MessageBar
 */
sap.ui.core.Control.extend("sap.ui.commons.MessageBar", { metadata : {

	// ---- object ----
	deprecated : true,
	publicMethods : [
		// methods
		"addMessages", "deleteMessages", "deleteAllMessages"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"anchorID" : {type : "string", group : "Appearance", defaultValue : ''},
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"maxToasted" : {type : "int", group : "Misc", defaultValue : 3},
		"maxListed" : {type : "int", group : "Misc", defaultValue : 7},
		"anchorSnapPoint" : {type : "string", group : "Misc", defaultValue : "begin top"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.MessageBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.MessageBar.extend
 * @function
 */


/**
 * Getter for property <code>anchorID</code>.
 * Element ID upon which the 'message bar' is to be initially positioned.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>anchorID</code>
 * @public
 * @name sap.ui.commons.MessageBar#getAnchorID
 * @function
 */

/**
 * Setter for property <code>anchorID</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAnchorID  new value for property <code>anchorID</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageBar#setAnchorID
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.MessageBar#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageBar#setVisible
 * @function
 */


/**
 * Getter for property <code>maxToasted</code>.
 * Maximum number of simultaneous messages being toasting-up in a row. Value '0' means this dynamic part of the feature is switched off.
 *
 * Default value is <code>3</code>
 *
 * @return {int} the value of property <code>maxToasted</code>
 * @public
 * @name sap.ui.commons.MessageBar#getMaxToasted
 * @function
 */

/**
 * Setter for property <code>maxToasted</code>.
 *
 * Default value is <code>3</code> 
 *
 * @param {int} iMaxToasted  new value for property <code>maxToasted</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageBar#setMaxToasted
 * @function
 */


/**
 * Getter for property <code>maxListed</code>.
 * Maximum number of messages being display in the List before a scrollbar appears. Value '0' means no limit.
 *
 * Default value is <code>7</code>
 *
 * @return {int} the value of property <code>maxListed</code>
 * @public
 * @name sap.ui.commons.MessageBar#getMaxListed
 * @function
 */

/**
 * Setter for property <code>maxListed</code>.
 *
 * Default value is <code>7</code> 
 *
 * @param {int} iMaxListed  new value for property <code>maxListed</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageBar#setMaxListed
 * @function
 */


/**
 * Getter for property <code>anchorSnapPoint</code>.
 * Type: sap.ui.core.Popup.Dock
 * SnapPoint of MessageBar over anchorId.
 * Note: Use "begin" or "end" for RTL support.
 * Note: "center" is not indicated, as positioning is only set once, either via the css "left" or the "right" attribute. Therefore a MessageBar will only be extended in one direction, as Messages come in.
 *
 * Default value is <code>"begin top"</code>
 *
 * @return {string} the value of property <code>anchorSnapPoint</code>
 * @public
 * @name sap.ui.commons.MessageBar#getAnchorSnapPoint
 * @function
 */

/**
 * Setter for property <code>anchorSnapPoint</code>.
 *
 * Default value is <code>"begin top"</code> 
 *
 * @param {string} sAnchorSnapPoint  new value for property <code>anchorSnapPoint</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageBar#setAnchorSnapPoint
 * @function
 */


/**
 * To add message(s).
 *
 * @name sap.ui.commons.MessageBar.prototype.addMessages
 * @function
 * @param {sap.ui.commons.Message[]} 
 *         aAMessages
 *         Array of messages.

 * @type void
 * @public
 */


/**
 * To deleted messages.
 *
 * @name sap.ui.commons.MessageBar.prototype.deleteMessages
 * @function
 * @param {string[]} 
 *         aIds
 *         Messages IDs to be deleted.

 * @type void
 * @public
 */


/**
 * To deleted all messages.
 *
 * @name sap.ui.commons.MessageBar.prototype.deleteAllMessages
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\commons\MessageBar.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


sap.ui.commons.MessageBar.prototype.init = function(){
	// Defining some private data...

	// Message queues, in priority order:
	this.aErrors    = []; // Error queue.
	this.aWarnings  = []; // Warning queue.
	this.aSuccesses = []; // Success queue.
	// Toasting queue:
	this.aToasts    = [];
	this.maxToastsReached = false; // Disables Toast queue.

	// Popup(oContent, bModal, bShadow, bAutoClose) container initialization:
	// - oModal: "true/false" : For blocking the background window.
	this.oPopup   = new sap.ui.core.Popup(this, false, true, false);

	// The different related Controls.
	this.oList    = null; // Created only if opened by user.
	// MessageBar does not come without Toasts:
	var id        = this.getId();
	this.oToast   = new sap.ui.commons.MessageToast(id+"__Toast", {anchorId:id+"__sums"});
	var that      = this; // For closure
	this.oToast.attachNext(function(){that.checkForToast();});

	// Drag&Drop data. Only evaluated if needed:
	this.snapPoint = null;
	this.oHomePosition = null;
	this.oDropPosition = null;
	this.bToggleListBackAfterDrag = null;
};

/**
 * Destroys this Control instance, called by Element#destroy()
 * @private
 */
sap.ui.commons.MessageBar.prototype.exit = function() {
	// If this happens during a Drag, forcing a Drop
	// in order to remove any bound handlers:
	this.onmouseup();

	// Closing and destroying everything:
	this.close();

	this.oPopup.destroy();
	this.oPopup = null;

	this.oToast.destroy();
	this.oToast = null;

	if (this.oList) {
		this.oList.destroy();
		this.oList = null;
	}
};

// **************************************************
// * Drag&Drop // Copied from Dialog and ColumnDnDManager...
// **************************************************
/**
* Overwrites the native D&D, not to see the native ghost.
* @param {sap.ui.core.BrowserEvent} oEvent The forwarded browser event
* @private
*/
sap.ui.commons.MessageBar.prototype.ondragstart = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Initializes drag and drop capabilities.
 *
 * @param {jQuery.Event} oEvent The event object
 * @private
 */
sap.ui.commons.MessageBar.prototype.onmousedown = function (oEvent) {
//jQuery.sap.log.debug("MESSAGEBAR: ONMOUSEDOWN");
	var oSource  = oEvent.target;
	var jSource = jQuery(oSource);

	// If cursor does not say move, then do not bother.
	if (jSource.css('cursor') != "move") {
		return;
	}

	this.sDragMode = "move";


  // MessageBar start position:
	this.oMsgBarDragStartPosition       = this.$().rect();
	this.oMsgBarDragStartPosition.right = Number(this.$().css('right').replace("px", ""));

	// Recording our home position, in order to return to it on demand:
	if (!this.oHomePosition) {
		this.oHomePosition = this.oMsgBarDragStartPosition;
	}

	// To evaluate the extend of the drag:
	this.mouseDragStartPositionX = oEvent.screenX;
	this.mouseDragStartPositionY = oEvent.screenY;

	// Activating our move handler:
	var jDocument = jQuery(window.document);
	jDocument.bind("mousemove", jQuery.proxy(this.handleMove, this));
	if(window.parent) {
		jQuery(window.parent.document).bind("mousemove", jQuery.proxy(this.handleMove, this), true);
	}

	// Fix for IE blue text selection while dragging:
	jDocument.bind("selectstart",jQuery.proxy(this.ondragstart,this), true);
};

/**
 * Handles the move event.
 * @param {DOMEvent} event The event raised by the browser.
 * @private
 */
sap.ui.commons.MessageBar.prototype.handleMove = function (event) {
//jQuery.sap.log.debug("MESSAGEBAR: HANDLEMOVE");
	if (!this.sDragMode) {
		return;
	}

  // First closing the MessageList, if visible.
  // That will allow the user to better see where he moves the MessageBar.
  // We will reopen it after the Drop.
  // This will also allow the List Popup to properly position itself (UP/DOWN).
  if (this.bToggleListBackAfterDrag==null && this.oList) {
	this.bToggleListBackAfterDrag = this.oList.getVisible();
	if (this.bToggleListBackAfterDrag) {
		this.toggleList();
	}
  }

  // Moving our Control by the extent of the mouse-drag:
	event = event || window.event;
	var iTop   = this.oMsgBarDragStartPosition.top   + event.screenY - this.mouseDragStartPositionY;
	var iLeft  = this.oMsgBarDragStartPosition.left  + event.screenX - this.mouseDragStartPositionX;
	var iRight = this.oMsgBarDragStartPosition.right - event.screenX + this.mouseDragStartPositionX;

  this.oPopup._$().css('top', iTop);
	// Is the Bar to be positioned and dragged from its right-hand side???
	if (this.snapPoint.indexOf("right") != -1) {
		this.oPopup._$().css('right', iRight);
	} else {
		this.oPopup._$().css('left', iLeft);
	}

	// Saving the drop position for the next MessageList "open" event:
	this.oDropPosition = {top: iTop, left: iLeft, right: iRight};

	event.cancelBubble = true;
	return false;
};

/**
 * Handle onmouseup event.
 * This does the cleanup after drag and move handling.
 * @param {jQuery.Event} oEvent The event object
 * @private
 */
sap.ui.commons.MessageBar.prototype.onmouseup = function (oEvent) {
//jQuery.sap.log.debug("MESSAGEBAR: ONMOUSEUP");
	if (!this.sDragMode) {
		return;
	}

	// If we have indeed moved, then rendering our "back-home" icon:
  if (this.oDropPosition) {
	  this.addStyleClass("sapUiMsgBarMoved");
  }

  // Reopening the List if was open before the move:
  if (this.bToggleListBackAfterDrag) {
	this.toggleList();
  }
  this.bToggleListBackAfterDrag = null; // Re-initialized for the next D&D.

	// Removing our move handler:
	var jDocument = jQuery(window.document);
	jDocument.unbind("mousemove", jQuery.proxy(this.handleMove, this));
	if(window.parent) {
		jQuery(window.parent.document).unbind("mousemove", jQuery.proxy(this.handleMove, this));
	}
	jDocument.unbind("selectstart",jQuery.proxy(this.ondragstart,this));

	this.sDragMode = null;

	// Resume the toasting:
	this.checkForToast();
};

// **************************************************
// * Clicking
// **************************************************
/**
 * Handle onclick events.
 * The 2 click-able areas are:
 *  1) The front Open/Close list button.
 *  2) The back GoHome button.
 * @param {jQuery.Event} oEvent The event object
 * @private
 */
sap.ui.commons.MessageBar.prototype.onclick = function (oEvent) {
	var oSource = oEvent.target;
	var jSource = jQuery(oSource);

	// If cursor does not say click, then do not bother.
	if (jSource.css('cursor') != "pointer") {
		return;
	}

  // Now, checking were the click came from:
  if (jSource.hasClass("sapUiMsgBarToggle")) {
		this.toggleList();
  } else if (jSource.hasClass("sapUiMsgBarHome")) {
		this.backHome();
  } else {
	jQuery.sap.log.debug("Warning: MessageBar unsupported click on " + jSource.attr('className'));
  }
}

// #############################################################################
// Internal Utilities
// #############################################################################
/**
 * This utility checks what action the Toaster should execute next.
 * @private
 */;
sap.ui.commons.MessageBar.prototype.checkForToast = function() {
  // No more toast if Multiple Toasts has already been displayed:
  if (this.maxToastsReached) {
	return;
  }

  // Making sure there is some queued messages:
  if (this.aToasts==null || this.aToasts.length == 0) {
	return;
  }

  // Making sure the feature is active:
  var maxToasted = this.getMaxToasted();
  if (maxToasted == 0) {
	return;
  }

  // Do not toast during Drag&Drop. Do not distract the user!
  if (this.sDragMode) {
	return;
  }

  var nextToast = null;
  var anchorId = "";
  if (this.aToasts.length > this.getMaxToasted()) {
	// Having a null "nextToast" would indicate a "Multiple new messages..."
	// With "Multiple new messages...", no need to toast messages anymore,
	// so emptying the toasting queue:
	  this.aToasts = [];
	  this.maxToastsReached = true;
	// Do not wait for the previous toast to be done.
	// The Toast has to point towards our left open/close Arrow:
	anchorId = this.getId() + "__arrowImg";
  } else {
	// Do not put a new toast in if there is already one in:
	  if (!this.oToast.isIdle()) {
		return;
	  }
	// Retrieving the oldest queued message:
	nextToast = this.aToasts.splice(0, 1)[0];
	// The Toast has to point towards the icon of the same priority, e.g. "id_ErrorImg":
	anchorId = this.getId() + "__" + nextToast.getType() + "Img";
  }

  // Triggering a Toast:
  this.oToast.toast(nextToast, anchorId);
};

/**
 * This utility adds Toasts to the Toast Array, if not already
 * included within this Array.
 * Order is chronological, not by priority.
 * @private
 */
sap.ui.commons.MessageBar.prototype.addToasts = function(aMessages) {
  // Looping through the supplied messages:
	for (var i=0, len=aMessages.length; i<len; i++) {
	  var newMessage = aMessages[i];
	  var alreadyQueued = false;
	  // Making sure message is not already queued for Toast:
	  for (var j=this.aToasts.length; j>=0; j--) {
		if (newMessage == this.aToasts[j]) {
		  alreadyQueued = true;
		  break;
		}
	  }
	  // Adding the message to the Toast queue:
	  if (!alreadyQueued) {
		this.aToasts.push(newMessage);
	  }
  } // end supplied messages for-loop
};

/**
 * This utility removes a Toast from the Array of messages still
 * to be toasted.
 * @private
 */
sap.ui.commons.MessageBar.prototype.deleteToast = function(sId) {
  if (!this.aToasts) {
	return;
  }

  // Checking if within the Toast queue:
	for (var j=0, len=this.aToasts.length; j<len; j++) {
		if (this.aToasts[j].getId() == sId) {
			this.aToasts.splice(j, 1);
			return;
		}
	}
};

/**
 * This utility removes one message, given its ID, from the possible
 * message queues (Error, Warning, Success...).
 * Messages always have an ID, since created via the "Message" Control.
 * @private
 */
sap.ui.commons.MessageBar.prototype.deleteOneMessage = function(sId) {
  if (!sId) {
	return;
  }

  // Checking if within the Error queue:
	for (var j=0, len=this.aErrors.length; j<len; j++) {
		if (this.aErrors[j].getId() == sId) {
		  this.aErrors[j].closeDetails();
			this.aErrors.splice(j, 1);
			return;
		}
	}

  // Checking if within the Warning queue:
	for (var j=0, len=this.aWarnings.length; j<len; j++) {
		if (this.aWarnings[j].getId() == sId) {
		  this.aWarnings[j].closeDetails();
			this.aWarnings.splice(j, 1);
			return;
		}
	}

  // Checking if within the Success queue:
	for (var j=0, len=this.aSuccesses.length; j<len; j++) {
		if (this.aSuccesses[j].getId() == sId) {
		  this.aSuccesses[j].closeDetails();
			this.aSuccesses.splice(j, 1);
			return;
		}
	}
};

/**
 * This utility converts "Begin"/"End" into "Right"/"Left" coordinates,
 * for RTL support.
 * @private
 */
sap.ui.commons.MessageBar.prototype.getSnapPoint = function() {
  if (!this.snapPoint) {
	  this.snapPoint = this.getAnchorSnapPoint();
	  if (sap.ui.getCore().getConfiguration().getRTL()) {
		this.snapPoint = this.snapPoint.replace("begin", "right").replace("end", "left");
	  } else {
		this.snapPoint = this.snapPoint.replace("begin", "left").replace("end", "right");
	  }
  }
  return this.snapPoint;
};

/**
 * This utility opens the MessageBar Popup.
 * @private
 */
sap.ui.commons.MessageBar.prototype.open = function() {
	// Defining or fetching the Popup attributes:
  var animationDuration = 0;
  var snapPoint = this.getSnapPoint();

	// Opening the MessageBar:
  var anchor = null;
  var anchorId = this.getAnchorID();
  if (anchorId) {
	anchor = jQuery.sap.domById(anchorId);
  }
  if (!anchor) {
	anchor = document.body;
  }
  // Invoking the MsgBar Popup open function(iDuration, my, at, of, offset):
	this.oPopup.open(animationDuration, snapPoint, snapPoint, anchor, "0 0");

  // Repositioning as per the Drop position:
  if (this.oDropPosition) {
	  this.oPopup._$().css('top', this.oDropPosition.top);
		// Is the Bar to be positioned and dragged from its right-hand side???
		if (snapPoint.indexOf("right") != -1) {
			this.oPopup._$().css('right', this.oDropPosition.right);
		} else {
			this.oPopup._$().css('left', this.oDropPosition.left);
		}
  }

  // If closed with a list present, then we should still display it:
  if (this.hasStyleClass("sapUiMsgBarOpen")) {
	this.oList.setVisible(true);
  }
};

/**
 * This utility closes the MessageBar Popup.
 * @private
 */
sap.ui.commons.MessageBar.prototype.close = function() {
  // First closing the MessageList, if visible:
  if (this.oList && this.oList.getVisible()) {
	this.oList.setVisible(false);
  }

  // Invoking the MsgBar Popup close = function(iDuration):
  var animationDuration = 0;
	this.oPopup.close(animationDuration);

  // Re-initializing flag along with the turning-off of the MessageBar:
  this.maxToastsReached = false;
};

/**
 * This utility updates the messageBar counters, and visibility.
 * @private
 */
sap.ui.commons.MessageBar.prototype.updateCountersAndVisibility = function() {
  // If invisible, get out of here!
	if (!this.getProperty("visible")) {
		return;
	}

  // Convenience variable
	var id = this.getId();

  // Updating the Error Count and Visibility:
  var oCount = jQuery.sap.domById(id + "__ErrorCount");
  if (!oCount) {
	// The MessageBar has to be available on the DOM in order to update it!
	// This code is required as the MessageBar is first created.
	  this.open();
	oCount = jQuery.sap.domById(id + "__ErrorCount");
  }
  var count   = this.aErrors.length;
  var oldText = oCount.innerHTML;
  var newText = "(" + count + ")";
  var jIcon   = null;
  var jCount  = null;
  if (newText != oldText) {
	// Have to directly update the DOM element:
	oCount.innerHTML = newText;

	if (newText == "(0)") {
	  // Allowing empty queues not to be displayed:
	  jIcon  = jQuery.sap.byId(id + "__ErrorImg");
	  jCount = jQuery.sap.byId(id + "__ErrorCount");
	  jIcon.addClass("sapUiMsgBarZeroCount");
	  jCount.addClass("sapUiMsgBarZeroCount");
	} else if (oldText == "(0)") {
	  // Displaying the non-empty queue:
	  jIcon  = jQuery.sap.byId(id + "__ErrorImg");
	  jCount = jQuery.sap.byId(id + "__ErrorCount");
	  jIcon.removeClass("sapUiMsgBarZeroCount");
	  jCount.removeClass("sapUiMsgBarZeroCount");
	}
  }


  // Updating the Warning Count and Visibility:
  oCount  = jQuery.sap.domById(id + "__WarningCount");
  count   = this.aWarnings.length;
  oldText = oCount.innerHTML;
  newText = "(" + count + ")";
  jIcon   = null;
  jCount  = null;
  if (newText != oldText) {
	// Have to directly update the DOM element:
	oCount.innerHTML = newText;

	if (newText == "(0)") {
	  // Allowing empty queues not to be displayed:
	  jIcon  = jQuery.sap.byId(id + "__WarningImg");
	  jCount = jQuery.sap.byId(id + "__WarningCount");
	  jIcon.addClass("sapUiMsgBarZeroCount");
	  jCount.addClass("sapUiMsgBarZeroCount");
	} else if (oldText == "(0)") {
	  // Displaying the non-empty queue:
	  jIcon  = jQuery.sap.byId(id + "__WarningImg");
	  jCount = jQuery.sap.byId(id + "__WarningCount");
	  jIcon.removeClass("sapUiMsgBarZeroCount");
	  jCount.removeClass("sapUiMsgBarZeroCount");
	}
  }


  // Updating the Success Count and Visibility:
  oCount  = jQuery.sap.domById(id + "__SuccessCount");
  count   = this.aSuccesses.length;
  oldText = oCount.innerHTML;
  newText = "(" + count + ")";
  jIcon   = null;
  jCount  = null;
  if (newText != oldText) {
	// Have to directly update the DOM element:
	oCount.innerHTML = newText;

	if (newText == "(0)") {
	  // Allowing empty queues not to be displayed:
	  jIcon  = jQuery.sap.byId(id + "__SuccessImg");
	  jCount = jQuery.sap.byId(id + "__SuccessCount");
	  jIcon.addClass("sapUiMsgBarZeroCount");
	  jCount.addClass("sapUiMsgBarZeroCount");
	} else if (oldText == "(0)") {
	  // Displaying the non-empty queue:
	  jIcon  = jQuery.sap.byId(id + "__SuccessImg");
	  jCount = jQuery.sap.byId(id + "__SuccessCount");
	  jIcon.removeClass("sapUiMsgBarZeroCount");
	  jCount.removeClass("sapUiMsgBarZeroCount");
	}
  }


	// If the MessageBar is now empty, then it should become invisible:
	if (this.aErrors.length==0 &&
		this.aWarnings.length==0 &&
		this.aSuccesses.length==0) {
	  // Hiding the MessageBar:
	  this.close();
	  return;
	} else {
	  // Showing the MessageBar:
	  this.open();
	}

	// If the MessageList is already open, updating it:
	if (this.oList && this.oList.getVisible()) {
		this.oList.setMessages(this.aSuccesses.concat(this.aWarnings).concat(this.aErrors));
	}

  // Checking for the next Toaster action:
	this.checkForToast();
};

/**
 * This utility toggles the MessageList Popup.
 * This function is invoked by clicking the front MessageBar Arrow.
 * @private
 */
sap.ui.commons.MessageBar.prototype.toggleList = function() {
  // Creating the List, if not already done:
  if (!this.oList) {
	var listId = this.getId() + "__List";
	  this.oList = new sap.ui.commons.MessageList(listId, {anchorId:this.getId(), maxListed:this.getMaxListed()});
  }

  // Retrieving the List current Open/Close information:
  var visible  = this.oList.getVisible();

  // Toggling the List, and adapting our styling:
  if (!visible) {
	this.oList.setMessages(this.aSuccesses.concat(this.aWarnings).concat(this.aErrors));
	this.addStyleClass("sapUiMsgBarOpen");
  } else {
	this.removeStyleClass("sapUiMsgBarOpen");
  }
  this.oList.setVisible(!visible);
};

/**
 * This utility restores the initial position of the MessageBar.
 * @private
 */
sap.ui.commons.MessageBar.prototype.backHome = function() {
  // Instead of repositioning the List, we may as well just re-opening it once back home!
  // Just like when it is the user that is D&D the Bar!
  // This will also allow the List Popup to properly position itself (UP/DOWN).
//this.oPopup.setPosition(sap.ui.core.Popup.Dock.LeftTop, {left:this.oHomePosition.left + "px", top: this.oHomePosition.top + "px"});
  var jPopup = this.oPopup._$();
  if (this.oList && this.oList.getVisible()) {
	this.toggleList();
	var that = this;
		// Is the Bar to be positioned and dragged from its right-hand side???
		if (this.snapPoint.indexOf("right") != -1) {
			jPopup.animate({right:this.oHomePosition.right + "px", top:this.oHomePosition.top + "px"}, 200, function() {that.toggleList();});
		} else {
			jPopup.animate({left:this.oHomePosition.left + "px", top:this.oHomePosition.top + "px"}, 200, function() {that.toggleList();});
		}
  } else {
		// Is the Bar to be positioned and dragged from its right-hand side???
		if (this.snapPoint.indexOf("right") != -1) {
			jPopup.animate({right:this.oHomePosition.right + "px", top:this.oHomePosition.top + "px"}, 200);
		} else {
			jPopup.animate({left:this.oHomePosition.left + "px", top:this.oHomePosition.top + "px"}, 200);
		}
  }

  // MessageBar is back home:
  this.oDropPosition = null;
  // Hiding our "back-home" icon:
  this.removeStyleClass("sapUiMsgBarMoved");
};

// #############################################################################
// Public APIs
// #############################################################################
/**
 * This public API adds/updates a supplied list of messages.
 * The messageBar is to appear should at least one message exists.
 * @public
 */
sap.ui.commons.MessageBar.prototype.addMessages = function(aMessages) {
  if (!aMessages) {
	return;
  }

  // Looping through the supplied messages:
	for (var i=0, len=aMessages.length; i<len; i++) {
	// First have to removing each message from the message queues,
	// in case this is an update that we are doing!
	// This approach allows for messages to change priority,
	// and for "updated" messages to get re-ordered, i.e.
	// the most recent ones are displayed first (on a given priority
	// level).
	this.deleteOneMessage(aMessages[i].getId());

	// Now, inserting each message into its proper queue:
	  switch (aMessages[i].getType()){
		case sap.ui.commons.MessageType.Error:
		  // Adding the "new" Error message:
		this.aErrors.push(aMessages[i]);
		  break;

		case sap.ui.commons.MessageType.Warning:
		  // Adding the "new" Warning message:
		this.aWarnings.push(aMessages[i]);
		  break;

		case sap.ui.commons.MessageType.Success:
		  // Adding the "new" Success message:
		this.aSuccesses.push(aMessages[i]);
		  break;

		default:
		  jQuery.sap.log.debug("ERROR: MessageBar supplied messageType=" + aMessages[i].getType());
	  } // end switch
	} // end for

	// Adding the new messages to the toasting queue:
  this.addToasts(aMessages);

	// Updating the messageBar:
	this.updateCountersAndVisibility();

	return this;
};

/**
 * This public API deletes a supplied list of messages.
 * The messageBar is to disappear should no message remains.
 * @public
 */
sap.ui.commons.MessageBar.prototype.deleteMessages = function(aIds) {
  if (!aIds) {
	return;
  }

  // Removing each message from their message queues, and toast queue:
	for (var i=0, len=aIds.length; i<len; i++) {
	this.deleteOneMessage(aIds[i]);
	this.deleteToast(aIds[i]);
	} // end for

	// Updating the messageBar:
	this.updateCountersAndVisibility();

	return this;
};

/**
 * This public API deletes all recorded messages.
 * The messageBar is to disappear.
 * @public
 */
sap.ui.commons.MessageBar.prototype.deleteAllMessages = function() {
  // Closing the corresponding Details if any:
	for (var j=this.aErrors.length-1; j>=0; j--) {
		this.aErrors[j].closeDetails();
	}
	for (var j=this.aWarnings.length-1; j>=0; j--) {
		this.aWarnings[j].closeDetails();
	}
	for (var j=this.aSuccesses.length-1; j>=0; j--) {
		this.aSuccesses[j].closeDetails();
	}

	// Empty all error queues:
  this.aErrors    = [];
  this.aWarnings  = [];
  this.aSuccesses = [];
  // Empty the Toasting queue:
  this.aToasts    = [];

	// Updating the messageBar:
	this.updateCountersAndVisibility();

	return this;
};



// #############################################################################
// Overwriting auto-generated methods of MessageBar.API.js
// #############################################################################

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * The default implementation of function "setVisible()" is enhanced 
 * in order to toggle the "visibility:hidden;" attribute over the control.
 * 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageBar.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);

  if (bVisible) {
		// Updating and rendering the MessageBar:
		this.updateCountersAndVisibility();
  }
  else {
	// Just closing the MessageBar:
	  this.close();
  }

	return this;
};
}; // end of sap/ui/commons/MessageBar.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MessageList.
jQuery.sap.declare("sap.ui.commons.MessageList");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new MessageList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: false)</li>
 * <li>{@link #getAnchorId anchorId} : string</li>
 * <li>{@link #getMaxListed maxListed} : string (default: '7')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Instantiated by the "MessageBar" Control if the user ever requests to generate the corresponding "MessageList".
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.4.0. 
 * A new messaging concept will be created in future. Therefore this control might be removed in one of the next versions.
 * @name sap.ui.commons.MessageList
 */
sap.ui.core.Control.extend("sap.ui.commons.MessageList", { metadata : {

	// ---- object ----
	deprecated : true,
	publicMethods : [
		// methods
		"setMessages"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Behavior", defaultValue : false},
		"anchorId" : {type : "string", group : "Appearance", defaultValue : null},
		"maxListed" : {type : "string", group : "Misc", defaultValue : '7'}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.MessageList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.MessageList.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * To open or close the Control.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.MessageList#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MessageList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageList#setVisible
 * @function
 */


/**
 * Getter for property <code>anchorId</code>.
 * Id of the anchor under which the MessageList is to render.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>anchorId</code>
 * @public
 * @name sap.ui.commons.MessageList#getAnchorId
 * @function
 */

/**
 * Setter for property <code>anchorId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAnchorId  new value for property <code>anchorId</code>
 * @return {sap.ui.commons.MessageList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageList#setAnchorId
 * @function
 */


/**
 * Getter for property <code>maxListed</code>.
 * Maximum number of messages being display in the List before a scrollbar appears. Value '0' means no limit.
 *
 * Default value is <code>7</code>
 *
 * @return {string} the value of property <code>maxListed</code>
 * @public
 * @name sap.ui.commons.MessageList#getMaxListed
 * @function
 */

/**
 * Setter for property <code>maxListed</code>.
 *
 * Default value is <code>7</code> 
 *
 * @param {string} sMaxListed  new value for property <code>maxListed</code>
 * @return {sap.ui.commons.MessageList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageList#setMaxListed
 * @function
 */


/**
 * Sets the message list to be displayed.
 *
 * @name sap.ui.commons.MessageList.prototype.setMessages
 * @function
 * @param {sap.ui.commons.Message[]} 
 *         aMessages
 *         Message list.

 * @type void
 * @public
 */


// Start of sap\ui\commons\MessageList.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

///**
// * This file defines behavior for the control,
// */
sap.ui.commons.MessageList.prototype.init = function(){
	// Defining some private data:
	this.aMessages = [];
	this.iItemHeight = 0;

	// Popup(oContent, bModal, bShadow, bAutoClose) container initialization:
	// - bModal: "true/false" : For blocking the background window.
	this.oPopup   = new sap.ui.core.Popup(this, false, true, false);
};

/**
 * Destroys this Control instance, called by Element#destroy()
 * @private
 */
sap.ui.commons.MessageList.prototype.exit = function() {
  this.close();

	this.oPopup.destroy();
	this.oPopup = null;
};

/**
 * Re-initializes the measurements, so all sizes are recalculated after a theme switch.
 * @private
 */
sap.ui.commons.MessageList.prototype.onThemeChanged = function () {
	this.iItemHeight = 0;
};

/**
 * This utility checks to see if a scrollbar has to be rendered.
 */
sap.ui.commons.MessageList.prototype.onAfterRendering = function () {
	var oList = this.getDomRef();
	var jList = jQuery(oList);

  // A scrollbar is only required over 7 items:
  var maxVisibleItems = this.getMaxListed();
  var len = this.aMessages.length;
  if (len <= maxVisibleItems) {
	// By default, css height was set to "20px" to make sure List would fit, for Popup to open.
	jList.height("auto");
	return;
  }

	// Calculating 1 item height:
	if (this.iItemHeight == 0) {
		var oItem = oList.firstChild;
		var jItem = jQuery(oItem);
		this.iItemHeight = jItem.height();
	}

  oList.style.overflowY = "scroll";
  oList.style.overflowX = "hidden";
	var desiredHeight = (maxVisibleItems * this.iItemHeight) + "px";
	jList.height(desiredHeight);
};

// #############################################################################
// Internal Utilities
// #############################################################################
/**
 * This utility opens the MessageList Popup.
 */
sap.ui.commons.MessageList.prototype.open = function() {
  var rtl = sap.ui.getCore().getConfiguration().getRTL();

	// Defining or fetching the Popup attributes:
  var animationDuration = 200;
  var msgListSnapPoint = rtl ? sap.ui.core.Popup.Dock.RightTop    : sap.ui.core.Popup.Dock.LeftTop;
  var anchorSnapPoint  = rtl ? sap.ui.core.Popup.Dock.RightBottom : sap.ui.core.Popup.Dock.LeftBottom;
  var relativeAnchorPosition = "0 0";
  var anchor = null;
  var anchorId = this.getAnchorId();
  if (anchorId) {
	anchor = jQuery.sap.domById(anchorId);
  }
  if (!anchor) {
	anchor = document.body;
  }
  // Invoking the MsgBar Popup open function(iDuration, my, at, of, offset):
  this.oPopup.open(animationDuration, msgListSnapPoint, anchorSnapPoint, anchor, relativeAnchorPosition);
};

/**
 * This utility closes the MessageList Popup.
 */
sap.ui.commons.MessageList.prototype.close = function() {
  // Invoking the MsgBar Popup close = function(iDuration):
  var animationDuration = 200;
  this.oPopup.close(animationDuration);
};

/**
 * This public API receives the list of Messages to be displayed,
 * and re-render this Control if visible.
 */
sap.ui.commons.MessageList.prototype.setMessages = function(aMessages) {
  // Storing the Messages:
  this.aMessages = aMessages;

  // Re-rendering this MessageList if visible:
  if (this.getVisible()) {
	sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);
  }

  return this;
};


// #############################################################################
// Overwriting auto-generated methods of MessageList.API.js
// #############################################################################

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * The default implementation of function "setVisible()" is overwritten 
 * in order to invoke the open() and close() of the MessageList Popup.
 * 
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MessageBar} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.MessageList.prototype.setVisible = function(bVisible) {
	this.setProperty("visible", bVisible);

  // Opening or closing the MessageBar, as requested:
  if (bVisible) {
	// Re-rendering, in case content is new.
	sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);
		this.open();
  } else {
	  this.close();
  }

	return this;
};
}; // end of sap/ui/commons/MessageList.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageToast') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MessageToast.
jQuery.sap.declare("sap.ui.commons.MessageToast");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new MessageToast.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAnchorId anchorId} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.MessageToast#event:next next} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Responsible for displaying the new incoming messages, one at the time, on top of the MessageBar.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.4.0. 
 * A new messaging concept will be created in future. Therefore this control might be removed in one of the next versions.
 * @name sap.ui.commons.MessageToast
 */
sap.ui.core.Control.extend("sap.ui.commons.MessageToast", { metadata : {

	// ---- object ----
	deprecated : true,
	publicMethods : [
		// methods
		"toast", "isIdle"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"anchorId" : {type : "string", group : "Misc", defaultValue : null}
	},
	events : {
		"next" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.MessageToast with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.MessageToast.extend
 * @function
 */

sap.ui.commons.MessageToast.M_EVENTS = {'next':'next'};


/**
 * Getter for property <code>anchorId</code>.
 * Id of the anchor on top of which the MessageToast is to render.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>anchorId</code>
 * @public
 * @name sap.ui.commons.MessageToast#getAnchorId
 * @function
 */

/**
 * Setter for property <code>anchorId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAnchorId  new value for property <code>anchorId</code>
 * @return {sap.ui.commons.MessageToast} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageToast#setAnchorId
 * @function
 */


/**
 * Fired once the "toast()" method is over, so that the MessageBar can toast() another message if needed. 
 *
 * @name sap.ui.commons.MessageToast#next
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'next' event of this <code>sap.ui.commons.MessageToast</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.MessageToast</code>.<br/> itself. 
 *  
 * Fired once the "toast()" method is over, so that the MessageBar can toast() another message if needed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.MessageToast</code>.<br/> itself.
 *
 * @return {sap.ui.commons.MessageToast} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageToast#attachNext
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'next' event of this <code>sap.ui.commons.MessageToast</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.MessageToast} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MessageToast#detachNext
 * @function
 */

/**
 * Fire event next to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.MessageToast} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.MessageToast#fireNext
 * @function
 */


/**
 * Triggers the toasting of a message, on top of the MessageBar.
 * If no message is supplied, displayes the "Multiple new messages..." message.
 *
 * @name sap.ui.commons.MessageToast.prototype.toast
 * @function
 * @param {sap.ui.commons.Message} 
 *         oMessage
 *         The Message to be toasted.
 * @param {string} 
 *         sAnchorId
 *         DOM ID of the anchor against which the Toast Arrow should align for a given Toast.

 * @type void
 * @public
 */


/**
 * Returns TRUE if no message is being toasted.
 *
 * @name sap.ui.commons.MessageToast.prototype.isIdle
 * @function

 * @type boolean
 * @public
 */


// Start of sap\ui\commons\MessageToast.js
jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained


sap.ui.commons.MessageToast.prototype.init = function(){
	// Local variables...
	this.oMessage    = null;
	this.sAnchorId   = "";
	this.bIdle       = true;
	this.sLeftOffset = "";

	// Popup(oContent, bModal, bShadow, bAutoClose) container initialization:
	// - oModal: "true/false" : For blocking the background window.
	// - bShadow: "false" as the MessageBar Popup is displayed without shadow in all themes.
	//            Shadow is added but not at the Popup level because in contains a down-arrow.
	//            Therefore the shadow is added to an inner container, excluding this down-arrow.
	this.oPopup   = new sap.ui.core.Popup(this, false, false, false);
	// Asking the Popup to fire our "next" event once a "toast()" is over.
	this.oPopup.attachClosed(this.next, this);
};

/**
 * Destroys this Control instance, called by Element#destroy()
 * @private
 */
sap.ui.commons.MessageToast.prototype.exit = function() {
  if (!this.bIdle) {
	this.close();
  }

	this.oPopup.destroy();
	this.oPopup = null;
};

/**
 * This utility makes sure that the Toast is pointing down towards
 * the right MessageBar Icon.
 * @private
 */
sap.ui.commons.MessageToast.prototype.onAfterRendering = function(){
  // The MessageToast and the MessageBar are right-aligned.
  // The MessageToast has a minWidth matching that of the MessageBar.
  // (That allows us to position the down-arrow without moving the MessageToast.)
  // The MessageToast Arrow aligns towards the proper MessageBar Icon.

  var rtl = sap.ui.getCore().getConfiguration().getRTL();

  // 1) Calculating the distance between the Icon and the right side of its MessageBar container:
  var jIcon = jQuery.sap.byId(this.sAnchorId); // Anchor against which our Arrow has to align
//if (!jIcon) return;
  var iconPosition  = jIcon.position();
  var jBar = jQuery.sap.byId(this.getAnchorId()); // Anchor against which our Toast has to align
//if (!jBar) return;
  var barWidth = jBar.outerWidth();
  if (iconPosition) {
	  var targetRightOffset = rtl ? iconPosition.left + jIcon.outerWidth()
								  : barWidth - iconPosition.left;


	  // 2) Calculating the default distance between the Arrow and the right side of our Toast:
		var jToast = this.$();  // = jQuery.sap.byId(this.getId());
	  var toastWidth = jToast.width();
	  var defaultArrowRightOffset = Math.max(toastWidth,barWidth);

	  // 3) Taking care of too-small a Toast:
	  var delta = barWidth - toastWidth;
		if (delta > 0) {
		// Making the Toast as wide as the Bar:
		jToast.css('minWidth', barWidth);
		}

	  // 4) Now, we need to move our Arrow right, by what is missing:
	  var moveRightOffset = rtl ? (defaultArrowRightOffset - targetRightOffset + 2) + "px"
								: (defaultArrowRightOffset - targetRightOffset - 2) + "px";
		if (defaultArrowRightOffset >= targetRightOffset) {
		var jArrow = jQuery.sap.byId(this.getId() + "Arrow");
		if (sap.ui.getCore().getConfiguration().getRTL()) {
			jArrow.css('marginRight', moveRightOffset); // Positive padding
		} else {
			jArrow.css('marginLeft', moveRightOffset); // Positive padding
		}
		// Our right-alignment can stay:
		this.sLeftOffset = "0";
		}
	}
};

// #############################################################################
// Internal Utilities
// #############################################################################
/**
 * Our popup-close callback function.
 * Registers the fact that a toast just completed, and fires our "next" event.
 * @private
 */
sap.ui.commons.MessageToast.prototype.next = function(){
	// Toast done (allows for smooth toasting):
  this.bIdle = true;
  this.fireNext()
}

/**
 * This utility opens the MessageToast Popup.
 * @private
 */;
sap.ui.commons.MessageToast.prototype.open = function(iDuration) {
	// For Multiple Messages, 1st we need to close the existing toast:
  if (!this.bIdle) {
	this.oPopup.close(0);
  }

	// Toast start (allows for no interruption):
  this.bIdle = false;

  var rtl = sap.ui.getCore().getConfiguration().getRTL();

	// Defining or fetching the Popup attributes:
  var popupSnapPoint  = rtl ? sap.ui.core.Popup.Dock.LeftBottom : sap.ui.core.Popup.Dock.RightBottom;
  var anchorSnapPoint = rtl ? sap.ui.core.Popup.Dock.LeftTop    : sap.ui.core.Popup.Dock.RightTop;
  var relativeAnchorPosition = this.sLeftOffset + " 5";
  var anchor = null;
  var anchorId = this.getAnchorId();
  if (anchorId) {
	anchor = jQuery.sap.domById(anchorId);
  }
  if (!anchor) {
	anchor = document.body;
  }
  // Invoking the MsgBar Popup open function(iDuration, my, at, of, offset):
  this.oPopup.open(iDuration, popupSnapPoint, anchorSnapPoint, anchor, relativeAnchorPosition);
};

/**
 * This utility closes the MessageToast Popup.
 * @private
 */
sap.ui.commons.MessageToast.prototype.close = function(iDuration) {
  // Invoking the Popup close = function(iDuration):
  this.oPopup.close(iDuration);
};

/**
 * This utility returns the class of the MessageToast container,
 * which changes according to the displayed message TYPE/PRIORITY
 * to allow for "semantic" rendering.  :-)
 * @private
 */
sap.ui.commons.MessageToast.prototype.getClasses = function() {
  // By default assuming the "Multiple new messages..." css:
  var css = "sapUiMsgToast";
  // Allow for specializing as per the message Type:
  if (this.oMessage && this.oMessage.getType()) {
	css += " sapUiMsgT" + this.oMessage.getType();
  }
  return css;
};

// #############################################################################
// Public APIs
// #############################################################################
/**
 * This public API receives the list of Messages to be displayed,
 * and re-render this Control if visible.
 * @public
 */
sap.ui.commons.MessageToast.prototype.toast = function(oMessage, sAnchorId) {
  // Storing the supplied data:
	this.oMessage = oMessage;
	this.sAnchorId = sAnchorId;
  // Render according to new message, and animate:
	sap.ui.getCore().getRenderManager().render(this, sap.ui.getCore().getStaticAreaRef(), true);
  this.open(750);
  this.close(2250); // <-- CAN BE COMMENTED OUT WHILE STYLING THE TOAST...

	return this;
};

/**
 * Returns the idle state of the control.
 * @public
 */
sap.ui.commons.MessageToast.prototype.isIdle = function() {
  return this.bIdle;
};
}; // end of sap/ui/commons/MessageToast.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Paginator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Paginator.
jQuery.sap.declare("sap.ui.commons.Paginator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Paginator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCurrentPage currentPage} : int (default: 1)</li>
 * <li>{@link #getNumberOfPages numberOfPages} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.Paginator#event:page page} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Provides navigation between pages within a list of numbered pages.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Paginator
 */
sap.ui.core.Control.extend("sap.ui.commons.Paginator", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"currentPage" : {type : "int", group : "Misc", defaultValue : 1},
		"numberOfPages" : {type : "int", group : "Misc", defaultValue : null}
	},
	events : {
		"page" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Paginator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Paginator.extend
 * @function
 */

sap.ui.commons.Paginator.M_EVENTS = {'page':'page'};


/**
 * Getter for property <code>currentPage</code>.
 * Represents the current page (first page has index 1, not 0, to match the visual number)
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>currentPage</code>
 * @public
 * @name sap.ui.commons.Paginator#getCurrentPage
 * @function
 */

/**
 * Setter for property <code>currentPage</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iCurrentPage  new value for property <code>currentPage</code>
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Paginator#setCurrentPage
 * @function
 */


/**
 * Getter for property <code>numberOfPages</code>.
 * Represents the overall number of pages that are embedded into the parent control
 *
 * Default value is <code></code>
 *
 * @return {int} the value of property <code>numberOfPages</code>
 * @public
 * @name sap.ui.commons.Paginator#getNumberOfPages
 * @function
 */

/**
 * Setter for property <code>numberOfPages</code>.
 *
 * Default value is <code></code> 
 *
 * @param {int} iNumberOfPages  new value for property <code>numberOfPages</code>
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Paginator#setNumberOfPages
 * @function
 */


/**
 * Event is fired when the user navigates to another page by selecting it directly, or by jumping forward/backward. 
 *
 * @name sap.ui.commons.Paginator#page
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.srcPage The page which is the current one before the page event is fired (and another page is displayed)
 * @param {int} oControlEvent.getParameters.targetPage The page that shall be displayed next after the page event is fired.
 * 
 *         The page number is 1-based: the first page has index 1, not 0, to match the number visible in the UI.
 * @param {sap.ui.commons.PaginatorEvent} oControlEvent.getParameters.type Provides the values 'First', 'Last', 'Next', 'Previous', 'Goto'. The event parameter informs the application
 *         how the user navigated to the new page: Whether the 'Next' button was used, or another button, or whether the page was directly
 *         selected
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'page' event of this <code>sap.ui.commons.Paginator</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Paginator</code>.<br/> itself. 
 *  
 * Event is fired when the user navigates to another page by selecting it directly, or by jumping forward/backward. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Paginator</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Paginator#attachPage
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'page' event of this <code>sap.ui.commons.Paginator</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Paginator#detachPage
 * @function
 */

/**
 * Fire event page to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'srcPage' of type <code>int</code> The page which is the current one before the page event is fired (and another page is displayed)</li>
 * <li>'targetPage' of type <code>int</code> The page that shall be displayed next after the page event is fired.

The page number is 1-based: the first page has index 1, not 0, to match the number visible in the UI.</li>
 * <li>'type' of type <code>sap.ui.commons.PaginatorEvent</code> Provides the values 'First', 'Last', 'Next', 'Previous', 'Goto'. The event parameter informs the application 
					how the user navigated to the new page: Whether the 'Next' button was used, or another button, or whether the page was directly 
					selected</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Paginator} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Paginator#firePage
 * @function
 */


// Start of sap\ui\commons\Paginator.js
/*
 * All animations of the Paginator control can be centrally switched
 * off by setting the <code>bShowAnimation</code> flag to <code>false</code>.
 * @private
 */

// Constants declaration
sap.ui.commons.Paginator.MAX_NUMBER_PAGES = 5;

/**
 * Init function
 * @private
 */
sap.ui.commons.Paginator.prototype.init = function(){
	//Animations are set to true by default, then on control initialization, check the number of pages
	this.bShowAnimation = true;
};


/**
 * When the user clicks on a page link, we navigae to that page, either with animation or with rerendering
 * @param {jQuery.Event} oEvent The current event
 * @private
 */
sap.ui.commons.Paginator.prototype.onclick = function(oEvent){
	if (oEvent && oEvent.target) {

		// Supress triggering beforeunload in IE
		oEvent.preventDefault();

		// go up one node if unnamed element is the source
		var target = oEvent.target;
		if (!target.id) {
			target = target.parentNode;
		}

		if (target.id && target.id != this.getId() + "-pages") {

			// Retrieve from where the event originated
			var aArray = target.id.split("--");

			// only do something if relevant item has been clicked
			if (aArray.length > 1) {
				var lastPart = aArray[aArray.length - 1];

				// What type of event will be sent
				var sEventType = null;

				// Buffer the current page as the sourcePage
				var iSrcPage = this.getCurrentPage();
				var iTargetPage = iSrcPage; // will be changed below

				// we have a number - a page has been clicked
				if (lastPart.match(/^\d+$/)) {
					sEventType = sap.ui.commons.PaginatorEvent.Goto;
					iTargetPage = parseInt(lastPart, 10);

				} else if (lastPart == "firstPageLink") {
					sEventType = sap.ui.commons.PaginatorEvent.First;
					iTargetPage = 1;

				} else if (lastPart == "backLink") {
					sEventType = sap.ui.commons.PaginatorEvent.Previous;
					iTargetPage = Math.max(iSrcPage-1, 1);

				} else if (lastPart == "forwardLink") {
					sEventType = sap.ui.commons.PaginatorEvent.Next;
					iTargetPage = Math.min(iSrcPage+1, this.getNumberOfPages());

				} else if (lastPart == "lastPageLink") {
					sEventType = sap.ui.commons.PaginatorEvent.Last;
					iTargetPage = this.getNumberOfPages();

				} else {
					// TODO: should not happen
				}

				if (iTargetPage != iSrcPage) {
					if (this.bShowAnimation){
						this.setCurrentPage(iTargetPage, true); // update current page without re-rendering...
						this.triggerPaginatorAnimation(); // ...and animate
					} else {
						this.setCurrentPage(iTargetPage); // includes re-rendering
					}

					// fire the "page" event
					this.firePage({srcPage:iSrcPage,targetPage:iTargetPage,type:sEventType});
				}
			}
		}
	}
};

sap.ui.commons.Paginator.prototype.setCurrentPage = function(iTargetPage, bSuppressRerendering) {
	this.setProperty("currentPage", iTargetPage, bSuppressRerendering);
	if (this.getDomRef()) {
		sap.ui.commons.PaginatorRenderer.updateBackAndForward(this);
	}
};

/**
 * When animation is set to true, this function will use jQuery to animate the paginator
 * as if the page numbers were sliding left/right.
 * @private
 */
sap.ui.commons.Paginator.prototype.triggerPaginatorAnimation = function() {
	var aIndicesToHide = [];
	var aIndicesToShow = [];
	var paginatorId = this.getId();
	var aChildren = jQuery.sap.byId(paginatorId + "-pages").children();

	// Get the ranges we need to display before and after the animation
	var oNewRange = this._calculatePagesRange();
	var oOldRange;
	if (this._oOldRange) {
		oOldRange = this._oOldRange;
	} else {
		oOldRange = {};
		var aParts = aChildren[0].id.split("--");
		oOldRange.firstPage = parseInt(aParts[aParts.length-1], 10);
		aParts = aChildren[aChildren.length-1].id.split("--");
		oOldRange.lastPage = parseInt(aParts[aParts.length-1], 10);
	}

	// the pages to be shown only after the animation are those to be rendered invisible, initially
	for (var i = oNewRange.firstPage; i <= oNewRange.lastPage; i++) {
		if (i < oOldRange.firstPage || i > oOldRange.lastPage) {
			aIndicesToShow.push(i);
		}
	}
	var oInvisibleRange = {
			firstPage:aIndicesToShow[0],
			lastPage:aIndicesToShow[aIndicesToShow.length-1]
	};

	// the pages to be shown initially, but NOT after the animation, are those to fade out
	for (var i = oOldRange.firstPage; i <= oOldRange.lastPage; i++) {
		if (i < oNewRange.firstPage || i > oNewRange.lastPage) {
			aIndicesToHide.push(i);
		}
	}

	// build the html for both the initially visible and still invisible pages
	var oldHtml = sap.ui.commons.PaginatorRenderer.getPagesHtml(this.getId(), oOldRange, this.getCurrentPage(), true);
	var newHtml = sap.ui.commons.PaginatorRenderer.getPagesHtml(this.getId(), oInvisibleRange, this.getCurrentPage(), false);
	if (oOldRange.firstPage < oInvisibleRange.firstPage) {
		newHtml = oldHtml + newHtml;
	} else {
		newHtml = newHtml + oldHtml;
	}
	
	
	// remember focus
	var focElem = document.activeElement;
	var focId = focElem ? focElem.id : undefined; // remember ID of focused element - it should still be focused after rendering
	
	this.getDomRef("pages").innerHTML = newHtml;
	
	// restore focus
	if (focId) {
		// Set focus on the previously focused element.
		// jQuery does not like document.activeElement, so we have to fetch it
		// from the DOM again.
		focElem = jQuery.sap.domById(focId);
	} else {
		// Set focus to active page link if no other element was active before
		focElem = jQuery.sap.domById("testPaginator-a--" + this.getCurrentPage());
	}

	jQuery.sap.focus(focElem);
	
	
	// Use jQuery hide/show to animate the paging
	var prefix = this.getId() + "-li--";

	this._oOldRange = oNewRange;
	for (var i=0 ; i<aIndicesToHide.length; i++) {
		var id = prefix + aIndicesToHide[i];
		jQuery.sap.byId(id).hide(400, function(){ // remove the DOM elements after the animation
			var id = this.id;
			var elem = jQuery.sap.domById(id);
			if (elem) {
				elem.parentNode.removeChild(elem);
			}
		});
	}

	for (var i=0 ; i<aIndicesToShow.length; i++) {
		jQuery.sap.byId(prefix + aIndicesToShow[i]).show(400);
	}
};


/**
 * Calculates what is the first page and last page to display (The current range).
 * Ensure that when we go over 5 pages, the current page will always be rendered centered
 * In this case, middle -2 and middle + 2 to get to full 5 pages range
 * @return {object} oPageRange object containing first page and last page to display
 * @private
 */
sap.ui.commons.Paginator.prototype._calculatePagesRange = function(){

	//Setting default values
	var iFirstPage = 1;
	var iLastPage = this.getNumberOfPages();
	var iCurrentPage = this.getCurrentPage();
	var iNbPages = this.getNumberOfPages();

	//From page 1 to page 5, we display 1 to 10 or less
	if ( iCurrentPage < 4 ){

		iFirstPage = 1;

		//Check if last page does not go over 5 --> iLastPage is already set with nbPages above
		if(iLastPage > sap.ui.commons.Paginator.MAX_NUMBER_PAGES){
			iLastPage = sap.ui.commons.Paginator.MAX_NUMBER_PAGES;
		}

	}
	//Now, the current page is more than 3, so we need to shift the range
	else{

		//Reached the last page
		if (iCurrentPage == iLastPage){
			//How many pages exist, if less than 5, simply substract the nb of pages from the last one (range is in this case 1 to max 5)
			if (iNbPages < 5){
				iFirstPage = 1;
			}
			//More than 5 pages, substract 4 pages to have the 5 pages range
			else{
				iFirstPage = iLastPage - 4;
			}
		}

		//Last page - current page is below 3, substract 4 to always see the right range for the last 2 pages
		else if ( iLastPage-iCurrentPage < 3 ){
			iFirstPage = iLastPage - 4;
		}

		//All other case, create the range from the current page +-2
		else{
			iFirstPage = iCurrentPage - 2;
			iLastPage = iCurrentPage + 2;
		}
	}

	return { firstPage : iFirstPage, lastPage : iLastPage };
};


/**
 * @param {jQuery.Event} oEvent the browser event
 * @private
 */
sap.ui.commons.Paginator.prototype.onkeydown = function(oEvent){

	//Get the event type and dispatch to the keyboard navigation manager
	var aEvents = oEvent.getPseudoTypes();

	//Tab
	if (jQuery.inArray("saptabnext", aEvents) != -1) {
		this.triggerTabbingNavigation(oEvent,false);
	}
	//Shift/tab
	else if (jQuery.inArray("saptabprevious", aEvents) != -1) {
		this.triggerTabbingNavigation(oEvent,true);
	}
	//Moves focus to the right (Right arrow key)
	else if (jQuery.inArray("sapincrease", aEvents) != -1 ){
		this.triggerInternalNavigation(oEvent,"next");
	}
	//Moves focus to the left (Left arrow key)
	else if (jQuery.inArray("sapdecrease", aEvents) != -1 ){
		this.triggerInternalNavigation(oEvent,"previous");
	}

};


/**
 * This function will navigate left and right in the paginator, skipping non tabbable elements
 * @param {jQuery.Event} oEvent the browser event
 * @param {string} sDirection Navigation left or right
 * @private
 */
sap.ui.commons.Paginator.prototype.triggerInternalNavigation = function(oEvent,sDirection){

	var aFocusableElements = jQuery(this.getDomRef()).find(":sapFocusable");
	var iCurrentIndex = jQuery(aFocusableElements).index(oEvent.target);

	//Right key pressed
	if (sDirection == "next"){
		var iNextIndex = iCurrentIndex + 1;
		if (jQuery(oEvent.target).hasClass("sapUiPagCurrentPage")){
			iNextIndex = iNextIndex + 1;
		}
		var oNextElement = aFocusableElements[iNextIndex];
		if (oNextElement){
			jQuery(oNextElement).focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}
	//Left key pressed
	else if(sDirection == "previous" && aFocusableElements[iCurrentIndex-1]){
		var iNextIndex = iCurrentIndex - 1;
		var oNextElement = aFocusableElements[iNextIndex];
		if (oNextElement && jQuery(oNextElement).hasClass("sapUiPagCurrentPage")){
			oNextElement = aFocusableElements[iNextIndex - 1];
		}
		if (oNextElement){
			jQuery(oNextElement).focus();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}

};

/**
 * This function will handle the TAB key in the paginator (simple group)
 * @param {jQuery.Event} oEvent the browser event
 * @param {boolean} shiftKeyPressed Tabbing or shift-Tabbing
 * @private
 */
sap.ui.commons.Paginator.prototype.triggerTabbingNavigation = function(oEvent,shiftKeyPressed){

	//Get all focusable elements
	var aFocusableElements = jQuery(this.getDomRef()).find(":sapFocusable");

	//Tabbing --> Focus the last active element then let the browser focus the next active element
	if (!shiftKeyPressed){
		jQuery(aFocusableElements[aFocusableElements.length-1]).focus();
	}
	//Shift/Tab keys pressed --> Focus the 2nd active element then let the browser focus the first active element
	else{

		//Which element triggered the event
		var iCurrentIndex = jQuery(aFocusableElements).index(oEvent.target);

		//If the focus is already on the first active element, let the browser move the focus
		if (iCurrentIndex != 0){
			jQuery(aFocusableElements[0]).focus();
		}
	}
};

sap.ui.commons.Paginator.prototype.getFocusInfo = function() {
	var sId = this.$().find(":focus").attr("id");
	if (sId) {
		return {customId: sId};
	} else {
		return sap.ui.core.Element.prototype.getFocusInfo.apply(this, arguments);
	}
};

sap.ui.commons.Paginator.prototype.applyFocusInfo = function(mFocusInfo) {
	if (mFocusInfo && mFocusInfo.customId) {
		this.$().find("#" + mFocusInfo.customId).focus();
	} else {
		sap.ui.core.Element.prototype.getFocusInfo.apply(this, arguments);
	}
	return this;
};



}; // end of sap/ui/commons/Paginator.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Panel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Panel.
jQuery.sap.declare("sap.ui.commons.Panel");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Panel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getScrollLeft scrollLeft} : int (default: 0)</li>
 * <li>{@link #getScrollTop scrollTop} : int (default: 0)</li>
 * <li>{@link #getApplyContentPadding applyContentPadding} : boolean (default: true)</li>
 * <li>{@link #getCollapsed collapsed} : boolean (default: false)</li>
 * <li>{@link #getAreaDesign areaDesign} : sap.ui.commons.enums.AreaDesign (default: sap.ui.commons.enums.AreaDesign.Fill)</li>
 * <li>{@link #getBorderDesign borderDesign} : sap.ui.commons.enums.BorderDesign (default: sap.ui.commons.enums.BorderDesign.Box)</li>
 * <li>{@link #getShowCollapseIcon showCollapseIcon} : boolean (default: true)</li>
 * <li>{@link #getText text} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getTitle title} : sap.ui.core.Title</li>
 * <li>{@link #getButtons buttons} : sap.ui.commons.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents a container with scroll functionality, the control can be used for text and controls. The Panel does not layout the embedded controls.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Panel
 */
sap.ui.core.Control.extend("sap.ui.commons.Panel", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setDimensions"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"scrollLeft" : {type : "int", group : "Behavior", defaultValue : 0},
		"scrollTop" : {type : "int", group : "Behavior", defaultValue : 0},
		"applyContentPadding" : {type : "boolean", group : "Appearance", defaultValue : true},
		"collapsed" : {type : "boolean", group : "Behavior", defaultValue : false},
		"areaDesign" : {type : "sap.ui.commons.enums.AreaDesign", group : "Appearance", defaultValue : sap.ui.commons.enums.AreaDesign.Fill},
		"borderDesign" : {type : "sap.ui.commons.enums.BorderDesign", group : "Appearance", defaultValue : sap.ui.commons.enums.BorderDesign.Box},
		"showCollapseIcon" : {type : "boolean", group : "Behavior", defaultValue : true},
		"text" : {type : "string", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"title" : {type : "sap.ui.core.Title", multiple : false}, 
    	"buttons" : {type : "sap.ui.commons.Button", multiple : true, singularName : "button"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Panel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Panel.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Panel width in CSS size
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Panel#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Per default, the height for the Panel is automatically adjusted to the content. Dimension allows to explicitly specify the height.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.Panel#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setHeight
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Represents the state of the of the Panel (enabled or disabled)
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.Panel#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible Panels are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.Panel#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setVisible
 * @function
 */


/**
 * Getter for property <code>scrollLeft</code>.
 * Specifies the scroll position from left to right. Value "0" means leftmost position.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>scrollLeft</code>
 * @public
 * @name sap.ui.commons.Panel#getScrollLeft
 * @function
 */

/**
 * Setter for property <code>scrollLeft</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iScrollLeft  new value for property <code>scrollLeft</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setScrollLeft
 * @function
 */


/**
 * Getter for property <code>scrollTop</code>.
 * Specifies the scroll position from top to bottom. Value "0" means topmost position.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>scrollTop</code>
 * @public
 * @name sap.ui.commons.Panel#getScrollTop
 * @function
 */

/**
 * Setter for property <code>scrollTop</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iScrollTop  new value for property <code>scrollTop</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setScrollTop
 * @function
 */


/**
 * Getter for property <code>applyContentPadding</code>.
 * Padding is theme-dependent.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>applyContentPadding</code>
 * @public
 * @name sap.ui.commons.Panel#getApplyContentPadding
 * @function
 */

/**
 * Setter for property <code>applyContentPadding</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bApplyContentPadding  new value for property <code>applyContentPadding</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setApplyContentPadding
 * @function
 */


/**
 * Getter for property <code>collapsed</code>.
 * A collapsed Panel consumes less space than a not collapsed one. When it is initially collapsed, the contents are not rendered.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>collapsed</code>
 * @public
 * @name sap.ui.commons.Panel#getCollapsed
 * @function
 */

/**
 * Setter for property <code>collapsed</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCollapsed  new value for property <code>collapsed</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setCollapsed
 * @function
 */


/**
 * Getter for property <code>areaDesign</code>.
 * Defines the background color. Note that color settings are theme-dependent.
 *
 * Default value is <code>Fill</code>
 *
 * @return {sap.ui.commons.enums.AreaDesign} the value of property <code>areaDesign</code>
 * @public
 * @name sap.ui.commons.Panel#getAreaDesign
 * @function
 */

/**
 * Setter for property <code>areaDesign</code>.
 *
 * Default value is <code>Fill</code> 
 *
 * @param {sap.ui.commons.enums.AreaDesign} oAreaDesign  new value for property <code>areaDesign</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setAreaDesign
 * @function
 */


/**
 * Getter for property <code>borderDesign</code>.
 * The Panel can have a box as border. Note that displaying borders is theme-dependent.
 *
 * Default value is <code>Box</code>
 *
 * @return {sap.ui.commons.enums.BorderDesign} the value of property <code>borderDesign</code>
 * @public
 * @name sap.ui.commons.Panel#getBorderDesign
 * @function
 */

/**
 * Setter for property <code>borderDesign</code>.
 *
 * Default value is <code>Box</code> 
 *
 * @param {sap.ui.commons.enums.BorderDesign} oBorderDesign  new value for property <code>borderDesign</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setBorderDesign
 * @function
 */


/**
 * Getter for property <code>showCollapseIcon</code>.
 * Specifies whether the Panel shall have an icon for collapsing/expanding, or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCollapseIcon</code>
 * @public
 * @name sap.ui.commons.Panel#getShowCollapseIcon
 * @function
 */

/**
 * Setter for property <code>showCollapseIcon</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCollapseIcon  new value for property <code>showCollapseIcon</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setShowCollapseIcon
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Can be used to create a simple title text for Panels that do not require an icon in the header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.Panel#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setText
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Aggregates the controls that are contained in the Panel. It is recommended to use a layout control as single direct child.
 * When the Panel dimensions are set, the child control may have width and height of 100%. When the dimensions are not set, the child defines
 * the Panel size.
 * 
 * <strong>Note</strong>: this is the default aggregation for Panel.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.Panel#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.commons.Panel#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Panel#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Panel#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Aggregates the title element of the Panel. For text titles only, you alternatively could use setText() which also creates a title in the background.
 * 
 * @return {sap.ui.core.Title}
 * @public
 * @name sap.ui.commons.Panel#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.ui.core.Title} oTitle
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * The buttons that shall be displayed in the Panel header
 * 
 * @return {sap.ui.commons.Button[]}
 * @public
 * @name sap.ui.commons.Panel#getButtons
 * @function
 */


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.commons.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#insertButton
 * @function
 */

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.commons.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#addButton
 * @function
 */

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.ui.commons.Button} vButton the button to remove or its index or id
 * @return {sap.ui.commons.Button} the removed button or null
 * @public
 * @name sap.ui.commons.Panel#removeButton
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Button[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Panel#removeAllButtons
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Panel#indexOfButton
 * @function
 */
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Panel#destroyButtons
 * @function
 */


/**
 * Property for width and height settings for the Panel
 *
 * @name sap.ui.commons.Panel.prototype.setDimensions
 * @function
 * @param {sap.ui.core.CSSSize} 
 *         sWidth
 * 
 *         Panel width as CSS size
 * 
 * @param {sap.ui.core.CSSSize} 
 *         sHeight
 * 
 *         Panel height as CSS size
 * 

 * @type sap.ui.commons.Panel
 * @public
 */


// Start of sap\ui\commons\Panel.js
/**
 * Initialization
 * @private
 */
sap.ui.commons.Panel.prototype.init = function() {
	this._oScrollDomRef = null;       // points to the content area
	this._iMaxTbBtnWidth = -1;        // the maximum width of all toolbar buttons (when there are any, else -1)
	this._iTbMarginsAndBorders = 0;
	this._iMinTitleWidth = 30;        // the minimum width of the title span
	this._iOptTitleWidth = 30;
	this._iTitleMargin = 0;
	this._bFocusCollapseIcon = false; // indicates whether the collapse icon should be focused after the next rendering
	this._resizeDelayTimer = null;    // the timer for delayed reaction to resize events in browsers not supporting FlexBox layout
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
};

sap.ui.commons.Panel.prototype.exit = function() {
	this._rb = undefined;
};

/**
 * Called after the theme has been switched: adjust sizes
 * @private
 */
sap.ui.commons.Panel.prototype.onThemeChanged = function () {
	if (this.getDomRef() && this._oTitleDomRef) { // only if already rendered and if a real Panel (no subclass like Tab)

		// reset size settings done for previous theme, so elements take their optimum space
		this.getDomRef().style.minWidth = "auto";
		if (this._oToolbarDomRef) {
			this._oToolbarDomRef.style.width = "auto";
		}
		this._oTitleDomRef.style.width = "auto";

		// adapt sizes
		this._initializeSizes(); // TODO: delay this for Safari?
		if (!jQuery.support.flexBoxLayout ||
				(sap.ui.commons.Panel._isSizeSet(this.getHeight()) && (this._hasIcon() || (this.getButtons().length > 0)))) {
			this._handleResizeNow();
		}
	}
};


/**
 * Event unbinding
 * @private
 */
sap.ui.commons.Panel.prototype.onBeforeRendering = function() {
	// Deregister resize event before re-rendering
	if(this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};


/**
 * Adapts size settings of the rendered HTML
 * @private
 */
sap.ui.commons.Panel.prototype.onAfterRendering = function () {
	var id = this.getId();
	this._oScrollDomRef = jQuery.sap.domById(id + "-cont");
	if (!this._oScrollDomRef) {
		return;
	} // BugFix for TwoGo where the DomRefs were not there after rendering
	this._oHeaderDomRef = jQuery.sap.domById(id + "-hdr");
	this._oTitleDomRef = jQuery.sap.domById(id + "-title");
	this._oToolbarDomRef = jQuery.sap.domById(id + "-tb");

	// restore focus if required
	if (this._bFocusCollapseIcon) {
		this._bFocusCollapseIcon = false;
		var $collArrow = jQuery.sap.byId(id + "-collArrow");
		if($collArrow.is(":visible") && ($collArrow.css("visibility") == "visible" || $collArrow.css("visibility") == "inherit")) {
			$collArrow.focus();
		} else {
			var $collIco = jQuery.sap.byId(id + "-collIco");
			if ($collIco.is(":visible") && ($collIco.css("visibility") == "visible" || $collIco.css("visibility") == "inherit")) {
				$collIco.focus();
			}
		}
	}

	this._initializeSizes(); // TODO: delay this for Safari?

	// in browsers not supporting the FlexBoxLayout we need to listen to resizing
	if (!jQuery.support.flexBoxLayout ||
			(sap.ui.commons.Panel._isSizeSet(this.getHeight()) && (this._hasIcon() || (this.getButtons().length > 0)))) {
		this._handleResizeNow();
		this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this._handleResizeSoon, this));
	}
};


/**
 *
 * @protected
 */
sap.ui.commons.Panel.prototype.getFocusInfo = function () {
	var collId = null;
	var id = this.getId();

	// if collapse icon needs to be focused, find out which one - if any - is currently visible
	if (this._bFocusCollapseIcon) {
		var $collArrow = jQuery.sap.byId(id + "-collArrow");
		if($collArrow.is(":visible") && ($collArrow.css("visibility") == "visible" || $collArrow.css("visibility") == "inherit")) {
			collId = $collArrow[0].id;
		} else {
			var $collIco = jQuery.sap.byId(id + "-collIco");
			if ($collIco.is(":visible") && ($collIco.css("visibility") == "visible" || $collIco.css("visibility") == "inherit")) {
				collId = $collIco[0].id;
			}
		}

	}

	// if a collapse icon is visible and to be focused, return its ID, otherwise just the control ID
	return {id:(collId ? collId : id)};
};


/**
 *
 * @private
 */
sap.ui.commons.Panel.prototype.applyFocusInfo = function (oFocusInfo) {
	var $DomRef;
	if (oFocusInfo && oFocusInfo.id && ($DomRef = jQuery.sap.byId(oFocusInfo.id)) && ($DomRef.length > 0)) {
		$DomRef.focus();
	} else {
		this.focus();
	}
	return this;
};


/**
 * Measures and calculates/sets sizes as soon as the CSS has been applied after rendering or a theme switch
 * @private
 */
sap.ui.commons.Panel.prototype._initializeSizes = function() {
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();

	// maximum width of a toolbar item -> min toolbar width
	var aButtons = this.getButtons();
	if (aButtons && aButtons.length > 0) {
		var maxWidth = 0;
		jQuery(this._oToolbarDomRef).children().each(function(){
			var width = this.offsetWidth;
			if (width > maxWidth) {
				maxWidth = width;
			}
		});
		this._iMaxTbBtnWidth = maxWidth;

		if (this._oToolbarDomRef) {
			this._oToolbarDomRef.style.minWidth = maxWidth + "px";

			// calculate the toolbar borders and margins
			var $tb = jQuery(this._oToolbarDomRef);
			this._iTbMarginsAndBorders = $tb.outerWidth(true) - $tb.width();
		}
	}

	// calculate available space between left- and right-aligned items with static width
	var beginBorderOfTitle = this._oTitleDomRef.offsetLeft; // displacement of the beginning of the title from the Panel border
	var totalWidth = this.getDomRef().offsetWidth;
	if (bRtl) {
		beginBorderOfTitle = totalWidth - (beginBorderOfTitle + this._oTitleDomRef.offsetWidth); // RTL case
	}
	var $title = jQuery(this._oTitleDomRef);
	this._iOptTitleWidth = $title.width() + 1 /*+1 to avoid subpixel issues*/;
	this._iTitleMargin = $title.outerWidth(true) - $title.outerWidth();
	var beginBorderOfRightItems = 10000;
	jQuery(this._oHeaderDomRef).children(".sapUiPanelHdrRightItem").each(function(){
		var begin = this.offsetLeft;
		if (bRtl) {
			begin = totalWidth - (begin + this.offsetWidth); // RTL case
		}
		if ((begin < beginBorderOfRightItems) && (begin > 0)) {
			beginBorderOfRightItems = begin;
		}
	});


	// set minimum Panel width as sum of minimum sizes
	var minWidth = beginBorderOfTitle;
	minWidth += this._iMinTitleWidth; // 30px is ok even if there is no title
	minWidth += this._iMaxTbBtnWidth + 1; // -1 if there is no toolbar... 1px more or less is no problem here
	minWidth += (beginBorderOfRightItems == 10000) ? 10 : (totalWidth - beginBorderOfRightItems); // use 10 as hardcoded right border
	this.getDomRef().style.minWidth = minWidth + 10 + "px";


	// restore scroll positions
	if (this._oScrollDomRef) {
		var scrollTop = this.getProperty("scrollTop");
		if (scrollTop > 0) {
			this._oScrollDomRef.scrollTop = scrollTop;
		}
		var scrollLeft = this.getProperty("scrollLeft");
		if (scrollLeft > 0) {
			this._oScrollDomRef.scrollLeft = scrollLeft;
		}

	}

};


/**
 * Adapts the absolute position of the content when height is set.
 * @private
 */
sap.ui.commons.Panel.prototype._fixContentHeight = function() {
	//if height is set and an icon or at least one toolbar button is present (which *could* inflate the header height), the cont top must be set to the header height
	if (sap.ui.commons.Panel._isSizeSet(this.getHeight()) && (this._hasIcon() || (this.getButtons().length > 0))) { // TODO: what if the icon is not yet loaded?
		this._iContTop = this._oHeaderDomRef.offsetHeight;
		if (this._oScrollDomRef) {
			this._oScrollDomRef.style.top = this._iContTop + "px";
		}
	}
};


/**
 * Called in browsers not supporting the FlexBox layout whenever the Panel size is changing. This method registers a delayed reaction to the size changes.
 * When there are further size changes during this delay, the delay starts from zero. So the Panel is not adapted during the resize, but only after resizing has
 * completed. This should fix most of the related performance issues.
 * @private
 */
sap.ui.commons.Panel.prototype._handleResizeSoon = function() {
	if (this._resizeDelayTimer) {
		jQuery.sap.clearDelayedCall(this._resizeDelayTimer);
	}

	this._resizeDelayTimer = jQuery.sap.delayedCall(200, this, function() {
		this._handleResizeNow();
		this._resizeDelayTimer = null;
	});
};


/**
 * Called in browsers not supporting the FlexBox layout whenever the Panel size has changed and the header layout finally needs to be adapted.
 * Basically this method imitates that layout's behavior.
 * @private
 */
sap.ui.commons.Panel.prototype._handleResizeNow = function() {
	// in IE8 (maybe also IE9) the sizes of the flexible items (title and toolbar) need to be adjusted
	// whenever the Panel width changes
	if (!jQuery.support.flexBoxLayout && this.getDomRef()) {
		var bRtl = sap.ui.getCore().getConfiguration().getRTL();

		/* Algorithm:
		 * 1. calculate space available for the two elements
		 * 2. if no toolbar is present, apply this width to the title, else:
		 * 3.   reduce toolbar width until maxBtnSize is reached, then reduce title width until minimum (do not make either any smaller; the Panel has a min-width anyway)
		 * 4.   apply these widths
		 */

		// begin of Panel to begin of Title
		var beginBorderOfTitle = this._oTitleDomRef.offsetLeft; // displacement of the beginning of the title from the Panel border
		var totalWidth = this.getDomRef().offsetWidth;
		if (bRtl) {
			beginBorderOfTitle = totalWidth - (beginBorderOfTitle + this._oTitleDomRef.offsetWidth); // RTL case
		}

		// begin of Panel to begin if "RightItems"
		var beginBorderOfRightItems = 10000;
		jQuery(this._oHeaderDomRef).children(".sapUiPanelHdrRightItem").each(function(){
			var begin = this.offsetLeft;
			if (bRtl) {
				begin = totalWidth - (begin + this.offsetWidth); // RTL case
			}
			if ((begin < beginBorderOfRightItems) && (begin > 0)) {
				beginBorderOfRightItems = begin;
			}
		});

		var availableSpace = (beginBorderOfRightItems == 10000) ?
					this.$().width() - beginBorderOfTitle - 20
				: beginBorderOfRightItems - beginBorderOfTitle - 10;

		var aButtons = this.getButtons();
		if (aButtons && aButtons.length > 0) { // there are title and toolbar; calculate and set both sizes
			// differentiate between two cases: 1. there is enough space for title plus minimum toolbar width
			//                                  2. both need to be reduced in size
			if ((availableSpace - this._iOptTitleWidth - this._iTitleMargin) > (this._iMaxTbBtnWidth - this._iTbMarginsAndBorders)) {
				// if available width minus optimum title width is still more than the minimum toolbar width,
				// give all remaining width to the toolbar
				this._oToolbarDomRef.style.width = (availableSpace - this._iOptTitleWidth - this._iTitleMargin - this._iTbMarginsAndBorders) + "px";
				this._oTitleDomRef.style.width = this._iOptTitleWidth + "px";
			} else {
				// both are affected => set toolbar to minimum and reduce title width, but not smaller than minimum
				this._oToolbarDomRef.style.width = this._iMaxTbBtnWidth + "px";
				this._oTitleDomRef.style.width = Math.max((availableSpace - this._iMaxTbBtnWidth - this._iTbMarginsAndBorders), this._iMinTitleWidth) + "px";
			}

		} else {
			// no toolbar
			this._oTitleDomRef.style.width = Math.max(availableSpace, this._iMinTitleWidth) + "px";
		}
	}

	// in case the resizing caused button wrapping, adapt content height -- FOR ALL BROWSERS!
	this._fixContentHeight();
};


/**
 * Helper method to find out whether the Panel has an icon.
 * @private
 */
sap.ui.commons.Panel.prototype._hasIcon = function() {
	return (this.getTitle() && this.getTitle().getIcon());
};



/**
 * Property setter for the "enabled" state
 *
 * @param bEnabled whether the Panel should be enabled or not
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setEnabled = function(bEnabled) {
	this.setProperty("enabled", bEnabled, true); // no re-rendering!
	// if already rendered, adapt rendered control without complete re-rendering
	jQuery(this.getDomRef()).toggleClass("sapUiPanelDis", !bEnabled);
	return this;
};


/**
 * Property setter for the padding
 *
 * @param bPadding whether the Panel should have padding
 * @returns {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setApplyContentPadding = function(bPadding) {
	this.setProperty("applyContentPadding", bPadding, true); // no re-rendering!
	jQuery(this.getDomRef()).toggleClass("sapUiPanelWithPadding", bPadding);
	return this;
};


/**
 * Property setter for the "collapsed" state
 *
 * @param bCollapsed whether the Panel should be collapsed or not
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setCollapsed = function(bCollapsed) {
	this.setProperty("collapsed", bCollapsed, true); // no re-rendering!
	this._setCollapsedState(bCollapsed); // adapt rendered control without complete re-rendering
	return this;
};


/**
 * Internal method for applying a (non-)"collapsed" state to the rendered HTML
 *
 * @param bCollapsed whether the Panel should be collapsed or not
 * @private
 */
sap.ui.commons.Panel.prototype._setCollapsedState = function(bCollapsed) {
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		// after Panel has been rendered
		var accessibility = sap.ui.getCore().getConfiguration().getAccessibility();
		if (bCollapsed) {
			// collapsing
			if (!this.getWidth()) {
				oDomRef.style.width = this.getDomRef().offsetWidth + "px"; // maintain the current width
			}
			jQuery(oDomRef).addClass("sapUiPanelColl");
			if (accessibility) {
				oDomRef.setAttribute("aria-expanded", "false");
			}
			if (this.getHeight()) {
				// if there is a height set, the Panel would still consume the respective space, so remove the height setting
				oDomRef.style.height = "auto";
			}
			// update tooltips
			var sExpandTooltip = this._rb.getText("PANEL_EXPAND");
			this.$("collArrow").attr("title", sExpandTooltip);
			this.$("collIco").attr("title", sExpandTooltip);

		} else {
			// expanding
			if (!this.getDomRef("cont")) {
				// content has not been rendered yet, so render it now
				this._bFocusCollapseIcon = true; // restore focus to collapse icon/button after rendering
				this.rerender();
			} else {
				// content exists already, just make it visible again
				jQuery(oDomRef).removeClass("sapUiPanelColl");
				if (accessibility) {
					oDomRef.setAttribute("aria-expanded", "true");
				}
				if (!this.getWidth()) {
					oDomRef.style.width = "auto"; // restore the automatic width behavior
				}
				if (this.getHeight()) {
					oDomRef.style.height = this.getHeight(); // restore the set height
				}
				// update tooltips
				var sCollapseTooltip = this._rb.getText("PANEL_COLLAPSE");
				this.$("collArrow").attr("title", sCollapseTooltip);
				this.$("collIco").attr("title", sCollapseTooltip);
			}
		}
	}
};


/**
 * Static method that finds out whether the given CSS size is actually set.
 * Returns "true" for absolute and relative sizes, returns "false" if "null", "inherit" or "auto" is given.
 *
 * @static
 * @param sCssSize a css size string (must be a valid CSS size, or null)
 * @private
 */
sap.ui.commons.Panel._isSizeSet = function(sCssSize) {
	return (sCssSize && !(sCssSize =="auto") && !(sCssSize == "inherit"));
};

// API method
sap.ui.commons.Panel.prototype.setTitle = function(oTitle) {
	var oOldTitle = this.getTitle();
	this.setAggregation("title", oTitle);
	// check whether the title has been created on the fly. Then we are owner of it and should destroy it
	// the ID check should be sufficient as long as the naming conventions are obeyed
	if ( oOldTitle && oOldTitle !== oTitle && oOldTitle.getId() === this.getId() + "-tit" ) {
		oOldTitle.destroy();
	}
	return this;
};

// API method
sap.ui.commons.Panel.prototype.setText = function(sText) {
	if (!this.getTitle()) {
		this.setTitle(new sap.ui.core.Title(this.getId() + "-tit",{text:sText}));
	} else {
		this.getTitle().setText(sText);
	}
	return this;
};

// API method
sap.ui.commons.Panel.prototype.getText = function () {
	if (!this.getTitle()) {
		return "";
	} else {
		return this.getTitle().getText();
	}
};


/**
 * Returns the scroll position of the panel in pixels from the left. Returns 0 if not rendered yet.
 * Also internally updates the control property.
 *
 * @return the scroll position
 * @public
 */
sap.ui.commons.Panel.prototype.getScrollLeft = function () {
	var scrollLeft = 0;
	if (this._oScrollDomRef) {
		if (sap.ui.getCore().getConfiguration().getRTL()) {
			scrollLeft = jQuery(this._oScrollDomRef).scrollLeftRTL();
		} else {
			scrollLeft = jQuery(this._oScrollDomRef).scrollLeft();
		}
		jQuery.sap.assert(typeof scrollLeft == "number", "scrollLeft read from DOM should be a number");
		this.setProperty("scrollLeft", scrollLeft, true);
	}

	return scrollLeft;
};


/**
 * Sets the scroll position of the panel in pixels from the left.
 *
 * @param {int} iPosition the position to scroll to
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setScrollLeft = function (iPosition) {
	this.setProperty("scrollLeft", iPosition, true);
	if (this._oScrollDomRef) {
		if (sap.ui.getCore().getConfiguration().getRTL()) {
			jQuery(this._oScrollDomRef).scrollLeftRTL(iPosition);
		} else {
			jQuery(this._oScrollDomRef).scrollLeft(iPosition);
		}
	}
	return this;
};


/**
 * Returns the scroll position of the panel in pixels from the top. Returns 0 if not rendered yet.
 * Also internally updates the control property.
 *
 * @return the scroll position
 * @public
 */
sap.ui.commons.Panel.prototype.getScrollTop = function () {
	var scrollTop = 0;
	if (this._oScrollDomRef) {
		scrollTop = this._oScrollDomRef.scrollTop;
		this.setProperty("scrollTop", scrollTop, true);
	}

	return scrollTop;
};


/**
 * Sets the scrolls position of the panel in pixels from the top.
 *
 * @param {int} iPosition the position to scroll to
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setScrollTop = function (iPosition) {
	this.setProperty("scrollTop", iPosition, true);
	if (this._oScrollDomRef) {
		this._oScrollDomRef.scrollTop = iPosition;
	}
	return this;
};


/**
 * Sets the dimensions of the panel.
 *
 * @param {string} sWidth the width of the panel as CSS size
 * @param {string} sHeight the height of the panel as CSS size
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setDimensions = function (sWidth, sHeight) {
	jQuery.sap.assert(typeof sWidth == "string" && typeof sHeight == "string", "sWidth and sHeight must be strings");
	this.setWidth(sWidth); // does not rerender
	this.setHeight(sHeight);
	return this;
};


/**
 * Sets the width of the panel.
 *
 * @param {string} sWidth the width of the panel as CSS size
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setWidth = function (sWidth) {
	this.setProperty("width", sWidth, true); // don't rerender
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.width = sWidth;
	}
	return this;
};


/**
 * Sets the height of the panel.
 *
 * @param {string} sHeight the height of the panel as CSS size
 * @return {sap.ui.commons.Panel} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Panel.prototype.setHeight = function (sHeight) {
	this.setProperty("height", sHeight, true); // don't rerender
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		oDomRef.style.height = sHeight;
	}
	return this;
};



/*   Event Handling   */

/**
 * Handles mouse clicks
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Panel.prototype.onclick = function(oEvent) {
	this._handleTrigger(oEvent);
};

/**
 * Handles "space" presses
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Panel.prototype.onsapspace = function(oEvent) {
	this._handleTrigger(oEvent);
};

/**
 * Handles any "triggering" actions like click and space
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Panel.prototype._handleTrigger = function(oEvent) {
	var id = this.getId();
	// minimize button toggled
	if((oEvent.target.id === id + "-collArrow") ||
			(oEvent.target.id === id + "-collIco") ||
			// toggle triggered via space key
			(oEvent.target.id === id && oEvent.type === "sapspace" && this.getShowCollapseIcon())) {
		this.setCollapsed(!this.getProperty("collapsed"));
		oEvent.preventDefault();
		oEvent.stopPropagation();
		this.fireEvent("collapsedToggled"); //private event used in ResponsiveLayout
	}
};

}; // end of sap/ui/commons/Panel.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.PasswordFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

jQuery.sap.declare("sap.ui.commons.PasswordFieldRenderer");


/**
 * @class PasswordFieldRenderer.
 * @static
 */
sap.ui.commons.PasswordFieldRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oPasswordField an object representation of the control that should be rendered
 */
sap.ui.commons.PasswordFieldRenderer.renderInnerAttributes = function(rm, oPasswordField) {

	if (sap.ui.Device.support.input.placeholder || oPasswordField.getValue() || !oPasswordField.getPlaceholder()) {
		// if browser not supports placeholder on input tag, set the password type only if placeholder is not displayed
		rm.writeAttribute('type', 'password');
	}

};


sap.ui.commons.PasswordFieldRenderer.renderTextFieldEnabled = function(rm, oPasswordField) {
	if (!oPasswordField.getEnabled() && !oPasswordField.getEditable()) {
		// "disabled" may not be rendered because the Jaws screenreader then reads the password
		// use "readonly" instead
		// but write it only if it has not yet been written by the TextFieldRenderer
		rm.writeAttribute('readonly', 'readonly');
		rm.writeAttribute('tabindex', '-1'); // apart from that, act as if disabled, e.g. no tab-stop
	} else {
		rm.writeAttribute('tabindex', '0'); // editable and readonly have a tab-stop
	}
};


// this method uses "readonly" instead of "disabled" because with "disabled" the Jaws screenreader reads the password
sap.ui.commons.PasswordFieldRenderer.setEnabled = function(oPasswordField, bEnabled) {
	var oTfRef = oPasswordField.getDomRef();

	if (bEnabled) {
		if (oPasswordField.getEditable()) {
			jQuery(oTfRef).removeClass('sapUiTfDsbl').addClass('sapUiTfStd');
			jQuery(oTfRef).removeAttr('readonly').attr('tabindex', '0');
		} else {
			jQuery(oTfRef).removeClass('sapUiTfDsbl').addClass('sapUiTfRo');
			jQuery(oTfRef).attr('tabindex', '0');
		}
	} else {
		if (oPasswordField.getEditable()) {
			jQuery(oTfRef).removeClass('sapUiTfStd').addClass('sapUiTfDsbl');
			jQuery(oTfRef).attr('readonly', 'readonly').attr('tabindex', '-1');
		} else {
			jQuery(oTfRef).removeClass('sapUiTfRo').addClass('sapUiTfDsbl');
			jQuery(oTfRef).attr( 'tabindex', '-1');
		}
	}
};


}; // end of sap/ui/commons/PasswordFieldRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ProgressIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ProgressIndicator.
jQuery.sap.declare("sap.ui.commons.ProgressIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ProgressIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getBarColor barColor} : sap.ui.core.BarColor (default: sap.ui.core.BarColor.NEUTRAL)</li>
 * <li>{@link #getDisplayValue displayValue} : string (default: '0%')</li>
 * <li>{@link #getPercentValue percentValue} : int (default: 0)</li>
 * <li>{@link #getShowValue showValue} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Shows the progress of a process in a graphical way. The indicator can be displayed with or without numerical values.
 * The filling can be displayed in color only, or additionally with the percentage rate. The indicator status can be interactive.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ProgressIndicator
 */
sap.ui.core.Control.extend("sap.ui.commons.ProgressIndicator", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"barColor" : {type : "sap.ui.core.BarColor", group : "Appearance", defaultValue : sap.ui.core.BarColor.NEUTRAL},
		"displayValue" : {type : "string", group : "Appearance", defaultValue : '0%'},
		"percentValue" : {type : "int", group : "Data", defaultValue : 0},
		"showValue" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ProgressIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ProgressIndicator.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.ProgressIndicator#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ProgressIndicator#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.ProgressIndicator#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ProgressIndicator#setEnabled
 * @function
 */


/**
 * Getter for property <code>barColor</code>.
 * The color of the bar. Enumeration sap.ui.core.BarColor provides CRITICAL (yellow), NEGATIVE (red), POSITIVE (green), NEUTRAL (blue) (default value).
 *
 * Default value is <code>NEUTRAL</code>
 *
 * @return {sap.ui.core.BarColor} the value of property <code>barColor</code>
 * @public
 * @name sap.ui.commons.ProgressIndicator#getBarColor
 * @function
 */

/**
 * Setter for property <code>barColor</code>.
 *
 * Default value is <code>NEUTRAL</code> 
 *
 * @param {sap.ui.core.BarColor} oBarColor  new value for property <code>barColor</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ProgressIndicator#setBarColor
 * @function
 */


/**
 * Getter for property <code>displayValue</code>.
 * The text value to be displayed in the bar.
 *
 * Default value is <code>0%</code>
 *
 * @return {string} the value of property <code>displayValue</code>
 * @public
 * @name sap.ui.commons.ProgressIndicator#getDisplayValue
 * @function
 */

/**
 * Setter for property <code>displayValue</code>.
 *
 * Default value is <code>0%</code> 
 *
 * @param {string} sDisplayValue  new value for property <code>displayValue</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ProgressIndicator#setDisplayValue
 * @function
 */


/**
 * Getter for property <code>percentValue</code>.
 * The numerical value for the displayed length of the progress bar.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>percentValue</code>
 * @public
 * @name sap.ui.commons.ProgressIndicator#getPercentValue
 * @function
 */

/**
 * Setter for property <code>percentValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iPercentValue  new value for property <code>percentValue</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ProgressIndicator#setPercentValue
 * @function
 */


/**
 * Getter for property <code>showValue</code>.
 * Specifies whether the current value shall be rendered inside the bar.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showValue</code>
 * @public
 * @name sap.ui.commons.ProgressIndicator#getShowValue
 * @function
 */

/**
 * Setter for property <code>showValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowValue  new value for property <code>showValue</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ProgressIndicator#setShowValue
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the control.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.ProgressIndicator#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ProgressIndicator#setWidth
 * @function
 */


// Start of sap\ui\commons\ProgressIndicator.js
/**
 * Function is called when ProgressIndicator is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.ProgressIndicator.prototype.onclick = function(oEvent) {

	// Set focus to whole ProgressIndicator control
	this.focus();

};

sap.ui.commons.ProgressIndicator.prototype.setEndBar = function () {

	var widthBar = this.getPercentValue();
	var widthBorder;
	var sBarColor = this.getBarColor();
	var time;

	this.oBar  = this.getDomRef("bar");
	this.oEnd  = this.getDomRef("end");
	this.oBox  = this.getDomRef("box");

	jQuery(this.oEnd).removeClass('sapUiProgIndEndHidden');

	switch (sBarColor) {
		case "POSITIVE":
			jQuery(this.oEnd).addClass('sapUiProgIndPosEnd');
			break;
		case "NEGATIVE":
			jQuery(this.oEnd).addClass('sapUiProgIndNegEnd');
			break;
		case "CRITICAL":
			jQuery(this.oEnd).addClass('sapUiProgIndCritEnd');
			break;
		case "NEUTRAL":
			jQuery(this.oEnd).addClass('sapUiProgIndEnd');
			break;
		default:
			jQuery(this.oEnd).addClass('sapUiProgIndEnd');
			break;
	}

	if (widthBar > 100) {
		widthBorder = (10000 / widthBar) + '%';
	}
	else {
		widthBorder = '100%';
	}

	if (widthBar > 100) {
		time = (widthBar - 100) * 20;
	}
	else {
		time = (100 - widthBar) * 20;
	}

	jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');

	if(this.bRtl){
		jQuery(this.oEnd).animate({right: widthBorder}, time, 'linear');
	}
	else {
		jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
	}

	jQuery(this.oBar).animate({width: widthBar + '%'}, time, 'linear');
	if(!this.oThis){
		this.oThis = this.$();
	}
	this.oThis.attr('aria-valuenow', widthBar + '%');

};

sap.ui.commons.ProgressIndicator.prototype.setEndBarGoesBack = function (iPercentValue) {

	var widthBar = this.getPercentValue();
	var widthBorder;
	var sBarColor = this.getBarColor();
	var time;

	this.oBar  = this.getDomRef("bar");
	this.oEnd  = this.getDomRef("end");
	this.oBox  = this.getDomRef("box");

	if (iPercentValue > 100) {
		widthBorder = (10000 / iPercentValue) + '%';
	}
	else {
		widthBorder = '100%';
	}

	switch (sBarColor) {
		case "POSITIVE":
			jQuery(this.oEnd).removeClass('sapUiProgIndPosEnd');
			break;
		case "NEGATIVE":
			jQuery(this.oEnd).removeClass('sapUiProgIndNegEnd');
			break;
		case "CRITICAL":
			jQuery(this.oEnd).removeClass('sapUiProgIndCritEnd');
			break;
		case "NEUTRAL":
			jQuery(this.oEnd).removeClass('sapUiProgIndEnd');
			break;
		default:
			jQuery(this.oEnd).removeClass('sapUiProgIndEnd');
			break;
	}

	jQuery(this.oEnd).addClass('sapUiProgIndEndHidden');

	if (widthBar > 100) {
		time = (widthBar - 100) * 20;
	}
	else {
		time = (100 - widthBar) * 20;
	}

	jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');

	if(this.bRtl){
		jQuery(this.oEnd).animate({right: widthBorder}, time, 'linear');
	}
	else {
		jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
	}

	jQuery(this.oBar).animate({width: widthBar + '%'}, time, 'linear');
	if(!this.oThis){
		this.oThis = this.$();
	}
	this.oThis.attr('aria-valuenow', widthBar + '%');

};

/**
 * Property setter for the PercentValue
 * A new rendering is not necessary, only the bar has to be moved.
 *
 * @param iPercentValue
 * @return {sap.ui.commons.ProgressIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.ProgressIndicator.prototype.setPercentValue = function(iPercentValue) {

	var widthBar = this.getPercentValue();
	var widthBorder;
	var sBarColor = this.getBarColor();

	this.oBar  = this.getDomRef("bar");
	this.oEnd  = this.getDomRef("end");
	this.oBox  = this.getDomRef("box");

	var that = this;
	var time;

	if (iPercentValue < 0) {
		iPercentValue = 0;
	}

	if (iPercentValue > 100) {
		widthBorder = (10000 / iPercentValue) + '%';
	}
	else {
		widthBorder = '100%';
	}

	if(!this.oBar){
		// Not already rendered -> return and render
		time = iPercentValue * 20;
		this.setProperty('percentValue', iPercentValue, true); // No re-rendering!
		jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear');
		return this;
	}

	if (iPercentValue > 100 && widthBar <= 100) {
		time = (100 - widthBar) * 20;
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBar).animate({width: '100%'}, time, 'linear', function() {
		that.setEndBar();
		});
	}
	else if (iPercentValue <= 100 && widthBar > 100) {
		time = (widthBar - 100) * 20;
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBar).animate({width: '100%'}, time, 'linear', function() {
		that.setEndBarGoesBack();
		});
	}
	else if (iPercentValue > 100 && widthBar > 100) {
		if (iPercentValue > widthBar) {
			time = (iPercentValue - widthBar) * 20;
		}
		else {
			time = (widthBar - iPercentValue) * 20;
		}
		widthBorder = (10000 / iPercentValue) + '%';
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBox).animate({width: widthBorder}, 0, 'linear');

		if(this.bRtl){
			jQuery(this.oEnd).animate({right: widthBorder}, time, 'linear');
		}
		else {
			jQuery(this.oEnd).animate({left: widthBorder}, time, 'linear');
		}

		jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear', function() {
		});
		if(!this.oThis){
			this.oThis = this.$();
		}
		this.oThis.attr('aria-valuenow', iPercentValue + '%');
	}
	else {
		if (iPercentValue > widthBar) {
			time = (iPercentValue - widthBar) * 20;
		}
		else {
			time = (widthBar - iPercentValue) * 20;
		}
		this.setProperty( 'percentValue', iPercentValue, true ); // Do not render complete control again
		jQuery(this.oBar).animate({width: iPercentValue + '%'}, time, 'linear');
		if(!this.oThis){
			this.oThis = this.$();
		}
		this.oThis.attr('aria-valuenow', iPercentValue + '%');
	}

	return this;
};

}; // end of sap/ui/commons/ProgressIndicator.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RadioButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RadioButton.
jQuery.sap.declare("sap.ui.commons.RadioButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new RadioButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getGroupName groupName} : string (default: 'sapUiRbDefaultGroup')</li>
 * <li>{@link #getKey key} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.RadioButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Consists of a round element and a descriptive text. Generally, you would create at least two radio button controls;
 * by this, you provide a limited choice for the user. Radio buttons can trigger events.
 * Available value states are "Error", "None", "Success", "Warning".
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.RadioButton
 */
sap.ui.core.Control.extend("sap.ui.commons.RadioButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"text" : {type : "string", group : "Data", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"selected" : {type : "boolean", group : "Data", defaultValue : false},
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"groupName" : {type : "string", group : "Behavior", defaultValue : 'sapUiRbDefaultGroup'},
		"key" : {type : "string", group : "Data", defaultValue : null}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RadioButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RadioButton.extend
 * @function
 */

sap.ui.commons.RadioButton.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the radio button.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.RadioButton#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setText
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible radio buttons are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.RadioButton#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * 
 * Disabled controls are displayed in another color, depending on the customer settings.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.RadioButton#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setEnabled
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Specifies whether the user can choose a radio button
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.commons.RadioButton#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setEditable
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * Specifies the select state of the radio button
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.ui.commons.RadioButton#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setSelected
 * @function
 */


/**
 * Getter for property <code>valueState</code>.
 * 
 * Enumeration sap.ui.core.ValueState provides state values Error, Success, Warning, None
 * 
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.ui.commons.RadioButton#getValueState
 * @function
 */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setValueState
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The control width depends on the text length. Alternatively, CSS-sizes in % or px can be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.RadioButton#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setWidth
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * 
 * Available options are LTR and RTL. Alternatively, the control can inherit the text direction from its parent container.
 * 
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.ui.commons.RadioButton#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setTextDirection
 * @function
 */


/**
 * Getter for property <code>groupName</code>.
 * Name of the radio button group the current radio button belongs to. You can define a new name for the group.
 * If no new name is specified, this radio button belongs to the sapUiRbDefaultGroup per default. Default behavior of a radio button
 * in a group is that when one of the radio buttons in a group is selected, all others are unselected.
 *
 * Default value is <code>'sapUiRbDefaultGroup'</code>
 *
 * @return {string} the value of property <code>groupName</code>
 * @public
 * @name sap.ui.commons.RadioButton#getGroupName
 * @function
 */

/**
 * Setter for property <code>groupName</code>.
 *
 * Default value is <code>'sapUiRbDefaultGroup'</code> 
 *
 * @param {string} sGroupName  new value for property <code>groupName</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setGroupName
 * @function
 */


/**
 * Getter for property <code>key</code>.
 * Can be used for subsequent actions
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>key</code>
 * @public
 * @name sap.ui.commons.RadioButton#getKey
 * @function
 */

/**
 * Setter for property <code>key</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#setKey
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.RadioButton#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.RadioButton#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RadioButton#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.RadioButton#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.RadioButton#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RadioButton#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * Event is triggered when the user makes a change on the radio button. 
 *
 * @name sap.ui.commons.RadioButton#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.RadioButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.RadioButton</code>.<br/> itself. 
 *  
 * Event is triggered when the user makes a change on the radio button. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.RadioButton</code>.<br/> itself.
 *
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.RadioButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButton#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RadioButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.RadioButton#fireSelect
 * @function
 */


// Start of sap\ui\commons\RadioButton.js
/**
 * Event handler called when the radio button is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onclick = function(oEvent) {

	if(this.getEnabled() && oEvent.target.id == (this.getId()+"-RB")){
		this.focus();
	}

	if(!!sap.ui.Device.browser.internet_explorer && (/*!this.getEditable() ||*/ !this.getEnabled())){ //According to CSN2581852 2012 a readonly CB should be in the tabchain 
		// in IE tabindex = -1 hides focus, so in readOnly case tabindex must be set to 0
		// as long as RadioButton is clicked on
		this.$().attr("tabindex", 0).toggleClass("sapUiRbFoc");
	}

	this.userSelect(oEvent);
};

/**
 * Event handler called when the space key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onsapspace = function(oEvent) {

	if(this.getEnabled() && oEvent.target.id == (this.getId()+"-RB")){
		this.focus();
	}
	this.userSelect(oEvent);
};

/**
 * Event handler called focus is set on Radio button
 * Problem in HCB: Focus is set in IE8 to bullet, not to whole control
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onsaptabnext = function(oEvent) {

	if(!!sap.ui.Device.browser.internet_explorer){
		this.bTabPressed = true;
		var that = this;
		window.setTimeout(function(){that.bTabPressed = false;}, 100);
	}
};

/**
 * Event handler called when the radio button is focused
 * Problem in HCB: Focus is sometimes set in IE8 to bullet, not to whole control
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onfocusin = function(oEvent) {

	if(this.getEnabled() && oEvent.target.id == (this.getId()+"-RB")){
		if(this.bTabPressed){
			// this only occurs in IE in HCB mode
			var aFocusableElements = jQuery(":sapFocusable"),
				bFound = false;
			for(var i = 0; i < aFocusableElements.length; i++){
				if(bFound && aFocusableElements[i].parentNode != oEvent.target && aFocusableElements[i].tabIndex != "-1"){
					aFocusableElements[i].focus();
					oEvent.preventDefault();
					break;
				}
				if(oEvent.target == aFocusableElements[i]){
					bFound = true;
				}
			}
		}else{
			this.focus();
		}
	}
};

/**
 * Event handler called when the radio button is left
 * Problem in IE: Tabindex must be set back to -1
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.onfocusout = function(oEvent) {

	if(!!sap.ui.Device.browser.internet_explorer && (/*!this.getEditable() ||*/ !this.getEnabled())){ //According to CSN2581852 2012 a readonly CB should be in the tabchain 
		// in IE tabindex = -1 hides focus, so in readOnly case tabindex must be set to 0
		// as long as RadioButton is clicked on
		this.$().attr("tabindex", -1).toggleClass("sapUiRbFoc");
	}

};
/**
 * This method is used internally only, whenever the user somehow selects the RadioButton.
 * It is responsible for event cancellation and for firing the select event.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RadioButton.prototype.userSelect = function(oEvent) {
//	oEvent.preventDefault();
	// the control should not stop browser event propagation
	// Example: table control needs to catch and handle the event as well
	//oEvent.stopPropagation();

	if (this.getEnabled() && this.getEditable()) {
		var selected = this.getSelected();
		if (!selected) {
			this.setSelected(true);
			this.fireSelect({/* no parameters */});
		}
	}else{
		// readOnly or disabled -> don't allow browser to switch RadioButton on
		oEvent.preventDefault();
	}
};

// #############################################################################
// Overwritten methods that are also generated in RadioButton.API.js
// #############################################################################

/*
 * Overwrite the definition from RadioButton.API.js
 */
sap.ui.commons.RadioButton.prototype.setSelected = function(bSelected) {

	var bSelectedOld = this.getSelected();

	this.setProperty("selected", bSelected, true); // No re-rendering
	bSelected = this.getSelected();

	if (bSelected) { // If this radio button is selected, explicitly deselect the other radio buttons of the same group
		if (this.getGroupName() && (this.getGroupName() != "")) { // Do it only if groupName is set
			// TODO: Add control references to some static list when they are constructed, in order to avoid searching every time
			var others = document.getElementsByName(this.getGroupName());
			for (var i = 0; i < others.length; i++) {
				var other = others[i];
				// Recommendation is that the HTML radio button has an ID ending with "-RB"
				if (other.id && (other.id.length > 3) && (other.id.substr(other.id.length-3) == "-RB")) {
					// The SAPUI5 control is known by an ID without the "-RB" suffix
					var oControl = sap.ui.getCore().getElementById(other.id.substr(0, other.id.length-3));
					if (oControl instanceof sap.ui.commons.RadioButton && (oControl != this)) {
						oControl.setSelected(false);
					}
				}
			}
		}
	}
	if ((bSelectedOld != bSelected) && this.getDomRef() && this.getRenderer().setSelected){
		this.getRenderer().setSelected(this, bSelected);
	}

	return this;
};

sap.ui.commons.RadioButton.prototype.getTooltipDomRefs = function() {
	return this.$().children();
};
}; // end of sap/ui/commons/RadioButton.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RadioButtonGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RadioButtonGroup.
jQuery.sap.declare("sap.ui.commons.RadioButtonGroup");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new RadioButtonGroup.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getColumns columns} : int (default: 1)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getSelectedIndex selectedIndex} : int (default: 0)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.RadioButtonGroup#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * a group of RadioButtons to hande as one UI element.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.RadioButtonGroup
 */
sap.ui.core.Control.extend("sap.ui.commons.RadioButtonGroup", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getSelectedItem", "setSelectedItem"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"columns" : {type : "int", group : "Appearance", defaultValue : 1},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"selectedIndex" : {type : "int", group : "Data", defaultValue : 0},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.core.Item", multiple : true, singularName : "item", bindable : "bindable"}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RadioButtonGroup with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RadioButtonGroup.extend
 * @function
 */

sap.ui.commons.RadioButtonGroup.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>width</code>.
 * Width of the RadioButtonGroup.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.RadioButtonGroup#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#setWidth
 * @function
 */


/**
 * Getter for property <code>columns</code>.
 * Number of RadioButtons displayed in one Line.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>columns</code>
 * @public
 * @name sap.ui.commons.RadioButtonGroup#getColumns
 * @function
 */

/**
 * Setter for property <code>columns</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iColumns  new value for property <code>columns</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#setColumns
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Visibility of Group
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.RadioButtonGroup#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#setVisible
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Specifies whether the user can choose a radio button.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.commons.RadioButtonGroup#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#setEditable
 * @function
 */


/**
 * Getter for property <code>valueState</code>.
 * The value state to be displayed.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.ui.commons.RadioButtonGroup#getValueState
 * @function
 */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#setValueState
 * @function
 */


/**
 * Getter for property <code>selectedIndex</code>.
 * Index of the selected/checked RadioButton.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>selectedIndex</code>
 * @public
 * @name sap.ui.commons.RadioButtonGroup#getSelectedIndex
 * @function
 */

/**
 * Setter for property <code>selectedIndex</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iSelectedIndex  new value for property <code>selectedIndex</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#setSelectedIndex
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * If set the RadioButtonGroup is enabled, if not it is disabled. If it is disabled all RadioButtons will be shown as disabled. The enabled property of the item will not be uses in this case. If the RadioButtonGroup is enabled the enabled property of the item will define if a RadioButton is enabled or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @since 1.10.3
 * @name sap.ui.commons.RadioButtonGroup#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @since 1.10.3
 * @name sap.ui.commons.RadioButtonGroup#setEnabled
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * RadioButtons of this RadioButtonGroup
 * 
 * <strong>Note</strong>: this is the default aggregation for RadioButtonGroup.
 * @return {sap.ui.core.Item[]}
 * @public
 * @name sap.ui.commons.RadioButtonGroup#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id
 * @return {sap.ui.core.Item} the removed item or null
 * @public
 * @name sap.ui.commons.RadioButtonGroup#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RadioButtonGroup#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.RadioButtonGroup#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#destroyItems
 * @function
 */


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#bindItems
 * @function
 */

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#unbindItems
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.RadioButtonGroup#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.RadioButtonGroup#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RadioButtonGroup#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.RadioButtonGroup#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.RadioButtonGroup#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RadioButtonGroup#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * Event is fired when selection is changed by user interaction. 
 *
 * @name sap.ui.commons.RadioButtonGroup#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.selectedIndex Index of the selected RadioButton.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.RadioButtonGroup</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.RadioButtonGroup</code>.<br/> itself. 
 *  
 * Event is fired when selection is changed by user interaction. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.RadioButtonGroup</code>.<br/> itself.
 *
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.RadioButtonGroup</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RadioButtonGroup#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedIndex' of type <code>int</code> Index of the selected RadioButton.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RadioButtonGroup} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.RadioButtonGroup#fireSelect
 * @function
 */


/**
 * Returns selected item. When no item is selected, "null" is returned.
 *
 * @name sap.ui.commons.RadioButtonGroup.prototype.getSelectedItem
 * @function

 * @type sap.ui.core.Item
 * @public
 */


/**
 * Sets the item as seleced and removs the selection from the old one.
 *
 * @name sap.ui.commons.RadioButtonGroup.prototype.setSelectedItem
 * @function
 * @param {sap.ui.core.Item} 
 *         oItem
 *         Selected item.

 * @type void
 * @public
 */


// Start of sap\ui\commons\RadioButtonGroup.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


sap.ui.commons.RadioButtonGroup.prototype.exit = function() {
	this.destroyItems(); // or Element.exit should call the typed destroyXYZ methods?
	// sap.ui.core.Control.prototype.exit.apply(this); // does not exist!

	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
		delete this.oItemNavigation;
	}

};

sap.ui.commons.RadioButtonGroup.prototype.onBeforeRendering = function() {
	if(this.getSelectedIndex() > this.getItems().length){
		// SelectedIndex is > than number of items -> select the first one
		jQuery.sap.log.warning("Invalid index, set to 0");
		this.setSelectedIndex(0);
	};
};

sap.ui.commons.RadioButtonGroup.prototype.onAfterRendering = function() {

	this.initItemNavigation();

	// update ARIA information of RadioButtons
	for(var i = 0; i < this.aRBs.length; i++){
		this.aRBs[i].$().attr("aria-posinset", i+1).attr("aria-setsize", this.aRBs.length);
	}
};

/*
 * initialize ItemNavigation. Transfer RadioButtons to ItemNavigation.
 * TabIndexes are set by ItemNavigation
 * @private
 */
sap.ui.commons.RadioButtonGroup.prototype.initItemNavigation = function(){

	// Collect items for ItemNavigation
	var aDomRefs = [];
	this._aActiveItems = [];
	var aActiveItems = this._aActiveItems;
	var bEnabled = false;
	for (var i=0; i < this.aRBs.length; i++) {
		aActiveItems[aDomRefs.length] = i;
		aDomRefs.push(this.aRBs[i].getDomRef());
		if (!bEnabled && this.aRBs[i].getEnabled()) {
			// at least one RadioButton is enabled
			bEnabled = true;
		}
	}

	if (bEnabled) {
		// at least one RadioButton enabled -> use property of RadioButtonGroup
		// so if all RadioButtons are disabled the RadioButtonGroup is disabled too.
		bEnabled = this.getEnabled();
	}

	if (!bEnabled) {
		// RadioButtonGroup is disabled -> no ItemNavigation
		if (this.oItemNavigation) {
			this.removeDelegate(this.oItemNavigation);
			this.oItemNavigation.destroy();
			delete this.oItemNavigation;
		}
		return;
	}

	// init ItemNavigation
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.oItemNavigation.attachEvent(sap.ui.core.delegate.ItemNavigation.Events.AfterFocus, this._handleAfterFocus, this);
		this.addDelegate(this.oItemNavigation);
	}
	this.oItemNavigation.setRootDomRef(this.getDomRef());
	this.oItemNavigation.setItemDomRefs(aDomRefs);
	this.oItemNavigation.setCycling(true);
	this.oItemNavigation.setColumns(this.getColumns());
	this.oItemNavigation.setSelectedIndex(this.getSelectedIndex());
	this.oItemNavigation.setFocusedIndex(this.getSelectedIndex());
};

/*
 * Set selected RadioButton via Index
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setSelectedIndex = function(iSelectedIndex) {

	var iIndexOld = this.getSelectedIndex();

	if (iSelectedIndex < 0) {
		// invalid negative index -> don't change index.
		jQuery.sap.log.warning("Invalid index, will not be changed");
		return this;
	}

	this.setProperty("selectedIndex", iSelectedIndex, true); // no re-rendering

	// deselect old RadioButton
	if( !isNaN(iIndexOld) && this.aRBs && this.aRBs[iIndexOld]){
		this.aRBs[iIndexOld].setSelected(false);
	}

	// select new one
	if(this.aRBs && this.aRBs[iSelectedIndex]){
		this.aRBs[iSelectedIndex].setSelected(true);
	}

	if(this.oItemNavigation){
		this.oItemNavigation.setSelectedIndex(iSelectedIndex);
		this.oItemNavigation.setFocusedIndex(iSelectedIndex);
	}

	return this;

};

/*
 * Set selected RadioButton via Item
 * @param {sap.ui.core.Item} oSelectedItem the item to be selected.
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setSelectedItem = function(iSelectedItem) {

	for (var i = 0; i < this.getItems().length; i++){
		if(iSelectedItem.getId() == this.getItems()[i].getId()){
			this.setSelectedIndex(i);
			break;
		}
	}
};

/*
 * Get item of selected RadioButton
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.getSelectedItem = function() {

	return this.getItems()[this.getSelectedIndex()];

};

/*
 * Adds a new Item
 * If an item is added a new RadioButton must be added
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.addItem = function(oItem) {

	this.myChange = true;
	this.addAggregation("items", oItem);
	this.myChange = undefined;

	if(this.getSelectedIndex() === undefined){
		// if not defined -> select first one
		this.setSelectedIndex(0);
	}
	if(!this.aRBs){
		this.aRBs = [];
	}

	var iIndex = this.aRBs.length;

	this.aRBs[iIndex] = this.createRadioButton(oItem, iIndex);

	return this;
};

/*
 * Inserts a new Item
 * If an item is inserted a new RadioButton must be inserted
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.insertItem = function(oItem, iIndex) {

	this.myChange = true;
	this.insertAggregation("items", oItem, iIndex);
	this.myChange = undefined;

	if(!this.aRBs){
		this.aRBs = [];
	}

	var iLength = this.aRBs.length;

	if(this.getSelectedIndex() === undefined || iLength == 0){
		// if not defined -> select first one
		this.setSelectedIndex(0);
	}else if(this.getSelectedIndex() >= iIndex){
		// If inserted before selected one, move selection index (only change parameter, not RadioButton)
		this.setProperty("selectedIndex", this.getSelectedIndex() + 1, true); // no re-rendering
	}

	if( iIndex >= iLength){
		this.aRBs[iIndex] = this.createRadioButton(oItem, iIndex);
	}else{
		// Insert RadioButton: loop backwards over Array and shift everything
		for (var i = (iLength); i > iIndex; i--) {
			this.aRBs[i] = this.aRBs[i-1];
			if((i-1) == iIndex){
				this.aRBs[i-1] = this.createRadioButton(oItem, iIndex);
			}
		}
	}

	return this;

};

/*
 * create RadioButton for an item
 * @private
 */
sap.ui.commons.RadioButtonGroup.prototype.createRadioButton = function(oItem, iIndex){

	if(this.iIDCount == undefined){
		this.iIDCount = 0;
	}else{
		this.iIDCount++;
	}

	var oRadioButton = new sap.ui.commons.RadioButton(this.getId() + "-" + this.iIDCount);
	oRadioButton.setText(oItem.getText());
	oRadioButton.setTooltip(oItem.getTooltip());
	if (this.getEnabled()) {
		oRadioButton.setEnabled(oItem.getEnabled());
	} else {
		oRadioButton.setEnabled(false);
	}
	oRadioButton.setKey(oItem.getKey());
	oRadioButton.setTextDirection(oItem.getTextDirection());
	oRadioButton.setEditable(this.getEditable());
	oRadioButton.setGroupName(this.getId());
	oRadioButton.setValueState(this.getValueState());
	oRadioButton.setParent(this);

	if( iIndex == this.getSelectedIndex() ){
		oRadioButton.setSelected(true);
	}

	oRadioButton.attachEvent('select', this.handleRBSelect, this);

	return(oRadioButton);
};

/*
 * Removes an Item
 * If an item is removed the corresponding RadioButton must be deleted
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.removeItem = function(vElement) {
	var iIndex = vElement;
	if (typeof(vElement) == "string") { // ID of the element is given
		vElement = sap.ui.getCore().byId(vElement);
	}
	if (typeof(vElement) == "object") { // the element itself is given or has just been retrieved
		iIndex = this.indexOfItem(vElement);
	}

	this.myChange = true;
	var oItem = this.removeAggregation("items", iIndex);
	this.myChange = undefined;

	if(!this.aRBs){
		this.aRBs = [];
	}

	if(!this.aRBs[iIndex]){
		// RadioButton not exists
		return null;
	}

	this.aRBs[iIndex].destroy();
	this.aRBs.splice(iIndex, 1);

	if(this.aRBs.length == 0){
		this.setSelectedIndex(undefined);
	}else if(this.getSelectedIndex() == iIndex){
		// selected one is removed -> select first one
		this.setSelectedIndex(0);
	}else{
		if(this.getSelectedIndex() > iIndex){
			// If removed before selected one, move selection index (only change parameter, not RadioButton)
			this.setProperty("selectedIndex", this.getSelectedIndex() - 1, true); // no re-rendering
		}
	}

	return oItem;
};

/*
 * Removes all items
 * If all items are removed all RadioButtons must be deleted
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.removeAllItems = function() {

	this.myChange = true;
	var aItems = this.removeAllAggregation("items");
	this.myChange = undefined;

	this.setSelectedIndex(undefined);

	if(this.aRBs){
		while(this.aRBs.length > 0){
			this.aRBs[0].destroy();
			this.aRBs.splice(0, 1);
		};
		return aItems;
	}else{
		return null;
	}

};

/*
 * destroys all items
 * If all items are destroyed all RadioButtons must be deleted
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.destroyItems = function() {

	this.myChange = true;
	this.destroyAggregation("items");
	this.myChange = undefined;

	this.setSelectedIndex(undefined);

	if(this.aRBs){
		while(this.aRBs.length > 0){
			this.aRBs[0].destroy();
			this.aRBs.splice(0, 1);
		};
	}

	return this;

};

/*
 * if invalid -> synchronize radio buttons
 * @protected
 */
sap.ui.commons.RadioButtonGroup.prototype.invalidate = function(oOrigin){

	if(oOrigin instanceof sap.ui.core.Item && this.aRBs && !this.myChange){
		// change was not done by RadioButtonGroup itself
		var aItems = this.getItems();
		for (var i = 0; i < aItems.length; i++) {
			if( aItems[i] == oOrigin){
				if(this.aRBs[i]){
					this.aRBs[i].setText(aItems[i].getText());
					this.aRBs[i].setTooltip(aItems[i].getTooltip());
					if (this.getEnabled()) {
						this.aRBs[i].setEnabled(aItems[i].getEnabled());
					} else {
						this.aRBs[i].setEnabled(false);
					}
					this.aRBs[i].setKey(aItems[i].getKey());
					this.aRBs[i].setTextDirection(aItems[i].getTextDirection());
				}
				break;
			}
		}
		if(this.getDomRef()){
			this.initItemNavigation();
		}
	}
	var oParent = this.getParent();
	if(oParent) {
		oParent.invalidate(this);
	}

};

/*
 * On SELECT event of single Radio Buttons fire Select Event for group
 * @private
 */
sap.ui.commons.RadioButtonGroup.prototype.handleRBSelect = function(oControlEvent){
	// find RadioButton in Array to get Index
	for (var i = 0; i < this.aRBs.length; i++) {
		if(this.aRBs[i].getId() == oControlEvent.getParameter("id")){
			this.setSelectedIndex(i);
			this.oItemNavigation.setSelectedIndex(i);
			this.oItemNavigation.setFocusedIndex(i);
			this.fireSelect({selectedIndex: i});
			break;
		}
	}

};

/*
 * Set all RadioButtons to Editable/ReadOnly
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setEditable = function(bEditable){

	this.setProperty("editable", bEditable, false); // re-rendering to update ItemNavigation

	if(this.aRBs){
		for (var i = 0; i < this.aRBs.length; i++) {
			this.aRBs[i].setEditable(bEditable);
		}
	}
};

/*
 * Set all RadioButtons to Enabled/Disabled
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setEnabled = function(bEnabled){

	this.setProperty("enabled", bEnabled, false); // re-rendering to update ItemNavigation

	if(this.aRBs){
		var aItems = this.getItems();

		for (var i = 0; i < this.aRBs.length; i++) {
			if (bEnabled) {
				this.aRBs[i].setEnabled(aItems[i].getEnabled());
			}else {
				this.aRBs[i].setEnabled(bEnabled);
			}
		}
	}

};

/*
 * Set ValueState for all RadioButtons
 * @public
 */
sap.ui.commons.RadioButtonGroup.prototype.setValueState = function(sValueState){

	this.setProperty("valueState", sValueState, false); // re-rendering to update ItemNavigation

	if(this.aRBs){
		for (var i = 0; i < this.aRBs.length; i++) {
			this.aRBs[i].setValueState(sValueState);
		}
	}
};

/*
 * Handles the event that gets fired by the {@link sap.ui.core.delegate.ItemNavigation} delegate.
 * Ensures that focused element is selected
 *
 * @param {sap.ui.base.Event} oControlEvent The event that gets fired by the {@link sap.ui.core.delegate.ItemNavigation} delegate.
 * @private
 */
sap.ui.commons.RadioButtonGroup.prototype._handleAfterFocus = function(oControlEvent){

	var iIndex = oControlEvent.getParameter("index");
	var oEvent = oControlEvent.getParameter("event");

	if(iIndex != this.getSelectedIndex() && !(oEvent.ctrlKey || oEvent.metaKey) && this.aRBs[iIndex].getEditable() && this.aRBs[iIndex].getEnabled()){
		// if CTRL key is used do not switch selection
		this.setSelectedIndex(iIndex);
		this.oItemNavigation.setSelectedIndex(iIndex);
		this.fireSelect({selectedIndex:iIndex});
	}
};
}; // end of sap/ui/commons/RadioButtonGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RangeSliderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.RangeSlider
jQuery.sap.declare("sap.ui.commons.RangeSliderRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class RangeSlider renderer.
 * @static
 */
sap.ui.commons.RangeSliderRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.SliderRenderer);

/**
 * Renders the Grip for the slider control, using the provided {@link sap.ui.fw.RenderManager}.
 * Each slider is handeled as individual single sliders for aria.
 * Min and max values are adjusted when sliders are moved.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.RangeSliderRenderer.renderGrip = function(oRenderManager, oSlider){
	var rm = oRenderManager;

	//Left Grip
	rm.write('<DIV');

	// Icon for grip
	rm.writeAttribute('id', oSlider.getId() + '-grip');
	if (oSlider.getEnabled()) {
		rm.writeAttribute('tabIndex', '0');
	}else{
		rm.writeAttribute('tabIndex', '-1');
	}
	rm.writeAttribute('class', 'sapUiSliGrip');
	rm.writeAttribute('title', oSlider.getValue());

	// ARIA
	rm.writeAccessibilityState(oSlider, {
		role: 'slider',
		controls: oSlider.getId() + '-grip2',
		orientation: 'horizontal',
		valuemin: oSlider.getMin(),
		valuemax: oSlider.getValue2(),
		live: 'assertive',
		disabled: !oSlider.getEditable() || !oSlider.getEnabled(),
		describedby: oSlider.getTooltip_AsString() ? (oSlider.getId()+'-Descr ' + oSlider.getAriaDescribedBy().join(" ")) : undefined
	});

	rm.write('>&#9650;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)

	//Right Grip
	rm.write('<DIV');

	// Icon for grip
	rm.writeAttribute('id', oSlider.getId() + '-grip2');
	if (oSlider.getEnabled()) {
		rm.writeAttribute('tabIndex', '0');
	}else{
		rm.writeAttribute('tabIndex', '-1');
	}
	rm.writeAttribute('class', 'sapUiSliGrip');
	rm.writeAttribute('title', oSlider.getValue2());

	// ARIA
	rm.writeAccessibilityState(oSlider, {
		role: 'slider',
		controls: oSlider.getId() + '-grip',
		orientation: 'horizontal',
		valuemin: oSlider.getValue(),
		valuemax: oSlider.getMax(),
		live: 'assertive',
		disabled: !oSlider.getEditable() || !oSlider.getEnabled(),
		describedby: oSlider.getTooltip_AsString() ? (oSlider.getId()+'-Descr ' + oSlider.getAriaDescribedBy().join(" ")) : undefined
	});

	rm.write('>&#9650;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)

};

/**
 * Adds extra code to the control (i.e. in subclasses), using the provided {@link sap.ui.fw.RenderManager}.
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.RangeSliderRenderer.controlAdditionalCode = function(rm, oSlider){
	rm.addClass('sapUiRSli');
};
}; // end of sap/ui/commons/RangeSliderRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RatingIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RatingIndicator.
jQuery.sap.declare("sap.ui.commons.RatingIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new RatingIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getMaxValue maxValue} : int (default: 5)</li>
 * <li>{@link #getValue value} : float (default: 0)</li>
 * <li>{@link #getAverageValue averageValue} : float (default: 0)</li>
 * <li>{@link #getIconSelected iconSelected} : sap.ui.core.URI</li>
 * <li>{@link #getIconUnselected iconUnselected} : sap.ui.core.URI</li>
 * <li>{@link #getIconHovered iconHovered} : sap.ui.core.URI</li>
 * <li>{@link #getVisualMode visualMode} : sap.ui.commons.RatingIndicatorVisualMode (default: sap.ui.commons.RatingIndicatorVisualMode.Half)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.RatingIndicator#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Is used to let the user do some rating on a certain topic. The amount of rating symbols can be specified, as well as the URIs to the
 * image icons which shall be used as rating symbols. When the user performs a rating, an event is fired.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.RatingIndicator
 */
sap.ui.core.Control.extend("sap.ui.commons.RatingIndicator", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"maxValue" : {type : "int", group : "Behavior", defaultValue : 5},
		"value" : {type : "float", group : "Behavior", defaultValue : 0, bindable : "bindable"},
		"averageValue" : {type : "float", group : "Behavior", defaultValue : 0},
		"iconSelected" : {type : "sap.ui.core.URI", group : "Behavior", defaultValue : null},
		"iconUnselected" : {type : "sap.ui.core.URI", group : "Behavior", defaultValue : null},
		"iconHovered" : {type : "sap.ui.core.URI", group : "Behavior", defaultValue : null},
		"visualMode" : {type : "sap.ui.commons.RatingIndicatorVisualMode", group : "Behavior", defaultValue : sap.ui.commons.RatingIndicatorVisualMode.Half}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RatingIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RatingIndicator.extend
 * @function
 */

sap.ui.commons.RatingIndicator.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>visible</code>.
 * If set to invisible, the control is not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.RatingIndicator#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#setVisible
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Value 'true' is required for changes on the rating symbols.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.commons.RatingIndicator#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#setEditable
 * @function
 */


/**
 * Getter for property <code>maxValue</code>.
 * The number of displayed rating symbols
 *
 * Default value is <code>5</code>
 *
 * @return {int} the value of property <code>maxValue</code>
 * @public
 * @name sap.ui.commons.RatingIndicator#getMaxValue
 * @function
 */

/**
 * Setter for property <code>maxValue</code>.
 *
 * Default value is <code>5</code> 
 *
 * @param {int} iMaxValue  new value for property <code>maxValue</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#setMaxValue
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * The currently selected value. If value is set to sap.ui.commons.RatingIndicator.NoValue, the averageValue is shown.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * @name sap.ui.commons.RatingIndicator#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#setValue
 * @function
 */


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#bindValue
 * @function
 */

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#unbindValue
 * @function
 */


/**
 * Getter for property <code>averageValue</code>.
 * This value is shown if no value is set. This can be used to display an average Value before the user votes.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>averageValue</code>
 * @public
 * @name sap.ui.commons.RatingIndicator#getAverageValue
 * @function
 */

/**
 * Setter for property <code>averageValue</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fAverageValue  new value for property <code>averageValue</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#setAverageValue
 * @function
 */


/**
 * Getter for property <code>iconSelected</code>.
 * The URI to the image which shall be displayed for all selected rating symbols.
 * Note that when this attribute is used, also the other icon attributes need to be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconSelected</code>
 * @public
 * @name sap.ui.commons.RatingIndicator#getIconSelected
 * @function
 */

/**
 * Setter for property <code>iconSelected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconSelected  new value for property <code>iconSelected</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#setIconSelected
 * @function
 */


/**
 * Getter for property <code>iconUnselected</code>.
 * The URI to the image which shall be displayed for all unselected rating symbols. If this attribute is used, a requirement is that all custom icons need to have the same size.
 * Note that when this attribute is used also the other icon attributes need to be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconUnselected</code>
 * @public
 * @name sap.ui.commons.RatingIndicator#getIconUnselected
 * @function
 */

/**
 * Setter for property <code>iconUnselected</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconUnselected  new value for property <code>iconUnselected</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#setIconUnselected
 * @function
 */


/**
 * Getter for property <code>iconHovered</code>.
 * The URI to the image which is displayed when the mouse hovers onto a rating symbol.
 * If used, a requirement is that all custom icons need to have the same size.
 * Note that when this attribute is used also the other icon attributes need to be set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconHovered</code>
 * @public
 * @name sap.ui.commons.RatingIndicator#getIconHovered
 * @function
 */

/**
 * Setter for property <code>iconHovered</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconHovered  new value for property <code>iconHovered</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#setIconHovered
 * @function
 */


/**
 * Getter for property <code>visualMode</code>.
 * Defines how float values are visualized: Full, Half, Continuous (see enumeration RatingIndicatorVisualMode)
 *
 * Default value is <code>Half</code>
 *
 * @return {sap.ui.commons.RatingIndicatorVisualMode} the value of property <code>visualMode</code>
 * @public
 * @name sap.ui.commons.RatingIndicator#getVisualMode
 * @function
 */

/**
 * Setter for property <code>visualMode</code>.
 *
 * Default value is <code>Half</code> 
 *
 * @param {sap.ui.commons.RatingIndicatorVisualMode} oVisualMode  new value for property <code>visualMode</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#setVisualMode
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.RatingIndicator#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.RatingIndicator#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RatingIndicator#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.RatingIndicator#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.RatingIndicator#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RatingIndicator#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * The event is fired when the user has done a rating. 
 *
 * @name sap.ui.commons.RatingIndicator#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.value The rated value
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.RatingIndicator</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.RatingIndicator</code>.<br/> itself. 
 *  
 * The event is fired when the user has done a rating. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.RatingIndicator</code>.<br/> itself.
 *
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.RatingIndicator</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RatingIndicator#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>int</code> The rated value</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.RatingIndicator#fireChange
 * @function
 */


// Start of sap\ui\commons\RatingIndicator.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.ui.commons.RatingIndicator.NoValue = -9999;
/**
 * Control Initialization
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.init = function(){
	this.iHoveredRating = -1;
};

/**
 * Does all the cleanup when the RatingIndicator is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.exit = function (){
	// no super.exit() to call
};

/**
 * Called when the theme is changed.
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onThemeChanged = function(oEvent){
	if (this.getDomRef()) {
		this.invalidate();
	}
};

/**
 * Avoid dragging the icons.
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.ondragstart = function(oEvent){
	oEvent.preventDefault();
};

/**
 * Returns the value to be displayed, which is either a set value or (if no value is set) the
 * averageValue
 * @private
 */
sap.ui.commons.RatingIndicator.prototype._getDisplayValue = function() {
	var fValue = this.getValue();
	
	if (fValue == sap.ui.commons.RatingIndicator.NoValue) {
		// If the value is set to sap.ui.commons.RatingIndicator.NoValue, show the averageValue 
		return this.getAverageValue();
	} else {
		return fValue;
	}
}

/**
 * Behavior implementation which is executed when the user presses Arrow Right (Left in RTL case) or Arrow Up.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapincrease = function(oEvent){
	var iNewHoverValue = this.iHoveredRating;

	if(iNewHoverValue == -1){
		iNewHoverValue = Math.round(this._getDisplayValue()) - 1;
		if(iNewHoverValue == -1){
			iNewHoverValue = 0;
		}
	}

	if(iNewHoverValue < this.getMaxValue()){
		iNewHoverValue = iNewHoverValue + 1;
	}else{
		iNewHoverValue = this.getMaxValue();
	}

	this.updateHoverState(oEvent, iNewHoverValue);
};

/**
 * Behavior implementation which is executed when the user presses Arrow Left (Right in RTL case) or Arrow Down.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapdecrease = function(oEvent){
	var iNewHoverValue = this.iHoveredRating;

	if(iNewHoverValue == -1 && Math.round(this._getDisplayValue()) == 0) {
		return;
	}

	if(iNewHoverValue == -1){
		iNewHoverValue = Math.round(this._getDisplayValue()) + 1;
	}

	if(iNewHoverValue > 1){
		iNewHoverValue = iNewHoverValue - 1;
	}else{
		iNewHoverValue = 1;
	}

	this.updateHoverState(oEvent, iNewHoverValue);
};

/**
 * Behavior implementation which is executed when the user presses Home.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsaphome = function(oEvent){
	this.updateHoverState(oEvent, 1);
};

/**
 * Behavior implementation which is executed when the user presses End.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapend = function(oEvent){
	this.updateHoverState(oEvent, this.getMaxValue());
};

/**
 * Behavior implementation which is executed when the user presses Enter or Space.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapselect = function(oEvent){
	this.saveValue(oEvent, true, this.iHoveredRating);
};

/**
 * Behavior implementation which is executed when the user presses Esc.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onsapescape = function(oEvent){
	this.saveValue(oEvent, true, -1);
};

/**
 * Behavior implementation which is executed when the control loses the focus.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onfocusout = function(oEvent){
	//Do not react on focusouts of child DOM refs in IE
	if(!!sap.ui.Device.browser.internet_explorer && oEvent.target != this.getDomRef()) {
		return;
	}
	this.saveValue(oEvent, false, this.iHoveredRating);
};

/**
 * Behavior implementation which is executed when the control gets the focus.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onfocusin = function(oEvent){
	//Avoid focusing child DOM refs in IE
	if(!!sap.ui.Device.browser.internet_explorer && oEvent.target != this.getDomRef()) {
		this.getDomRef().focus();
	}
};

/**
 * Behavior implementation which is executed when the user clicks on a rating symbol.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onclick = function(oEvent){
	this.saveValue(oEvent, true, this.getSymbolValue(oEvent));
};

/**
 * Behavior implementation which is executed when the user moves the mouse on a rating symbol.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onmouseover = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();

	if(!this.getEditable()) {
		return;
	}
	this.iHoveredRating = -1;

	var symbolValue = this.getSymbolValue(oEvent);
	if(symbolValue == -1){
		return;
	}

	for(var i=1; i<=symbolValue; i++){
		sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol(i, this);
	}
	for(var i=symbolValue+1; i<=this.getMaxValue(); i++){
		sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol(i, this, true);
	}
};

/**
 * Behavior implementation which is executed when the user moves the mouse out of the rating symbol.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onmouseout = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();

	if(!this.getEditable()) {
		return;
	}

	if(jQuery.sap.checkMouseEnterOrLeave(oEvent, this.getDomRef())){
		this.iHoveredRating = -1;
		for(var i=1; i<=this.getMaxValue(); i++){
			sap.ui.commons.RatingIndicatorRenderer.unhoverRatingSymbol(i, this);
		}
	}
};

/**
 * Returns the rating symbol value which is affected by the given event or -1
 * if the event was not on a rating symbol.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.getSymbolValue = function(oEvent){
	var oSymbol = jQuery(oEvent.target);
	if(oSymbol.hasClass("sapUiRatingItmImg") || oSymbol.hasClass("sapUiRatingItmOvrflw")){
		oSymbol = jQuery(oEvent.target.parentNode);
	}else if(oSymbol.hasClass("sapUiRatingItmOvrflwImg")){
		oSymbol = jQuery(oEvent.target.parentNode.parentNode);
	}
	var itemvalue = oSymbol.attr("itemvalue");
	if(itemvalue){
		return parseInt(itemvalue, 10);
	}
	return -1;
};

/**
 * Updates the hover state according to the current pending keyboard input.
 *
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.updateKeyboardHoverState = function(bSkipHoverAfter){
	for(var i=1; i<=this.getMaxValue(); i++){
		sap.ui.commons.RatingIndicatorRenderer.unhoverRatingSymbol(i, this);
		if(i <= this.iHoveredRating){
			sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol(i, this);
		}else if(!bSkipHoverAfter){
			sap.ui.commons.RatingIndicatorRenderer.hoverRatingSymbol(i, this, true);
		}
	}
	this.setAriaState();
};

/**
 * Called by the framework when rendering is completed.
 *
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.onAfterRendering = function() {
	this.setAriaState();
};

/**
 * Updates the ARIA state initially and in case of changes.
 *
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.setAriaState = function() {
	var val = this.iHoveredRating == -1 ? this._getDisplayValue() : this.iHoveredRating;
	this.$().attr("aria-valuenow", val).attr("aria-valuetext", this._getText("RATING_ARIA_VALUE" , [val])).attr("aria-label", this._getText("RATING_ARIA_NAME"));
};

/**
 * Load language dependent texts.
 *
 * @private
 */
sap.ui.commons.RatingIndicator.prototype._getText = function(sKey, aArgs) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	if(rb) {
		return rb.getText(sKey, aArgs);
	}
	return sKey;
};

/**
 * Helper function to save the value and fire the change event.
 *
 * @param {jQuery.Event} oEvent
 * @param {boolean} bstopEvent
 * @param {int} iNewValue
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.saveValue = function(oEvent, bstopEvent, iNewValue) {
	if(bstopEvent){
		oEvent.preventDefault();
		// the control should not stop browser event propagation
		// Example: table control needs to catch and handle the event as well
		//oEvent.stopPropagation();
	}
	if(!this.getEditable()) {
		return false;
	}

	this.iHoveredRating = -1;
	if(iNewValue != -1 && iNewValue != this.getValue()){
		this.setValue(iNewValue);
		this.fireChange({value:iNewValue});
		return true;
	}else{
		//Update hover state only if value is not changed (otherwise rerendering is done anyway)
		for(var i=1; i<=this.getMaxValue(); i++){
			sap.ui.commons.RatingIndicatorRenderer.unhoverRatingSymbol(i, this);
		}
		this.setAriaState();
		return false;
	}
};

/**
 * Helper function to update the hover state when keyboard is used.
 *
 * @param {jQuery.Event} oEvent
 * @param {interger} iNewHoverValue
 * @private
 */
sap.ui.commons.RatingIndicator.prototype.updateHoverState = function(oEvent, iNewHoverValue) {
	oEvent.preventDefault();
	oEvent.stopPropagation();
	if(!this.getEditable()) {
		return;
	}
	this.iHoveredRating = iNewHoverValue;
	this.updateKeyboardHoverState();
};

/**
 * Setter for property <code>maxValue</code>.
 *
 * Default value is <code>5</code>
 * Minimum value is <code>1</code>
 *
 * @param {int} iMaxValue new value for property <code>maxValue</code>
 * @return {sap.ui.commons.RatingIndicator} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RatingIndicator.prototype.setMaxValue = function(iMaxValue) {
	if(iMaxValue < 1) {
		iMaxValue = 1;
	}
	this.setProperty("maxValue", iMaxValue);
	return this;
};

}; // end of sap/ui/commons/RatingIndicator.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ResponsiveContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ResponsiveContainer.
jQuery.sap.declare("sap.ui.commons.ResponsiveContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ResponsiveContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getRanges ranges} : sap.ui.commons.ResponsiveContainerRange[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getDefaultContent defaultContent} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.ResponsiveContainer#event:rangeSwitch rangeSwitch} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Is used to provide a container, which can show different content depending on its current width. It fires an event, whenever a new range is reached. In addition the content of the new range is automatically shown, if it is set.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ResponsiveContainer
 */
sap.ui.core.Control.extend("sap.ui.commons.ResponsiveContainer", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
	},
	aggregations : {
    	"ranges" : {type : "sap.ui.commons.ResponsiveContainerRange", multiple : true, singularName : "range"}, 
    	"content" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	associations : {
		"defaultContent" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"rangeSwitch" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ResponsiveContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ResponsiveContainer.extend
 * @function
 */

sap.ui.commons.ResponsiveContainer.M_EVENTS = {'rangeSwitch':'rangeSwitch'};


/**
 * Getter for property <code>width</code>.
 * The width of the responsive container.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.ResponsiveContainer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.ResponsiveContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainer#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The width of the responsive container.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.ResponsiveContainer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.ResponsiveContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainer#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>ranges</code>.<br/>
 * The ranges defined for this container
 * 
 * @return {sap.ui.commons.ResponsiveContainerRange[]}
 * @public
 * @name sap.ui.commons.ResponsiveContainer#getRanges
 * @function
 */


/**
 * Inserts a range into the aggregation named <code>ranges</code>.
 *
 * @param {sap.ui.commons.ResponsiveContainerRange}
 *          oRange the range to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the range should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the range is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the range is inserted at 
 *             the last position        
 * @return {sap.ui.commons.ResponsiveContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainer#insertRange
 * @function
 */

/**
 * Adds some range <code>oRange</code> 
 * to the aggregation named <code>ranges</code>.
 *
 * @param {sap.ui.commons.ResponsiveContainerRange}
 *            oRange the range to add; if empty, nothing is inserted
 * @return {sap.ui.commons.ResponsiveContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainer#addRange
 * @function
 */

/**
 * Removes an range from the aggregation named <code>ranges</code>.
 *
 * @param {int | string | sap.ui.commons.ResponsiveContainerRange} vRange the range to remove or its index or id
 * @return {sap.ui.commons.ResponsiveContainerRange} the removed range or null
 * @public
 * @name sap.ui.commons.ResponsiveContainer#removeRange
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>ranges</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.ResponsiveContainerRange[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.ResponsiveContainer#removeAllRanges
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.ResponsiveContainerRange</code> in the aggregation named <code>ranges</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.ResponsiveContainerRange}
 *            oRange the range whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.ResponsiveContainer#indexOfRange
 * @function
 */
	

/**
 * Destroys all the ranges in the aggregation 
 * named <code>ranges</code>.
 * @return {sap.ui.commons.ResponsiveContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainer#destroyRanges
 * @function
 */


/**
 * The default content to show, in case the range does not provide content
 *
 * @return {string} Id of the element which is the current target of the <code>defaultContent</code> association, or null
 * @public
 * @name sap.ui.commons.ResponsiveContainer#getDefaultContent
 * @function
 */

/**
 * The default content to show, in case the range does not provide content
 *
 * @param {string | sap.ui.core.Control} vDefaultContent 
 *    Id of an element which becomes the new target of this <code>defaultContent</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.ResponsiveContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainer#setDefaultContent
 * @function
 */


	
/**
 * The event is fired the width of the container reaches a new range. 
 *
 * @name sap.ui.commons.ResponsiveContainer#rangeSwitch
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.commons.ResponsiveContainerRange} oControlEvent.getParameters.currentRange The current range
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'rangeSwitch' event of this <code>sap.ui.commons.ResponsiveContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.ResponsiveContainer</code>.<br/> itself. 
 *  
 * The event is fired the width of the container reaches a new range. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.ResponsiveContainer</code>.<br/> itself.
 *
 * @return {sap.ui.commons.ResponsiveContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainer#attachRangeSwitch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'rangeSwitch' event of this <code>sap.ui.commons.ResponsiveContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.ResponsiveContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainer#detachRangeSwitch
 * @function
 */

/**
 * Fire event rangeSwitch to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'currentRange' of type <code>sap.ui.commons.ResponsiveContainerRange</code> The current range</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ResponsiveContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.ResponsiveContainer#fireRangeSwitch
 * @function
 */


// Start of sap\ui\commons\ResponsiveContainer.js
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained


/**
 * Control Initialization
 * @private
 */
sap.ui.commons.ResponsiveContainer.prototype.init = function(){
	this.oCurrentRange = null;
};

/**
 * Destructor
 * @private
 */
sap.ui.commons.ResponsiveContainer.prototype.exit = function (){
	// Cleanup resize event registration on exit
	if (this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};

/**
 * Before rendering
 */
sap.ui.commons.ResponsiveContainer.prototype.onBeforeRendering = function() {
	// Cleanup resize event registration before re-rendering
	if (this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
	if (!this.getAggregation("content")) {
		var oDefaultContent = sap.ui.getCore().byId(this.getDefaultContent());
		this.setAggregation("content", oDefaultContent);
	}
};

/**
 * After rendering
 */
sap.ui.commons.ResponsiveContainer.prototype.onAfterRendering = function() {
	var fnResizeHandler = jQuery.proxy(this.onresize, this);
	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), fnResizeHandler);
	this.refreshRangeDimensions();
	if (!this.oCurrentRange) {
		setTimeout(fnResizeHandler, 0);
	}
};

/**
 * Resize handling
 */
sap.ui.commons.ResponsiveContainer.prototype.onresize = function(oEvent) {
	var oRange = this.findMatchingRange(),
		sContentId = oRange && oRange.getContent(),
		oNewContent;
	if (this.oCurrentRange != oRange) {
		this.oCurrentRange = oRange;
		if (!oRange) {
			sContentId = this.getDefaultContent();
		}
		oNewContent = sap.ui.getCore().byId(sContentId);
		this.setAggregation("content", oNewContent);
		this.fireRangeSwitch({
			currentRange: this.oCurrentRange
		});
	}
};

/**
 * Refresh ranges, updates the range sizes from the DOM.
 * Loop through all the rendered divs for the ranges and read their width and height
 * for later comparison with the current container size
 */
sap.ui.commons.ResponsiveContainer.prototype.refreshRangeDimensions = function() {
	var aRanges = this.getRanges(),
		aRangeDimensions = [],
		$Range;
	jQuery.each(aRanges, function(i, oRange) {
		$Range = oRange.$();
		aRangeDimensions.push({
			range: oRange,
			width: $Range.width(),
			height: $Range.height()
		})
	});
	this.aRangeDimensions = aRangeDimensions;
};

/**
 * Find best matching range, finds the range which best fills the available space.
 * Reads the current width and height of the container and compares to the stored range
 * dimensions to find the best match.
 */
sap.ui.commons.ResponsiveContainer.prototype.findMatchingRange = function() {
	var $Container = this.$(),
		iWidth = $Container.width(),
		iHeight = $Container.height(),
		iRangeWidth, iRangeHeight,
		aRangeDimensions = this.aRangeDimensions,
		oMatch = null;
	jQuery.each(aRangeDimensions, function(i, oRangeDim) {
		iRangeWidth = oRangeDim.width || iWidth;
		iRangeHeight = oRangeDim.height || iHeight;
		if (iRangeWidth <= iWidth && iRangeHeight <= iHeight) {
			oRangeDim.area = iRangeWidth * iRangeHeight;
			if (!oMatch || oMatch.area < oRangeDim.area) {
				oMatch = oRangeDim;
			}
		}
	});
	return oMatch && oMatch.range;
};


}; // end of sap/ui/commons/ResponsiveContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ResponsiveContainerRange') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ResponsiveContainerRange.
jQuery.sap.declare("sap.ui.commons.ResponsiveContainerRange");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ResponsiveContainerRange.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getKey key} : string (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getContent content} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Defines a range for the ResponsiveContainer
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ResponsiveContainerRange
 */
sap.ui.core.Control.extend("sap.ui.commons.ResponsiveContainerRange", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"key" : {type : "string", group : "Misc", defaultValue : ''}
	},
	associations : {
		"content" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ResponsiveContainerRange with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ResponsiveContainerRange.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The minimal width for this range to be displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.ResponsiveContainerRange#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.ResponsiveContainerRange} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainerRange#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The minimal height for this range to be displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.ResponsiveContainerRange#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.ResponsiveContainerRange} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainerRange#setHeight
 * @function
 */


/**
 * Getter for property <code>key</code>.
 * A key which can be used to identify the range (optional).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>key</code>
 * @public
 * @name sap.ui.commons.ResponsiveContainerRange#getKey
 * @function
 */

/**
 * Setter for property <code>key</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKey  new value for property <code>key</code>
 * @return {sap.ui.commons.ResponsiveContainerRange} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainerRange#setKey
 * @function
 */


/**
 * The content to show for this range (optional).
 *
 * @return {string} Id of the element which is the current target of the <code>content</code> association, or null
 * @public
 * @name sap.ui.commons.ResponsiveContainerRange#getContent
 * @function
 */

/**
 * The content to show for this range (optional).
 *
 * @param {string | sap.ui.core.Control} vContent 
 *    Id of an element which becomes the new target of this <code>content</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.ResponsiveContainerRange} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ResponsiveContainerRange#setContent
 * @function
 */


	
// Start of sap\ui\commons\ResponsiveContainerRange.js

}; // end of sap/ui/commons/ResponsiveContainerRange.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RichTooltip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RichTooltip.
jQuery.sap.declare("sap.ui.commons.RichTooltip");

jQuery.sap.require('sap.ui.core.TooltipBase'); // unlisted dependency retained



/**
 * Constructor for a new RichTooltip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getImageSrc imageSrc} : sap.ui.core.URI</li>
 * <li>{@link #getValueStateText valueStateText} : string</li>
 * <li>{@link #getImageAltText imageAltText} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.TooltipBase#constructor sap.ui.core.TooltipBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Is used to provide tool tips that can have long text, image and title. This tool tip extends the TooltipBase.
 * 
 * @extends sap.ui.core.TooltipBase
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.RichTooltip
 */
sap.ui.core.TooltipBase.extend("sap.ui.commons.RichTooltip", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"imageSrc" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"valueStateText" : {type : "string", group : "Misc", defaultValue : null},
		"imageAltText" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
    	"formattedText" : {type : "sap.ui.commons.FormattedTextView", multiple : false, visibility : "hidden"}, 
    	"individualStateText" : {type : "sap.ui.commons.FormattedTextView", multiple : false, visibility : "hidden"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RichTooltip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RichTooltip.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Tool tip title to be displayed in the header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.commons.RichTooltip#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.commons.RichTooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RichTooltip#setTitle
 * @function
 */


/**
 * Getter for property <code>imageSrc</code>.
 * If RichTooltip contains an image, this property is used to define the source path.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>imageSrc</code>
 * @public
 * @name sap.ui.commons.RichTooltip#getImageSrc
 * @function
 */

/**
 * Setter for property <code>imageSrc</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sImageSrc  new value for property <code>imageSrc</code>
 * @return {sap.ui.commons.RichTooltip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RichTooltip#setImageSrc
 * @function
 */


/**
 * Getter for property <code>valueStateText</code>.
 * This property is an individual text that will be used instead of the default ValueState text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueStateText</code>
 * @public
 * @since 1.11.1
 * @name sap.ui.commons.RichTooltip#getValueStateText
 * @function
 */

/**
 * Setter for property <code>valueStateText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueStateText  new value for property <code>valueStateText</code>
 * @return {sap.ui.commons.RichTooltip} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.1
 * @name sap.ui.commons.RichTooltip#setValueStateText
 * @function
 */


/**
 * Getter for property <code>imageAltText</code>.
 * This is the alt text for the image
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageAltText</code>
 * @public
 * @since 1.11.1
 * @name sap.ui.commons.RichTooltip#getImageAltText
 * @function
 */

/**
 * Setter for property <code>imageAltText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageAltText  new value for property <code>imageAltText</code>
 * @return {sap.ui.commons.RichTooltip} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.1
 * @name sap.ui.commons.RichTooltip#setImageAltText
 * @function
 */


// Start of sap\ui\commons\RichTooltip.js
/**
 * Calculates the height of the RichTooltip to set a proper min-height.
 * Additionally the ARIA attributes are set to the corresponding elements.
 *
 * @public
 *
 */
sap.ui.commons.RichTooltip.prototype.onAfterRendering = function() {
	var oText = this.getAggregation("formattedText");
	if (oText && oText.getDomRef()) {
		// set a corresponding ARIA role if there is a text
		oText.$().attr("role", "tooltip");

		if (this.getImageSrc() !== "") {
			// if text and image are set a bigger min-width is needed
			this.$().addClass("sapUiRttContentWide");
		}
	}
};

/**
 * This sets an individual text for the ValueState of the parent element of the
 * RichTooltip.
 *
 * @param sText
 *            {sap.ui.core.string} the text that should be shown as individual
 *            ValueState text
 */
sap.ui.commons.RichTooltip.prototype.setValueStateText = function(sText) {
	var oValueStateText = this.getAggregation("individualStateText");
	if (sText) {
		if (oValueStateText) {
			oValueStateText.setHtmlText(sText);
		} else {
			oValueStateText = new sap.ui.commons.FormattedTextView(this.getId() + "-valueStateText", {
				htmlText : sText
			}).addStyleClass("sapUiRttValueStateText").addStyleClass("individual");

			this.setAggregation("individualStateText", oValueStateText);
			this.setProperty("valueStateText", sText, true);
		}
	} else {
		if (oValueStateText) {
			this.setAggregation("individualStateText", oValueStateText);
		}
	}
};

/**
 * This returns the previously set text. Since a FormattedTextView is used for
 * rendering and stuff the corresponding property of the FormattedTextView is
 * being read and returned. If no text was set an empty string is being
 * returned.
 *
 * @returns {sap.ui.core.string} the ValueState text that was previously set.
 * @public
 */
sap.ui.commons.RichTooltip.prototype.getValueStateText = function() {
	var oValueStateText = this.getAggregation("individualStateText");
	if (oValueStateText) {
		return oValueStateText.getHtmlText();
	}
	return "";
};

/**
 * This overrides the function of TooltipBase to create a FormattedTextView that
 * should be used for rendering
 *
 * @override sap.ui.core.TooltipBase.setText
 * @param sText
 *            {sap.ui.core.string} the text that should be shown
 */
sap.ui.commons.RichTooltip.prototype.setText = function(sText) {
	if(!!sText){
		//replace carriage returns etc. with br tag
		sText = sText.replace(/(\r\n|\n|\r)/g,"<br />");
	}
	var oText = this.getAggregation("formattedText");
	if (oText) {
		oText.setHtmlText(sText);
	} else {
		oText = new sap.ui.commons.FormattedTextView(this.getId() + "-txt", {
			htmlText : sText
		}).addStyleClass("sapUiRttText");
		this.setAggregation("formattedText", oText);
		this.setProperty("text", sText, true);
	}
};

/**
 * This returns the previously set text. Since a FormattedTextView is used for
 * rendering and stuff the corresponding property of the FormattedTextView is
 * being read and returned. If no text was set an empty string is being
 * returned.
 *
 * @returns {sap.ui.core.string} the text that was previously set.
 * @override TooltipBase.getText
 */
sap.ui.commons.RichTooltip.prototype.getText = function() {
	var oText = this.getAggregation("formattedText");
	if (oText) {
		return oText.getHtmlText();
	}
	return "";
};

sap.ui.commons.RichTooltip.prototype.onfocusin = function(oEvent) {
	sap.ui.core.TooltipBase.prototype.onfocusin.apply(this, arguments);

	var oSC = jQuery(oEvent.target).control(0);
	if (oSC != null) {
		var sId = this.getId();
		var sIds = "";

		if (this.getTitle() !== "") {
			sIds += sId + "-title ";
		}

		var $valueStateText = this.$("valueStateText");
		if ($valueStateText.length > 0) {
			sIds += sId + "-valueStateText ";
		}

		// alt image
		if (this.getImageSrc() !== "") {
			sIds += sId + "-image ";
		}

		//
		if (this.getText() !== "") {
			sIds += sId + "-txt";
		}

		var oDomRef = oSC.getFocusDomRef();
		oDomRef.setAttribute("aria-describedby", sIds);
	}
};

}; // end of sap/ui/commons/RichTooltip.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RoadMap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RoadMap.
jQuery.sap.declare("sap.ui.commons.RoadMap");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new RoadMap.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getNumberOfVisibleSteps numberOfVisibleSteps} : int</li>
 * <li>{@link #getFirstVisibleStep firstVisibleStep} : string</li>
 * <li>{@link #getSelectedStep selectedStep} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSteps steps} <strong>(default aggregation)</strong> : sap.ui.commons.RoadMapStep[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.RoadMap#event:stepSelected stepSelected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.RoadMap#event:stepExpanded stepExpanded} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Is used to display step-by-step work flows of a clearly defined work process
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.RoadMap
 */
sap.ui.core.Control.extend("sap.ui.commons.RoadMap", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"numberOfVisibleSteps" : {type : "int", group : "Misc", defaultValue : null},
		"firstVisibleStep" : {type : "string", group : "Misc", defaultValue : null},
		"selectedStep" : {type : "string", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	defaultAggregation : "steps",
	aggregations : {
    	"steps" : {type : "sap.ui.commons.RoadMapStep", multiple : true, singularName : "step"}
	},
	events : {
		"stepSelected" : {}, 
		"stepExpanded" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RoadMap with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RoadMap.extend
 * @function
 */

sap.ui.commons.RoadMap.M_EVENTS = {'stepSelected':'stepSelected','stepExpanded':'stepExpanded'};


/**
 * Getter for property <code>numberOfVisibleSteps</code>.
 * Total number of steps to be displayed at once
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>numberOfVisibleSteps</code>
 * @public
 * @name sap.ui.commons.RoadMap#getNumberOfVisibleSteps
 * @function
 */

/**
 * Setter for property <code>numberOfVisibleSteps</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iNumberOfVisibleSteps  new value for property <code>numberOfVisibleSteps</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#setNumberOfVisibleSteps
 * @function
 */


/**
 * Getter for property <code>firstVisibleStep</code>.
 * Id of the first step to be displayed
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>firstVisibleStep</code>
 * @public
 * @name sap.ui.commons.RoadMap#getFirstVisibleStep
 * @function
 */

/**
 * Setter for property <code>firstVisibleStep</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFirstVisibleStep  new value for property <code>firstVisibleStep</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#setFirstVisibleStep
 * @function
 */


/**
 * Getter for property <code>selectedStep</code>.
 * Id of the step which is currently selected
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedStep</code>
 * @public
 * @name sap.ui.commons.RoadMap#getSelectedStep
 * @function
 */

/**
 * Setter for property <code>selectedStep</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedStep  new value for property <code>selectedStep</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#setSelectedStep
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Control width in CSS size
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.RoadMap#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#setWidth
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.RoadMap#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>steps</code>.<br/>
 * Steps that are composing the RoadMap
 * 
 * <strong>Note</strong>: this is the default aggregation for RoadMap.
 * @return {sap.ui.commons.RoadMapStep[]}
 * @public
 * @name sap.ui.commons.RoadMap#getSteps
 * @function
 */


/**
 * Inserts a step into the aggregation named <code>steps</code>.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *          oStep the step to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the step should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the step is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the step is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#insertStep
 * @function
 */

/**
 * Adds some step <code>oStep</code> 
 * to the aggregation named <code>steps</code>.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *            oStep the step to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#addStep
 * @function
 */

/**
 * Removes an step from the aggregation named <code>steps</code>.
 *
 * @param {int | string | sap.ui.commons.RoadMapStep} vStep the step to remove or its index or id
 * @return {sap.ui.commons.RoadMapStep} the removed step or null
 * @public
 * @name sap.ui.commons.RoadMap#removeStep
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>steps</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.RoadMapStep[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RoadMap#removeAllSteps
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.RoadMapStep</code> in the aggregation named <code>steps</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *            oStep the step whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.RoadMap#indexOfStep
 * @function
 */
	

/**
 * Destroys all the steps in the aggregation 
 * named <code>steps</code>.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#destroySteps
 * @function
 */


/**
 * Event is fired when the user selects a step; assumption is that this step was not selected with the previously done select action. 
 *
 * @name sap.ui.commons.RoadMap#stepSelected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.stepId Id of the selected step
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'stepSelected' event of this <code>sap.ui.commons.RoadMap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.RoadMap</code>.<br/> itself. 
 *  
 * Event is fired when the user selects a step; assumption is that this step was not selected with the previously done select action. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.RoadMap</code>.<br/> itself.
 *
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#attachStepSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'stepSelected' event of this <code>sap.ui.commons.RoadMap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#detachStepSelected
 * @function
 */

/**
 * Fire event stepSelected to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'stepId' of type <code>string</code> Id of the selected step</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.RoadMap#fireStepSelected
 * @function
 */


/**
 * Event is fired when a given step is expanded or collapsed by user. 
 *
 * @name sap.ui.commons.RoadMap#stepExpanded
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.stepId Id of the expanded/collapsed step
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'stepExpanded' event of this <code>sap.ui.commons.RoadMap</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.RoadMap</code>.<br/> itself. 
 *  
 * Event is fired when a given step is expanded or collapsed by user. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.RoadMap</code>.<br/> itself.
 *
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#attachStepExpanded
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'stepExpanded' event of this <code>sap.ui.commons.RoadMap</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMap#detachStepExpanded
 * @function
 */

/**
 * Fire event stepExpanded to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'stepId' of type <code>string</code> Id of the expanded/collapsed step</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RoadMap} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.RoadMap#fireStepExpanded
 * @function
 */


// Start of sap\ui\commons\RoadMap.js
(function() {

/**
 * Does the setup when the RoadMap is created.
 * @private
 */
sap.ui.commons.RoadMap.prototype.init = function(){
	this.iStepWidth = -1;
	this.sCurrentFocusedStepRefId = null;
};

/**
 * Does all the cleanup when the RoadMap is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.RoadMap.prototype.exit = function (){
	// Cleanup resize event registration
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};


//Setter for property numberOfVisibleSteps which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMap.prototype.setNumberOfVisibleSteps = function(iNumberOfVisibleSteps) {
	var bIsRendered = this.getDomRef() ? true : false;
	this.setProperty("numberOfVisibleSteps", iNumberOfVisibleSteps, bIsRendered);
	if(bIsRendered) {
		sap.ui.commons.RoadMapRenderer.updateScrollArea(this, true);
	}
	return this;
};


//Setter for property firstVisibleStep which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMap.prototype.setFirstVisibleStep = function(sFirstVisibleStep) {
	var bIsRendered = this.getDomRef() ? true : false;
	if(bIsRendered){
		if(sFirstVisibleStep){
			var oStep = sap.ui.getCore().byId(sFirstVisibleStep);
			if(oStep && oStep.getParent() && (oStep.getParent() === this || oStep.getParent().getParent() === this) && oStep.getVisible()){
				this.setProperty("firstVisibleStep", sFirstVisibleStep, true);
				sap.ui.commons.RoadMapRenderer.updateScrollArea(this);
			}
		}else{
			this.setProperty("firstVisibleStep", "", true);
			sap.ui.commons.RoadMapRenderer.updateScrollArea(this);
		}
	}else{
		this.setProperty("firstVisibleStep", sFirstVisibleStep);
	}
	return this;
};


//Setter for property width which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMap.prototype.setWidth = function(sWidth) {
	var bIsRendered = this.getDomRef() ? true : false;
	this.setProperty("width", sWidth, bIsRendered);
	if(bIsRendered){
		sap.ui.commons.RoadMapRenderer.setRoadMapWidth(this, sWidth);
		sap.ui.commons.RoadMapRenderer.updateScrollArea(this, true);
	}
	return this;
};


//Setter for property selectedStep which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMap.prototype.setSelectedStep = function(sSelectedStep) {
	var bIsRendered = this.getDomRef() ? true : false;
	if(bIsRendered){
		if(sSelectedStep){
			var oStep = sap.ui.getCore().byId(sSelectedStep);
			if(oStep && oStep.getParent() && (oStep.getParent() === this || oStep.getParent().getParent() === this)
				&& oStep.getEnabled() && oStep.getVisible()){
				sap.ui.commons.RoadMapRenderer.selectStepWithId(this, sSelectedStep);
				this.setProperty("selectedStep", sSelectedStep, true);
			}
		}else{
			sap.ui.commons.RoadMapRenderer.selectStepWithId(this, "");
			this.setProperty("selectedStep", "", true);
		}
	}else{
		this.setProperty("selectedStep", sSelectedStep);
	}
	return this;
};


/**
 * Called when the theme is changed.
 * @private
 */
sap.ui.commons.RoadMap.prototype.onThemeChanged = function(oEvent){
	this.iStepWidth = -1;
	if (this.getDomRef()) {
		this.invalidate();
	}
};


/**
 * Called before rendering starts by the renderer
 * (This is not the onBeforeRendering method which would be not called for the first rendering)
 * @private
 */
sap.ui.commons.RoadMap.prototype.doBeforeRendering = function(){
	//Bring the properties into a solid state
	var bIsValidSelectedStep = false;
	var bIsValidFirstStep = false;
	var aSteps = this.getSteps();
	for(var i=0; i<aSteps.length; i++){
		var oStep = aSteps[i];
		//expanded=true only possible if substeps available and enabled
		if(oStep.getSubSteps().length == 0 || !oStep.getEnabled()){
			oStep.setProperty("expanded", false, true);
		}
		//A selected step must exist, be enabled and visible
		if(!oStep.getEnabled() && !oStep.getVisible() && this.getSelectedStep() == oStep.getId()){
			this.setProperty("selectedStep", "", true);
		}else if(oStep.getEnabled() && oStep.getVisible() && this.getSelectedStep() == oStep.getId()){
			bIsValidSelectedStep = true;
		}
		//A first step must exist and be visible
		if(oStep.getVisible() && this.getFirstVisibleStep() == oStep.getId()){
			bIsValidFirstStep = true;
		}

		var aSubSteps = oStep.getSubSteps();
		for(var j=0; j<aSubSteps.length; j++){
			var oSubStep = aSubSteps[j];
			//expanded always false
			oSubStep.setProperty("expanded", false, true);
			//A selected step must exist, be enabled and visible
			if(!oSubStep.getEnabled() && !oSubStep.getVisible() && this.getSelectedStep() == oSubStep.getId()){
				this.setProperty("selectedStep", "", true);
			}else if(oSubStep.getEnabled() && oSubStep.getVisible() && this.getSelectedStep() == oSubStep.getId()){
				bIsValidSelectedStep = true;
			}
			//A first step must exist and be visible
			if(oSubStep.getVisible() && this.getFirstVisibleStep() == oSubStep.getId()){
				bIsValidFirstStep = true;
			}
		}
	}

	if(!bIsValidSelectedStep) {
		this.setProperty("selectedStep", "", true);
	}
	if(!bIsValidFirstStep) {
		this.setProperty("firstVisibleStep", "", true);
	}

	// Cleanup resize event registration before re-rendering
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};


/**
 * Called when the rendering is complete
 * @private
 */
sap.ui.commons.RoadMap.prototype.onAfterRendering = function(){

	var aSteps = this.getSteps();

	//Compute the step width
	if(this.iStepWidth == -1 && aSteps.length > 0){
		var jRef = aSteps[0].$();
		this.iStepWidth = jRef.outerWidth();
	}

	//Adapt the step labels if needed
	for(var i=0; i<aSteps.length; i++){
		var oStep = aSteps[i];
		sap.ui.commons.RoadMapRenderer.addEllipses(oStep);
		var aSubSteps = oStep.getSubSteps();
		for(var j=0; j<aSubSteps.length; j++){
			sap.ui.commons.RoadMapRenderer.addEllipses(aSubSteps[j]);
		}
	}

	//Adapt the size of the scroll area
	sap.ui.commons.RoadMapRenderer.updateScrollArea(this);

	// Listen to resizing
	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this.onresize, this));
};


/**
 * Called when the Roadmap is resized
 * @private
 */
sap.ui.commons.RoadMap.prototype.onresize = function(oEvent) {
	var fDoOnResize = function() {
		if (this.getDomRef()) {
			//Adapt the size of the scroll area
			sap.ui.commons.RoadMapRenderer.updateScrollArea(this, true);
			refreshFocus(this, "prev");
			this.sResizeInProgress = null;
		}
	};

	if(!!sap.ui.Device.browser.firefox){
		fDoOnResize.apply(this, []);
	}else{
		if(!this.sResizeInProgress){
			this.sResizeInProgress = jQuery.sap.delayedCall(300, this, fDoOnResize);
		}
	}
};


/**
 * Behavior implementation which is executed when the user clicks the step.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onclick = function(oEvent){
	handleSelect(this, oEvent);
};


/**
 * Behavior implementation which is executed when the user presses the space or enter key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsapselect = function(oEvent){
	handleSelect(this, oEvent);
};


/**
 * Behavior implementation which is executed when the focus comes into the control or on one of its children.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onfocusin = function(oEvent){
	var jTarget = jQuery(oEvent.target);
	var jTargetId = jTarget.attr("id");
	if(jTargetId && jQuery.sap.endsWith(jTargetId, "-box")){
		this.sCurrentFocusedStepRefId = jTargetId.substring(0, jTargetId.length-4);
	}else if(jTargetId && (jQuery.sap.endsWith(jTargetId, "-Start") || jQuery.sap.endsWith(jTargetId, "-End"))){
		//Keep the current focus
	}else{
		this.sCurrentFocusedStepRefId = sap.ui.commons.RoadMapRenderer.getFirstVisibleRef(this).attr("id");
		refreshFocus(this);
	}
	//Remove the control from tab chain to make tab out working (see onfocusout)
	this.$().attr("tabindex", "-1");
};


/**
 * Behavior implementation which is executed when the focus leaves the control or one of its children.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onfocusout = function(oEvent){
	//Add the control to tab chain again to make tab in working (see onfocusin)
	this.$().attr("tabindex", "0");
};


/**
 * Behavior implementation which is executed when the user presses the arrow up or arrow left (RTL: arrow right) key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsapprevious = function(oEvent){
	focusStep(oEvent, this, "prev");
};


/**
 * Behavior implementation which is executed when the user presses the arrow down or arrow right (RTL: arrow left) key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsapnext = function(oEvent){
	focusStep(oEvent, this, "next");
};


/**
 * Behavior implementation which is executed when the user presses the home/pos1 key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsaphome = function(oEvent){
	focusStep(oEvent, this, "first");
};


/**
 * Behavior implementation which is executed when the user presses the end key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMap.prototype.onsapend = function(oEvent){
	focusStep(oEvent, this, "last");
};


//********* Private *********


//Called when either the Roadmap is clicked or the space or enter key is pressed
var handleSelect = function(oThis, oEvent){
	oEvent.stopPropagation();
	oEvent.preventDefault();

	var jTarget = jQuery(oEvent.target);
	var sTargetId = jTarget.attr("id");

	if(!sTargetId) {
		return;
	}

	//Handle event for the end of an expandable step
	var iIdx = sTargetId.lastIndexOf("-expandend");
	if(iIdx != -1){
		var oStep = sap.ui.getCore().byId(sTargetId.substring(0, iIdx));
		if(oStep && oThis.indexOfStep(oStep) >= 0){
			oStep.handleSelect(oEvent, true);
			return;
		}
	}

	//Handle select on delimiter
	if(sTargetId == oThis.getId() + "-Start"){
		if(jTarget.hasClass("sapUiRoadMapStartScroll")){
			scrollToNextStep(oThis, "prev", true);
		}else{
			refreshFocus(oThis);
		}
	}else if(sTargetId == oThis.getId() + "-End"){
		if(jTarget.hasClass("sapUiRoadMapEndScroll")){
			scrollToNextStep(oThis, "next", true);
		}else{
			refreshFocus(oThis);
		}
	}
};


//Helper function to scroll to following step (optionally with updating the focus (see focusStep)).
//Allowed directions are: next, prev, first, last.
var scrollToNextStep = function(oThis, sDir, bUpdateFocus){
	sap.ui.commons.RoadMapRenderer.scrollToNextStep(oThis, sDir, function(sFirstVisibleNodeId){
		var iIdx = sFirstVisibleNodeId.lastIndexOf("-expandend");
		if(iIdx != -1) {
			sFirstVisibleNodeId = sFirstVisibleNodeId.substring(0, iIdx);
		}
		oThis.setProperty("firstVisibleStep", sFirstVisibleNodeId, true);

		if(bUpdateFocus) {
			refreshFocus(oThis, sDir);
		}
	});
};


//Helper function to focus the following step of the current focused step in the given direction.
//Allowed directions are: next, prev, first, last. If this step is not visible an automatic scrolling is done.
var focusStep = function(oEvent, oThis, sDir){
	if(oEvent){
		oEvent.stopPropagation();
		oEvent.preventDefault();
	}
	if(!oThis.sCurrentFocusedStepRefId) {
		return;
	}

	var sFoo = sDir+"All";
	var bIsJumpToDelimiter = false;
	if(sDir == "first"){
		sFoo = "prevAll";
		bIsJumpToDelimiter = true;
	}else if(sDir == "last"){
		sFoo = "nextAll";
		bIsJumpToDelimiter = true;
	}

	var jCurrentFocusStep = jQuery.sap.byId(oThis.sCurrentFocusedStepRefId);
	var jFollowingSteps = jCurrentFocusStep[sFoo](":visible");
	var sFollowingFocusStepId = jQuery(jFollowingSteps.get(bIsJumpToDelimiter ? jFollowingSteps.length-1 : 0)).attr("id");
	if(sFollowingFocusStepId){
		if(!sap.ui.commons.RoadMapRenderer.isVisibleRef(oThis, sFollowingFocusStepId)) {
			scrollToNextStep(oThis, sDir);
		}

		jQuery.sap.byId(sFollowingFocusStepId+"-box").get(0).focus();
	}
};


//Sets the focus on the current focused step again. If the current focused step is not visible anymore
//the following step in the given direction is focused. Allowed directions are: next, prev, first, last
var refreshFocus = function(oThis, sDir){
	if(!oThis.sCurrentFocusedStepRefId) {
		return;
	}

	if(sDir && !sap.ui.commons.RoadMapRenderer.isVisibleRef(oThis, oThis.sCurrentFocusedStepRefId)){
		focusStep(null, oThis, sDir);
	}else{
		jQuery.sap.byId(oThis.sCurrentFocusedStepRefId+"-box").get(0).focus();
	}
};

}());
}; // end of sap/ui/commons/RoadMap.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RoadMapStep') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RoadMapStep.
jQuery.sap.declare("sap.ui.commons.RoadMapStep");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new RoadMapStep.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSubSteps subSteps} <strong>(default aggregation)</strong> : sap.ui.commons.RoadMapStep[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Step used within a RoadMap Control.
 * 
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.RoadMapStep
 */
sap.ui.core.Element.extend("sap.ui.commons.RoadMapStep", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"label" : {type : "string", group : "Misc", defaultValue : null},
		"enabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"expanded" : {type : "boolean", group : "Misc", defaultValue : false, deprecated: true},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	defaultAggregation : "subSteps",
	aggregations : {
    	"subSteps" : {type : "sap.ui.commons.RoadMapStep", multiple : true, singularName : "subStep", deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RoadMapStep with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RoadMapStep.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * Label of the step
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.ui.commons.RoadMapStep#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMapStep#setLabel
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Specifies whether the user shall be allowed to click a step, or not
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.RoadMapStep#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMapStep#setEnabled
 * @function
 */


/**
 * Getter for property <code>expanded</code>.
 * This property is only relevant when using sub steps.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * @deprecated Since version 1.10.5. 
 * Note that sub steps will not be supported in future. This feature might be removed in one of the next releases.
 * @name sap.ui.commons.RoadMapStep#getExpanded
 * @function
 */

/**
 * Setter for property <code>expanded</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bExpanded  new value for property <code>expanded</code>
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.10.5. 
 * Note that sub steps will not be supported in future. This feature might be removed in one of the next releases.
 * @name sap.ui.commons.RoadMapStep#setExpanded
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Step is visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.RoadMapStep#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RoadMapStep#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>subSteps</code>.<br/>
 * Sub steps for the current step. Will be displayed only in the case that the step is expanded. Otherwise, special arrows show the availability
 * of sub steps. One level of sub steps supported.
 * 
 * <strong>Note</strong>: this is the default aggregation for RoadMapStep.
 * @return {sap.ui.commons.RoadMapStep[]}
 * @public
 * @deprecated Since version 1.10.5. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 * @name sap.ui.commons.RoadMapStep#getSubSteps
 * @function
 */


/**
 * Inserts a subStep into the aggregation named <code>subSteps</code>.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *          oSubStep the subStep to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the subStep should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the subStep is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the subStep is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.10.5. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 * @name sap.ui.commons.RoadMapStep#insertSubStep
 * @function
 */

/**
 * Adds some subStep <code>oSubStep</code> 
 * to the aggregation named <code>subSteps</code>.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *            oSubStep the subStep to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.10.5. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 * @name sap.ui.commons.RoadMapStep#addSubStep
 * @function
 */

/**
 * Removes an subStep from the aggregation named <code>subSteps</code>.
 *
 * @param {int | string | sap.ui.commons.RoadMapStep} vSubStep the subStep to remove or its index or id
 * @return {sap.ui.commons.RoadMapStep} the removed subStep or null
 * @public
 * @deprecated Since version 1.10.5. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 * @name sap.ui.commons.RoadMapStep#removeSubStep
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>subSteps</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.RoadMapStep[]} an array of the removed elements (might be empty)
 * @public
 * @deprecated Since version 1.10.5. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 * @name sap.ui.commons.RoadMapStep#removeAllSubSteps
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.RoadMapStep</code> in the aggregation named <code>subSteps</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.RoadMapStep}
 *            oSubStep the subStep whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @deprecated Since version 1.10.5. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 * @name sap.ui.commons.RoadMapStep#indexOfSubStep
 * @function
 */
	

/**
 * Destroys all the subSteps in the aggregation 
 * named <code>subSteps</code>.
 * @return {sap.ui.commons.RoadMapStep} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.10.5. 
 * Sub steps will not be supported in future. This feature might be removed in one of the next releases.
 * @name sap.ui.commons.RoadMapStep#destroySubSteps
 * @function
 */


// Start of sap\ui\commons\RoadMapStep.js
(function() {

//Setter for property label which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMapStep.prototype.setLabel = function(sLabel) {
	setProperty(this, "label", sLabel, function(){
		sap.ui.commons.RoadMapRenderer.setStepLabel(this, sLabel);
		this.setProperty("label", sLabel, true);
		sap.ui.commons.RoadMapRenderer.addEllipses(this);
		return true;
	});
	return this;
};


//Setter for property enabled which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMapStep.prototype.setEnabled = function(bEnabled) {
	var bOldEnabled = this.getEnabled();
	if((bEnabled && bOldEnabled) || (!bEnabled && !bOldEnabled)) {
		return this;
	}
	setProperty(this, "enabled", bEnabled, function(){
		var oRoadMap = getRoadMap(this);
		var bWasSelected = sap.ui.commons.RoadMapRenderer.setStepEnabled(oRoadMap, this, bEnabled);
		if(bWasSelected) {
			oRoadMap.setProperty("selectedStep", "", true);
		}
		if(!bEnabled) {
			this.setExpanded(false);
		}
		return false;
	});
	return this;
};


//Setter for property expanded which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMapStep.prototype.setExpanded = function(bExpanded) {
	var bOldExpanded= this.getExpanded();
	if((bExpanded && bOldExpanded) || (!bExpanded && !bOldExpanded)) {
		return this;
	}
	setProperty(this, "expanded", bExpanded, function(){
		if(isSubStep(this) || this.getSubSteps().length == 0 || !this.getEnabled() || !bExpanded){
			this.setProperty("expanded", false, true);
			if(!isSubStep(this) && this.getSubSteps().length > 0 && this.getEnabled()){
				sap.ui.commons.RoadMapRenderer.selectStep(getRoadMap(this), this, false, true, null, true);
			}
		}else{
			this.setProperty("expanded", true, true);
			sap.ui.commons.RoadMapRenderer.selectStep(getRoadMap(this), this, false, true, null, true);
		}
		return true;
	});
	return this;
};


//Setter for property visible which suppresses rerendering if possible -> Comment generated automatically
sap.ui.commons.RoadMapStep.prototype.setVisible = function(bVisible) {
	var bOldVisible = this.getVisible();
	if((bVisible && bOldVisible) || (!bVisible && !bOldVisible)) {
		return this;
	}
	setProperty(this, "visible", bVisible, function(){
		var oRoadMap = getRoadMap(this);
		var bWasSelected = sap.ui.commons.RoadMapRenderer.setStepVisible(oRoadMap, this, isSubStep(this), bVisible);
		if(bWasSelected) {
			oRoadMap.setProperty("selectedStep", "", true);
		}
		this.setProperty("visible", bVisible, true);
		sap.ui.commons.RoadMapRenderer.updateStepArea(oRoadMap);
		sap.ui.commons.RoadMapRenderer.updateStepAria(this);
		return true;
	});
	return this;
};


/**
 * Returns the dom reference that should get the focus
 * @type DOMNode
 * @return Returns the dom reference that should get the focus
 */
sap.ui.commons.RoadMapStep.prototype.getFocusDomRef = function () {
	return jQuery.sap.byId(this.getFocusInfo().id).get(0) || null;
};


/**
 * Returns an object representing the serialized focus information
 * @type object
 * @return an object representing the serialized focus information
 * @private
 */
sap.ui.commons.RoadMapStep.prototype.getFocusInfo = function () {
	return {id: this.getId()+"-box"};
};


/**
 * Behavior implementation which is executed when the user clicks the step.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMapStep.prototype.onclick = function(oEvent){
	this.handleSelect(oEvent);
};


/**
 * Behavior implementation which is executed when the user presses the space or enter key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMapStep.prototype.onsapselect = function(oEvent){
	this.handleSelect(oEvent);
};


/**
 * Handler which is called when the step is selected.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RoadMapStep.prototype.handleSelect = function(oEvent, bIgnoreDomCheck){
	oEvent.stopPropagation();
	oEvent.preventDefault();

	if(!bIgnoreDomCheck && !jQuery.sap.containsOrEquals(this.getDomRef(), oEvent.target)) {
		return;
	}

	if(this.getEnabled()){
		var oRoadMap = getRoadMap(this);
		var oStep = this;
		sap.ui.commons.RoadMapRenderer.selectStep(oRoadMap, this, isSubStep(this), false, function(sType){
			var bWasAlreadySelected = oRoadMap.getSelectedStep() == oStep.getId();
			oRoadMap.setProperty("selectedStep", oStep.getId(), true);
			oStep.focus();
			if(sType != "selected"){
				oStep.setProperty("expanded", sType == "expanded", true);
				oRoadMap.fireStepExpanded({stepId: oStep.getId()});
			}
			if(!bWasAlreadySelected) {
				oRoadMap.fireStepSelected({stepId: oStep.getId()});
			}
		});
	}else{
		this.focus();
	}
};


//********* Private *********


//Returns the corresponding Roadmap control
var getRoadMap = function(oThis){
	var oRoadMap = oThis.getParent();
	if(isSubStep(oThis)) {
		oRoadMap = oRoadMap.getParent();
	}
	return oRoadMap;
};


//Returns true if the parent of this step is not of type sap.ui.commons.RoadMap
var isSubStep = function(oThis){
	return !(oThis.getParent() instanceof sap.ui.commons.RoadMap);
};


//Helper function to set a property without rerendering (see overridden setter functions)
var setProperty = function(oThis, sName, oValue, fDomAdaptationCallback){
	if(!oThis.getDomRef()){
		oThis.setProperty(sName, oValue);
		return;
	}
	var bSkipUpdate = fDomAdaptationCallback.apply(oThis, []);
	if(!bSkipUpdate) {
		oThis.setProperty(sName, oValue, true);
	}
};

}());
}; // end of sap/ui/commons/RoadMapStep.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RowRepeater') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RowRepeater.
jQuery.sap.declare("sap.ui.commons.RowRepeater");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new RowRepeater.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getNumberOfRows numberOfRows} : int (default: 5)</li>
 * <li>{@link #getCurrentPage currentPage} : int (default: 1)</li>
 * <li>{@link #getShowMoreSteps showMoreSteps} : int (default: 0)</li>
 * <li>{@link #getFixedRowHeight fixedRowHeight} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getDesign design} : sap.ui.commons.RowRepeaterDesign (default: sap.ui.commons.RowRepeaterDesign.Standard)</li>
 * <li>{@link #getThreshold threshold} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getRows rows} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li>
 * <li>{@link #getTitle title} : sap.ui.core.Title</li>
 * <li>{@link #getFilters filters} : sap.ui.commons.RowRepeaterFilter[]</li>
 * <li>{@link #getSorters sorters} : sap.ui.commons.RowRepeaterSorter[]</li>
 * <li>{@link #getNoData noData} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.RowRepeater#event:filter filter} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.RowRepeater#event:sort sort} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.RowRepeater#event:page page} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.RowRepeater#event:resize resize} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control displays items in a stacked list format, allowing the user to page in order to see more items or to use the offered filtering and sorting capabilities in order to manipulate the displayed data.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.RowRepeater
 */
sap.ui.core.Control.extend("sap.ui.commons.RowRepeater", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"triggerShowMore", "resize", "applyFilter", "triggerSort", "firstPage", "lastPage", "previousPage", "nextPage", "gotoPage"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"numberOfRows" : {type : "int", group : "Dimension", defaultValue : 5},
		"currentPage" : {type : "int", group : "Data", defaultValue : 1},
		"showMoreSteps" : {type : "int", group : "Behavior", defaultValue : 0},
		"fixedRowHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : ''},
		"design" : {type : "sap.ui.commons.RowRepeaterDesign", group : "Appearance", defaultValue : sap.ui.commons.RowRepeaterDesign.Standard},
		"threshold" : {type : "int", group : "", defaultValue : null}
	},
	defaultAggregation : "rows",
	aggregations : {
    	"rows" : {type : "sap.ui.core.Control", multiple : true, singularName : "row", bindable : "bindable"}, 
    	"title" : {type : "sap.ui.core.Title", multiple : false}, 
    	"filters" : {type : "sap.ui.commons.RowRepeaterFilter", multiple : true, singularName : "filter"}, 
    	"sorters" : {type : "sap.ui.commons.RowRepeaterSorter", multiple : true, singularName : "sorter"}, 
    	"noData" : {type : "sap.ui.core.Control", multiple : false}, 
    	"filterToolbar" : {type : "sap.ui.commons.Toolbar", multiple : false, visibility : "hidden"}, 
    	"sorterToolbar" : {type : "sap.ui.commons.Toolbar", multiple : false, visibility : "hidden"}, 
    	"headerShowMoreButton" : {type : "sap.ui.commons.Button", multiple : false, visibility : "hidden"}, 
    	"footerShowMoreButton" : {type : "sap.ui.commons.Button", multiple : false, visibility : "hidden"}, 
    	"footerPager" : {type : "sap.ui.commons.Paginator", multiple : false, visibility : "hidden"}
	},
	events : {
		"filter" : {}, 
		"sort" : {}, 
		"page" : {}, 
		"resize" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RowRepeater with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RowRepeater.extend
 * @function
 */

sap.ui.commons.RowRepeater.M_EVENTS = {'filter':'filter','sort':'sort','page':'page','resize':'resize'};


/**
 * Getter for property <code>visible</code>.
 * Invisible row-repeaters are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.RowRepeater#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#setVisible
 * @function
 */


/**
 * Getter for property <code>numberOfRows</code>.
 * Number of rows displayed.
 *
 * Default value is <code>5</code>
 *
 * @return {int} the value of property <code>numberOfRows</code>
 * @public
 * @name sap.ui.commons.RowRepeater#getNumberOfRows
 * @function
 */

/**
 * Setter for property <code>numberOfRows</code>.
 *
 * Default value is <code>5</code> 
 *
 * @param {int} iNumberOfRows  new value for property <code>numberOfRows</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#setNumberOfRows
 * @function
 */


/**
 * Getter for property <code>currentPage</code>.
 * The index of the page currently displayed. The index starts at 1.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>currentPage</code>
 * @public
 * @name sap.ui.commons.RowRepeater#getCurrentPage
 * @function
 */

/**
 * Setter for property <code>currentPage</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iCurrentPage  new value for property <code>currentPage</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#setCurrentPage
 * @function
 */


/**
 * Getter for property <code>showMoreSteps</code>.
 * Step size used to increase the numberOfRows value. This feature is only active if value is greater than 0. This will deactivate the paging feature.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>showMoreSteps</code>
 * @public
 * @name sap.ui.commons.RowRepeater#getShowMoreSteps
 * @function
 */

/**
 * Setter for property <code>showMoreSteps</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iShowMoreSteps  new value for property <code>showMoreSteps</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#setShowMoreSteps
 * @function
 */


/**
 * Getter for property <code>fixedRowHeight</code>.
 * Row height adapts to rendered content. If a fixed height is specified the cells have a maximum height and the overflow will be hidden.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>fixedRowHeight</code>
 * @public
 * @name sap.ui.commons.RowRepeater#getFixedRowHeight
 * @function
 */

/**
 * Setter for property <code>fixedRowHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sFixedRowHeight  new value for property <code>fixedRowHeight</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#setFixedRowHeight
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * The visual design of the control.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.commons.RowRepeaterDesign} the value of property <code>design</code>
 * @public
 * @name sap.ui.commons.RowRepeater#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.commons.RowRepeaterDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#setDesign
 * @function
 */


/**
 * Getter for property <code>threshold</code>.
 * Threshold to fetch the next chunk of data. The minimal threshold can be the numberOfRows of the RR.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>threshold</code>
 * @public
 * @name sap.ui.commons.RowRepeater#getThreshold
 * @function
 */

/**
 * Setter for property <code>threshold</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iThreshold  new value for property <code>threshold</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#setThreshold
 * @function
 */


/**
 * Getter for aggregation <code>rows</code>.<br/>
 * Rows to be repeated.
 * 
 * <strong>Note</strong>: this is the default aggregation for RowRepeater.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.RowRepeater#getRows
 * @function
 */


/**
 * Inserts a row into the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.core.Control}
 *          oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the row should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the row is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#insertRow
 * @function
 */

/**
 * Adds some row <code>oRow</code> 
 * to the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.core.Control}
 *            oRow the row to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#addRow
 * @function
 */

/**
 * Removes an row from the aggregation named <code>rows</code>.
 *
 * @param {int | string | sap.ui.core.Control} vRow the row to remove or its index or id
 * @return {sap.ui.core.Control} the removed row or null
 * @public
 * @name sap.ui.commons.RowRepeater#removeRow
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>rows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RowRepeater#removeAllRows
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>rows</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oRow the row whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.RowRepeater#indexOfRow
 * @function
 */
	

/**
 * Destroys all the rows in the aggregation 
 * named <code>rows</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#destroyRows
 * @function
 */


/**
 * Binder for aggregation <code>rows</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#bindRows
 * @function
 */

/**
 * Unbinder for aggregation <code>rows</code>.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#unbindRows
 * @function
 */


/**
 * Getter for aggregation <code>title</code>.<br/>
 * Title to be displayed in top left corner. Either text or icon.
 * 
 * @return {sap.ui.core.Title}
 * @public
 * @name sap.ui.commons.RowRepeater#getTitle
 * @function
 */


/**
 * Setter for the aggregated <code>title</code>.
 * @param {sap.ui.core.Title} oTitle
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#setTitle
 * @function
 */
	

/**
 * Destroys the title in the aggregation 
 * named <code>title</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#destroyTitle
 * @function
 */


/**
 * Getter for aggregation <code>filters</code>.<br/>
 * Filters to be provided in toolbar.
 * 
 * @return {sap.ui.commons.RowRepeaterFilter[]}
 * @public
 * @name sap.ui.commons.RowRepeater#getFilters
 * @function
 */


/**
 * Inserts a filter into the aggregation named <code>filters</code>.
 *
 * @param {sap.ui.commons.RowRepeaterFilter}
 *          oFilter the filter to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the filter should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the filter is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the filter is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#insertFilter
 * @function
 */

/**
 * Adds some filter <code>oFilter</code> 
 * to the aggregation named <code>filters</code>.
 *
 * @param {sap.ui.commons.RowRepeaterFilter}
 *            oFilter the filter to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#addFilter
 * @function
 */

/**
 * Removes an filter from the aggregation named <code>filters</code>.
 *
 * @param {int | string | sap.ui.commons.RowRepeaterFilter} vFilter the filter to remove or its index or id
 * @return {sap.ui.commons.RowRepeaterFilter} the removed filter or null
 * @public
 * @name sap.ui.commons.RowRepeater#removeFilter
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>filters</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.RowRepeaterFilter[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RowRepeater#removeAllFilters
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.RowRepeaterFilter</code> in the aggregation named <code>filters</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.RowRepeaterFilter}
 *            oFilter the filter whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.RowRepeater#indexOfFilter
 * @function
 */
	

/**
 * Destroys all the filters in the aggregation 
 * named <code>filters</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#destroyFilters
 * @function
 */


/**
 * Getter for aggregation <code>sorters</code>.<br/>
 * Sorters to be provided in secondary toolbar.
 * 
 * @return {sap.ui.commons.RowRepeaterSorter[]}
 * @public
 * @name sap.ui.commons.RowRepeater#getSorters
 * @function
 */


/**
 * Inserts a sorter into the aggregation named <code>sorters</code>.
 *
 * @param {sap.ui.commons.RowRepeaterSorter}
 *          oSorter the sorter to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the sorter should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the sorter is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the sorter is inserted at 
 *             the last position        
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#insertSorter
 * @function
 */

/**
 * Adds some sorter <code>oSorter</code> 
 * to the aggregation named <code>sorters</code>.
 *
 * @param {sap.ui.commons.RowRepeaterSorter}
 *            oSorter the sorter to add; if empty, nothing is inserted
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#addSorter
 * @function
 */

/**
 * Removes an sorter from the aggregation named <code>sorters</code>.
 *
 * @param {int | string | sap.ui.commons.RowRepeaterSorter} vSorter the sorter to remove or its index or id
 * @return {sap.ui.commons.RowRepeaterSorter} the removed sorter or null
 * @public
 * @name sap.ui.commons.RowRepeater#removeSorter
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>sorters</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.RowRepeaterSorter[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.RowRepeater#removeAllSorters
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.RowRepeaterSorter</code> in the aggregation named <code>sorters</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.RowRepeaterSorter}
 *            oSorter the sorter whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.RowRepeater#indexOfSorter
 * @function
 */
	

/**
 * Destroys all the sorters in the aggregation 
 * named <code>sorters</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#destroySorters
 * @function
 */


/**
 * Getter for aggregation <code>noData</code>.<br/>
 * This control is shown, in case there is no data available to be displayed in the RowRepeater.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.ui.commons.RowRepeater#getNoData
 * @function
 */


/**
 * Setter for the aggregated <code>noData</code>.
 * @param {sap.ui.core.Control} oNoData
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#setNoData
 * @function
 */
	

/**
 * Destroys the noData in the aggregation 
 * named <code>noData</code>.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#destroyNoData
 * @function
 */


/**
 * This event is triggered when a filter is set. 
 *
 * @name sap.ui.commons.RowRepeater#filter
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filterId The ID of the filter that has just been applied.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'filter' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.RowRepeater</code>.<br/> itself. 
 *  
 * This event is triggered when a filter is set. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.RowRepeater</code>.<br/> itself.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#attachFilter
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'filter' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#detachFilter
 * @function
 */

/**
 * Fire event filter to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filterId' of type <code>string</code> The ID of the filter that has just been applied.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.RowRepeater#fireFilter
 * @function
 */


/**
 * This event is triggered when a sorting is applied. 
 *
 * @name sap.ui.commons.RowRepeater#sort
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.sorterId The ID of the sorter that has just been applied.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'sort' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.RowRepeater</code>.<br/> itself. 
 *  
 * This event is triggered when a sorting is applied. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.RowRepeater</code>.<br/> itself.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#attachSort
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'sort' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#detachSort
 * @function
 */

/**
 * Fire event sort to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'sorterId' of type <code>string</code> The ID of the sorter that has just been applied.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.RowRepeater#fireSort
 * @function
 */


/**
 * This event is triggered when paging was executed. 
 *
 * @name sap.ui.commons.RowRepeater#page
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.currentPage The value of the currentPage property after the change.
 * @param {int} oControlEvent.getParameters.previousPage The value of the currentPage property before the change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'page' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.RowRepeater</code>.<br/> itself. 
 *  
 * This event is triggered when paging was executed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.RowRepeater</code>.<br/> itself.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#attachPage
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'page' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#detachPage
 * @function
 */

/**
 * Fire event page to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'currentPage' of type <code>int</code> The value of the currentPage property after the change.</li>
 * <li>'previousPage' of type <code>int</code> The value of the currentPage property before the change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.RowRepeater#firePage
 * @function
 */


/**
 * This event is triggered when the number of rows was changed. 
 *
 * @name sap.ui.commons.RowRepeater#resize
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.numberOfRows The value of the numberOfRows property after the change.
 * @param {int} oControlEvent.getParameters.previousNumberOfRows The value of the numberOfRows property before the change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'resize' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.RowRepeater</code>.<br/> itself. 
 *  
 * This event is triggered when the number of rows was changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.RowRepeater</code>.<br/> itself.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#attachResize
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'resize' event of this <code>sap.ui.commons.RowRepeater</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeater#detachResize
 * @function
 */

/**
 * Fire event resize to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'numberOfRows' of type <code>int</code> The value of the numberOfRows property after the change.</li>
 * <li>'previousNumberOfRows' of type <code>int</code> The value of the numberOfRows property before the change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.RowRepeater#fireResize
 * @function
 */


/**
 * Increments the number of rows. This method will only trigger a showMore if the property showMoreSteps is set.
 *
 * @name sap.ui.commons.RowRepeater.prototype.triggerShowMore
 * @function

 * @type void
 * @public
 */


/**
 * Resizes the row repeater by changing the number of displayed rows. This method will only resize the RowRepeater if the property showMoreSteps is set.
 *
 * @name sap.ui.commons.RowRepeater.prototype.resize
 * @function
 * @param {int} 
 *         iNumberOfRows
 *         The new value of number of rows displayed.

 * @type void
 * @public
 */


/**
 * Applies a filter.
 *
 * @name sap.ui.commons.RowRepeater.prototype.applyFilter
 * @function
 * @param {string} 
 *         sId
 *         The ID if the filter.

 * @type void
 * @public
 */


/**
 * Sort the data.
 *
 * @name sap.ui.commons.RowRepeater.prototype.triggerSort
 * @function
 * @param {string} 
 *         sId
 *         The ID of the sorter.

 * @type void
 * @public
 */


/**
 * Switch to first page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.firstPage
 * @function

 * @type void
 * @public
 */


/**
 * Switch to last page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.lastPage
 * @function

 * @type void
 * @public
 */


/**
 * Switch to previous page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.previousPage
 * @function

 * @type void
 * @public
 */


/**
 * Switch to next page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.nextPage
 * @function

 * @type void
 * @public
 */


/**
 * Switch to specified page.
 *
 * @name sap.ui.commons.RowRepeater.prototype.gotoPage
 * @function
 * @param {int} 
 *         iPageNumber
 *         The index of the page to go to.

 * @type void
 * @public
 */


// Start of sap\ui\commons\RowRepeater.js
///**
//* This file defines behavior for the control,
//*/

/**
 * This value of the paging mode boolean is true if the showMoreSteps
 * property is not set. This value is updated whenever the value
 * of showMoreSteps is changed.
 *
 * @private
 */
sap.ui.commons.RowRepeater.prototype.bPagingMode = true;

/**
 * All animations of the RowRepeater control can be centrally switched
 * off by setting the <code>bShowAnimation</code> flag to <code>false</code>.
 *
 * @private
 */
sap.ui.commons.RowRepeater.prototype.bShowAnimation = true;


/* animation constants */
sap.ui.commons.RowRepeater.SHOW_MORE = "show_more";
sap.ui.commons.RowRepeater.RESIZE = "resize";
sap.ui.commons.RowRepeater.FIRST_PAGE = "first_page";
sap.ui.commons.RowRepeater.LAST_PAGE = "last_page";
sap.ui.commons.RowRepeater.PREVIOUS_PAGE = "previous_page";
sap.ui.commons.RowRepeater.NEXT_PAGE = "next_page";
sap.ui.commons.RowRepeater.GOTO_PAGE = "goto_page";

sap.ui.commons.RowRepeater.prototype.init = function() {

	// local variables
	var sId = this.getId();

	// get reference to resource bundle
	this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");

	// initialize animation and queuing variables
	this.sCurrentAnimation = null;
	this.aAnimationQueue = [];
	this.aRemoveBuffer = [];

	// previous page and numberOfRows animation
	this.iPreviousPage = this.getCurrentPage();
	this.iPreviousNumberOfRows = this.getNumberOfRows();

	// create filter and sorter toolbar control and add as aggregation
	this.setAggregation( "filterToolbar", new sap.ui.commons.Toolbar(sId+"-ftb",{standalone:false,design:sap.ui.commons.ToolbarDesign.Transparent}));
	this.setAggregation( "sorterToolbar", new sap.ui.commons.Toolbar(sId+"-stb",{standalone:false}));

	// create pager controls and their event handlers, add them as aggregations
	var oPager = new sap.ui.commons.Paginator(sId+"-fp",{page:[this.paging,this]});
	this.setAggregation("footerPager",oPager);

	// create show more buttons and add them as aggregation
	var sShowMoreText = this.oResourceBundle.getText("SHOW_MORE");
	this.setAggregation( "headerShowMoreButton", new sap.ui.commons.Button(sId+"-hsm",{text:sShowMoreText,press:[this.triggerShowMore,this]}));
	this.setAggregation( "footerShowMoreButton", new sap.ui.commons.Button(sId+"-fsm",{text:sShowMoreText,press:[this.triggerShowMore,this]}));

	this._bSecondPage = false;
	
};


/*
 * PUBLIC API METHODS
 */
// TODO: check where to document: here or in API definition
/**
 * The <code>triggerShowMore</code> function increments the number of rows by the
 * value of <code>showMoreSteps</code>.
 *
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.triggerShowMore = function() {

	// execute only if showMoreSteps is bigger than 0
	if(this.getShowMoreSteps()<=0) {
		return this;
	}

	// local variables
	var iShowMoreSteps = this.getShowMoreSteps();
	var iNumberOfRows = this.getNumberOfRows();

	// verify that the new value is not larger than number of rows available
	var iNewNumberOfRows = Math.min(this._getRowCount(),iNumberOfRows+iShowMoreSteps);

	// exit if value remains the same
	if(iNumberOfRows===iNewNumberOfRows) {
		return this;
	}

	// start animation or just set the property
	if(this.getDomRef() && this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.SHOW_MORE,
				animationFunction:this.triggerShowMore,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.SHOW_MORE;
		}

		// set property and animate
		this.iPreviousNumberOfRows = iNumberOfRows;
		this.setProperty("numberOfRows",iNewNumberOfRows,true);
		this.startResizeAnimation();

	} else {

		// set property and invalidate
		this.setNumberOfRows(iNewNumberOfRows);

	}

	// fire page event
	this.fireResize({numberOfRows:iNewNumberOfRows,previousNumberOfRows:iNumberOfRows});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.resize = function(numberOfRows) {

	// execute only if showMoreSteps is bigger than 0
	if(this.getShowMoreSteps()<=0) {
		return this;
	}

	// local variables
	var iNumberOfRows = this.getNumberOfRows();
	
	// exit if new value is not in range or equals to old value
	if(numberOfRows<=0 || numberOfRows>this._getRowCount() || numberOfRows===iNumberOfRows ) {
		return this;
	}
	
	// start animation or just set the property
	if(this.getDomRef() && this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.RESIZE,
				animationFunction:this.resize,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.RESIZE;
		}

		// set property and animate
		this.iPreviousNumberOfRows = iNumberOfRows;
		this.setProperty("numberOfRows",numberOfRows,true);
		this.startResizeAnimation();

	} else {

		// set property and invalidate
		this.setNumberOfRows(numberOfRows);

	}

	// fire page event
	this.fireResize({numberOfRows:numberOfRows,previousNumberOfRows:iNumberOfRows});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.applyFilter = function(id) {

	// local variables
	var aFilters = this.getFilters();
	var oListBinding = this.getBinding("rows");
	var oFilter, n;

	// exit directly if there are no filters or no binding defined
	if(aFilters.length===0 || oListBinding===null) {
		return this;
	}

	// try to read the filter defined by the ID, unfortunately by looping
	for( n=0; n<aFilters.length; n++ ) {
		if(aFilters[n].getId()===id) {
			// we found the requested filter
			oFilter = aFilters[n];
			break;
		}
	}

	// don't do anything if we can't find the filter
	if(oFilter) {

		// apply the filter assigned to filter item
		oListBinding.filter(oFilter.getFilters(), sap.ui.model.FilterType.Control);

		// fire the filter
		this.fireFilter({filterId:id});

		// goto first page via public API method (i.e. animated)
		this.firstPage();

	}

	// return instance to allow chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.triggerSort = function(id) {

	// local variables
	var aSorters = this.getSorters();
	var oListBinding = this.getBinding("rows");
	var oSorter, n;

	// exit directly if there are no sorters or no binding defined
	if(aSorters.length===0 || oListBinding===null) {
		return this;
	}

	// try to read the sorter defined by the ID, unfortunately by looping
	for( n=0; n<aSorters.length; n++ ) {
		if(aSorters[n].getId()===id) {
			// we found the requested filter
			oSorter = aSorters[n];
			break;
		}
	}

	// don't do anything if we can't find the sorter
	if(oSorter) {

		// trigger the sorter assigned to sorter item
		oListBinding.sort(oSorter.getSorter());

		// fire sort event
		this.fireSort({sorterId:id});

		// goto first page via public API method (i.e. animated)
		this.firstPage();

	}

	// return instance to allow chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.firstPage = function() {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();

	// don't do anything if we are on the first page
	if(iCurrentPage===1) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(1);

	// start animation or just set the property
	if(this.getDomRef() && this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.FIRST_PAGE,
				animationFunction:this.firstPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.FIRST_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",1,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(1);

	}

	// fire page event
	this.firePage({currentPage:1,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.lastPage = function() {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();
	var iLastPage = Math.ceil(this._getRowCount()/this.getNumberOfRows());

	// don't do anything if we are on the last page
	if(iCurrentPage===iLastPage) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(iLastPage);

	// start animation or just set the property
	if(this.getDomRef() && this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.LAST_PAGE,
				animationFunction:this.lastPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.LAST_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",iLastPage,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(iLastPage);

	}

	// fire page event
	this.firePage({currentPage:iLastPage,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.previousPage = function() {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();

	// don't do anything if we are on the first page or even below
	if(iCurrentPage<=1) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(iCurrentPage-1);

	// start animation or just set the property
	if(this.getDomRef() && this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.PREVIOUS_PAGE,
				animationFunction:this.previousPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.PREVIOUS_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",iCurrentPage-1,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(iCurrentPage-1);

	}

	// fire page event
	this.firePage({currentPage:iCurrentPage-1,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.nextPage = function() {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();
	var iLastPage = Math.ceil(this._getRowCount()/this.getNumberOfRows());

	// don't do anything if we are on the last page or even further
	if(iCurrentPage>=iLastPage) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(iCurrentPage+1);

	// start animation or just set the property
	if(this.getDomRef() && this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.NEXT_PAGE,
				animationFunction:this.nextPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.NEXT_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",iCurrentPage+1,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(iCurrentPage+1);

	}

	// fire page event
	this.firePage({currentPage:iCurrentPage+1,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};

sap.ui.commons.RowRepeater.prototype.gotoPage = function(iPageNumber) {

	// only execute if showMoreSteps is not bigger than 0
	if(this.getShowMoreSteps()>0) {
		return this;
	}

	// local variable
	var iCurrentPage = this.getCurrentPage();
	var iLastPage = Math.ceil(this._getRowCount()/this.getNumberOfRows());

	// don't do anything if page if not in range or same as before
	if(iPageNumber<1 || iPageNumber>iLastPage || iCurrentPage===iPageNumber) {
		return this;
	}

	// keep pagers in sync
	this.getAggregation("footerPager").setCurrentPage(iPageNumber);

	// start animation or just set the property
	if(this.getDomRef() && this.bShowAnimation) {

		// check if animation is running before starting a new animation
		if( this.sCurrentAnimation !== null ) {
			this.aAnimationQueue.push({	name:sap.ui.commons.RowRepeater.GOTO_PAGE,
				animationFunction:this.gotoPage,
				args:arguments});
			return this;
		} else {
			this.sCurrentAnimation = sap.ui.commons.RowRepeater.GOTO_PAGE;
		}

		// set property and animate
		this.iPreviousPage = iCurrentPage;
		this.setProperty("currentPage",iPageNumber,true);
		this.startPagingAnimation();

	} else {

		// set property and invalidate
		this.setCurrentPage(iPageNumber);

	}

	// fire page event
	this.firePage({currentPage:iPageNumber,previousPage:iCurrentPage});

	// return instance for chaining
	return this;

};



/*
 * OVERRIDE OF SETTERS
 */

/**
 * Setter for property <code>numberOfRows</code>.
 *
 * Default value is <code>5</code>
 *
 * @param {int} iNumberOfRows  new value for property <code>numberOfRows</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setNumberOfRows = function(iNumberOfRows) {

	// change property without setting suppress rendering flag
	this.setProperty("numberOfRows", iNumberOfRows);

	// update the rows (maybe only when becoming visible?)
	if (this.getBinding("rows")) {
		this.updateRows(true);
	}

	// child controls might need a re-render after this change
	this.updateChildControls();

	// return instance to allow chaining
	return this;

};

/**
 * Setter for property <code>currentPage</code>.
 *
 * @param {int} iCurrentPage  new value for property <code>currentPage</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setCurrentPage = function(iCurrentPage) {
	
	if (this.getCurrentPage() != iCurrentPage) {
		// invalidate with this update
		this.setProperty("currentPage", iCurrentPage);
	
		// update the rows (maybe only when becoming visible?)
		if (this.getBinding("rows")) {
			this.updateRows(true);
		}
		
		// child controls might need a re-render after this change
		this.updateChildControls();
	}

	// return instance to allow chaining
	return this;

};

/**
 * Override the default behavior of <code>setShowMoreSteps</code> to update the
 * paging mode flag. Any change to the paging mode flag will result in the current
 * page being set to the first page.
 *
 * @param {int} iShowMoreSteps  new value for property <code>showMoreSteps</code>
 * @return {sap.ui.commons.RowRepeater} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.RowRepeater.prototype.setShowMoreSteps = function(iShowMoreSteps) {

	// calculate new paging mode by looking at step size
	var bNewPagingMode = iShowMoreSteps > 0 ? false : true,
			oBinding = this.getBinding("rows");

	// the state is to be reset if the mode changes
	if(bNewPagingMode!==this.bPagingMode) {
		this.bPagingMode = bNewPagingMode;
		this.setCurrentPage(1);
	}

	// set the property allowing a re-rendering of the row repeater
	this.setProperty("showMoreSteps", iShowMoreSteps);
	
	// in case of data binding we need to update the rows
	if (oBinding) {
		this._bSecondPage = false;
		this.updateRows(true);
	}
	
	return this;

};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.insertRow = function(oRow, iIndex) {
	this.insertAggregation("rows", oRow, iIndex);
	this.updateChildControls();
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.addRow = function(oRow) {
	this.addAggregation("rows", oRow);
	this.updateChildControls();
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeRow = function(vElement) {
	this.removeAggregation("rows", vElement);
	this.updateChildControls();
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeAllRows = function() {
	this.removeAllAggregation("rows");
	this.updateChildControls();
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.destroyRows = function() {
	this.destroyAggregation("rows");
	this.updateChildControls();
	return this;
};

/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.setThreshhold = function(iThreshold) {
	this.setProperty("threshold", iThreshold, true);
	return this;
};

/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.insertFilter = function(oFilter, iIndex) {

	// insert a button into the filter toolbar's aggregation
	var oToolbar = this.getAggregation("filterToolbar");
	var sFilterId = oFilter.getId();
	var oButton = new sap.ui.commons.Button({text:oFilter.getText(),icon:oFilter.getIcon(),tooltip:oFilter.getTooltip(),press:[function(){this.applyFilter(sFilterId);},this]});
	oToolbar.insertItem(oButton,iIndex);

	this.insertAggregation("filters", oFilter, iIndex);
	return this;

};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.addFilter = function(oFilter) {

	// add a button to the filter toolbar's aggregation
	var oToolbar = this.getAggregation("filterToolbar");
	var sFilterId = oFilter.getId();
	var oButton = new sap.ui.commons.Button({text:oFilter.getText(),icon:oFilter.getIcon(),tooltip:oFilter.getTooltip(),press:[function(){this.applyFilter(sFilterId);},this]});
	oToolbar.addItem(oButton);

	this.addAggregation("filters", oFilter);
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeFilter = function(vElement) {

	// remove button from toolbar
	var oToolbar = this.getAggregation("filterToolbar");
	oToolbar.removeItem(vElement);

	return this.removeAggregation("filters", vElement);
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeAllFilters = function() {

	// remove all buttons from toolbar
	var oToolbar = this.getAggregation("filterToolbar");
	oToolbar.removeAllItems();

	return this.removeAllAggregation("filters");
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.destroyFilters = function() {

	// remove all buttons from toolbar
	var oToolbar = this.getAggregation("filterToolbar");
	oToolbar.removeAllItems();

	this.destroyAggregation("filters");
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.insertSorter = function(oSorter, iIndex) {

	// add a button to the sorter toolbar's aggregation
	var oToolbar = this.getAggregation("sorterToolbar");
	var sSorterId = oSorter.getId();
	var oButton = new sap.ui.commons.Button({text:oSorter.getText(),icon:oSorter.getIcon(),tooltip:oSorter.getTooltip(),press:[function(){this.triggerSort(sSorterId);},this]});
	oToolbar.insertItem(oButton,iIndex);

	this.insertAggregation("sorters", oSorter, iIndex);
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.addSorter = function(oSorter) {

	// add a button to the sorter toolbar's aggregation
	var oToolbar = this.getAggregation("sorterToolbar");
	var sSorterId = oSorter.getId();
	var oButton = new sap.ui.commons.Button({text:oSorter.getText(),icon:oSorter.getIcon(),tooltip:oSorter.getTooltip(),press:[function(){this.triggerSort(sSorterId);},this]});
	oToolbar.addItem(oButton);

	this.addAggregation("sorters", oSorter);
	return this;
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeSorter = function(vElement) {

	// remove button from toolbar
	var oToolbar = this.getAggregation("sorterToolbar");
	oToolbar.removeItem(vElement);

	return this.removeAggregation("sorters", vElement);
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.removeAllSorters = function() {

	// remove all buttons from toolbar
	var oToolbar = this.getAggregation("sorterToolbar");
	oToolbar.removeAllItems();

	return this.removeAllAggregation("sorters");
};


/* refer to generated documentation */
sap.ui.commons.RowRepeater.prototype.destroySorters = function() {

	// remove all buttons from toolbar
	var oToolbar = this.getAggregation("sorterToolbar");
	oToolbar.removeAllItems();

	this.destroyAggregation("sorters");
	return this;
};


/*
 * ANIMATION METHODS
 */

sap.ui.commons.RowRepeater.prototype.startPagingAnimation = function() {

	// local variables
	var oCore = sap.ui.getCore(),
	    oRenderManager = oCore.getRenderManager(),
	    sId = this.getId(),
	    iPageFrom = this.iPreviousPage,
	    iPageTo = this.getCurrentPage(),
	    iNumberOfRows = this.getNumberOfRows(),
	    iStartIndex = (iPageTo-1) * iNumberOfRows,
	    aRows = this.getRows(),
	    iCurrentVisibleRows = this._getRowCount()>iNumberOfRows*iPageTo ? iNumberOfRows : this._getRowCount()-iNumberOfRows*(iPageTo-1),
	    iLastPage = Math.ceil( this._getRowCount()/iNumberOfRows ),
	    n,
	    oBinding = this.getBinding("rows");

	// DOM elements
	var oDomCurrentLI,
	    oJQDomULFrom = this.$("page_"+iPageFrom),
	    oDomBodyDIV = this.getDomRef("body"),
	    oJQDomBodyDIV = jQuery(oDomBodyDIV);

	// fix the height on the body DIV to allow an animated height change
	oJQDomBodyDIV.css("height",oJQDomBodyDIV.outerHeight());

	// create UL for new page
	var sDirection;
	if(sap.ui.getCore() && sap.ui.getCore().getConfiguration() && sap.ui.getCore().getConfiguration().getRTL()) {
		sDirection = (iPageTo<iPageFrom) ? "left" : "right";
	}else{
		sDirection = (iPageTo<iPageFrom) ? "right" : "left";
	}

	// load the required contexts
	if (oBinding) {
		// update the rows aggregation
		this._bSecondPage = !this._bSecondPage;
		this.updateRows(true);
		aRows = this.getRows();
		iStartIndex = (this._bSecondPage ? 1 : 0) * iNumberOfRows;
	}

	// create the rows where we navigate to in the DOM
	var sStyleString = "\"top:-" + oJQDomULFrom.outerHeight(true) + "px;" + sDirection + ":" + oJQDomULFrom.outerWidth(true) + "px;\"";
	jQuery("<ul id=\"" + sId + "-page_" + iPageTo + "\" class=\"sapUiRrPage\" style=" + sStyleString + "/>").appendTo(oDomBodyDIV);
	var oDomULTo = oDomBodyDIV.lastChild;
	var oJQDomULTo = jQuery(oDomULTo);
	for( n=iStartIndex; n<iStartIndex+iCurrentVisibleRows; n++ ) {
		jQuery("<li id=\"" + sId + "-row_" + n + "\" class=\"sapUiRrRow\"/>").appendTo(oDomULTo);
		oDomCurrentLI =  oDomULTo.lastChild;
		oRenderManager.render(aRows[n], oDomCurrentLI);
	}

	// animate the paging effect
	if(sDirection==="right") {
		oJQDomULFrom.animate({right:-oJQDomULFrom.outerWidth(true)},"slow");
		oJQDomULTo.animate({right:0},"slow");
	} else {
		oJQDomULFrom.animate({left:-oJQDomULFrom.outerWidth(true)},"slow");
		oJQDomULTo.animate({left:0},"slow");
	}

	// animate the height change if number of displayed rows changes
	oJQDomBodyDIV.animate({height:oJQDomULTo.outerHeight(true)},"slow",jQuery.proxy(this.endPagingAnimation,this));

};


sap.ui.commons.RowRepeater.prototype.endPagingAnimation = function() {

	// local variables
	var sId = this.getId();

	// get all needed DOM objects
	var oDomDIV = this.getDomRef("body");
	var oDomOldUL = this.getDomRef("page_"+this.iPreviousPage);
	var oDomCurrentUL = this.getDomRef("page_"+this.getCurrentPage());
	var oJQDomCurrentUL = jQuery(oDomCurrentUL);

	// un-fix the height on DIV
	jQuery(oDomDIV).css("height","");

	// remove the old UL from DOM
	jQuery(oDomOldUL).remove();

	// remove positioning from new UL
	var sDirection;
	if(sap.ui.getCore() && sap.ui.getCore().getConfiguration() && sap.ui.getCore().getConfiguration().getRTL()) {
		sDirection = (this.getCurrentPage()<this.iPreviousPage) ? "left" : "right";
	}else{
		sDirection = (this.getCurrentPage()<this.iPreviousPage) ? "right" : "left";
	}
	oJQDomCurrentUL.css("top","");
	oJQDomCurrentUL.css(sDirection,"");

	// reset animation indicator
	this.sCurrentAnimation = null;

	// start new animation
	this.nextQueuedAnimation();

};


sap.ui.commons.RowRepeater.prototype.startResizeAnimation = function() {

	// variables
	var oRenderManager = sap.ui.getCore().getRenderManager(),
	    iNewNumberOfRows = this.getNumberOfRows(),
	    iOldNumberOfRows = this.iPreviousNumberOfRows,
	    sId = this.getId(),
	    iSizeDelta = 0,
	    aRows,
	    oBinding = this.getBinding("rows");

	// dom elements
	var oDomCurrentLI,
	    oDomBodyDIV = this.getDomRef("body"),
	    oJQDomBodyDIV = jQuery(oDomBodyDIV),
	    oDomPageUL = this.getDomRef("page_"+this.getCurrentPage());

	// fix the height
	oJQDomBodyDIV.css("height",oJQDomBodyDIV.outerHeight());

	// update the rows aggregation
	if (oBinding) {
		this.updateRows(true);
	}
	aRows = this.getRows();
	
	// check if control is growing or shrinking
	if(iNewNumberOfRows>iOldNumberOfRows) {

		// create all newly visible child elements, if size grows
		for(var n = iOldNumberOfRows; n < iNewNumberOfRows; n++) {
			jQuery("<li id=\"" + sId + "-row_" + n + "\" class=\"sapUiRrRow\"/>").appendTo(oDomPageUL);
			oDomCurrentLI = oDomPageUL.lastChild;
			oRenderManager.render(aRows[n], oDomCurrentLI);
		}

	} else {

		// measure controls to be removed and store them in array for later removal
		for(var n = iNewNumberOfRows; n < iOldNumberOfRows; n++) {
			oDomCurrentLI = this.getDomRef("row_"+n);
			iSizeDelta -= jQuery(oDomCurrentLI).outerHeight(true);
			this.aRemoveBuffer.push(oDomCurrentLI);
		}

	}

	// animate resize of container
	oJQDomBodyDIV.animate({height:jQuery(oDomPageUL).outerHeight(true)+iSizeDelta},"slow",jQuery.proxy(this.endResizeAnimation,this));

};


sap.ui.commons.RowRepeater.prototype.endResizeAnimation = function() {

	// get body DIV
	var oDomBodyDIV = this.getDomRef("body");

	// remove LI element after shrinking
	while( this.aRemoveBuffer.length>0 ) {
		jQuery(this.aRemoveBuffer.pop()).remove();
	}

	// un-fix the height on DIV
	jQuery(oDomBodyDIV).css("height","");

	// reset animation indicator
	this.sCurrentAnimation = null;

	// start new animation
	this.nextQueuedAnimation();

};


sap.ui.commons.RowRepeater.prototype.nextQueuedAnimation = function() {

	// local variables
	var oNextAnimation, oLastQueuedAnimation;
	var iCounter = 1;
	var aQueue = this.aAnimationQueue;
	var iPageNumber, iNumberOfRows;

	// get first one
	if(aQueue.length>0) {
		oNextAnimation = aQueue.shift();
	}

	// if there are more in the queue of same name we try to summarize
	if(oNextAnimation && aQueue.length>0) {

		// remove all upcoming animations with same name
		while(aQueue[0]&&aQueue[0].name===oNextAnimation.name) {
			iCounter++;
			oLastQueuedAnimation = aQueue.shift();
		}

		// reaction depends of animation name
		if(iCounter>0) {
			switch(oNextAnimation.name) {
			case sap.ui.commons.RowRepeater.SHOW_MORE:
				// replace with resize of summarized size
				iNumberOfRows = Math.min(this._getRowCount(),this.getNumberOfRows()+this.getShowMoreSteps()*iCounter);
				oNextAnimation = {	name:sap.ui.commons.RowRepeater.RESIZE,
						animationFunction:this.resize,
						args:[iNumberOfRows]};
				break;
			case sap.ui.commons.RowRepeater.RESIZE:
				// execute the last one and skip the ones before
				oNextAnimation = oLastQueuedAnimation;
				break;
			case sap.ui.commons.RowRepeater.FIRST_PAGE:
				// the animations are duplicates and can be droppped
				break;
			case sap.ui.commons.RowRepeater.LAST_PAGE:
				// the animations are duplicates and can be droppped
				break;
			case sap.ui.commons.RowRepeater.PREVIOUS_PAGE:
				// replace with goto page
				iPageNumber = Math.max(1,this.getCurrentPage()-iCounter);
				oNextAnimation = {	name:sap.ui.commons.RowRepeater.GOTO_PAGE,
						animationFunction:this.gotoPage,
						args:[iPageNumber]};
				break;
			case sap.ui.commons.RowRepeater.NEXT_PAGE:
				// replace with goto page
				iPageNumber = Math.min(Math.ceil(this._getRowCount()/this.getNumberOfRows()),this.getCurrentPage()+iCounter);
				oNextAnimation = {	name:sap.ui.commons.RowRepeater.GOTO_PAGE,
						animationFunction:this.gotoPage,
						args:[iPageNumber]};
				break;
			case sap.ui.commons.RowRepeater.GOTO_PAGE:
				// execute the last one and skip the ones before
				oNextAnimation = oLastQueuedAnimation;
				break;
			}
		}

	}

	// finally execute
	if(oNextAnimation) {
		oNextAnimation.animationFunction.apply(this,oNextAnimation.args);
	}

};


/*
 * INTERNAL METHODS
 */

/**
 * Handle paging events from the Paginator(s)
 *
 * @private
 */
 sap.ui.commons.RowRepeater.prototype.paging = function(oEvent) {

	 switch(oEvent.getParameter("type")) {
		 case sap.ui.commons.PaginatorEvent.First:
			 this.firstPage();
			 break;
		 case sap.ui.commons.PaginatorEvent.Last:
			 this.lastPage();
			 break;
		 case sap.ui.commons.PaginatorEvent.Previous:
			 this.previousPage();
			 break;
		 case sap.ui.commons.PaginatorEvent.Next:
			 this.nextPage();
			 break;
		 case sap.ui.commons.PaginatorEvent.Goto:
			 this.gotoPage(oEvent.getParameter("targetPage"));
			 break;
	 }

 }

/**
 * Update the state of aggregated child controls inside this row repeater.
 *
 * @private
 */;
sap.ui.commons.RowRepeater.prototype.updateChildControls = function() {

	// local referenced to controls
	var oShowMoreButton, oPager;

	// local variables
	var bShowMoreEnabled;

	// only care about pagers if we are in paging mode, otherwise it is the showMore buttons
	if(this.bPagingMode) {

		// the pager is itself responsible for activation, just update the page info
		var iCurrentPage = this.getCurrentPage();
		var iLastPage = Math.ceil( this._getRowCount()/this.getNumberOfRows() );
		if (this._getRowCount() == 0){
			iLastPage = 1;
		}
		
		// update header pager
		oPager = this.getAggregation("footerPager");
		if(oPager) {
			oPager.setCurrentPage( iCurrentPage );
			oPager.setNumberOfPages( iLastPage );
		}

	} else {

		// show more buttons are only active if there are more lines to show
		bShowMoreEnabled = this._getRowCount() > this.getNumberOfRows();

		// update header showMore button
		oShowMoreButton = this.getAggregation("headerShowMoreButton");
		if(oShowMoreButton) {
			oShowMoreButton.setEnabled(bShowMoreEnabled);
		}

		// update footer showMore button
		oShowMoreButton = this.getAggregation("footerShowMoreButton");
		if(oShowMoreButton) {
			oShowMoreButton.setEnabled(bShowMoreEnabled);
		}

	}

};


/**
 * Verify if the rows aggregation of this control is bound.
 */
sap.ui.commons.RowRepeater.prototype.isBound = function(sName) {
	return sap.ui.core.Element.prototype.isBound.call(this, sName || "rows");
};

/**
 * Returns the row count. If aggregation rows is bound the count will be the length of the binding,
 * otherwise the count of the rows aggregation will be returned 
 * @private
 */;
sap.ui.commons.RowRepeater.prototype._getRowCount = function() {
	var oBinding = this.getBinding("rows"); 
	if (oBinding) {
		return oBinding.getLength();
	} else {
		return this.getRows().length;
	}
};

/**
 * Override unbindAggregation to clean up the "rows" aggregation 
 * @private
 */;
sap.ui.commons.RowRepeater.prototype.unbindAggregation = function(sName) {
	sap.ui.core.Element.prototype.unbindAggregation.apply(this, arguments);
	if (sName === "rows") {
		this.destroyRows();
	}
	return this;
};

/**
 * Override updateRows to enable paging 
 * @private
 */;
sap.ui.commons.RowRepeater.prototype.updateRows = function(bViaAPI) {
	
	// collect the relevant informations
	var oBindingInfo = this.getBindingInfo("rows"),
	    fnFactory = oBindingInfo.factory,
	    oBinding = oBindingInfo.binding,
	    iShowMoreSteps = this.getShowMoreSteps(),
	    bShowMore = iShowMoreSteps > 0,
	    iCurrentPage = this.getCurrentPage(),
	    iRowCount = this._getRowCount(),
	    iNumberOfRows = this.getNumberOfRows(),
	    iNewRowCount = Math.min(iRowCount, iNumberOfRows),
	    iLastPage = Math.ceil(iRowCount / iNumberOfRows) || 1;
	    
	// boundary check for the current page to avoid invalid pages
	if (iCurrentPage > iLastPage) {
		iCurrentPage = iLastPage;
		this.setProperty("currentPage", iCurrentPage);
		this._bSecondPage = false;
	}

	// collect the binding relevant information
	var iFirstRow = bShowMore ? 0 : (iCurrentPage-1) * iNewRowCount, 
	    iRowsOffset = (this._bSecondPage ? 1 : 0) * iNewRowCount,
	    iThreshold = this.getThreshold(), // || (bShowMore ? Math.min(iRowCount, iNewRowCount + iShowMoreSteps) : iNewRowCount * 2),
	    aContexts = oBinding ? oBinding.getContexts(iFirstRow, iNewRowCount, iThreshold) : [];
	
	if (bViaAPI !== true) {

		// if not called internally via API we create the rows aggregation
		// because then this function is called after the connection between the 
		// control and the model has been established!
		this._bSecondPage = false;
		this.destroyRows();
		for (var i = 0, l = iNewRowCount; i < l; i++) {
			var sId = this.getId() + "-" + i,
			    oClone = fnFactory(sId, aContexts[i]);
			oClone.setBindingContext(aContexts[i], oBindingInfo.model);
			this.addRow(oClone);
		}
		
		// TODO: in future we might think about a performance improvement to render
		// only those lines where the factory returns another template and the rest
		// is simply adopted by applying a new context. For now in case of the 
		// model loads additional data we simply rerender the complete row-repeater
		// or when the binding is changed!
		
	} else {
	
		// if called via API we need to only create the additional rows (paging) 
		// and bind them properly by updating their binding contexts
		this._bSuppressInvalidate = true;
	
		for (var i = 0, l = iNewRowCount; i < l; i++) {
			var iIndex = iRowsOffset + i;
			var oRow = this.getRows()[iIndex];
			// when paging we remove the row again because we need to recreate it via 
			// the factory function to make sure to react on data specific rendering
			if (!bShowMore) {
				if (oRow) {
					this.removeAggregation("rows", oRow, true);
					oRow.destroy();
				}
				oRow = undefined;
			}
			// if the row doesn't exist yet, we recreate the row and insert it into
			// the rows aggregation and afterwards we bind the context
			if (!oRow) {
				var sId = this.getId() + "-" + iIndex;
				oRow = fnFactory(sId, aContexts[i]);
				oRow.setBindingContext(aContexts[i], oBindingInfo.model);
				this.insertAggregation("rows", oRow, iIndex, true);
			}
			else {
				oRow.setBindingContext(aContexts[i], oBindingInfo.model);
			}
		}
		
		this._bSuppressInvalidate = false;
		
	}
	
	// update the child controls
	this.updateChildControls();
	
};

sap.ui.commons.RowRepeater.prototype.invalidate = function(oOrigin) {
	// if we do not suppress the invalidation, the first time another page
	// is displayed the complete row repeater gets invalidated and rerendered
	// because a property of a not renderered control is changed via setting the
	// databinding context.
	if (this._bSuppressInvalidate) {
		return; // suppress the invalidation of the rows (when exchanging the binding contexts)
	} 
	sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
};

}; // end of sap/ui/commons/RowRepeater.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RowRepeaterFilter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RowRepeaterFilter.
jQuery.sap.declare("sap.ui.commons.RowRepeaterFilter");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new RowRepeaterFilter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getFilters filters} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This element is used by the RowRepeater and allows to define a filter in this context along with the related data such as a text and an icon.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.RowRepeaterFilter
 */
sap.ui.core.Element.extend("sap.ui.commons.RowRepeaterFilter", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"icon" : {type : "string", group : "Appearance", defaultValue : null},
		"filters" : {type : "object", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RowRepeaterFilter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RowRepeaterFilter.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The filter title if needed for display.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.RowRepeaterFilter#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.RowRepeaterFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeaterFilter#setText
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The filter icon if needed for display.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ui.commons.RowRepeaterFilter#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.RowRepeaterFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeaterFilter#setIcon
 * @function
 */


/**
 * Getter for property <code>filters</code>.
 * The set of filter objects.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>filters</code>
 * @public
 * @name sap.ui.commons.RowRepeaterFilter#getFilters
 * @function
 */

/**
 * Setter for property <code>filters</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oFilters  new value for property <code>filters</code>
 * @return {sap.ui.commons.RowRepeaterFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeaterFilter#setFilters
 * @function
 */


// Start of sap\ui\commons\RowRepeaterFilter.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.commons.RowRepeaterFilter.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap/ui/commons/RowRepeaterFilter.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RowRepeaterSorter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RowRepeaterSorter.
jQuery.sap.declare("sap.ui.commons.RowRepeaterSorter");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new RowRepeaterSorter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getSorter sorter} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This element is used by the RowRepeater and allows to define a sorter in this context along with the related data such as a text and an icon.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.RowRepeaterSorter
 */
sap.ui.core.Element.extend("sap.ui.commons.RowRepeaterSorter", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"icon" : {type : "string", group : "Appearance", defaultValue : null},
		"sorter" : {type : "object", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RowRepeaterSorter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RowRepeaterSorter.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The sorter title if needed for display.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.RowRepeaterSorter#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.RowRepeaterSorter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeaterSorter#setText
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The sorter icon if needed for display.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ui.commons.RowRepeaterSorter#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.RowRepeaterSorter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeaterSorter#setIcon
 * @function
 */


/**
 * Getter for property <code>sorter</code>.
 * The sorter object.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>sorter</code>
 * @public
 * @name sap.ui.commons.RowRepeaterSorter#getSorter
 * @function
 */

/**
 * Setter for property <code>sorter</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oSorter  new value for property <code>sorter</code>
 * @return {sap.ui.commons.RowRepeaterSorter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RowRepeaterSorter#setSorter
 * @function
 */


// Start of sap\ui\commons\RowRepeaterSorter.js
///**
// * This file defines behavior for the control,
// */
//sap.ui.commons.RowRepeaterSorter.prototype.init = function(){
//   // do something for initialization...
//};
}; // end of sap/ui/commons/RowRepeaterSorter.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.SearchProvider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.SearchProvider.
jQuery.sap.declare("sap.ui.commons.SearchProvider");

jQuery.sap.require('sap.ui.core.search.OpenSearchProvider'); // unlisted dependency retained



/**
 * Constructor for a new SearchProvider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.search.OpenSearchProvider#constructor sap.ui.core.search.OpenSearchProvider}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A SearchProvider which can be attached to a Search Field.
 * @extends sap.ui.core.search.OpenSearchProvider
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.6.0. 
 * Replaced by sap.ui.core.search.OpenSearchProvider
 * @name sap.ui.commons.SearchProvider
 */
sap.ui.core.search.OpenSearchProvider.extend("sap.ui.commons.SearchProvider", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.SearchProvider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.SearchProvider.extend
 * @function
 */


// Start of sap\ui\commons\SearchProvider.js
/**
 * Called by the search field, when suggestions are requested.
 *
 * @private
 */
sap.ui.commons.SearchProvider.prototype._doSuggest = function(oSearchField, sSuggestValue) {
	this.suggest(sSuggestValue, function(sValue, aSuggestions){
		if(oSearchField && oSearchField.suggest){
			oSearchField.suggest(sValue, aSuggestions);
		}
	});
};


}; // end of sap/ui/commons/SearchProvider.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.SegmentedButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.SegmentedButton.
jQuery.sap.declare("sap.ui.commons.SegmentedButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SegmentedButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.ui.commons.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedButton selectedButton} : string | sap.ui.commons.Button</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.SegmentedButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The SegmentedButton provides a group of multiple buttons. Only one button can be active. The behaviour is more ore less like a radio button group.
 * @extends sap.ui.core.Control
 * @implements sap.ui.commons.ToolbarItem
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.SegmentedButton
 */
sap.ui.core.Control.extend("sap.ui.commons.SegmentedButton", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"enabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
    	"buttons" : {type : "sap.ui.commons.Button", multiple : true, singularName : "button"}
	},
	associations : {
		"selectedButton" : {type : "sap.ui.commons.Button", multiple : false}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.SegmentedButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.SegmentedButton.extend
 * @function
 */

sap.ui.commons.SegmentedButton.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>enabled</code>.
 * enabled
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.SegmentedButton#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SegmentedButton#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * hide/show all Buttons: An invisible SegmentedButton is not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.SegmentedButton#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SegmentedButton#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * Buttons
 * 
 * @return {sap.ui.commons.Button[]}
 * @public
 * @name sap.ui.commons.SegmentedButton#getButtons
 * @function
 */


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.commons.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.ui.commons.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SegmentedButton#insertButton
 * @function
 */

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.commons.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.ui.commons.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SegmentedButton#addButton
 * @function
 */

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.ui.commons.Button} vButton the button to remove or its index or id
 * @return {sap.ui.commons.Button} the removed button or null
 * @public
 * @name sap.ui.commons.SegmentedButton#removeButton
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Button[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.SegmentedButton#removeAllButtons
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.SegmentedButton#indexOfButton
 * @function
 */
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.ui.commons.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SegmentedButton#destroyButtons
 * @function
 */


/**
 * Selected Button
 *
 * @return {string} Id of the element which is the current target of the <code>selectedButton</code> association, or null
 * @public
 * @name sap.ui.commons.SegmentedButton#getSelectedButton
 * @function
 */

/**
 * Selected Button
 *
 * @param {string | sap.ui.commons.Button} vSelectedButton 
 *    Id of an element which becomes the new target of this <code>selectedButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SegmentedButton#setSelectedButton
 * @function
 */


	
/**
 * Event fired when button selected 
 *
 * @name sap.ui.commons.SegmentedButton#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.selectedButtonId Id of selected ToggleButton
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.SegmentedButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.SegmentedButton</code>.<br/> itself. 
 *  
 * Event fired when button selected 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.SegmentedButton</code>.<br/> itself.
 *
 * @return {sap.ui.commons.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SegmentedButton#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.SegmentedButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SegmentedButton#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedButtonId' of type <code>string</code> Id of selected ToggleButton</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.SegmentedButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.SegmentedButton#fireSelect
 * @function
 */


// Start of sap\ui\commons\SegmentedButton.js
/* This file defines behavior for the SegmentedButton control */ 

jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained
 

/**
 * Initialization hook for the SegmentedButton.
 * 
 * @private
 */
sap.ui.commons.SegmentedButton.prototype.init = function() {
	if (!this._oItemNavigation) {
		this._oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this._oItemNavigation.setCycling(true);
		this.addDelegate(this._oItemNavigation);
	}
	this._oButtonDelegate = {oSegmentedButton: this, onAfterRendering: this._buttonOnAfterRendering};
};

sap.ui.commons.SegmentedButton.prototype.exit = function() {

	if (this._oItemNavigation) {
		this.removeDelegate(this._oItemNavigation);
		this._oItemNavigation.destroy();
		delete this._oItemNavigation;
	}

};

/**
 * AfterRendering hook for the SegmentedButton. Create ItemNavigation here. 
 *
 * @private
 */
sap.ui.commons.SegmentedButton.prototype.onAfterRendering = function() {
	this._setItemNavigation(true);

};
/**
 * @private
 */
sap.ui.commons.SegmentedButton.prototype._buttonSelected = function(oEvent) {
	var oOldButtonSelection = sap.ui.getCore().byId(this.getSelectedButton()),
		oNewButtonSelection = oEvent.getSource();

	if (oNewButtonSelection !== oOldButtonSelection) {
		this.setSelectedButton(oNewButtonSelection);
		this.fireSelect({selectedButtonId:oNewButtonSelection.getId()});
	}
};
/**
 * @private
 */
sap.ui.commons.SegmentedButton.prototype._setItemNavigation = function(bAddDelegate) {
	var oButton,
		aButtons,
		aItemDomRefs = [];

	if (this.getDomRef()) {
		this._oItemNavigation.setRootDomRef(this.getDomRef("radiogroup"));
		aButtons = this.getButtons();
		for ( var i = 0; i < aButtons.length; i++) {
			oButton = aButtons[i];
			aItemDomRefs.push(oButton.getDomRef());
			this._setAriaInfo(oButton, i+1);
			if (bAddDelegate) {
				// remove delgate if it already exists
				oButton.removeDelegate(this._oButtonDelegate);
				oButton.addDelegate(this._oButtonDelegate);
			}
		}
		this._oItemNavigation.setItemDomRefs(aItemDomRefs);
	}
};
/**
 * @private
 */
sap.ui.commons.SegmentedButton.prototype._setAriaInfo = function(oButton, i) {
	var $button = jQuery(oButton.getDomRef()),
		length = this.getButtons().length;

	$button.attr("aria-posinset",i);
	$button.attr("aria-setsize",length);
	$button.attr("role", "radio");
	if (oButton.getId() === this.getSelectedButton()) {
		$button.attr("aria-checked", "true");
		$button.removeAttr("aria-describedby");
	} else {
		$button.removeAttr("aria-checked");
		$button.attr("aria-describedby",this.getId()+"-label");
	}
};

/**
 * OnAfterRendering of Button
 *
 * @private
*/
sap.ui.commons.SegmentedButton.prototype._buttonOnAfterRendering = function() {

	this.oSegmentedButton._setItemNavigation();

};

/**
 * Rerendering of the Buttons
 *
 * @protected
*/
sap.ui.commons.SegmentedButton.prototype._rerenderButtons = function() {
	var $content = this.$();
	if ($content.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		sap.ui.commons.SegmentedButtonRenderer.renderButtons(rm, this);
		rm.flush($content[0]);
		rm.destroy();
	}
};

/* Override API methods */
sap.ui.commons.SegmentedButton.prototype.addButton = function(oButton) {
	this.addAggregation("buttons",oButton, true);
	oButton.attachPress(this._buttonSelected, this);
	this._rerenderButtons();
	return this;
};
sap.ui.commons.SegmentedButton.prototype.insertButton = function(oButton, iIndex) {
	this.insertAggregation("buttons",oButton, iIndex, true);
	oButton.attachPress(this._buttonSelected, this);
	this._rerenderButtons();
	return this;
};
sap.ui.commons.SegmentedButton.prototype.removeButton = function(oButton) {
	var result = this.removeAggregation("buttons",oButton, true);
	if (result) {
		result.detachPress(this._buttonSelected, this);
		result.removeDelegate(this._oButtonDelegate);
		this._rerenderButtons();
	}
	return result;
};
sap.ui.commons.SegmentedButton.prototype.removeAllButtons = function() {
	var result = this.removeAllAggregation("buttons", true);
	jQuery.each(result, function(i, oButton) {
		oButton.detachPress(this._buttonSelected, this);
		oButton.removeDelegate(this._oButtonDelegate);
	});
	this._rerenderButtons();
	return result;
};
sap.ui.commons.SegmentedButton.prototype.setSelectedButton = function(vButton) {
	var oButton, oButtonOld = sap.ui.getCore().byId(this.getSelectedButton());
	this.setAssociation("selectedButton", vButton, true); 
	oButton = sap.ui.getCore().byId(this.getSelectedButton());
	
	// Make sure Aria info is correct after changing button state
	this._setItemNavigation()
	
	var aButtons = this.getButtons();
	for (var i = 0; i < aButtons.length; i++) {
		if (aButtons[i] === oButton) {
			this._oItemNavigation.setFocusedIndex(i);
			break;
		}
	}
	if (oButtonOld) {
		oButtonOld.removeStyleClass("sapUiSegButtonSelected");
		oButtonOld.$().blur();
	}
	if (oButtonOld && oButtonOld._icon) {
		oButtonOld.setIcon(oButtonOld._icon);
		oButtonOld._icon = null;
	}
	if(oButton) {
		if (oButton.getIconHovered()) {
			oButton._icon = oButton.getIcon();
			oButton.setIcon(oButton.getIconHovered());
		}
		oButton.addStyleClass("sapUiSegButtonSelected");
	}
};

sap.ui.commons.SegmentedButton.prototype.setEnabled = function(bEnabled) {
	jQuery.each(this.getButtons(),function(i,oButton) {
		oButton.setEnabled(bEnabled);
	});
	// remove itemNavigation if buttons are disabled
	if (this._oItemNavigation && !bEnabled) {
		this.removeDelegate(this._oItemNavigation);
	} else {
		this.addDelegate(this._oItemNavigation);
	}
	this.setProperty("enabled",bEnabled);
};

/*
 * before cloning buttons deregister events and register it after cloning again.
 */
sap.ui.commons.SegmentedButton.prototype.clone = function(sIdSuffix, aLocalIds) {

	var aButtons = this.getButtons();
	for ( var i = 0; i < aButtons.length; i++) {
		var oButton = aButtons[i];
		oButton.detachPress(this._buttonSelected, this);
	}

	var oClone = sap.ui.core.Element.prototype.clone.apply(this, arguments);

	for ( var i = 0; i < aButtons.length; i++) {
		var oButton = aButtons[i];
		oButton.attachPress(this._buttonSelected, this);
	}

	return oClone;
};

sap.ui.commons.SegmentedButton.prototype.getFocusDomRef = function() {

	return this.getDomRef("radiogroup") || null;

};
}; // end of sap/ui/commons/SegmentedButton.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Slider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Slider.
jQuery.sap.declare("sap.ui.commons.Slider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Slider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getMin min} : float (default: 0)</li>
 * <li>{@link #getMax max} : float (default: 100)</li>
 * <li>{@link #getValue value} : float (default: 50)</li>
 * <li>{@link #getSmallStepWidth smallStepWidth} : float</li>
 * <li>{@link #getTotalUnits totalUnits} : int</li>
 * <li>{@link #getStepLabels stepLabels} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getLabels labels} : string[]</li>
 * <li>{@link #getVertical vertical} : boolean (default: false)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.Slider#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.Slider#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The interactive control is displayed as a horizontal line with a pointer and units of measurement.
 * Users can move the pointer along the line to change values with graphical support.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Slider
 */
sap.ui.core.Control.extend("sap.ui.commons.Slider", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"min" : {type : "float", group : "Appearance", defaultValue : 0},
		"max" : {type : "float", group : "Appearance", defaultValue : 100},
		"value" : {type : "float", group : "Appearance", defaultValue : 50},
		"smallStepWidth" : {type : "float", group : "Appearance", defaultValue : null},
		"totalUnits" : {type : "int", group : "Appearance", defaultValue : null},
		"stepLabels" : {type : "boolean", group : "Appearance", defaultValue : false},
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"labels" : {type : "string[]", group : "Misc", defaultValue : null},
		"vertical" : {type : "boolean", group : "Appearance", defaultValue : false},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Slider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Slider.extend
 * @function
 */

sap.ui.commons.Slider.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>width</code>.
 * Width of the horizontal slider.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Slider#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setWidth
 * @function
 */


/**
 * Getter for property <code>min</code>.
 * Minimal value of the slider.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>min</code>
 * @public
 * @name sap.ui.commons.Slider#getMin
 * @function
 */

/**
 * Setter for property <code>min</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMin  new value for property <code>min</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setMin
 * @function
 */


/**
 * Getter for property <code>max</code>.
 * Maximal value of the slider
 *
 * Default value is <code>100</code>
 *
 * @return {float} the value of property <code>max</code>
 * @public
 * @name sap.ui.commons.Slider#getMax
 * @function
 */

/**
 * Setter for property <code>max</code>.
 *
 * Default value is <code>100</code> 
 *
 * @param {float} fMax  new value for property <code>max</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setMax
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Current value of the slider. (Position of the grip.)
 *
 * Default value is <code>50</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * @name sap.ui.commons.Slider#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>50</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setValue
 * @function
 */


/**
 * Getter for property <code>smallStepWidth</code>.
 * The grip can only be moved in steps of this width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>smallStepWidth</code>
 * @public
 * @name sap.ui.commons.Slider#getSmallStepWidth
 * @function
 */

/**
 * Setter for property <code>smallStepWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fSmallStepWidth  new value for property <code>smallStepWidth</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setSmallStepWidth
 * @function
 */


/**
 * Getter for property <code>totalUnits</code>.
 * Number of units that are displayed by ticks. The PageUp and PageDown keys navigate according to these units.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>totalUnits</code>
 * @public
 * @name sap.ui.commons.Slider#getTotalUnits
 * @function
 */

/**
 * Setter for property <code>totalUnits</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iTotalUnits  new value for property <code>totalUnits</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setTotalUnits
 * @function
 */


/**
 * Getter for property <code>stepLabels</code>.
 * Display step numbers for the ticks on the slider.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>stepLabels</code>
 * @public
 * @name sap.ui.commons.Slider#getStepLabels
 * @function
 */

/**
 * Setter for property <code>stepLabels</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bStepLabels  new value for property <code>stepLabels</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setStepLabels
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible sliders are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.Slider#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setVisible
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Using the slider interactively requires value "true".
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.commons.Slider#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setEditable
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.Slider#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setEnabled
 * @function
 */


/**
 * Getter for property <code>labels</code>.
 * Labels to be displayed instead of numbers. Attribute totalUnits and label count should be the same
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>labels</code>
 * @public
 * @name sap.ui.commons.Slider#getLabels
 * @function
 */

/**
 * Setter for property <code>labels</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aLabels  new value for property <code>labels</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#setLabels
 * @function
 */


/**
 * Getter for property <code>vertical</code>.
 * Orientation of slider
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>vertical</code>
 * @public
 * @since 1.7.1
 * @name sap.ui.commons.Slider#getVertical
 * @function
 */

/**
 * Setter for property <code>vertical</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVertical  new value for property <code>vertical</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.ui.commons.Slider#setVertical
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of the vertical slider.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @since 1.7.1
 * @name sap.ui.commons.Slider#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.ui.commons.Slider#setHeight
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.Slider#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.Slider#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Slider#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.Slider#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.Slider#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Slider#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * Value was changed. This event is fired if the value has changed by an user action. 
 *
 * @name sap.ui.commons.Slider#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {float} oControlEvent.getParameters.value Current value of the slider after a change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Slider</code>.<br/> itself. 
 *  
 * Value was changed. This event is fired if the value has changed by an user action. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Slider</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> Current value of the slider after a change. </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Slider#fireChange
 * @function
 */


/**
 * Value was changed. This event is fired during the mouse move. The normal change event ist only fired by mouseup. 
 *
 * @name sap.ui.commons.Slider#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {float} oControlEvent.getParameters.value Current value of the slider after a change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.ui.commons.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Slider</code>.<br/> itself. 
 *  
 * Value was changed. This event is fired during the mouse move. The normal change event ist only fired by mouseup. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Slider</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.ui.commons.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Slider#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> Current value of the slider after a change. </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Slider#fireLiveChange
 * @function
 */


// Start of sap\ui\commons\Slider.js
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.ui.core.EnabledPropagator.call(sap.ui.commons.Slider.prototype);

sap.ui.commons.Slider.prototype.exit = function() {
	// Cleanup resize event registration on exit
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};

sap.ui.commons.Slider.prototype.onBeforeRendering = function() {
	// Cleanup resize event registration before re-rendering
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};

sap.ui.commons.Slider.prototype.onAfterRendering = function () {

	// Warning in the case of wrong properties
	if( this.getMin() >= this.getMax() ){
		jQuery.sap.log.warning('Property wrong: Min:' + this.getMin() + ' > Max:' + this.getMax() );
	}

	this.oGrip = this.getDomRef("grip");
	this.oBar  = this.getDomRef("bar");
	this.oHiLi = this.getDomRef("hili");
	this.bRtl  = sap.ui.getCore().getConfiguration().getRTL();
	this.bAcc  = sap.ui.getCore().getConfiguration().getAccessibility();
	this.bTextLabels = (this.getLabels() && this.getLabels().length > 0);
	this.oMovingGrip = this.oGrip;

	var fNewValue = this.getValue();
	if( fNewValue >= this.getMax() ){
		fNewValue   = this.getMax();
	}else if( fNewValue <= this.getMin() ){
		fNewValue   = this.getMin();
	}

	if (this.bTextLabels && (this.getLabels().length - 1) != this.getTotalUnits()) {
		jQuery.sap.log.warning('label count should be one more than total units','sap.ui.commons.Slider');
	}

	this.iDecimalFactor = this.calcDecimalFactor(this.getSmallStepWidth());

	// Get left shift for middle of grip. Use offsetWidth to include borders. Round to prevent calculation errors.
	this.iShiftGrip = Math.round(this.getOffsetWidth(this.oGrip) / 2);

	// Calculate grip position
	var iNewPos = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.getBarWidth();

	if(this.bRtl || this.getVertical()){
		iNewPos = this.getBarWidth() - iNewPos;
	}

	// Move grip to hit the point in the middle
	this.changeGrip(fNewValue, iNewPos, this.oGrip);

	this.repositionTicksAndLabels();

	// Disable text selection
	this.allowTextSelection(false);

	// Register resize event
	this.oDomRef = this.getDomRef();
	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.oDomRef, jQuery.proxy(this.onresize, this));

};

/**
 * Function is called when Slider is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onclick = function(oEvent) {

	var oMovingGrip = this.oMovingGrip;

	if (this.getEditable() && this.getEnabled()){

		var fMultiplicator;

		// Check for ID where the behavior depends on the clicked area.
		var sMyTargetId = oEvent.target.getAttribute( 'ID' );
		var fNewValue = this.getValue();
		var iNewPos   = this.getOffsetLeft(this.oGrip) + this.iShiftGrip;

		switch ( sMyTargetId ){
			case ( this.oBar.id ):
			case ( this.oHiLi.id ):
				// Click on slide bar
				if (this.getVertical()) {
					fMultiplicator = this.getBarWidth() - this.getOffsetX(oEvent);
				} else {
					fMultiplicator = this.getOffsetX(oEvent);
				}
				if (sMyTargetId == this.oHiLi.id) {
					if (this.getVertical()) {
						fMultiplicator -= this.getOffsetLeft(this.oHiLi);
					} else {
						fMultiplicator += this.getOffsetLeft(this.oHiLi);
					}
				}
				fNewValue = this.convertRtlValue(this.getMin() + ( ( ( this.getMax() - this.getMin() )  / this.getBarWidth() ) * fMultiplicator ));
				iNewPos = this.getOffsetX(oEvent);
				if (sMyTargetId == this.oHiLi.id) {
					iNewPos += this.getOffsetLeft(this.oHiLi);
				}
				if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
					oMovingGrip = this.oStartTarget;
				} else if (this.targetIsGrip(sMyTargetId)) {
					oMovingGrip = oEvent.target;
				} else {
					oMovingGrip = this.getNearestGrip(iNewPos);
				}
				break;
			case ( this.getId() + '-left' ):
				// Click on left end
				iNewPos = 0;
				if (this.getVertical()) {
					fNewValue = this.getMax();
					oMovingGrip = this.getRightGrip();
				} else {
					fNewValue = this.getMin();
					oMovingGrip = this.getLeftGrip();
				}
				break;
			case ( this.getId() + '-right' ):
				// Click on right end
				iNewPos = this.getBarWidth();
				if (!this.getVertical()) {
					fNewValue = this.getMax();
					oMovingGrip = this.getRightGrip();
				} else {
					fNewValue = this.getMin();
					oMovingGrip = this.getLeftGrip();
				}
				break;
			default:
				//If target is grip return
				//Not implemented as case because RangeSlider has multiple grips, for which cases cannot be inserted afterwards
				if (this.targetIsGrip(sMyTargetId)) {
					return;
				}
				// Check whether tick is clicked
				var iTickPos = sMyTargetId.search('-tick');
				if( iTickPos >= 0){
					var iTickNum = parseInt( sMyTargetId.slice( this.getId().length+5), 10);
					iNewPos = this.fTickDist * iTickNum;
					var iTotalUnits;
					if (this.bTextLabels) {
						iTotalUnits = this.getLabels().length - 1;
					} else {
						iTotalUnits = this.getTotalUnits();
					}
					fNewValue = this.convertRtlValue(this.getMin() + ( ( ( this.getMax() - this.getMin() ) / iTotalUnits ) * iTickNum ));
					if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
						oMovingGrip = this.oStartTarget;
					} else if (this.targetIsGrip(sMyTargetId)) {
						oMovingGrip = oEvent.target;
					} else {
						oMovingGrip = this.getNearestGrip(iNewPos);
					}
					break;
				}
	
				// Outer DIV clicked -> ID given by caller. This is the case if all other DIVs are smaller,
				// or if tick text is clicked
				var iOffsetBar = jQuery(this.oBar).offset();
				var iOffsetMe  = jQuery(oEvent.target).offset();
				if (this.getVertical()) {
					iNewPos = this.getOffsetX(oEvent) - ( iOffsetBar.top - iOffsetMe.top );
				} else {
					iNewPos = this.getOffsetX(oEvent) - ( iOffsetBar.left - iOffsetMe.left );
				}
				if( iNewPos <= 0 ){
					iNewPos = 0;
					if (this.getVertical()) {
						fNewValue = this.getMax();
					} else {
						fNewValue = this.getMin();
					}
				}else{
					if( iNewPos >= this.getBarWidth() ){
						iNewPos = this.getBarWidth();
						if (this.getVertical()) {
							fNewValue = this.getMin();
						} else {
							fNewValue = this.getMax();
						}
					}else{
						if (this.getVertical()) {
							fMultiplicator = this.getBarWidth() - iNewPos;
						} else {
							fMultiplicator = iNewPos;
						}
						fNewValue = this.getMin() + ( ( ( this.getMax() - this.getMin() )  / this.getBarWidth() ) * fMultiplicator );
					}
				}
				fNewValue = this.convertRtlValue(fNewValue);
				if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
					oMovingGrip = this.oStartTarget;
				} else if (this.targetIsGrip(sMyTargetId)) {
					oMovingGrip = oEvent.target;
				} else {
					oMovingGrip = this.getNearestGrip(iNewPos);
				}
				break;
		}

		var validation = this.validateNewPosition(fNewValue, iNewPos, oMovingGrip, (this.getValueForGrip(oMovingGrip) > fNewValue));
		fNewValue = validation.fNewValue;
		iNewPos = validation.iNewPos;

		this.changeGrip(fNewValue, iNewPos, oMovingGrip);
		this.handleFireChange();
	}

	// Set focus to grip
	oMovingGrip.focus();
	this.oMovingGrip = oMovingGrip;
	this.oStartTarget = null;

};

/**
 * Function is called when Slider is clicked
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onmousedown = function(oEvent) {

	if (this.getEditable() && this.getEnabled() && !this._cancelMousedown){

		// Check for ID. This is only possible on the grip.
		var sMyTargetId = oEvent.target.getAttribute( 'ID' );

		if( this.targetIsGrip(sMyTargetId) ){
			this.bGripMousedown = true;

			// Remember start coordinates
			if (oEvent.targetTouches) {
				this.iStartDragX = oEvent.targetTouches[0].pageX;
				this.iStartDragY = oEvent.targetTouches[0].pageY;
			}else{
				this.iStartDragX = oEvent.pageX;
				this.iStartDragY = oEvent.pageY;
			}

			this.iStartLeft  = this.getOffsetLeft(oEvent.target) + this.iShiftGrip;

			this.oMovingGrip = oEvent.target;

			var oThat = this;
			this.handleMoveCall = function (event){
				oThat.handleMove(event);
			};
			this.preventSelect = function (event){
				return false;
			};

			if (!oEvent.targetTouches) {
				jQuery(window.document).bind('mousemove', this.handleMoveCall);
				jQuery(window.document).bind('selectstart', this.preventSelect);
				jQuery.sap.bindAnyEvent(jQuery.proxy(this.onAnyEvent, this));
			}
		}
		this.oStartTarget = null;
	}
};

sap.ui.commons.Slider.prototype.ontouchstart = function(oEvent) {

	if ( (oEvent.originalEvent && jQuery.sap.startsWith(oEvent.originalEvent.type, "mouse")) ||
	     (oEvent.handleObj && jQuery.sap.startsWith(oEvent.handleObj.origType, "mouse"))){
		// ignore simulated touch events (if mouse events are available use them)
		return;
	}

	this._cancelMousedown = false;

	this.onmousedown(oEvent);

	this._cancelMousedown = true;

};

/**
 * Function is called when Slider is unclicked
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onmouseup = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){
		// Mouseup is handled on every div, not only on grip

		this.bGripMousedown = false;

		if (this.handleMoveCall) {
			jQuery(window.document).unbind('mousemove', this.handleMoveCall);
			jQuery(window.document).unbind('selectstart', this.preventSelect);
			jQuery.sap.unbindAnyEvent(this.onAnyEvent);

			if ( this.iStartLeft != ( this.getOffsetLeft(this.oMovingGrip) + this.iShiftGrip )){
				// Only if position was changed
				// only fire change event because liveChange is already fired in handleMove
				this.handleFireChange(true); // without liveChange
			}

			this.handleMoveCall = null;
			this.iStartDragX    = null;
			this.iStartDragY    = null;
			this.iStartLeft     = null;
		}
	}

};

sap.ui.commons.Slider.prototype.ontouchend = function(oEvent) {

	if ( (oEvent.originalEvent && jQuery.sap.startsWith(oEvent.originalEvent.type, "mouse")) ||
	     (oEvent.handleObj && jQuery.sap.startsWith(oEvent.handleObj.origType, "mouse"))){
		// ignore simulated touch events (if mouse events are available use them)
		return;
	}

	this.onmouseup(oEvent);

};

/**
 * Function is called when Slider is moved
 *
 * @param {DOM.Event} Event
 * @private
 */
sap.ui.commons.Slider.prototype.handleMove = function(event) {

	if (this.getEditable() && this.getEnabled() && this.bGripMousedown ){

		event = event || window.event;

		// Move is handled on every div, not only on grip

		var iPageX, iPageY;
		if (event.targetTouches) {
			iPageX = event.targetTouches[0].pageX;
			iPageY = event.targetTouches[0].pageY;
		}else{
			iPageX = event.pageX;
			iPageY = event.pageY;
		}

		var iNewPos;
		if (this.getVertical()) {
			iNewPos = this.iStartLeft + iPageY - this.iStartDragY;
		} else {
			iNewPos = this.iStartLeft + iPageX - this.iStartDragX;
		}

		if( iNewPos <= 0 ){
			iNewPos = 0 ;
			if (this.getVertical()) {
				var fNewValue = this.getMax();
			} else {
				var fNewValue = this.getMin();
			}
		}else{
			if ( iNewPos >= this.getBarWidth() ){
				iNewPos = this.getBarWidth() ;
				if (this.getVertical()) {
					var fNewValue = this.getMin();
				} else {
					var fNewValue = this.getMax();
				}
			}else{
				if (this.getVertical()) {
					var fMultiplicator = this.getBarWidth() - iNewPos;
				} else {
					var fMultiplicator = iNewPos;
				}
				var fNewValue = this.getMin() + ( ( ( this.getMax() - this.getMin() )  / this.getBarWidth() ) * fMultiplicator ) ;
			}
		}
		fNewValue = this.convertRtlValue(fNewValue);
		var fOldValue = this.getValueForGrip(this.oMovingGrip);

		var validation = this.validateNewPosition(fNewValue, iNewPos, this.oMovingGrip, (fOldValue > fNewValue));
		fNewValue = validation.fNewValue;
		iNewPos = validation.iNewPos;

		this.changeGrip(fNewValue, iNewPos, this.oMovingGrip);
		fNewValue = this.getValueForGrip(this.oMovingGrip); // get new value considering step width

		this.fireLiveChangeForGrip(this.oMovingGrip, fNewValue, fOldValue);
		this.oStartTarget = this.oMovingGrip;
	}

	event.cancelBubble = true;

	return false;

};

sap.ui.commons.Slider.prototype.ontouchmove = function(oEvent) {

	if ( (oEvent.originalEvent && jQuery.sap.startsWith(oEvent.originalEvent.type, "mouse")) ||
	     (oEvent.handleObj && jQuery.sap.startsWith(oEvent.handleObj.origType, "mouse"))){
		// ignore simulated touch events (if mouse events are available use them)
		return;
	}

	this.handleMove(oEvent);

	oEvent.preventDefault();

};

/**
 * Function is called when Slider is moved
 *
 * @param Grip oGrip, float fNewValue
 * @private
 */
sap.ui.commons.Slider.prototype.fireLiveChangeForGrip = function (oGrip, fNewValue, fOldValue) {
	if (oGrip == this.oGrip) {
		if ( fOldValue != fNewValue ){
			// fire event only if value changed
			this.fireLiveChange( { value: fNewValue } );
		}
	}
}

/**
 * Handles all events that occur outside the Popup and
 * dispatches it to the onOuterEvent
 * @param {jQuery.EventObject} oEvent The event object of the ui.core framework
 * @private
 */
sap.ui.commons.Slider.prototype.onAnyEvent = function (oEvent) {

	jQuery.sap.log.info('onAnyEvent fired: "' + oEvent.type + '"');

	// Skip if not editable or no drag operation in progress
	if ((!this.getEditable()) || (!this.getEnabled()) || !this.bGripMousedown){
		return;
	}

	// Check if outside of control
	var oSource = oEvent.target;
	if ((!jQuery.sap.containsOrEquals(this.oDomRef,oSource) || oSource.tagName=="BODY") && oEvent.type == 'mouseup') {
		this.onmouseup(oEvent);
	}

};

/**
 * Function is called when right arrow is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapright = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		var fNewValue = this.convertRtlValue(this.getValueForGrip(this.oMovingGrip));
		var iNewPos   = this.getOffsetLeft(this.oMovingGrip) + this.iShiftGrip;

		if(this.getSmallStepWidth() > 0){
			// Step defined -> shift grip one step; at least one pixel, if step < 1px
			var fStepPixel = this.getBarWidth() / ( this.getMax() - this.getMin() ) * this.getSmallStepWidth();

			if(fStepPixel > 1){
				fNewValue = fNewValue + this.getSmallStepWidth();
				if (this.getVertical()) {
					iNewPos   = iNewPos - fStepPixel;
				} else {
					iNewPos   = iNewPos + fStepPixel;
				}
			}else{
				// Step < 1px -> shift grip to next step that is 1 pixel away
				fNewValue = fNewValue + ( 1 / fStepPixel * this.getSmallStepWidth() );
				if (this.getVertical()) {
					iNewPos   = iNewPos - 1;
				} else {
					iNewPos   = iNewPos + 1;
				}
			}
		}else{
			// No step defined -> shift grip 1 pixel
			fNewValue = fNewValue + ( ( this.getMax() - this.getMin() ) / this.getBarWidth() );
			if (this.getVertical()) {
				iNewPos   = iNewPos - 1;
			} else {
				iNewPos   = iNewPos + 1;
			}
		}
		fNewValue = this.convertRtlValue(fNewValue);

		var validation = this.validateNewPosition(fNewValue, iNewPos, this.oMovingGrip, !this.getVertical() && this.bRtl);
		fNewValue = validation.fNewValue;
		iNewPos = validation.iNewPos;

		this.changeGrip(fNewValue, iNewPos, this.oMovingGrip);
		this.handleFireChange();

	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when left arrow is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapleft = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){
		
		var fNewValue = this.convertRtlValue(this.getValueForGrip(this.oMovingGrip));
		var iNewPos   = this.getOffsetLeft(this.oMovingGrip) + this.iShiftGrip;

		if(this.getSmallStepWidth() > 0){
			// Step defined -> shift grip one step (at least one pixel, if step < 1px)
			var fStepPixel = this.getBarWidth() / ( this.getMax() - this.getMin() ) * this.getSmallStepWidth();

			if(fStepPixel > 1){
				fNewValue = fNewValue - this.getSmallStepWidth();
				if (this.getVertical()) {
					iNewPos   = iNewPos + fStepPixel;
				} else {
					iNewPos   = iNewPos - fStepPixel;
				}
			}else{
				fNewValue = fNewValue - ( 1 / fStepPixel * this.getSmallStepWidth() );
				if (this.getVertical()) {
					iNewPos   = iNewPos + 1;
				} else {
					iNewPos   = iNewPos - 1;
				}
			}
		}else{
			// No step defined -> shift grip one pixel
			fNewValue = fNewValue - ( ( this.getMax() - this.getMin() ) / this.getBarWidth() );
			if (this.getVertical()) {
				iNewPos   = iNewPos + 1;
			} else {
				iNewPos   = iNewPos - 1;
			}
		}
		fNewValue = this.convertRtlValue(fNewValue);

		var validation = this.validateNewPosition(fNewValue, iNewPos, this.oMovingGrip, this.getVertical() || !this.bRtl);
		fNewValue = validation.fNewValue;
		iNewPos = validation.iNewPos;

		this.changeGrip(fNewValue, iNewPos, this.oMovingGrip);
		this.handleFireChange();

	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when up arrow is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapup = function(oEvent) {
	if (this.bRtl && !this.getVertical()) {
		this.onsapleft(oEvent);
	} else {
		this.onsapright(oEvent);
	}
};

/**
 * Function is called when DOWN arrow is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapdown = function(oEvent) {
	if (this.bRtl && !this.getVertical()) {
		this.onsapright(oEvent);
	} else {
		this.onsapleft(oEvent);
	}
};

/**
 * Function is called when "+" is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapexpand = function(oEvent) {

	if(!this.bRtl){
		// Normal case - "+" similar to right
		this.onsapright(oEvent);
	}else{
		// RTL case - "+" similar to left
		this.onsapleft(oEvent);
	}

};

/**
 * Function is called when "-" is pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapcollapse = function(oEvent) {

	if(!this.bRtl){
		// Normal case - "-" similar to left
		this.onsapleft(oEvent);
	}else{
		// RTL case - "-" similar to right
		this.onsapright(oEvent);
	}

};

/**
 * Function is called when Home key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsaphome = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){
		var iNewPos = 0;
		if (this.getVertical() || (this.bRtl && !this.getVertical())) {
			iNewPos = this.getBarWidth();
		}

		this.changeGrip(this.getMin(), iNewPos, this.oMovingGrip);
		this.handleFireChange();
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when End key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapend = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){
		var iNewPos = this.getBarWidth();
		if (this.getVertical() || (this.bRtl && !this.getVertical())) {
			iNewPos = 0;
		}

		this.changeGrip(this.getMax(), iNewPos, this.oMovingGrip);
		this.handleFireChange();
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when Ctrl+right key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsaprightmodifiers = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		if(!this.fPageSize){
			if(this.getTotalUnits() > 0){
				this.fPageSize = ( this.getMax() - this.getMin() ) / this.getTotalUnits();
			}else{
				this.fPageSize = ( this.getMax() - this.getMin() ) / 10;
			}
		}

		if(!this.bRtl || this.getVertical()){
			var fNewValue = this.getValueForGrip(this.oMovingGrip) + this.fPageSize;
		}else{
			var fNewValue = this.getValueForGrip(this.oMovingGrip) - this.fPageSize;
		}
		// Calculate iNewPos from fNewValue to prevent rounding errors after repeating pageUps
		var iNewPos   = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.getBarWidth() ;
		if (this.bRtl && !this.getVertical()) {
			iNewPos = this.getBarWidth()-iNewPos;
		}

		if (this.getVertical()) {
			if (iNewPos > this.getBarWidth()) iNewPos = this.getBarWidth();
			iNewPos = this.getBarWidth() - iNewPos;
		}

		var validation = this.validateNewPosition(fNewValue, iNewPos, this.oMovingGrip, !this.getVertical() && this.bRtl);
		fNewValue = validation.fNewValue;
		iNewPos = validation.iNewPos;

		this.changeGrip(fNewValue, iNewPos, this.oMovingGrip);
		this.handleFireChange();
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when Ctrl+left key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapleftmodifiers = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){

		if(!this.fPageSize){
			if(this.getTotalUnits() > 0){
				this.fPageSize = ( this.getMax() - this.getMin() ) / this.getTotalUnits();
			}else{
				this.fPageSize = ( this.getMax() - this.getMin() ) / 10;
			}
		}

		if(!this.bRtl || this.getVertical()){
			var fNewValue = this.getValueForGrip(this.oMovingGrip) - this.fPageSize;
		}else{
			var fNewValue = this.getValueForGrip(this.oMovingGrip) + this.fPageSize;
		}
		// Calculate iNewPos from fNewValue to prevent rounding errors after repeating pageDowns
		var iNewPos   = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.getBarWidth();
		if (this.bRtl && !this.getVertical()) {
			iNewPos = this.getBarWidth()-iNewPos;
		}

		if (this.getVertical()) {
			if (iNewPos < 0) iNewPos = 0;
			iNewPos = this.getBarWidth() - iNewPos;
		}

		var validation = this.validateNewPosition(fNewValue, iNewPos, this.oMovingGrip, this.getVertical() || !this.bRtl);
		fNewValue = validation.fNewValue;
		iNewPos = validation.iNewPos;

		this.changeGrip(fNewValue, iNewPos, this.oMovingGrip);
		this.handleFireChange();
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when Ctrl+down key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapdownmodifiers = function(oEvent) {
	if (this.bRtl && !this.getVertical()) {
		this.onsaprightmodifiers(oEvent);
	} else {
		this.onsapleftmodifiers(oEvent);
	}
};

/**
 * Function is called when Ctrl+Up key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onsapupmodifiers = function(oEvent) {
	if (this.bRtl && !this.getVertical()) {
		this.onsapleftmodifiers(oEvent);
	} else {
		this.onsaprightmodifiers(oEvent);
	}
};

/**
 * Function is called when window is resized
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.onresize = function(oEvent) {

	if (!this.getDomRef()) {
		// slider is not renderes, maybe deleted from DOM -> deregister resize handler and do nothing
		// Cleanup resize event registration on exit
		if(this.sResizeListenerId){
			sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
			this.sResizeListenerId = null;
		}
		return;
	}

	// If width of control changed -> grip position must be newly calculated

	var fNewValue = this.getValue();

	var iNewPos   = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.getBarWidth() ;
	if (this.getVertical() || this.bRtl) {
		iNewPos = this.getBarWidth() - iNewPos;
	}

	this.changeGrip(fNewValue, iNewPos, this.oGrip);

	this.repositionTicksAndLabels();

};

/*
 * Respositiotn ticks and labels
 *
 * @private
 */
sap.ui.commons.Slider.prototype.repositionTicksAndLabels = function() {
	var iTotalUnits;
	if (this.bTextLabels) {
		iTotalUnits = this.getLabels().length - 1;
	} else {
		iTotalUnits = this.getTotalUnits();
	}

	if(iTotalUnits > 0){
		// Move ticks to correct position; put it in the middle.
		// Round value shift factor separately to have the same behavior like for the grip position.

		var oTick = null;
		var oText = null;

		this.fTickDist = this.getBarWidth() / iTotalUnits;

		for (var i = 0; i <= iTotalUnits; i++){
			oTick = jQuery.sap.domById(this.getId() + '-tick' + i);
			if (!this.bRtl || this.getVertical()) {
				var iLeft = Math.round( this.fTickDist * i ) - Math.ceil( this.getOffsetWidth(oTick) / 2 );
			}else{
				var iLeft = Math.round( this.fTickDist * i ) - Math.floor( this.getOffsetWidth(oTick) / 2 );
			}
			if (this.getVertical()) {
				iLeft = this.getBarWidth() - iLeft - this.getOffsetWidth(oTick) ;
			}
			this.setLeft(iLeft, oTick);

			if( this.getStepLabels() && i > 0 && i < iTotalUnits){
				oText = jQuery.sap.domById(this.getId() + '-text' + i);
				if(this.getSmallStepWidth() > 0 && this.iDecimalFactor > 0 && !this.bTextLabels){
					jQuery(oText).text(Math.round( parseFloat(jQuery(oText).text()) * this.iDecimalFactor ) / this.iDecimalFactor);
				}
				var iLeft;
				if(!this.bRtl || this.getVertical()){
					iLeft = Math.round( ( this.fTickDist * i)) - Math.round(( this.getOffsetWidth(oText) / 2) );
				}else{
					iLeft = Math.round( ( this.fTickDist * (iTotalUnits-i))) - Math.round(( this.getOffsetWidth(oText) / 2) );
				}
				if (this.getVertical()) {
					iLeft = this.getBarWidth() - iLeft - this.getOffsetWidth(oText) ;
				}
				this.setLeft(iLeft, oText);
			}
		}
	}

};

/**
 * Called after the theme has been switched. Some adjustments required.
 * @private
 */
sap.ui.commons.Slider.prototype.onThemeChanged = function (oEvent) {

	if (this.getDomRef()) {
		// Get left shift for middle of grip. Use offsetWidth to include borders. Round to prevent calculation errors.
		this.iShiftGrip = Math.round(this.getOffsetWidth(this.oGrip) / 2);

		// Use resize function to adjust grip and ticks
		this.onresize();
	}

};

/**
 * Function is called when grip position shall be changed
 *
 * @param fNewValue iNewPos
 * @private
 */
sap.ui.commons.Slider.prototype.changeGrip = function(fNewValue, iNewPos, oGrip) {
	// Only if position was changed
	if ( iNewPos != ( this.getOffsetLeft(oGrip) + this.iShiftGrip ) ){

		if( this.getSmallStepWidth() > 0 ){
			// Move grip according to step-width
			var iStepNum   = parseInt( ( fNewValue - this.getMin() ) / this.getSmallStepWidth() , 10);
			var fLeftStep  = ( iStepNum * this.getSmallStepWidth() ) + this.getMin();
			var fRightStep = ( ( iStepNum + 1 ) * this.getSmallStepWidth() ) + this.getMin();

			if ( fRightStep > this.getMax() ){
				fRightStep = this.getMax();
			}

			var fStepPixel = this.getBarWidth() / ( this.getMax() - this.getMin() ) * this.getSmallStepWidth();

			if( ( fNewValue - fLeftStep ) < ( fRightStep - fNewValue ) ){
				fNewValue = fLeftStep;
				iNewPos   = iStepNum * fStepPixel;
			}else{
				fNewValue = fRightStep;
				iNewPos   = ( iStepNum + 1 ) * fStepPixel;
				if ( iNewPos > this.getBarWidth() ){
					iNewPos = this.getBarWidth();
				}
			}
			if (this.getVertical() || this.bRtl) {
				iNewPos = this.getBarWidth() - iNewPos;
			}
			// Round value because of calculation errors in JavaScript
			fNewValue = Math.round( fNewValue * this.iDecimalFactor ) / this.iDecimalFactor;
		}

		// Reduce position with half grip-width to center the grip. Round because Internet Explorer does not round automatically.

		var iLeft = Math.round(iNewPos - this.iShiftGrip);	
		if (isNaN(iLeft)) return;

		//Output iShiftGrip to check if rendering issue occurs because of wrong value
		jQuery.sap.log.info("iNewPos: " + iNewPos + " - iLeft: " + iLeft + " - iShiftGrip: " +this.iShiftGrip);

		this.updateValueProperty(fNewValue, oGrip);

		if (this.bTextLabels) {
			oGrip.title = this.getNearestLabel(fNewValue);
		} else {
			oGrip.title = fNewValue;
		}

		this.setLeft(iLeft, oGrip);

		this.adjustHighlightBar(iNewPos, oGrip);

		if(this.bAcc){
			this.setAriaState();
		}
	}

};

/**
 * Function to update value property for grip
 *
 * @param float fNewValue
 * @private
 */
sap.ui.commons.Slider.prototype.updateValueProperty = function(fNewValue,oGrip) {
	this.setProperty( 'value', fNewValue, true ); // Do not render complete control again
};

/**
 * Function to set width and position of highlight bar
 *
 * @param {int} iNewPos
 * @private
 */
sap.ui.commons.Slider.prototype.adjustHighlightBar = function(iNewPos,oGrip) {
	if(this.bRtl){
		// In the case of RTL, highlight must be on right side
		if (this.getVertical()) {
			this.oHiLi.style.height = this.getBarWidth() - Math.round(iNewPos) + 'px';
		} else {
			this.oHiLi.style.width = this.getBarWidth() - Math.round(iNewPos) + 'px';
		}
	}else{
		if (this.getVertical()) {
			this.oHiLi.style.height = this.getBarWidth() - Math.round(iNewPos) + 'px';
		} else {
			this.oHiLi.style.width = Math.round(iNewPos) + 'px';
		}
	}
}

/**
 * Function to calculate the decimals of a value
 *
 * Problem:  If the step-width has decimals in JavaScript, there are calculation errors.
 *           e.g. 2.01*10= 20.099999999999998 instead of 20.1
 *           This is not sufficient as result for the value of sliding step-wise.
 *           Therefore the value is rounded with the numbers of decimals the step-width has.
 *           This is not possible using the modulo or any other Math function because
 *           of the mentioned calculation error.
 * Solution: The idea is to search for the "." in the string and to calculate the rounding factor.
 *
 * @param {DOM.Event} Event
 * @private
 */
sap.ui.commons.Slider.prototype.calcDecimalFactor = function(Value) {

	var iFactor = 1;

	if( !( Value > 0 )){
		return iFactor;
	}

	var sMyString = String( Value );

	if( sMyString.indexOf( '.' ) >= 0 ){
		// Number of decimals = length of all numbers after the "." Subtract the numbers before the "." and the "." itself.
		var iMyExp = sMyString.length - sMyString.indexOf( '.' ) - 1;
	}else{
		if( sMyString.indexOf( 'e-' ) >= 0 ){
			// Floating point number -> number of decimals is number after "e-"
			var iMyExp = sMyString.slice(sMyString.indexOf( 'e-' ) + 2);
		}else{
			return iFactor;
		}
	}

	for (var i = 1; i <= iMyExp; i++){
		iFactor = iFactor * 10;
	}

	return iFactor;

};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the editable state
 *
 * @param {boolean} bEditable Whether the Slider should be editable, or not (read-only then)
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setEditable = function(bEditable) {

	this.setProperty('editable', bEditable, true); // No re-rendering

	if (this.oDomRef && this.getEnabled()){
		// If already rendered, adapt rendered control without complete re-rendering
		if (bEditable) {
			jQuery(this.oDomRef).removeClass('sapUiSliRo').addClass('sapUiSliStd');
			if(this.bAcc){
				jQuery(this.oGrip).attr('aria-disabled', false);
			}
		} else {
			jQuery(this.oDomRef).removeClass('sapUiSliStd').addClass('sapUiSliRo');
			if(this.bAcc){
				jQuery(this.oGrip).attr('aria-disabled', true);
			}
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the enabled state
 *
 * @param bEnabled Whether the Slider should be ednabled, or not (disabled)
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setEnabled = function(bEnabled) {

	this.setProperty('enabled', bEnabled, true); // No re-rendering

	if (this.oDomRef){
		// If already rendered, adapt rendered control without complete re-rendering
		jQuery(this.oDomRef).toggleClass('sapUiSliDsbl', !bEnabled);
		if( bEnabled ){
			jQuery(this.oGrip).attr('tabindex', '0');
			// set classes according editable state
			if (this.getEditable()) {
				jQuery(this.oDomRef).addClass('sapUiSliStd');
				if(this.bAcc){
					jQuery(this.oGrip).attr('aria-disabled', false);
				}
			} else {
				jQuery(this.oDomRef).addClass('sapUiSliRo');
				if(this.bAcc){
					jQuery(this.oGrip).attr('aria-disabled', true);
				}
			}
		}else{
			jQuery(this.oGrip).attr('tabindex', '-1').attr('aria-disabled', true);
			if (this.getEditable()) {
				jQuery(this.oDomRef).removeClass('sapUiSliStd');
			} else {
				jQuery(this.oDomRef).removeClass('sapUiSliRo');
			}
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the totalUnits state
 *
 * @param iTotalUnits Number of the units (tick-spaces)
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setTotalUnits = function(iTotalUnits) {

	this.setProperty('totalUnits', iTotalUnits, false); // Do re-rendering

	// Clear this.fPageSize -> must be re-calculated
	this.fPageSize = false;

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the value
 * A new rendering is not necessary, only the grip must be moved.
 *
 * @param fValue
 * @return {sap.ui.commons.Slider} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Slider.prototype.setValue = function(fValue) {

	this.setProperty('value', fValue, true); // No re-rendering

	this._lastValue = fValue;

	// Check for number -> if NaN -> no change
	if( isNaN(fValue) ){
		return this;
	}

	if(!this.oBar){
		// Not already rendered -> return and render
		return this;
	}

	var fNewValue = parseFloat( fValue );
	var iNewPos;

	if( fNewValue >= this.getMax() ){
		fNewValue   = this.getMax();
		if (this.getVertical()) {
			iNewPos = 0;
		} else {
			iNewPos = this.getBarWidth();
		}
	}else if( fNewValue <= this.getMin() ){
			fNewValue   = this.getMin();
			if (this.getVertical()) {
				iNewPos = this.getBarWidth();
			} else {
				iNewPos = 0;
			}
	}else{
			iNewPos = ( fNewValue - this.getMin() ) / ( this.getMax() - this.getMin() ) * this.getBarWidth() ;
	}

	if(this.bRtl && !this.getVertical()){
		iNewPos = this.getBarWidth() - iNewPos;
	}

	this.changeGrip( fNewValue, iNewPos, this.oGrip );
	this._lastValue = fNewValue;

	return this;

};

/*
 * fires the change event. The liveChange event must be fired too if the change event is fired.
 *
 * @param bNoLiveChange fire no LiveChange event
 * @private
 */
sap.ui.commons.Slider.prototype.handleFireChange = function(bNoLiveChange) {

	var iValue = this.getValue();

	if (iValue !== this._lastValue) {
		this.fireChange({value: iValue});
		if (!bNoLiveChange) {
			this.fireLiveChange({value: iValue});
		}
		this._lastValue = iValue;
	}

};

/*
 * Updates the ARIA state initially and in case of changes.
 *
 * @private
 */
sap.ui.commons.Slider.prototype.setAriaState = function() {

	var fValue = this.getValue();

	if (this.bTextLabels) {
		fValue = this.getNearestLabel(fValue);
	}

	this.oGrip.setAttribute('aria-valuenow', fValue);
	this.oGrip.setAttribute('aria-valuetext', 'Value ' + fValue); // to prevent JAWS from saying "percent"

};

/**
 * Returns value for specified grip.
 * This function is for reuse in other sliders like the range slider, which has multiple grips
 *
 * @private
 * @param {jQuery} oGrip
 * @return {float} Value for the grip, which was passed to this function
 */
sap.ui.commons.Slider.prototype.getValueForGrip = function(oGrip) {
	return this.getValue();
};

/**
 * Check if new position and new value are valid within the slider
 *
 * @private
 * @param {float} fNewValue
 * @param {int} iNewPos
 * @param {jQuery} oGrip
 * @param {boolean} bMin If true, checks if validation should be done with minimum values, else it uses maximum values
 * @return {object} oCorrectedData Object with modified data, if validation was not successful
 */
sap.ui.commons.Slider.prototype.validateNewPosition = function(fNewValue, iNewPos, oGrip, bMin) {
	if (!this.bRtl || this.getVertical()) {
		if (bMin) {
			if ( fNewValue <= this.getMin() || iNewPos <= 0 ){
				fNewValue = this.getMin();
				if (this.getVertical()) {
					iNewPos   = this.getBarWidth();
				} else {
					iNewPos   = 0;
				}
			}
		} else {
			if ( fNewValue >= this.getMax() || iNewPos > this.getBarWidth() ){
				fNewValue = this.getMax();
				if (!this.getVertical()) {
					iNewPos   = this.getBarWidth();
				} else {
					iNewPos   = 0;
				}
			}
		}
	} else {
		if (bMin) {
			if ( fNewValue <= this.getMin() || iNewPos > this.getBarWidth() ){
				fNewValue = this.getMin();
				iNewPos   = this.getBarWidth();
			}
		} else {
			if ( fNewValue >= this.getMax() || iNewPos <= 0 ){
				fNewValue = this.getMax();
				iNewPos   = 0;
			}
		}	
	}
	return {fNewValue: fNewValue, iNewPos: iNewPos};
};


/**
 * Gets the nearest label (realative to the specified value).
 *
 * @private
 * @param {float} fNewValue
 * @return {string} Text for label
 */
sap.ui.commons.Slider.prototype.getNearestLabel = function(fValue) {
	var iPos = Math.round((this.getLabels().length-1)/(this.getMax() - this.getMin())*(fValue-this.getMin()));
	if (this.bRtl) {
		iPos = this.getLabels().length-1-iPos;
	}
	return this.getLabels()[iPos];
};


/**
 * Function returns nearest grip (if there is more than one grip). There is only one grip for the basic slider
 *
 * @private
 * @param {int} iOffset Offset relative to Bar
 * 
 */
sap.ui.commons.Slider.prototype.getNearestGrip = function(iOffset) {
	return this.oGrip;
};

/**
 * Function returns grip which should by moved after a click on left side
 *
 * @private
 */
sap.ui.commons.Slider.prototype.getLeftGrip = function() {
	return this.oGrip;
};

/**
 * Function returns grip which should by moved after a click on right side
 *
 * @private
 */
sap.ui.commons.Slider.prototype.getRightGrip = function() {
	return this.oGrip;
};

/**
 * Set left/top for an object. Translates the value for vertical sldiers and RTL
 *
 * @private
 * @param {int} iNewPos New left attribute for specified object
 * @param {jQuery} oObject
 * @param {object} oObject
 */
sap.ui.commons.Slider.prototype.setLeft = function(iNewPos, oObject) {
	if (oObject == undefined) return;
	if (this.getVertical()) {
		oObject.style.top = iNewPos + 'px';
	} else {
		oObject.style.left = iNewPos + 'px';
	}
};

/**
 * Get offset width/height for specified object. Translates between vertical and horizontal slider
 *
 * @private
 * @param {jQuery} oObject
 */
sap.ui.commons.Slider.prototype.getOffsetWidth = function(oObject) {
	if (this.getVertical()) {
		return oObject.offsetHeight;
	} else {
		return oObject.offsetWidth;
	}
};

/**
 * Get client width/height
 *
 * @private
 * @param {jQuery} oObject for specified object. Translates between vertical and horizontal slider
 */
sap.ui.commons.Slider.prototype.getBarWidth = function() {
	if (this.getVertical()) {
		return this.oBar.clientHeight;
	} else {
		return this.oBar.clientWidth;
	}
};

/**
 * Get offset left/top for specified object. Translates between vertical and horizontal slider
 *
 * @private
 * @param {jQuery} oObject
 */
sap.ui.commons.Slider.prototype.getOffsetLeft = function(oObject) {
	if (this.getVertical()) {
		return oObject.offsetTop;
	} else {
		return oObject.offsetLeft;
	}
};


/**
 * Get offset for specified event. Translates between vertical and horizontal slider
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.Slider.prototype.getOffsetX = function(oEvent) {
	if (this.getVertical()) {
		return oEvent.getOffsetY();
	} else {
		if (this.bRtl) {
			return oEvent.getOffsetX();
		} else {
			return oEvent.getOffsetX();
		}
	}
};

/**
 * convert fNewValue for RTL-Mode
 *
 * @param {float} fNewValue input value
 * @returns {float} output value
 * @private
 */
sap.ui.commons.Slider.prototype.convertRtlValue = function(fNewValue) {
	if (this.bRtl && !this.getVertical()) {
		fNewValue = this.getMax() - fNewValue + this.getMin();
	}
	return fNewValue
};


/**
 * Check if a specified target is a valid grip
 *
 * @param {string} sMyTargetId
 * @private
 */
sap.ui.commons.Slider.prototype.targetIsGrip = function(sMyTargetId) {
	if( sMyTargetId == this.oGrip.id ){
		return true;
	}
	return false;
};

/*
 * Overrides getFocusDomRef of base element class.
 * @public
 */
sap.ui.commons.Slider.prototype.getFocusDomRef = function() {
	return this.oGrip;
};

/*
 * Overwrites default implementation
 * the label must point to the grip
 * @public
 */
sap.ui.commons.Slider.prototype.getIdForLabel = function () {
	return this.getId()+'-grip';
};

}; // end of sap/ui/commons/Slider.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Splitter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Splitter.
jQuery.sap.declare("sap.ui.commons.Splitter");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Splitter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSplitterOrientation splitterOrientation} : sap.ui.core.Orientation (default: sap.ui.core.Orientation.Vertical)</li>
 * <li>{@link #getSplitterPosition splitterPosition} : sap.ui.core.Percentage (default: '50%')</li>
 * <li>{@link #getMinSizeFirstPane minSizeFirstPane} : sap.ui.core.Percentage (default: '0%')</li>
 * <li>{@link #getMinSizeSecondPane minSizeSecondPane} : sap.ui.core.Percentage (default: '0%')</li>
 * <li>{@link #getWidth width} : sap.ui.commons.SplitterSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.commons.SplitterSize (default: '100%')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShowScrollBars showScrollBars} : boolean (default: true)</li>
 * <li>{@link #getSplitterBarVisible splitterBarVisible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getFirstPaneContent firstPaneContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getSecondPaneContent secondPaneContent} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Allows to split the screen into two areas. Make sure that the container for the splitter has an absolute height or set an absolute height for the splitter using the height property. Otherwise the height of the splitter is calculated by the height of its contents.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Splitter
 */
sap.ui.core.Control.extend("sap.ui.commons.Splitter", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"splitterOrientation" : {type : "sap.ui.core.Orientation", group : "Behavior", defaultValue : sap.ui.core.Orientation.Vertical},
		"splitterPosition" : {type : "sap.ui.core.Percentage", group : "Behavior", defaultValue : '50%'},
		"minSizeFirstPane" : {type : "sap.ui.core.Percentage", group : "Behavior", defaultValue : '0%'},
		"minSizeSecondPane" : {type : "sap.ui.core.Percentage", group : "Behavior", defaultValue : '0%'},
		"width" : {type : "sap.ui.commons.SplitterSize", group : "Behavior", defaultValue : '100%'},
		"height" : {type : "sap.ui.commons.SplitterSize", group : "Behavior", defaultValue : '100%'},
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"showScrollBars" : {type : "boolean", group : "Behavior", defaultValue : true},
		"splitterBarVisible" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	aggregations : {
    	"firstPaneContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "firstPaneContent"}, 
    	"secondPaneContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "secondPaneContent"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Splitter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Splitter.extend
 * @function
 */


/**
 * Getter for property <code>splitterOrientation</code>.
 * The splitter can have horizontal or vertical orientation.
 *
 * Default value is <code>Vertical</code>
 *
 * @return {sap.ui.core.Orientation} the value of property <code>splitterOrientation</code>
 * @public
 * @name sap.ui.commons.Splitter#getSplitterOrientation
 * @function
 */

/**
 * Setter for property <code>splitterOrientation</code>.
 *
 * Default value is <code>Vertical</code> 
 *
 * @param {sap.ui.core.Orientation} oSplitterOrientation  new value for property <code>splitterOrientation</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#setSplitterOrientation
 * @function
 */


/**
 * Getter for property <code>splitterPosition</code>.
 * Position of splitter bar in percentage.
 * The default value means that the splitter is positioned in the middle of the area that is available for the splitter.
 *
 * Default value is <code>50%</code>
 *
 * @return {sap.ui.core.Percentage} the value of property <code>splitterPosition</code>
 * @public
 * @name sap.ui.commons.Splitter#getSplitterPosition
 * @function
 */

/**
 * Setter for property <code>splitterPosition</code>.
 *
 * Default value is <code>50%</code> 
 *
 * @param {sap.ui.core.Percentage} sSplitterPosition  new value for property <code>splitterPosition</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#setSplitterPosition
 * @function
 */


/**
 * Getter for property <code>minSizeFirstPane</code>.
 * The minimum size (width for vertical splitter or height for horizontal splitter) of the first Pane
 * 
 *
 * Default value is <code>0%</code>
 *
 * @return {sap.ui.core.Percentage} the value of property <code>minSizeFirstPane</code>
 * @public
 * @name sap.ui.commons.Splitter#getMinSizeFirstPane
 * @function
 */

/**
 * Setter for property <code>minSizeFirstPane</code>.
 *
 * Default value is <code>0%</code> 
 *
 * @param {sap.ui.core.Percentage} sMinSizeFirstPane  new value for property <code>minSizeFirstPane</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#setMinSizeFirstPane
 * @function
 */


/**
 * Getter for property <code>minSizeSecondPane</code>.
 * The minimum size (width for vertical splitter or height for horizontal splitter) of the second Pane
 * 
 *
 * Default value is <code>0%</code>
 *
 * @return {sap.ui.core.Percentage} the value of property <code>minSizeSecondPane</code>
 * @public
 * @name sap.ui.commons.Splitter#getMinSizeSecondPane
 * @function
 */

/**
 * Setter for property <code>minSizeSecondPane</code>.
 *
 * Default value is <code>0%</code> 
 *
 * @param {sap.ui.core.Percentage} sMinSizeSecondPane  new value for property <code>minSizeSecondPane</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#setMinSizeSecondPane
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the split area in px or in %
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.commons.SplitterSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Splitter#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.commons.SplitterSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the split area in px or in %
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.commons.SplitterSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.Splitter#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.commons.SplitterSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#setHeight
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible splitters are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.Splitter#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#setVisible
 * @function
 */


/**
 * Getter for property <code>showScrollBars</code>.
 * Specifies if the browser should display scroll bars or simply cut the content of a splitter pane when the content does not fit into its pane.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showScrollBars</code>
 * @public
 * @name sap.ui.commons.Splitter#getShowScrollBars
 * @function
 */

/**
 * Setter for property <code>showScrollBars</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowScrollBars  new value for property <code>showScrollBars</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#setShowScrollBars
 * @function
 */


/**
 * Getter for property <code>splitterBarVisible</code>.
 * set the splitter bar to be visible or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>splitterBarVisible</code>
 * @public
 * @name sap.ui.commons.Splitter#getSplitterBarVisible
 * @function
 */

/**
 * Setter for property <code>splitterBarVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSplitterBarVisible  new value for property <code>splitterBarVisible</code>
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#setSplitterBarVisible
 * @function
 */


/**
 * Getter for aggregation <code>firstPaneContent</code>.<br/>
 * Controls inside the first pane. These are the left ones in case of defining a vertical splitter, and the top ones in case of using the horizontal splitter.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.Splitter#getFirstPaneContent
 * @function
 */


/**
 * Inserts a firstPaneContent into the aggregation named <code>firstPaneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFirstPaneContent the firstPaneContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the firstPaneContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the firstPaneContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the firstPaneContent is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#insertFirstPaneContent
 * @function
 */

/**
 * Adds some firstPaneContent <code>oFirstPaneContent</code> 
 * to the aggregation named <code>firstPaneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFirstPaneContent the firstPaneContent to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#addFirstPaneContent
 * @function
 */

/**
 * Removes an firstPaneContent from the aggregation named <code>firstPaneContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFirstPaneContent the firstPaneContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed firstPaneContent or null
 * @public
 * @name sap.ui.commons.Splitter#removeFirstPaneContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>firstPaneContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Splitter#removeAllFirstPaneContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>firstPaneContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFirstPaneContent the firstPaneContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Splitter#indexOfFirstPaneContent
 * @function
 */
	

/**
 * Destroys all the firstPaneContent in the aggregation 
 * named <code>firstPaneContent</code>.
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#destroyFirstPaneContent
 * @function
 */


/**
 * Getter for aggregation <code>secondPaneContent</code>.<br/>
 * Controls inside the second pane. These are the right ones in case of defining a vertical splitter, and the bottom ones in case of using the horizontal splitter.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.Splitter#getSecondPaneContent
 * @function
 */


/**
 * Inserts a secondPaneContent into the aggregation named <code>secondPaneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oSecondPaneContent the secondPaneContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the secondPaneContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the secondPaneContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the secondPaneContent is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#insertSecondPaneContent
 * @function
 */

/**
 * Adds some secondPaneContent <code>oSecondPaneContent</code> 
 * to the aggregation named <code>secondPaneContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oSecondPaneContent the secondPaneContent to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#addSecondPaneContent
 * @function
 */

/**
 * Removes an secondPaneContent from the aggregation named <code>secondPaneContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vSecondPaneContent the secondPaneContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed secondPaneContent or null
 * @public
 * @name sap.ui.commons.Splitter#removeSecondPaneContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>secondPaneContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Splitter#removeAllSecondPaneContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>secondPaneContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oSecondPaneContent the secondPaneContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Splitter#indexOfSecondPaneContent
 * @function
 */
	

/**
 * Destroys all the secondPaneContent in the aggregation 
 * named <code>secondPaneContent</code>.
 * @return {sap.ui.commons.Splitter} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Splitter#destroySecondPaneContent
 * @function
 */


// Start of sap\ui\commons\Splitter.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.events'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.keycodes'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained



sap.ui.commons.Splitter.prototype.onBeforeRendering = function() {
	// cleanup resize event registration before re-rendering
	if (this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
	if (this.sSpecialResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sSpecialResizeListenerId);
		this.sSpecialResizeListenerId = null;
	}
};

sap.ui.commons.Splitter.prototype.onAfterRendering = function() {
	this._recalculateInternals();
	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.splitterDIV, jQuery.proxy(this.onresize, this));
};


sap.ui.commons.Splitter.prototype._recalculateInternals = function() {

	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	this.splitterDIV = this.getDomRef();
	this.splitterBar = jQuery.sap.domById(this.getId() + '_SB');
	this.firstPane = jQuery.sap.domById(this.getId() + '_firstPane');
	this.secondPane = jQuery.sap.domById(this.getId() + '_secondPane');

	this.minSizeFP = this.getMinSizeFirstPane();
	this.minSizeSP = this.getMinSizeSecondPane();

	this.minSizeFP = this.minSizeFP.substring(0, (this.minSizeFP).length - 1);
	this.minSizeFP = parseFloat(this.minSizeFP);

	this.minSizeSP = this.minSizeSP.substring(0, (this.minSizeSP).length - 1);
	this.minSizeSP = parseFloat(this.minSizeSP);

	this.spOrientation =  this.getSplitterOrientation();

	this.sBarPosition = this.getSplitterPosition();
	this.sBarPosition = this.sBarPosition.substring(0, this.sBarPosition.length - 1);
	this.sBarPosition = parseFloat(this.sBarPosition);

	// in hcb mode set splitter bar width to 6 px
	if (sap.ui.getCore().getConfiguration().getTheme() == "sap_hcb") {
		this.sbSize = 6;
	}
	else {
		this.sbSize = 4;
	}
	this.resizeSplitterElements();

	// if no splitter parent height is specified and the splitter height is specified in % the splitter won't be displayed
	// and the splitterbar height will be
	// FF: 0 in vertical and horizontal splitters
	// or in IE: >= the div height (vertical) or  != sbSize (horizontal)
	// if any above is the case we have to set its height to a fixed pixel value
	var splitterBarHeight = jQuery(this.splitterBar).height();
	if (this.spOrientation == sap.ui.core.Orientation.Vertical){
		if (splitterBarHeight <= 0 || splitterBarHeight > jQuery(this.splitterDIV).height()){
			this.fixHeight();
		}
	}else{
		if (splitterBarHeight <= 0 || splitterBarHeight != this.sbSize){
			this.fixHeight();
		}
	}

}


sap.ui.commons.Splitter.prototype.onresize = function(oEvent) {

	this.resizeSplitterElements();

};

sap.ui.commons.Splitter.prototype.resizeSplitterElements = function() {

	var sbW, sbH, width, height, widthSP, heightSP;
	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	/**
	 * Calculate the equivalent percentage of the 4px : the width/height of the splitter bar
	 */

	if (this.spOrientation == sap.ui.core.Orientation.Vertical) {

		width = jQuery(this.splitterDIV).width();
		if (width == 0) {
			width = 100; //px so it would show something at least
		}
		sbW = (this.sbSize * 100) / width;

		// check if bar is in the far right
		if (this.sBarPosition >= 100 || this.sBarPosition + sbW > 100) {
			this.sBarPosition = 100 - sbW;
			widthSP = 0;
		}else{
			widthSP = 100 - sbW - this.sBarPosition;
		}
		jQuery(this.firstPane).css("width", this.sBarPosition + "%");
		jQuery(this.splitterBar).css("width", sbW + "%");
		jQuery(this.secondPane).css("width", widthSP + "%");

	} else {

		height = jQuery(this.splitterDIV).height();
		if (height == 0 ){
			height = 100; //px so it would show something at least
		}
		sbH = (this.sbSize * 100) / height;

		// check if bar is in the far bottom
		if (this.sBarPosition >= 100 || this.sBarPosition + sbH > 100){
			this.sBarPosition = 100 - sbH;
			heightSP = 0;
		}else{
			heightSP = 100 - sbH - this.sBarPosition;
		}
		jQuery(this.firstPane).css("height", this.sBarPosition + "%");
		jQuery(this.splitterBar).css("height", sbH + "%");
		jQuery(this.secondPane).css("height", heightSP + "%");

	}

	// update splitterpos value...suppress rerendering
	this.setProperty("splitterPosition", this.sBarPosition + "%", true);

	// fix height if splitterdiv height is 0 we set it to 100 px to show something at least
	// further resizing should then work correctly
	if (jQuery(this.splitterDIV).height() == 0 && !this.splitterDIV.style.height){
		jQuery(this.splitterDIV).css("height", "100px");
		jQuery(this.splitterBar).css("height", "100px");
	}

};

sap.ui.commons.Splitter.prototype.setSplitterPosition = function(sPos){
	if (this.getDomRef()) {
		this.setProperty("splitterPosition", sPos, true);
		this._recalculateInternals();
	} else {
		this.setProperty("splitterPosition", sPos);
	}
};

sap.ui.commons.Splitter.prototype.setSplitterBarVisible = function(bVisible){
	if (this.getDomRef()) {
		this.setProperty("splitterBarVisible", bVisible, true);
		var sClassPrefix = this.getSplitterOrientation() === sap.ui.core.Orientation.Vertical ? "sapUiVertical" : "sapUiHorizontal";
		if (bVisible) {
			jQuery.sap.byId(this.getId() + "_SB").removeClass(sClassPrefix + "SplitterBarHidden").addClass(sClassPrefix + "SplitterBar");
		} else {
			jQuery.sap.byId(this.getId() + "_SB").removeClass(sClassPrefix + "SplitterBar").addClass(sClassPrefix + "SplitterBarHidden");
		}
	} else {
		this.setProperty("splitterBarVisible", bVisible);
	}
};


/**
 * set height to a fixed height if there is no absolute height specified
 */
sap.ui.commons.Splitter.prototype.fixHeight = function() {
	// check the parentNode height
	var parentHeight = jQuery(this.splitterDIV.parentNode).height();
	var splitterHeight = jQuery(this.splitterDIV).height();
	if (parentHeight > splitterHeight){
		
		splitterHeight = parentHeight;
		
		// check if there was a custom max height set...then we use it regardless
		// of container height but only for px values
		var customMaxHeight = this.getHeight();
		if (customMaxHeight && customMaxHeight.toLowerCase().indexOf("px") != -1) {
			splitterHeight = parseInt(customMaxHeight, 10);
		}
		// for % values we use the splitter div height if the % is < 100% else
		// we leave the size as the parent height
		if (customMaxHeight && customMaxHeight.toLowerCase().indexOf("%") != -1) {
			var percentValue = parseInt(customMaxHeight, 10);
			if (percentValue < 100) {
				splitterHeight = jQuery(this.splitterDIV).height();
			}
		}
		
		// if splitterheight is 0 which shouldn't be the case we set the parent height again.
		if (splitterHeight <= 0){
			splitterHeight = parentHeight;
		}
	}
	
	// reset the splitter div height so that its contents fit inside...
	jQuery(this.splitterDIV).css("height", splitterHeight + "px");
	if (this.spOrientation == sap.ui.core.Orientation.Vertical) {
		jQuery(this.splitterBar).css("height", splitterHeight + "px");
	}
	var oParent = this.splitterDIV.parentNode;
	if (oParent){
		var fHandler = jQuery.proxy(this.onresizespecial, this);
		this.sSpecialResizeListenerId = sap.ui.core.ResizeHandler.register(oParent, fHandler);
		//fHandler({target: oParent});
	}
};

/**
 *	cleanup resize event registration before re-rendering
 */
sap.ui.commons.Splitter.prototype.exit = function() {
	if (this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
	if (this.sSpecialResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sSpecialResizeListenerId);
		this.sSpecialResizeListenerId = null;
	}
};


/**
 * resize event handler to handle the special case when no splitter parent height is specified and the splitter height is specified in %.
 * Then the splitter won't be displayed. In this case when the parent gets resized, get the parents height and use it to adapt the current fixed splitter height in px
 * so that everything stays in place.
 */
sap.ui.commons.Splitter.prototype.onresizespecial = function(oEvent) {
	var $Splitter = jQuery(this.splitterDIV);
	var oldHeight = $Splitter.height(); 
	$Splitter.css("height", "0px");
	var oDom = this.getDomRef();
	if (oDom && window.getComputedStyle) {
		// force browser to apply CSS so that the height is 0 and can then be calculated from new
		window.getComputedStyle(oDom);
	}	

	// perhaps this is event handler is not needed. depends on if current child elements should be resized or not
	var parentHeight = jQuery(oEvent.target).height();
	var currentHeight = $Splitter.height();
	if (currentHeight != parentHeight){
		// set bar height to the splitterDIV height value
		$Splitter.css("height", parentHeight + "px");
		if (this.spOrientation == sap.ui.core.Orientation.Vertical) {
			jQuery(this.splitterBar).css("height", parentHeight + "px");
		}
	}
	// if there is no parent height set the old height again. This might be the case if the parent doesn't have a height yet...
	if (parentHeight <= 0) {
		$Splitter.css("height", oldHeight + "px");
		if (this.spOrientation == sap.ui.core.Orientation.Vertical) {
			jQuery(this.splitterBar).css("height", oldHeight + "px");
		}
	}
};

/**
 * mousedown event handler: create a ghost bar for the splitter bar and starts dragging it
 */
sap.ui.commons.Splitter.prototype.onmousedown = function(oEvent) {

	if (oEvent.target != this.splitterBar) {
		return;
	}

	var oJBody = jQuery(document.body);
		// Fix for IE text selection while dragging
	oJBody.bind("selectstart",jQuery.proxy(this.splitterSelectStart,this));

	var offset = jQuery(this.splitterBar).offset();
	var height = jQuery(this.splitterBar).height();
	var width = jQuery(this.splitterBar).width();
	var cssClass;
	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	if (this.spOrientation == sap.ui.core.Orientation.Vertical) {
		cssClass = "sapUiVSBGhost";
	}
	else {
		cssClass = "sapUiHSBGhost";
	}
	
	var iZIndex = sap.ui.core.Popup.getLastZIndex() + 5;
	if (iZIndex < 20) {
		iZIndex = 20;
	}	

	jQuery(document.body).append(
			"<div id=\"" + this.getId() + "_ghost\" class=\"" + cssClass + "\" style =\" height:" + height + "px; width:"
			+ width + "px; left:" + offset.left + "px; top:" + offset.top + "px;z-index:" + iZIndex + "\"></div>");

	// append overlay over splitter to enable correct functionality of moving the splitter
	jQuery(document.body).append(
			"<div id=\"" + this.getId() + "_overlay\" style =\"left: 0px;" +
					" right: 0px; bottom: 0px; top: 0px; position:fixed; z-index:" + iZIndex + "\" ></div>");

	jQuery(document).bind("mouseup", jQuery.proxy(this.onGhostMouseRelease, this));
	jQuery(document).bind("mousemove", jQuery.proxy(this.onGhostMouseMove, this));
	
	// focus splitter bar
	jQuery(this.splitterBar).focus();
	
	// cancel the event
	oEvent.preventDefault();
	oEvent.stopPropagation();

};

/**
 * The selectstart event triggered in IE to select the text.
 * @private
 * @param {event} oEvent The splitterselectstart event
 * @return {boolean} false
 */
sap.ui.commons.Splitter.prototype.splitterSelectStart = function(oEvent){
	oEvent.preventDefault();
	oEvent.stopPropagation();
	return false;
};

/**
 * drops the splitter bar
 */

sap.ui.commons.Splitter.prototype.onGhostMouseRelease = function(oEvent) {

	var newSbPosition, spHeight, spWidth;
	var splitterBarGhost = jQuery.sap.domById(this.getId() + "_ghost");
	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	if ( this.spOrientation == sap.ui.core.Orientation.Vertical){

		if (!rtl)
		{
		newSbPosition = oEvent.pageX - jQuery(this.firstPane).offset().left;
		spWidth = jQuery(this.splitterDIV).width();
		newSbPosition = (newSbPosition * 100) / spWidth;
		}
		else {
		newSbPosition = oEvent.pageX - jQuery(this.secondPane).offset().left;
		spWidth = jQuery(this.splitterDIV).width();
		newSbPosition = (( spWidth - newSbPosition ) * 100) / spWidth;
		}
	}
	else{
		newSbPosition = oEvent.pageY - jQuery(this.firstPane).offset().top;
		spHeight = jQuery(this.splitterDIV).height();
		newSbPosition = (newSbPosition * 100) / spHeight;
	}

	if (newSbPosition < this.minSizeFP) {
		newSbPosition = this.minSizeFP;
	}
	else
		if ((100 - newSbPosition) < this.minSizeSP) {
			newSbPosition = 100 - this.minSizeSP;
		}

	this.sBarPosition =  newSbPosition;

	this.resizeSplitterElements();

	jQuery(splitterBarGhost).remove();
	jQuery.sap.byId(this.getId() + "_overlay").remove();

	var oJBody = jQuery(document.body);
	oJBody.unbind("selectstart", this.splitterSelectStart);

	jQuery(document).unbind("mouseup", this.onGhostMouseRelease);
	jQuery(document).unbind("mousemove", this.onGhostMouseMove);

};

sap.ui.commons.Splitter.prototype.onGhostMouseMove = function(oEvent) {

	var splitterBarGhost = jQuery.sap.domById(this.getId() + "_ghost");
	var max;
	var min;
	var rtl = sap.ui.getCore().getConfiguration().getRTL();

	var leftFirstPane = jQuery(this.firstPane).offset().left;
	var w = jQuery(this.splitterDIV).width();
	var leftSecondPane = jQuery(this.secondPane).offset().left;

	if (this.getSplitterOrientation() == sap.ui.core.Orientation.Vertical) {

		if (!rtl) {

			min = leftFirstPane + (w * this.minSizeFP) / 100;
			max = leftFirstPane + (w * (100 - this.minSizeSP)) / 100;

			if (oEvent.pageX > min && oEvent.pageX < max) {
				jQuery(splitterBarGhost).css("left", oEvent.pageX + "px");
			}
		}
		else{


			min = leftSecondPane + (w * this.minSizeSP) / 100;
			max = leftSecondPane + (w * (100 - this.minSizeFP)) / 100;

			if (oEvent.pageX > min && oEvent.pageX < max) {
				jQuery(splitterBarGhost).css("left", oEvent.pageX + "px");
			}


		}

	} else {

		var h = jQuery(this.splitterDIV).height();

		min = jQuery(this.firstPane).offset().top + (h * this.minSizeFP) / 100;
		max = jQuery(this.secondPane).offset().top + jQuery(this.secondPane).height() - (h * this.minSizeSP) / 100;
		if (oEvent.pageY > min && oEvent.pageY < max) {
			jQuery(splitterBarGhost).css("top", oEvent.pageY + "px");
		}
	}
};

/**
 * Convenience method for handling of Ctrl key, meta key etc.
 *
 * @private
 */
sap.ui.commons.Splitter.prototype.getCtrlKey = function(oEvent) {
	return !!(oEvent.ctrlKey || oEvent.metaKey); // double negation doesn't have effect on boolean but ensures null and undefined are equivalent to false.
};

/**
 * Convenience method to check an event for a certain combination of modifier keys
 *
 * @private
 */
sap.ui.commons.Splitter.prototype.checkModifierKey = function(oEvent, bCtrlKey, bAltKey, bShiftKey) {
	return oEvent.shiftKey == bShiftKey && oEvent.altKey == bAltKey && this.getCtrlKey(oEvent) == bCtrlKey;
};

/**
 * Home key minimizes the first pane to the last possible position
 */
sap.ui.commons.Splitter.prototype.onsaphome = function(oEvent) {
	if (oEvent.target == this.splitterBar){
		this.sBarPosition = this.minSizeFP;
		this.resizeSplitterElements();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * End key maximizes the first pane to the last possible position
 */
sap.ui.commons.Splitter.prototype.onsapend = function(oEvent) {
	if (oEvent.target == this.splitterBar){
		this.sBarPosition = 100-this.minSizeSP;
		this.resizeSplitterElements();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

sap.ui.commons.Splitter.prototype.onArrowKeys = function(oEvent,oInc) {
	var width, height, sbSize, sbPosition, newSbPosition;

	if (this.spOrientation == sap.ui.core.Orientation.Vertical) {
		width = jQuery(this.splitterDIV).width();
		sbPosition = jQuery(this.firstPane).width();
		sbPosition = (sbPosition * 100) / width;
		// move 10 pixels
		sbSize = (10 * 100) / width;
	} else {
		height = jQuery(this.splitterDIV).height();
		sbPosition = jQuery(this.firstPane).height();
		sbPosition = (sbPosition * 100) / height;
		// move 10 pixels
		sbSize = (10 * 100) / height;
	}

	if (oInc == "false") {
		newSbPosition = sbPosition - sbSize;
	}
	else if (oInc == "true") {
		newSbPosition = sbPosition + sbSize;
	}

	if (newSbPosition < this.minSizeFP)	{
		newSbPosition = this.minSizeFP;
	}
	else if ((100 - newSbPosition) < this.minSizeSP) {
		newSbPosition = 100 - this.minSizeSP;
	}

	this.sBarPosition = newSbPosition;
	this.resizeSplitterElements();
};

/**
 * If the Shift and Up keys are pressed and if the focus is the onsplitterBar moves the horizontal sash bar up by one step
 * and the vertical sash bar left one step
 */
sap.ui.commons.Splitter.prototype.onsapupmodifiers = function(oEvent) {
	if (this.checkModifierKey(oEvent, false, false, true)) {
		if (oEvent.target == this.splitterBar){
			
			if (this.spOrientation == sap.ui.core.Orientation.Horizontal) {
				this.onArrowKeys(oEvent,"false");
			} else {
				// move vertical splitter left
				this.onsapleftmodifiers(oEvent);
			}
			
		}
		// cancel the event
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};


/**
 * If the Shift and Up keys are pressed and if the focus is on the splitterBar moves the horizontal sash bar down by one step
 * and the vertical sash bar right one step
 */
sap.ui.commons.Splitter.prototype.onsapdownmodifiers = function(oEvent) {
	if (this.checkModifierKey(oEvent, false, false, true)) {
		if (oEvent.target == this.splitterBar){
			if (this.spOrientation == sap.ui.core.Orientation.Horizontal) {
				this.onArrowKeys(oEvent,"true");				
			} else {
				// move vertical splitter right
				this.onsaprightmodifiers(oEvent);
			}
		}
		// cancel the event
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * If the Shift and Left keys are pressed and if the focus is on splitterBar moves the vertical sash bar left by one step or
 * the horizontal sash bar up one step
 */
sap.ui.commons.Splitter.prototype.onsapleftmodifiers = function(oEvent) {
	if (this.checkModifierKey(oEvent, false, false, true)){
		if (oEvent.target == this.splitterBar){
			if (this.spOrientation == sap.ui.core.Orientation.Vertical) {
				var rtl = sap.ui.getCore().getConfiguration().getRTL();
				if (rtl) {
					this.onArrowKeys(oEvent,"true");
				}
				else {
					this.onArrowKeys(oEvent,"false");
				}				
			} else {
				// move horizontal splitter up
				this.onsapupmodifiers(oEvent);
			}
		}
		// cancel the event
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * If the Shift and Right keys are pressed and if the focus is on the splitterBar moves the vertical sash bar right by one step
 * and the horizontal sash bar down one step
 */
sap.ui.commons.Splitter.prototype.onsaprightmodifiers = function(oEvent) {
	if (this.checkModifierKey(oEvent, false, false, true)) {
		if (oEvent.target == this.splitterBar){
			if (this.spOrientation == sap.ui.core.Orientation.Vertical){
				var rtl = sap.ui.getCore().getConfiguration().getRTL();
				if (rtl) {
					this.onArrowKeys(oEvent,"false");
				}
				else {
					this.onArrowKeys(oEvent,"true");
				}
			} else {
				// move horizontal splitter down
				this.onsapdownmodifiers(oEvent);
			}
		}
		// cancel the event
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * only drag events are fired; mouse events such as mousemove are not fired during drag operation
 */
/**
 * event dragstart fired when the user starts dragging the sash bar
 */

sap.ui.commons.Splitter.prototype.ondragstart = function(oEvent) {
	
	if (oEvent.target != this.splitterBar) {
		return;
	}

	// cancel the event
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Convenience method checks if a domElement is a first Pane, a second Pane or a splitter bar
 */

sap.ui.commons.Splitter.prototype.splitterPart = function(domElement) {
	/** *************method variables********************** */
	var classDomElement;
	/** *************************************************** */

	classDomElement = jQuery(domElement).attr("class");

	switch (classDomElement) {
		case "sapUiVSplitterFirstPane" :
		case "sapUiHSplitterFirstPane" : {
			return "first";
		}
		case "sapUiHSplitterSecondPane" :
		case "sapUiVSplitterSecondPane" : {
			return "second";
		}
		case "sapUiVerticalSplitterBar" :
		case "sapUiHorizontalSplitterBar" : {
			return "bar";
		}
		case "sapUiSplitter" : {
			return "DIV";
		}
		default :
			return "other";
	}
};

/**
 * Convenience method to set the focus on the next splitter element (first pane, splitter bar or second pane) in case of
 * embedded splitters: we consider the splitters as the nodes of a ternary tree, each node is a DOM element and has at
 * most three childs (FP, SB, SP) in this order if the focus is in a given node of the tree the next focus is computed
 * following the algorithm: 1- if the node has a child set the focus on the first child (first pane) 2- otherwise if the
 * node has a direct sibling on the right (SB or SP) set the focus on it 3- otherwise recursively search up (parent) the
 * tree the first node with a direct sibling on the right 4- if found set the focus on it otherwise return
 *
 * Note: in current spec splitter bar shouldn't be focused any more. This was changed in the code.
 */
sap.ui.commons.Splitter.prototype.setFocusNextSplitterElement = function(oEvent) {

	var currentFocusedDE = oEvent.target;
	var splitterElement = this.splitterPart(currentFocusedDE);
	var parent;
	var sibling;
	var child;
	var p;

	switch (splitterElement) {
		case "first" : {
			p = jQuery(currentFocusedDE).children(".sapUiSplitter");
			if (p.length != 0) {
				currentFocusedDE = p[0];
				child = jQuery(currentFocusedDE).children(".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane");

				jQuery(child[0]).focus();
				return;
			} else {
				sibling = jQuery(currentFocusedDE).next();
				//new: splitter bar shouldn't be focused anymore so skip it
				//jQuery(sibling).focus();
				jQuery(sibling).next().focus();
				return;
			}
		}
		case "second" : {
			p = jQuery(currentFocusedDE).children(".sapUiSplitter");
			if (p.length != 0) {
				currentFocusedDE = p[0];
				child = jQuery(currentFocusedDE).children(".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane");

				jQuery(child[0]).focus();
				return;
			} else {
				parent = jQuery(currentFocusedDE).closest(".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane");
				if (parent.length != 0) {
					sibling = jQuery(parent[0]).next();
					jQuery(sibling).focus();
					return;
				} else {
					return;
				}
			}
		}
		case "bar" : {
			jQuery(jQuery(currentFocusedDE).next()).focus();
			return;
		}
		case "other" : {
			parent = jQuery(currentFocusedDE).closest(
			".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane, .sapUiVSplitterSecondPane, .sapUiHSplitterSecondPane");
			if (parent.length != 0) {
				jQuery(parent[0]).focus();
				return;
			} else {
				return;
			}
		}
	}
};

sap.ui.commons.Splitter.prototype.focusPrev = function(oElement) {
	var child = jQuery(oElement).children(".sapUiSplitter");
	var sPane;
	if (child.length != 0) {
		sPane = jQuery(child[0]).children(".sapUiVSplitterSecondPane, .sapUiHSplitterSecondPane");
		this.focusPrev(sPane[0]);
	} else {
		jQuery(oElement).focus();
		return;
	}
};

/**
 * Convenience method to search for the next focusable splitter element in case of embedded splitters: we consider the
 * splitters as the nodes of a ternary tree, each node is a DOM element and has at most three childs (FP, SB, SP) in
 * this order. The algorithm is a recursive call of the following steps starting with the current focused node : 1- if
 * the node has a direct sibling on the left (SB or FP) call the method on it 2- else if the node has childs then call
 * the method on the third child (SP) 3- else set the focus on the node
 *
 * Note: in current spec splitter bar shouldn't be focused any more. This was changed in the code.
 */
sap.ui.commons.Splitter.prototype.setFocusPreviousSplitterElement = function(oEvent) {

	var currentFocusedDE = oEvent.target;
	var splitterElement = this.splitterPart(currentFocusedDE);
	var parent;
	var prevSibling;

	switch (splitterElement) {
		case "second" : {
			prevSibling = jQuery(currentFocusedDE).prev();
			// new: splitter bar shouldn't be focused any more so skip it
			if (this.splitterPart(prevSibling) == "bar"){
				var prevBarSibling = jQuery(prevSibling).prev();
				if (prevBarSibling && this.splitterPart(prevBarSibling) == "first") {
					this.focusPrev(prevBarSibling);
				}
			}else if (prevSibling && this.splitterPart(prevSibling) != "other"){
				jQuery(prevSibling).focus();
			}
			return;

		}
		case "bar" : {
			prevSibling = jQuery(currentFocusedDE).prev();
			if (prevSibling && this.splitterPart(prevSibling) == "first") {
				this.focusPrev(prevSibling);
			}
			return;
		}
		case "first" : {
		}
		case "other" : {
			var parent1 = jQuery(currentFocusedDE).parent();
			parent = jQuery(parent1).closest(
			".sapUiVSplitterFirstPane, .sapUiHSplitterFirstPane, .sapUiVSplitterSecondPane, .sapUiHSplitterSecondPane");
			if (parent.length != 0) {
				jQuery(parent[0]).focus();
				return;
			} else {
				return;
			}
		}
	}

};

/**
 * F6 Key combination if the keyboard focus is on the first Splitter Container The focus should move to the second Splitter Container if the focus is on the
 * second splitter Container it should jump to the next first splitter container if it exists
 */
sap.ui.commons.Splitter.prototype.onsapskipforward = function(oEvent) {
	// cancel the event
	oEvent.preventDefault();
	oEvent.stopPropagation();
	this.setFocusNextSplitterElement(oEvent);
};


/**
 * Shift F6 Key combination if the focus is on the second Splitter Container The focus should move back to the first container if the focus is on an UI element
 * inside a splitter container it should be set to the current splitter container
 */
sap.ui.commons.Splitter.prototype.onsapskipback = function(oEvent) {
	// cancel the event
	oEvent.preventDefault();
	oEvent.stopPropagation();
	this.setFocusPreviousSplitterElement(oEvent);
};

sap.ui.commons.Splitter.prototype.getText = function(sKey, aArgs) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	if(rb) {
		return rb.getText(sKey, aArgs);
	}
	return sKey;
};


}; // end of sap/ui/commons/Splitter.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Tab') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Tab.
jQuery.sap.declare("sap.ui.commons.Tab");




/**
 * Constructor for a new Tab.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVerticalScrolling verticalScrolling} : sap.ui.core.Scrolling (default: sap.ui.core.Scrolling.None)</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : sap.ui.core.Scrolling (default: sap.ui.core.Scrolling.None)</li>
 * <li>{@link #getClosable closable} : boolean (default: false)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.Panel#constructor sap.ui.commons.Panel}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A single page in a TabStrip control.
 * @extends sap.ui.commons.Panel
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Tab
 */
sap.ui.commons.Panel.extend("sap.ui.commons.Tab", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"verticalScrolling" : {type : "sap.ui.core.Scrolling", group : "Behavior", defaultValue : sap.ui.core.Scrolling.None},
		"horizontalScrolling" : {type : "sap.ui.core.Scrolling", group : "Behavior", defaultValue : sap.ui.core.Scrolling.None},
		"closable" : {type : "boolean", group : "Misc", defaultValue : false},
		"selected" : {type : "boolean", group : "Behavior", defaultValue : false, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Tab with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Tab.extend
 * @function
 */


/**
 * Getter for property <code>verticalScrolling</code>.
 * Set the height property.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.Scrolling} the value of property <code>verticalScrolling</code>
 * @public
 * @name sap.ui.commons.Tab#getVerticalScrolling
 * @function
 */

/**
 * Setter for property <code>verticalScrolling</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.Scrolling} oVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tab#setVerticalScrolling
 * @function
 */


/**
 * Getter for property <code>horizontalScrolling</code>.
 * Set the width property.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.Scrolling} the value of property <code>horizontalScrolling</code>
 * @public
 * @name sap.ui.commons.Tab#getHorizontalScrolling
 * @function
 */

/**
 * Setter for property <code>horizontalScrolling</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.Scrolling} oHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tab#setHorizontalScrolling
 * @function
 */


/**
 * Getter for property <code>closable</code>.
 * Defines whether the tab contains a close button.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>closable</code>
 * @public
 * @name sap.ui.commons.Tab#getClosable
 * @function
 */

/**
 * Setter for property <code>closable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bClosable  new value for property <code>closable</code>
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tab#setClosable
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * Defines whether the tab is the active one.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @deprecated Since version 0.17.0. 
 * This property is not used. To indentify the selected tab in a TabStrip selectedIndex is used.
 * @name sap.ui.commons.Tab#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 0.17.0. 
 * This property is not used. To indentify the selected tab in a TabStrip selectedIndex is used.
 * @name sap.ui.commons.Tab#setSelected
 * @function
 */


// Start of sap\ui\commons\Tab.js
/*
 * Initialize the Tab
 * @private
 */
sap.ui.commons.Tab.prototype.init = function() {
	// Setting this to role Tabpanel instead of its container basically worked.
	// However, the role is set one level higher to get better output in screen reader.

	this.oScrollDomRef = null;      // Points to the content area
};

sap.ui.commons.Tab.prototype.rerender = function() {

	// as Tab has no own renderer call renderer of TabStrip
	var oParent = this.getParent();
	if (oParent) {
		oParent.rerender();
	}

};

/*
 * Called after rendering from the TabStrip control
 */
sap.ui.commons.Tab.prototype.onAfterRendering = function () {
	this.oScrollDomRef = this.getDomRef("panel");

	// Restore scroll positions
	if (this.oScrollDomRef) {
		var scrollTop = this.getProperty("scrollTop");
		if (scrollTop > 0) {
			this.oScrollDomRef.scrollTop = scrollTop;
		}
		var scrollLeft = this.getProperty("scrollLeft");
		if (scrollLeft > 0) {
			this.oScrollDomRef.scrollLeft = scrollLeft;
		}
	}

	// TODO: this must also be done for tabs where the contents are not rendered initially
};

/*
 * Returns the scroll position of the tab in pixel from the left. Returns "0" if not rendered yet.
 * Also updates the control property internally.
 *
 * @return The scroll position
 * @public
 */
sap.ui.commons.Tab.prototype.getScrollLeft = function () {
	var scrollLeft = 0;
	if (this.oScrollDomRef) {
		scrollLeft = this.oScrollDomRef.scrollLeft;
		this.setProperty("scrollLeft", scrollLeft, true);
	}

	return scrollLeft;
};

/*
 * Sets the scroll position of the tab in pixel from the left.
 * @param {int} iPosition The position to scroll to
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setScrollLeft = function (iPosition) {
	this.setProperty("scrollLeft", iPosition, true);
	if (this.oScrollDomRef) {                        // TODO: what if called before rendering?
		this.bIgnoreScrollEvent = true;
		this.oScrollDomRef.scrollLeft = iPosition;
	}
	return this;
};

/*
 * Returns the scroll position of the tab in pixel from the top. Returns "0" if not rendered yet.
 * Also updates the control property internally.
 *
 * @return The scroll position
 * @public
 */
sap.ui.commons.Tab.prototype.getScrollTop = function () {
	var scrollTop = 0;
	if (this.oScrollDomRef) {
		scrollTop = this.oScrollDomRef.scrollTop;
		this.setProperty("scrollTop", scrollTop, true);
	}

	return scrollTop;
};

/*
 * Sets the scroll position of the tab in pixel from the top.
 * @param {int} iPosition The position to scroll to
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setScrollTop = function (iPosition) {
	this.setProperty("scrollTop", iPosition, true);
	if (this.oScrollDomRef) {                       // TODO: what if called before rendering?
		this.bIgnoreScrollEvent = true;
		this.oScrollDomRef.scrollTop = iPosition;
	}
	return this;
};

/*
 * Property setter for the "enabled" state (overwrite method from panel)
 * Normally only classes are exchanged and no rerendering is needed.
 * But if selected tab should be disabled this needs a rerendering because
 * the selected tab can not be disabled
 * If no tab is selected (because all tabs are disabled before) also a
 * rerendering is needed.
 *
 * @param bEnabled whether the tab should be enabled or not
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setEnabled = function(bEnabled) {

	if (bEnabled == this.getEnabled()) {
		return this;
	}

	var oDomRef = this.getDomRef();
	var oParent = this.getParent();

	if (!oDomRef || (!bEnabled && jQuery(this.getDomRef()).hasClass("sapUiTabSel")) ||
		(bEnabled && oParent && oParent.getSelectedIndex && oParent.getSelectedIndex() < 0)) {
		this.setProperty("enabled", bEnabled, false); // rendering needed
	} else {
		this.setProperty("enabled", bEnabled, true); // no re-rendering!
		// if already rendered, adapt rendered control without complete re-rendering
		jQuery(this.getDomRef()).toggleClass("sapUiTab", bEnabled).toggleClass("sapUiTabDsbl", !bEnabled).attr("aria-disabled",!bEnabled);
	}
	return this;

};

/*
 * Setter of the width property. As it has no effect on a tab and is
 * only inherited from panel, noting to do. Just overwrite panel implementation
 *
 * @param {string} sWidth the width of the panel as CSS size
 * @return {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setWidth = function (sWidth) {
	this.setProperty("width", sWidth, true); // don't rerender
	// do nothing
	return this;
};

/*
 * Property setter for the padding.As it has no effect on a tab and is
 * only inherited from panel, noting to do. Just overwrite panel implementation
 *
 * @param bPadding whether the Panel should have padding
 * @returns {sap.ui.commons.Tab} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.Tab.prototype.setApplyContentPadding = function(bPadding) {
	this.setProperty("applyContentPadding", bPadding, true); // no re-rendering!
	// do nothing
	return this;
};

sap.ui.commons.Tab.prototype._handleTrigger = function(oEvent) {
	//see sap.ui.commons.Panel.prototype._handleTrigger -> Nothing to do here
};
}; // end of sap/ui/commons/Tab.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TabStrip') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TabStrip.
jQuery.sap.declare("sap.ui.commons.TabStrip");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TabStrip.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getSelectedIndex selectedIndex} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTabs tabs} <strong>(default aggregation)</strong> : sap.ui.commons.Tab[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.TabStrip#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.TabStrip#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * A container for tab controls which contain the content and generally other controls. The user switches between the tabs then to display the content.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.TabStrip
 */
sap.ui.core.Control.extend("sap.ui.commons.TabStrip", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"createTab", "closeTab"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"selectedIndex" : {type : "int", group : "Misc", defaultValue : 0}
	},
	defaultAggregation : "tabs",
	aggregations : {
    	"tabs" : {type : "sap.ui.commons.Tab", multiple : true, singularName : "tab"}
	},
	events : {
		"select" : {}, 
		"close" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.TabStrip with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.TabStrip.extend
 * @function
 */

sap.ui.commons.TabStrip.M_EVENTS = {'select':'select','close':'close'};


/**
 * Getter for property <code>height</code>.
 * Height includes tab bar and content area.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.TabStrip#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width includes tab bar and content area.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.TabStrip#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#setWidth
 * @function
 */


/**
 * Getter for property <code>selectedIndex</code>.
 * Index of the currently selected tab.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>selectedIndex</code>
 * @public
 * @name sap.ui.commons.TabStrip#getSelectedIndex
 * @function
 */

/**
 * Setter for property <code>selectedIndex</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iSelectedIndex  new value for property <code>selectedIndex</code>
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#setSelectedIndex
 * @function
 */


/**
 * Getter for aggregation <code>tabs</code>.<br/>
 * Aggregating tabs contained in the tab strip.
 * 
 * <strong>Note</strong>: this is the default aggregation for TabStrip.
 * @return {sap.ui.commons.Tab[]}
 * @public
 * @name sap.ui.commons.TabStrip#getTabs
 * @function
 */


/**
 * Inserts a tab into the aggregation named <code>tabs</code>.
 *
 * @param {sap.ui.commons.Tab}
 *          oTab the tab to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tab should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tab is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tab is inserted at 
 *             the last position        
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#insertTab
 * @function
 */

/**
 * Adds some tab <code>oTab</code> 
 * to the aggregation named <code>tabs</code>.
 *
 * @param {sap.ui.commons.Tab}
 *            oTab the tab to add; if empty, nothing is inserted
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#addTab
 * @function
 */

/**
 * Removes an tab from the aggregation named <code>tabs</code>.
 *
 * @param {int | string | sap.ui.commons.Tab} vTab the tab to remove or its index or id
 * @return {sap.ui.commons.Tab} the removed tab or null
 * @public
 * @name sap.ui.commons.TabStrip#removeTab
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tabs</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.Tab[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.TabStrip#removeAllTabs
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.Tab</code> in the aggregation named <code>tabs</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.Tab}
 *            oTab the tab whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.TabStrip#indexOfTab
 * @function
 */
	

/**
 * Destroys all the tabs in the aggregation 
 * named <code>tabs</code>.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#destroyTabs
 * @function
 */


/**
 * Event is fired when the user selects a tab. 
 *
 * @name sap.ui.commons.TabStrip#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.index Index of the selected tab.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.TabStrip</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.TabStrip</code>.<br/> itself. 
 *  
 * Event is fired when the user selects a tab. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.TabStrip</code>.<br/> itself.
 *
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.TabStrip</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'index' of type <code>int</code> Index of the selected tab.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.TabStrip#fireSelect
 * @function
 */


/**
 * Event is fired when the user closes a tab. 
 *
 * @name sap.ui.commons.TabStrip#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {int} oControlEvent.getParameters.index Index of the closed tab.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.ui.commons.TabStrip</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.TabStrip</code>.<br/> itself. 
 *  
 * Event is fired when the user closes a tab. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.TabStrip</code>.<br/> itself.
 *
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#attachClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.ui.commons.TabStrip</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TabStrip#detachClose
 * @function
 */

/**
 * Fire event close to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'index' of type <code>int</code> Index of the closed tab.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.TabStrip#fireClose
 * @function
 */


/**
 * Convenient method to add a tab with a text as title and a root control as content.
 *
 * @name sap.ui.commons.TabStrip.prototype.createTab
 * @function
 * @param {string} 
 *         sText
 *         Defines the title text of the newly created tab.
 * @param {sap.ui.core.Control} 
 *         oContent
 *         Defines the root control of the content area.

 * @type void
 * @public
 */


/**
 * This method closes a tab. If the tab is selecte thenext one will be selected. (If it's the last the previous one will be selected,)
 * This method should be called if the close event is fired. It can not be called automatically because the consumer might need to run some logic before the tab is closed.
 *
 * @name sap.ui.commons.TabStrip.prototype.closeTab
 * @function
 * @param {int} 
 *         iIndex
 *         Index of the tab that should be closed.

 * @type void
 * @public
 */


// Start of sap\ui\commons\TabStrip.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


sap.ui.commons.TabStrip.prototype.onAfterRendering = function() {
	// find a collection of all tabs
	var oFocusRef = this.getFocusDomRef(),
		aTabs = oFocusRef.lastChild.childNodes,
		aTabDomRefs = [],
		iSelectedDomIndex = -1;
	for (var i=0;i<aTabs.length;i++) {
		aTabDomRefs.push(aTabs[i]);
		if(jQuery(aTabs[i]).hasClass("sapUiTabSel")){
			// get selected index out of visible tabs for ItemNavigation
			iSelectedDomIndex = i;
		}
	}
	//Initialize the ItemNavigation
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.addDelegate(this.oItemNavigation);
	}
	//Reinitialize the ItemNavigation after rendering
	this.oItemNavigation.setRootDomRef(oFocusRef);
	this.oItemNavigation.setItemDomRefs(aTabDomRefs);
	this.oItemNavigation.setSelectedIndex(iSelectedDomIndex);

	//Notify the tabs
	var aTabs = this.getTabs();
	for (var i=0;i<aTabs.length;i++) {
		aTabs[i].onAfterRendering();
	}
};

/*
 * Convenient method to add a tab with a text as title and a root control as content.
 *
 * @param {string}
 *         sText defines the title text of the newly created tab
 * @param {sap.ui.core.Control}
 *        oContent defines the root control of the content of the tab
 * @return
 * @type {sap.ui.commons.Tab}
 * @public
 */
sap.ui.commons.TabStrip.prototype.createTab = function(sText,oContent) {
	var oTabs = this.getTabs(),
		oTitle = new sap.ui.core.Title(this.getId() + "-" + oTabs.length + "-title",{text:sText}),
		oTab = new sap.ui.commons.Tab(this.getId() + "-" + oTabs.length);
	oTab.setTitle(oTitle);
	oTab.addContent(oContent);
	this.addTab(oTab);
	return oTab;
};

/*
 * Finds and fires the select event of a tab of a given Dom Reference
 * if it is a Dom ref of a tab title.
 * @private
 */
sap.ui.commons.TabStrip.prototype.selectTabByDomRef = function(oDomRef) {
	var iIdx = this.getItemIndex(oDomRef);
	if (iIdx > -1) {
		//its an item, find the items index
		if ((iIdx != this.getSelectedIndex()) && (this.getTabs()[iIdx].getEnabled())) {
			var iOldIndex = this.getSelectedIndex();
			this.setProperty( 'selectedIndex', iIdx, true ); // no complete rerendering required

			this.rerenderPanel(iOldIndex);

			this.oItemNavigation.setSelectedIndex(this.oItemNavigation.getFocusedIndex());

			this.fireSelect({index:iIdx});
		}
	}
};

/*
 * Handles the SPACEBAR press
 * @private
 */
sap.ui.commons.TabStrip.prototype.onsapspace = function(oEvent) {
	var oSource = oEvent.target;
	this.selectTabByDomRef(oSource);
};

// ENTER and SPACE with modifiers is the same like SPACE
sap.ui.commons.TabStrip.prototype.onsapspacemodifiers = sap.ui.commons.TabStrip.prototype.onsapspace;
sap.ui.commons.TabStrip.prototype.onsapenter = sap.ui.commons.TabStrip.prototype.onsapspace;
sap.ui.commons.TabStrip.prototype.onsapentermodifiers = sap.ui.commons.TabStrip.prototype.onsapspace;

/*
 * Handles the DELETE press
 * @private
 */
sap.ui.commons.TabStrip.prototype.onsapdelete = function(oEvent) {

	var oSource = oEvent.target;
	var iIdx = this.getItemIndex(oSource);
	if (iIdx > -1 && this.getTabs()[iIdx].getClosable()) {
		//item is closable
		this.fireClose({index:iIdx});
	}

};

/*
 * Handles the click event.
 * @private
 */
sap.ui.commons.TabStrip.prototype.onclick = function(oEvent) {
	var oSource = oEvent.target,
		oDomRef = this.getDomRef();
	if (oSource.className == "sapUiTabClose") {
		//find the items index
		var iIdx = this.getItemIndex(jQuery(oSource).parentByAttribute("id"));
		if (iIdx > -1) {
			this.fireClose({index:iIdx});
		}
		return;
	}
	this.selectTabByDomRef(oSource);
};

/*
 * Overrides getFocusDomRef of base element class.
 * @public
 */
sap.ui.commons.TabStrip.prototype.getFocusDomRef = function() {
	return this.getDomRef().firstChild;
};

/*
 * Does all the cleanup when the TabStrip is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.TabStrip.prototype.exit = function (){
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
		delete this.oItemNavigation;
	}

	// no super.exit() to call
};

sap.ui.commons.TabStrip.prototype.getItemIndex = function(oDomRef) {

	var sId;
	if(!oDomRef.id || oDomRef.id.search("-close") != -1){
		// icon or close button
		var oItemDomRef = jQuery(oDomRef).parentByAttribute("id");
		sId = oItemDomRef.id;
	}else{
		sId = oDomRef.id;
	}

	for (var idx = 0, aTabs = this.getTabs(); idx < aTabs.length; idx++) {
		if (sId == aTabs[idx].getId()) {
			return idx;
		}
	}
	return -1;
};

// Override aggregation methods if something needs to be taken care of

/*
 * Overwrite of default method
 * Removes an tab from the aggregation named <code>tabs</code>.
 *
 * @param {int | string | sap.ui.commons.Tab} vTab the tab to remove or its index or id
 * @return {sap.ui.commons.Tab} the removed tab or null
 * @public
 */
sap.ui.commons.TabStrip.prototype.removeTab = function(vElement) {
	var iIndex = vElement;
	if (typeof(vElement) == "string") { // ID of the element is given
		vElement = sap.ui.getCore().byId(vElement);
	}
	if (typeof(vElement) == "object") { // the element itself is given or has just been retrieved
		iIndex = this.indexOfTab(vElement);
	}

	var oTab = this.getTabs()[iIndex];
	if(oTab.getVisible()){
		// set tab invisible during hiding it for changing classes of tabs
		oTab.setProperty("visible",false,true); // no rerendering
		this.hideTab(iIndex);
		oTab.setProperty("visible",true,true); // no rerendering
	}

	if(this.getSelectedIndex() > iIndex){
		this.setProperty( 'selectedIndex', this.getSelectedIndex() - 1, true ); // no complete rerendering required
	}
	return this.removeAggregation("tabs", iIndex, true); // no complete rerendering required
};

/*
 * Overwite of defaultSetter for property <code>selectedIndex</code>.
 *
 * Default value is <code>0</code>
 *
 * @param {int} iSelectedIndex new value for property <code>selectedIndex</code>
 * @return {sap.ui.commons.TabStrip} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TabStrip.prototype.setSelectedIndex = function(iSelectedIndex) {

	var iOldIndex = this.getSelectedIndex();

	if (iSelectedIndex == iOldIndex) {
		return this;
	}

	var aTabs = this.getTabs();
	var oTab = aTabs[iSelectedIndex];

	if(!oTab && !this.getDomRef())
	{
		// tab don't exist but not rendered. In initial setup index might be set before tab is added
		// But if already rendered this is not allowed, tab must exist
		this.setProperty( 'selectedIndex', iSelectedIndex, false ); // rendering needed

	}else if(oTab && oTab.getEnabled() && oTab.getVisible()){
		this.setProperty( 'selectedIndex', iSelectedIndex, true ); // no complete rerendering required
		if (this.getDomRef() && !this.invalidated){
			// already rendered and no re-rendering outstanding
			this.rerenderPanel(iOldIndex);
			if(this.oItemNavigation){
				// set selected index for ItemNavigation, ignore invisible tabs.
				var iVisibleIndex = 0;
				var iSelectedDomIndex = -1;
				for (var i=0;i<aTabs.length;i++) {
					oTab = aTabs[i];
					if(oTab.getVisible() === false) {
						continue;
					}
					if(i == iSelectedIndex){
						iSelectedDomIndex = iVisibleIndex;
						break;
					}
					iVisibleIndex++;
				}
				this.oItemNavigation.setSelectedIndex(iSelectedDomIndex);
			}
		}
	}else {
		this._warningInvalidSelectedIndex(iSelectedIndex, oTab);
	}

	return this;
};

/*
 * Close a tab. If selected, select the next one
 *
 * @param {int} iIndex tab to be closed
 * @public
 */
sap.ui.commons.TabStrip.prototype.closeTab = function(iIndex) {

	var oTab = this.getTabs()[iIndex];

	if(!oTab || !oTab.getClosable() || !oTab.getVisible()){
		return;
	}

	// close tab -> set to invisible
	oTab.setProperty("visible",false,true); // no rerendering

	this.hideTab(iIndex);
};

/*
 * removes a tab from output
 *
 * @param {int} iIndex tab to be closed
 * @private
 */
sap.ui.commons.TabStrip.prototype.hideTab = function(iIndex) {
	var oTab = this.getTabs()[iIndex];

	if (!this.getDomRef()){
		return; //if not already rendered selected index should be provided by caller
	}

	// get focused index and visible index of tab
	var iFocusedIndex = this.oItemNavigation.getFocusedIndex();
	var iVisibleIndex = parseInt(oTab.$().attr("aria-posinset"), 10) - 1;
	var sFocusedControlId = sap.ui.getCore().getCurrentFocusedControlId();

	// delete only tab from DOM ->no rerendering of other tabs necessary
	oTab.$().remove();

	if(this.iVisibleTabs == 1){
		// last visible tab is closed -> no new selected tab and no content
		this.setProperty( 'selectedIndex', -1, true ); // no complete rerendering required
		oTab.$("panel").remove();
	}else if(iIndex == this.getSelectedIndex()){
		// selected tab should be closed -> select other one

		var iNewIndex = iIndex + 1;

		while(iNewIndex < this.getTabs().length && (!this.getTabs()[iNewIndex].getEnabled() || !this.getTabs()[iNewIndex].getVisible())){
			//select next one
			iNewIndex ++;
		}

		if(iNewIndex == this.getTabs().length){
			// no next active tab - search for previous
			iNewIndex = iIndex -1;
			while(iNewIndex >= 0 && (!this.getTabs()[iNewIndex].getEnabled() || !this.getTabs()[iNewIndex].getVisible())){
				//select previous one
				iNewIndex --;
			}
		}
		// if no selectable tab exists the index is set to -1
		this.setProperty( 'selectedIndex', iNewIndex, true ); // no complete rerendering required

		this.rerenderPanel(iIndex);
	}else{
		// set classes new to set before and after classes right
		this.toggleTabClasses(this.getSelectedIndex(), this.getSelectedIndex());
	}

	// update ARIA information
	this.iVisibleTabs--;
	var iVisibleIndex = 0;
	var aTabDomRefs = [];
	var iSelectedDomIndex = -1;
	var bTabFocused = false;
	for (var i=0;i<this.getTabs().length;i++) {
		var oTab = this.getTabs()[i];

		// check if a tab has the focus
		if(sFocusedControlId == oTab.getId()){
			bTabFocused = true;
		}

		if(oTab.getVisible() === false) {
			continue;
		}
		if(i == this.getSelectedIndex()){
			iSelectedDomIndex = iVisibleIndex;
		}
		iVisibleIndex++;
		oTab.$().attr("aria-posinset", iVisibleIndex).attr("aria-setsize", this.iVisibleTabs);
		if (iVisibleIndex == this.iVisibleTabs) {
			oTab.$().addClass("sapUiTabLast"); // needed for IE8
		}
		aTabDomRefs.push(oTab.getDomRef());
	}

	// focused item should be the same
	if(iVisibleIndex <= iFocusedIndex){
		// tab before or equal focused one is hidden
		iFocusedIndex--;
	}
	// update ItemNavigation
	this.oItemNavigation.setItemDomRefs(aTabDomRefs);
	this.oItemNavigation.setSelectedIndex(iSelectedDomIndex);
	this.oItemNavigation.setFocusedIndex(iFocusedIndex);

	// check if a tab has the focus
	// if yes focus again
	// if no set only focused index.
	if(bTabFocused){
		this.oItemNavigation.focusItem(iFocusedIndex);
	}

};

/*
 * if the selected index is changed, only the panel must be rerendered
 * for the tabs only some classes must be exchanged
 *
 * @private
 */
sap.ui.commons.TabStrip.prototype.rerenderPanel = function(iOldIndex) {

	var iNewIndex = this.getSelectedIndex();
	var $panel = this.getTabs()[iOldIndex].$("panel");
	if ($panel.length > 0) {
		var rm = sap.ui.getCore().createRenderManager();
		this.getRenderer().renderTabContents(rm, this.getTabs()[iNewIndex]);
		rm.flush($panel[0]);
		rm.destroy();
	}

	var sNewId = this.getTabs()[iNewIndex].getId();
	//change the ID and Label of the panel to the current tab
	$panel.attr("id",sNewId + "-panel").attr("aria-labelledby", sNewId);

	// call after rendering method of tab to set scroll functions
	this.getTabs()[iNewIndex].onAfterRendering();

	this.toggleTabClasses(iOldIndex, iNewIndex);
};

/*
 * Sets the classes of the tabs to display the new selection
 *
 * @private
 */
sap.ui.commons.TabStrip.prototype.toggleTabClasses = function(iOldIndex, iNewIndex) {

	// change visualization of selected tab and old tab
	this.getTabs()[iOldIndex].$().toggleClass("sapUiTabSel sapUiTab").attr("aria-selected",false);
	var iBeforeIndex = iOldIndex-1;
	while (iBeforeIndex >= 0 && !this.getTabs()[iBeforeIndex].getVisible()) {
		iBeforeIndex--;
	}
	if(iBeforeIndex >= 0){
		this.getTabs()[iBeforeIndex].$().removeClass("sapUiTabBeforeSel");
	}

	var iAfterIndex = iOldIndex+1;
	while (iAfterIndex < this.getTabs().length && !this.getTabs()[iAfterIndex].getVisible()) {
		iAfterIndex++;
	}
	if(iAfterIndex < this.getTabs().length){
		this.getTabs()[iAfterIndex].$().removeClass("sapUiTabAfterSel");
	}

	this.getTabs()[iNewIndex].$().toggleClass("sapUiTabSel sapUiTab").attr("aria-selected",true);
	iBeforeIndex = iNewIndex-1;
	while (iBeforeIndex >= 0 && !this.getTabs()[iBeforeIndex].getVisible()) {
		iBeforeIndex--;
	}
	if(iBeforeIndex >= 0){
		this.getTabs()[iBeforeIndex].$().addClass("sapUiTabBeforeSel");
	}

	iAfterIndex = iNewIndex+1;
	while (iAfterIndex < this.getTabs().length && !this.getTabs()[iAfterIndex].getVisible()) {
		iAfterIndex++;
	}
	if(iAfterIndex < this.getTabs().length){
		this.getTabs()[iAfterIndex].$().addClass("sapUiTabAfterSel");
	}

};

/*
 * Overwrite Invalidate function to set invalidate flag
 */
sap.ui.commons.TabStrip.prototype._originalInvalidate = sap.ui.commons.TabStrip.prototype.invalidate;

sap.ui.commons.TabStrip.prototype.invalidate = function() {

	this.invalidated = true;
	sap.ui.commons.TabStrip.prototype._originalInvalidate.apply(this,arguments);

};

sap.ui.commons.TabStrip.prototype._warningInvalidSelectedIndex = function(iSelectedIndex, oTab){

	var sDetails = "";
	if (!oTab) {
		sDetails = "Tab not exists";
	} else if (!oTab.getEnabled()){
		sDetails = "Tab disabled";
	} else if (!oTab.getVisible()){
		sDetails = "Tab not visible";
	}
	jQuery.sap.log.warning("SelectedIndex " + iSelectedIndex + " can not be set", sDetails, "sap.ui.commons.TabStrip");

};

}; // end of sap/ui/commons/TabStrip.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextAreaRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.TextArea
jQuery.sap.declare("sap.ui.commons.TextAreaRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class TextArea renderer.
 * @static
 */
sap.ui.commons.TextAreaRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);

/**
 * Use TextField to render TextArea but change tag to TEXTAREA
 * @protected
 */
sap.ui.commons.TextAreaRenderer.getInnerTagName = function(){
	return('textarea');
}

/**
 * Add attributes, styles and so on to TextField tag
 */;
sap.ui.commons.TextAreaRenderer.renderInnerAttributes = function(oRenderManager, oTextArea){

	var rm = oRenderManager;

	rm.addClass("sapUiTxtA");

	rm.addStyle('overflow', 'auto');

	if (oTextArea.getWidth() && oTextArea.getWidth() != '') {
//		done in TextField renderer
	}else{
		if (oTextArea.getCols() && oTextArea.getCols() != '') {
			rm.writeAttribute('cols', oTextArea.getCols());
		}
	}

	if (oTextArea.getHeight() && oTextArea.getHeight() != '') {
		rm.addStyle('height',oTextArea.getHeight());
		//if a height is set don't use margin-top and margin-button because this would it make higher than wanted
		//this would lead to scrollbars or cut controls in layouts
		rm.addStyle('margin-top','0');
		rm.addStyle('margin-bottom','0');
	}else{
		if (oTextArea.getRows() && oTextArea.getRows() != '') {
			rm.writeAttribute('rows', oTextArea.getRows());
		}
	}

	// Changes of the wrap property require re-rendering for browser reasons.
	// Therefore, no dynamic function to change wrapping necessary.
	switch (oTextArea.getWrapping()){
	case (sap.ui.core.Wrapping.Soft) :
		rm.writeAttribute('wrap', 'soft');
		break;
	case (sap.ui.core.Wrapping.Hard) :
		rm.writeAttribute('wrap', 'hard');
		break;
	case (sap.ui.core.Wrapping.Off) :
		rm.writeAttribute('wrap', 'off');
		break;
	}
}

/**
 * Overwrite renderARIAInfo function of TextField
 */;
sap.ui.commons.TextAreaRenderer.renderARIAInfo = function(rm, oTextArea) {

	rm.writeAccessibilityState(oTextArea, {
		role: oTextArea.getAccessibleRole().toLowerCase() || 'textbox',
		labelledby: oTextArea.getLabeledBy() ? (oTextArea.getLabeledBy() + " " + oTextArea.getAriaDescribedBy().join(" ")) : undefined,
		required: oTextArea.getRequired(),
		readonly: !oTextArea.getEditable(),
		multiline: true,
		autocomplete: "none",
		invalid: oTextArea.getValueState() == sap.ui.core.ValueState.Error});

};

/**
 * Renders additional HTML for the TextArea to the TextField
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should be rendered.
 */
sap.ui.commons.TextAreaRenderer.renderInnerContent = function(oRenderManager, oTextArea){
	// Convenience variable
	var rm = oRenderManager;

	var sValue = oTextArea.getValue();
	var sPlaceholder = oTextArea.getPlaceholder();

	if(sValue.length > oTextArea.getMaxLength() && oTextArea.getMaxLength() > 0){
		sValue = sValue.substring(0,oTextArea.getMaxLength());
	}

	if (!sap.ui.Device.support.input.placeholder && sPlaceholder && !sValue) {
		rm.writeEscaped(sPlaceholder);
	} else {
		rm.writeEscaped(sValue);
	}
};
}; // end of sap/ui/commons/TextAreaRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TextField.
jQuery.sap.declare("sap.ui.commons.TextField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TextField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string (default: '')</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getRequired required} : boolean (default: false)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getImeMode imeMode} : sap.ui.core.ImeMode (default: sap.ui.core.ImeMode.Auto)</li>
 * <li>{@link #getDesign design} : sap.ui.core.Design (default: sap.ui.core.Design.Standard)</li>
 * <li>{@link #getHelpId helpId} : string (default: '')</li>
 * <li>{@link #getAccessibleRole accessibleRole} : sap.ui.core.AccessibleRole (default: sap.ui.core.AccessibleRole.Textbox)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getPlaceholder placeholder} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.TextField#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.TextField#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Control is used to enter text.
 * @extends sap.ui.core.Control
 * @implements sap.ui.commons.ToolbarItem
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.TextField
 */
sap.ui.core.Control.extend("sap.ui.commons.TextField", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem"
	],
	publicMethods : [
		// methods
		"focus", "getLiveValue"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"value" : {type : "string", group : "Data", defaultValue : '', bindable : "bindable"},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"required" : {type : "boolean", group : "Appearance", defaultValue : false},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"imeMode" : {type : "sap.ui.core.ImeMode", group : "Behavior", defaultValue : sap.ui.core.ImeMode.Auto},
		"design" : {type : "sap.ui.core.Design", group : "Appearance", defaultValue : sap.ui.core.Design.Standard},
		"helpId" : {type : "string", group : "Behavior", defaultValue : ''},
		"accessibleRole" : {type : "sap.ui.core.AccessibleRole", group : "Accessibility", defaultValue : sap.ui.core.AccessibleRole.Textbox},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"placeholder" : {type : "string", group : "Appearance", defaultValue : null}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.TextField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.TextField.extend
 * @function
 */

sap.ui.commons.TextField.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>value</code>.
 * Text inside the textfield
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.ui.commons.TextField#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @SecSource {return} The 'value' property of the TextField control and its subclasses represents unfiltered user input.
 * Applications must ensure that the data is either validated / cleansed or that it is not used in a context which is sensible to XSS attacks.
 * @name sap.ui.commons.TextField#setValue
 * @function
 */


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#bindValue
 * @function
 */

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#unbindValue
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Direction of the text. Possible values: rtl, ltr.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.ui.commons.TextField#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setTextDirection
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Switches enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.TextField#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setEnabled
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Switches edit state of the control. Read-only fields have different colors, depending on customer setting.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.commons.TextField#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setEditable
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.TextField#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setVisible
 * @function
 */


/**
 * Getter for property <code>required</code>.
 * Depending on theme the TextField is shown as required.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>required</code>
 * @public
 * @name sap.ui.commons.TextField#getRequired
 * @function
 */

/**
 * Setter for property <code>required</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRequired  new value for property <code>required</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setRequired
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of text field. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text field length defines the width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.TextField#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setWidth
 * @function
 */


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.ui.commons.TextField#getMaxLength
 * @function
 */

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setMaxLength
 * @function
 */


/**
 * Getter for property <code>valueState</code>.
 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.ui.commons.TextField#getValueState
 * @function
 */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setValueState
 * @function
 */


/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.ui.commons.TextField#getTextAlign
 * @function
 */

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setTextAlign
 * @function
 */


/**
 * Getter for property <code>imeMode</code>.
 * State of the Input Method Editor (IME).
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.ui.core.ImeMode} the value of property <code>imeMode</code>
 * @public
 * @name sap.ui.commons.TextField#getImeMode
 * @function
 */

/**
 * Setter for property <code>imeMode</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.ui.core.ImeMode} oImeMode  new value for property <code>imeMode</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setImeMode
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Font type. Standard, Monospace
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.core.Design} the value of property <code>design</code>
 * @public
 * @name sap.ui.commons.TextField#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.core.Design} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setDesign
 * @function
 */


/**
 * Getter for property <code>helpId</code>.
 * Unique identifier used for help service.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>helpId</code>
 * @public
 * @name sap.ui.commons.TextField#getHelpId
 * @function
 */

/**
 * Setter for property <code>helpId</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sHelpId  new value for property <code>helpId</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setHelpId
 * @function
 */


/**
 * Getter for property <code>accessibleRole</code>.
 * Accessibility role for the text field.
 *
 * Default value is <code>Textbox</code>
 *
 * @return {sap.ui.core.AccessibleRole} the value of property <code>accessibleRole</code>
 * @public
 * @name sap.ui.commons.TextField#getAccessibleRole
 * @function
 */

/**
 * Setter for property <code>accessibleRole</code>.
 *
 * Default value is <code>Textbox</code> 
 *
 * @param {sap.ui.core.AccessibleRole} oAccessibleRole  new value for property <code>accessibleRole</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setAccessibleRole
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.ui.commons.TextField#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#setName
 * @function
 */


/**
 * Getter for property <code>placeholder</code>.
 * Placeholder for the text field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * @since 1.14.0
 * @name sap.ui.commons.TextField#getPlaceholder
 * @function
 */

/**
 * Setter for property <code>placeholder</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPlaceholder  new value for property <code>placeholder</code>
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @since 1.14.0
 * @name sap.ui.commons.TextField#setPlaceholder
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.TextField#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.TextField#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.TextField#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.TextField#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.TextField#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.TextField#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * Event is fired when the text in the field has changed AND the focus leaves the TextField or the Enter key is pressed. 
 *
 * @name sap.ui.commons.TextField#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new / changed value of the textfield.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.TextField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.TextField</code>.<br/> itself. 
 *  
 * Event is fired when the text in the field has changed AND the focus leaves the TextField or the Enter key is pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.TextField</code>.<br/> itself.
 *
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.TextField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new / changed value of the textfield.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.TextField#fireChange
 * @function
 */


/**
 * This event if fired during typing into the TextField and returns the currently enterted value. This is not the content of the value property. The value property is only updated by ENTER and by leaving the control. 
 *
 * @name sap.ui.commons.TextField#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.liveValue Current value of the Textfield.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.ui.commons.TextField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.TextField</code>.<br/> itself. 
 *  
 * This event if fired during typing into the TextField and returns the currently enterted value. This is not the content of the value property. The value property is only updated by ENTER and by leaving the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.TextField</code>.<br/> itself.
 *
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.ui.commons.TextField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextField#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'liveValue' of type <code>string</code> Current value of the Textfield.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.TextField#fireLiveChange
 * @function
 */


/**
 * Puts the focus to this control.
 *
 * @name sap.ui.commons.TextField.prototype.focus
 * @function

 * @type void
 * @public
 */


/**
 * Returns the current value of the TextField. In case of editing the TextField you can access the current value via this method. The validated value is accessible via the property value.
 *
 * @name sap.ui.commons.TextField.prototype.getLiveValue
 * @function

 * @type string
 * @public
 */


// Start of sap\ui\commons\TextField.js
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


sap.ui.commons.TextField.prototype.init = function() {

	// currently empty but defined to add on Child controls (ComboBox...)
	// for later use.

};

/**
 * Event handler called when control is receiving the focus
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.TextField.prototype.onfocusin = function(oEvent) {

	if(this.getEditable() && this.getEnabled() && this.getRenderer().onfocus) {
		this.getRenderer().onfocus(this);
	}

};

/**
 * Event handler called when control is losing the focus
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.TextField.prototype.onsapfocusleave = function(oEvent) {

	// restore old value in case of escape key (not possible in onsapescape in firefox)
	// happens e.g. in table because focus is set outside TextField
	this._doOnEscape(oEvent);

	this._checkChange(oEvent);

	if(this.getEditable() && this.getEnabled() && this.getRenderer().onblur) {
		this.getRenderer().onblur(this);
	}

	// if control is left action mode is ended
	var $FocusDomRef = jQuery(this.getFocusDomRef());
	if($FocusDomRef.data("sap.InNavArea") === false) { // check for false to avoid undefined
		$FocusDomRef.data("sap.InNavArea", true);
	}

};

/**
 * Event handler called when enter key is pressed.
 * @see sap.ui.commons.TextField#onfocusout
 * @protected
 */
sap.ui.commons.TextField.prototype.onsapenter = function(oEvent) {
	this._checkChange(oEvent);
};

/**
 * Compares the previous value with the current value and fires the change event
 * if the TextField is editable and the value has changed.
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.TextField.prototype._checkChange = function(oEvent) {
	var oInput = this.getInputDomRef(),
		newVal = oInput && oInput.value,
		oldVal = this.getValue();

	if(this.getEditable() && this.getEnabled() && (oldVal != newVal)) {
		this.setProperty("value", newVal, true); // suppress rerendering
		this.fireChange({newValue:newVal}); // oldValue is not that easy in ComboBox and anyway not in API... thus skip it
	}
};

/**
 * Event handler called when text selection starts.
 * When the text field is disabled, the text should not be selectable, so cancel the event.
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.TextField.prototype.onselectstart = function(oEvent) {
	if (!this.getEnabled()){
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

//******************************************
//Special handling for TextFields in ItemNavigation

sap.ui.commons.TextField.prototype._checkCursorPosForNav = function(oEvent, bForward) {
	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	var bBack = bForward ? bRtl : !bRtl;
	var $input = jQuery(this.getInputDomRef());
	var iPos = $input.cursorPos();
	var iLen = $input.val().length;
	if(bRtl){
		iPos = iLen-iPos;
	}
	if((!bBack && iPos != iLen) || (bBack && iPos != 0)){
		oEvent.stopPropagation();
	}
};

sap.ui.commons.TextField.prototype.onsapnext = function(oEvent) {

	if(oEvent.keyCode != jQuery.sap.KeyCodes.ARROW_DOWN){ //Only interested in left / right
		if (jQuery(this.getFocusDomRef()).data("sap.InNavArea") && oEvent.keyCode != jQuery.sap.KeyCodes.END) {
			// parent handles arrow navigation
			oEvent.preventDefault();
			return;
		}

		this._checkCursorPosForNav(oEvent, true);
	}

};

sap.ui.commons.TextField.prototype.onsapprevious = function(oEvent) {
	if(oEvent.keyCode != jQuery.sap.KeyCodes.ARROW_UP){ //Only interested in left / right
		if (jQuery(this.getFocusDomRef()).data("sap.InNavArea") && oEvent.keyCode != jQuery.sap.KeyCodes.HOME) {
			// parent handles arrow navigation
			oEvent.preventDefault();
			return;
		}

		this._checkCursorPosForNav(oEvent, false);
	}
};

sap.ui.commons.TextField.prototype.onsapnextmodifiers = sap.ui.commons.TextField.prototype.onsapnext;
sap.ui.commons.TextField.prototype.onsappreviousmodifiers = sap.ui.commons.TextField.prototype.onsapprevious;
sap.ui.commons.TextField.prototype.onsapend = sap.ui.commons.TextField.prototype.onsapnext;
sap.ui.commons.TextField.prototype.onsaphome = sap.ui.commons.TextField.prototype.onsapprevious;

sap.ui.commons.TextField.prototype.onsapexpand = function(oEvent){

	// as Form handles this to expand or collapse containers it must be prevented in TextField
	// to allow usage of numpad + and -
	var bInNavArea = jQuery(this.getFocusDomRef()).data("sap.InNavArea");
	if (bInNavArea || bInNavArea === false) {
		// parent handles arrow navigation
		oEvent.stopPropagation();
		return;
	}

};

sap.ui.commons.TextField.prototype.onsapcollapse = sap.ui.commons.TextField.prototype.onsapexpand;

//******************************************

/*
 * Escape fires no keypress in webkit
 * In Firefox value can not be changed in keydown (onsapescape) event
 * So the escape event is stored in this._bEsc and the value in this._sValue
 * Onkeypress and onfocusout the value is reseted. (focusout e.g. needed in table)
 * the value must be set to the old one before the changes
 * @protected
 */
sap.ui.commons.TextField.prototype.onsapescape = function(oEvent) {

	var sValue = this.getProperty("value");
	this._bEsc = true;
	this._sValue = sValue;

	// as value change is handled in firefox in onkeypress the escape event must be directly stopped here
	var oInput = this.getInputDomRef();
	if(oInput && oInput.value !== sValue && !this._propagateEsc) {
		// if TextField is on a popup, don't close the popup if the value is just reseted
		// in InPlaceEdit propagation is needed
		oEvent.stopPropagation();
	}

	if (!!!sap.ui.Device.browser.firefox) {
		this._doOnEscape(oEvent);
	}

};

sap.ui.commons.TextField.prototype.onkeydown = function(oEvent) {

	if (oEvent.which == jQuery.sap.KeyCodes.Z && oEvent.ctrlKey) {
		// prevent browsers standard history logic because different in different browsers
		oEvent.preventDefault();
	}

};

/*
 * Event handler for keypress
 * in Firefox the escape value must be reseted here
 * (if on keyup there while pressing the escape key an old value is displayed)
 * fire the liveChange event
 * @protected
 */
sap.ui.commons.TextField.prototype.onkeypress = function(oEvent) {

	this._doOnEscape(oEvent);

	var iKC = oEvent.which;
	// in FireFox keypress is fired for all keys, in other browsers only for characters. But in IE also for ESC

	if( iKC > 0 && iKC !== jQuery.sap.KeyCodes.ESCAPE ){
		// if text is edited -> switch to action mode
		var $FocusDomRef = jQuery(this.getFocusDomRef());
		if ($FocusDomRef.data("sap.InNavArea")) {
			$FocusDomRef.data("sap.InNavArea", false);
		}
	}

};

/*
 * sets the old value after escape
 * if in edit mode -> switch back to navigation mode
 * @private
 */
sap.ui.commons.TextField.prototype._doOnEscape = function(oEvent) {

	if (this._bEsc) {
		// restore old value in case of escape key (not possible in onsapescape in Firefox)
		// in Edit mode switch back to navigation mode
		var oInput = this.getInputDomRef();
		if(oInput) {
			if (oInput.value !== this._sValue) {
				jQuery(oInput).val(this._sValue);
			}
			var $FocusDomRef = jQuery(this.getFocusDomRef());
			if($FocusDomRef.data("sap.InNavArea") === false) { // check for false to avoid undefined
				$FocusDomRef.data("sap.InNavArea", true);
			}
		}
		this._bEsc = undefined;
		this._sValue = undefined;
	}

};

/**
 * Event handler for keyup.
 * fire the liveChange event
 * @protected
 */
sap.ui.commons.TextField.prototype.onkeyup = function(oEvent) {

	if(oEvent.keyCode == jQuery.sap.KeyCodes.F2){
		// toggle action mode
		var $FocusDomRef = jQuery(this.getFocusDomRef());
		if ($FocusDomRef.data("sap.InNavArea")) {
			$FocusDomRef.data("sap.InNavArea", false);
		} else if($FocusDomRef.data("sap.InNavArea") === false) { // check for false to avoid undefined
			$FocusDomRef.data("sap.InNavArea", true);
		}
	}else if(oEvent.keyCode != jQuery.sap.KeyCodes.TAB && oEvent.keyCode != jQuery.sap.KeyCodes.ENTER
	          && oEvent.keyCode != jQuery.sap.KeyCodes.F4){
		this._fireLiveChange(oEvent);
	}

};

/**
 * Event handler for paste.
 * fire the liveChange event
 * @protected
 */
sap.ui.commons.TextField.prototype.onpaste = function(oEvent) {

	// as on the paste event there is still the value before paste in the input field
	// wait some time (until paste is finished) and check it for change
	var that = this;
	setTimeout(function(){
		that._fireLiveChange(oEvent);
	}, 10);

};

/**
 * Handler for live change
 * reads the current content and fires the liveChange event
 * @private
 */
sap.ui.commons.TextField.prototype._fireLiveChange = function(oEvent) {

	if (this.getEnabled() && this.getEditable()) {
		var sLiveValue = jQuery(this.getInputDomRef()).val();
		this.fireLiveChange({liveValue:sLiveValue});
	}

};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the ValueState
 *
 * @param {sap.ui.core.ValueState} oValueState
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setValueState = function(oValueState) {

	var oldValueState = this.getValueState();
	this.setProperty("valueState", oValueState, true); // do not render again
	oValueState = this.getValueState();

	if( oldValueState == oValueState ){
		return this;
	}

	if(!this.getDomRef()){
		//not already rendered.
		return this;
	}

	if(this.getRenderer().setValueState) {
		this.getRenderer().setValueState(this, oldValueState, oValueState);
	}

	if(this.delayedCallId) {
		jQuery.sap.clearDelayedCall(this.delayedCallId);
		this.delayedCallId = null;
	}
	if(sap.ui.core.ValueState.Success == oValueState) {
		this.delayedCallId = jQuery.sap.delayedCall(3000, this, "removeValidVisualization");
	}

	return this;
};

sap.ui.commons.TextField.prototype.removeValidVisualization = function() {
	if(this.getRenderer().removeValidVisualization){
		this.getRenderer().removeValidVisualization(this);
	}
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the editable state
 *
 * @param bEditable
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setEditable = function(bEditable) {

	var bOldEditable = this.getEditable();
	this.setProperty('editable', bEditable, true); // No re-rendering
	bEditable = this.getEditable();

	if (bOldEditable != bEditable){
		if (this.getDomRef() && this.getRenderer().setEditable){
			this.getRenderer().setEditable(this, bEditable);
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the enabled state
 *
 * @param bEnabled
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setEnabled = function(bEnabled) {

	var bOldEnabled = this.getEnabled();
	this.setProperty('enabled', bEnabled, true); // No re-rendering
	bEnabled = this.getEnabled();

	if (bOldEnabled != bEnabled) {
		if (this.getDomRef() && this.getRenderer().setEnabled){
			this.getRenderer().setEnabled(this, bEnabled);
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the Required-State
 *
 * @param bRequired:
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setRequired = function(bRequired) {

	var bOldRequired = this.getRequired();
	this.setProperty('required', bRequired, true); // No re-rendering
	bRequired = this.getRequired();

	if (bOldRequired != bRequired){
		if (this.getDomRef()){
			// If already rendered, adapt rendered control without complete re-rendering
			if(this.getRenderer().setRequired) {
				this.getRenderer().setRequired(this, bRequired);
			}
		}

		// fire internal event to inform Label about the change
		this.fireEvent("requiredChanged", {required: bRequired});
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the Design
 *
 * @param sDesign:
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setDesign = function(sDesign) {

	var sOldDesign = this.getDesign();
	this.setProperty('design', sDesign, true); // No re-rendering
	sDesign = this.getDesign();

	if (sOldDesign != sDesign){
		if (this.getDomRef()){
			// If already rendered, adapt rendered control without complete re-rendering
			if(this.getRenderer().setDesign) {
				this.getRenderer().setDesign(this, sDesign);
			}
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the Value
 *
 * @param sValue:
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setValue = function(sValue) {
	var newValue = sValue;
	if( newValue && newValue.length > this.getMaxLength() && this.getMaxLength() > 0){
		newValue = newValue.substring(0,this.getMaxLength());
	}

	this.setProperty("value", newValue, true); // no re-rendering!
	newValue = this.getValue(); // to use validated value
	var oInput = this.getInputDomRef();
	if(oInput && oInput.value !== newValue) {
		if (!sap.ui.Device.support.input.placeholder) {
			if (newValue) {
				this.$().removeClass('sapUiTfPlace');
				oInput.value = newValue;
			} else if (document.activeElement !== oInput){
				this.$().addClass('sapUiTfPlace');
				var sPlaceholder = this.getPlaceholder();
				if (this.getRenderer().convertPlaceholder) {
					sPlaceholder = this.getRenderer().convertPlaceholder(this);
				}
				oInput.value = sPlaceholder;
			} else {
				oInput.value = "";
			}
		}else {
			oInput.value =  newValue;
		}
	}

	return this;
};

/* Overwrite of generated function - no new JS-doc.
 * Property setter for the Tooltip
 *
 * @param oTooltip:
 * @return {sap.ui.commons.TextField} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextField.prototype.setTooltip = function(oTooltip) {
	this._refreshTooltipBaseDelegate(oTooltip);
	this.setAggregation("tooltip", oTooltip, true);
	
	if(this.getInputDomRef()){
		var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(this, this.getTooltip_AsString());
		jQuery(this.getInputDomRef()).attr("title", sTooltip || "");
	}

	return this;
};

/**
 * Method for accessing the DOM Ref of the input element.
 *
 * @protected
 */
sap.ui.commons.TextField.prototype.getInputDomRef = function(){

	if (!this._getRenderOuter()) {
		return this.getDomRef() || null;
	} else {
		return this.getDomRef("input") || null;
	}

};

/**
 * Applies the focus info
 * overwrite of the Element method because in IE8 on rerendering focus is lost
 * @param {object} oFocusInfo
 * @protected
 */
sap.ui.commons.TextField.prototype.applyFocusInfo = function (oFocusInfo) {

	if (!!sap.ui.Device.browser.internet_explorer && sap.ui.Device.browser.version == 8) {
		var oPos = this.getValue().length;
		var that = this;
		setTimeout(function(){
			that.focus();
			jQuery(that.getFocusDomRef()).cursorPos(oPos);
		}, 0);
	}else{
		this.focus();
	}
	return this;
};

/*
 * Implementation of the getLiveValue method
 */
sap.ui.commons.TextField.prototype.getLiveValue = function() {
	var oIDomRef = this.getInputDomRef();
	if (oIDomRef) {
		return jQuery(oIDomRef).val();
	} else {
		return this.getValue();
	}
};

sap.ui.commons.TextField.prototype.ondrop = function(oEvent) {

	this.onpaste(oEvent);

};

/*
 * check if outer content is rendered
 * @private
 */
sap.ui.commons.TextField.prototype._getRenderOuter = function () {

	if (this.bRenderOuter == undefined) {
		var oRenderer = this.getRenderer();
		if (oRenderer.renderOuterAttributes || oRenderer.renderOuterContentBefore || oRenderer.renderOuterContent) {
			this.bRenderOuter = true;
		} else{
			this.bRenderOuter = false;
		}
	}
	return this.bRenderOuter;

};

/*
 * Overwrites default implementation
 * the label must point to the input tag
 * @public
 */
sap.ui.commons.TextField.prototype.getIdForLabel = function () {

	if (!this._getRenderOuter()) {
		return this.getId();
	} else {
		return this.getId()+'-input';
	}

};

/*
 * Overwrites default implementation
 * the focus is always on the input field
 * @public
 */
sap.ui.commons.TextField.prototype.getFocusDomRef = function() {

	return this.getInputDomRef();

};

}; // end of sap/ui/commons/TextField.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextView') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TextView.
jQuery.sap.declare("sap.ui.commons.TextView");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TextView.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getHelpId helpId} : string (default: '')</li>
 * <li>{@link #getAccessibleRole accessibleRole} : sap.ui.core.AccessibleRole (default: sap.ui.core.AccessibleRole.Document)</li>
 * <li>{@link #getDesign design} : sap.ui.commons.TextViewDesign (default: sap.ui.commons.TextViewDesign.Standard)</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: true)</li>
 * <li>{@link #getSemanticColor semanticColor} : sap.ui.commons.TextViewColor (default: sap.ui.commons.TextViewColor.Default)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Is used to display some continous text. The control can inherit the text direction from its parent control.
 * @extends sap.ui.core.Control
 * @implements sap.ui.commons.ToolbarItem
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.TextView
 */
sap.ui.core.Control.extend("sap.ui.commons.TextView", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"text" : {type : "string", group : "", defaultValue : '', bindable : "bindable"},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"helpId" : {type : "string", group : "Behavior", defaultValue : ''},
		"accessibleRole" : {type : "sap.ui.core.AccessibleRole", group : "Accessibility", defaultValue : sap.ui.core.AccessibleRole.Document},
		"design" : {type : "sap.ui.commons.TextViewDesign", group : "Data", defaultValue : sap.ui.commons.TextViewDesign.Standard},
		"wrapping" : {type : "boolean", group : "Appearance", defaultValue : true},
		"semanticColor" : {type : "sap.ui.commons.TextViewColor", group : "Appearance", defaultValue : sap.ui.commons.TextViewColor.Default},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.TextView with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.TextView.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text to be displayed.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.TextView#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setText
 * @function
 */


/**
 * Binder for property <code>text</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#bindText
 * @function
 */

/**
 * Unbinder for property <code>text</code>.
 *
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#unbindText
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Available options are LTR and RTL. Alternatively, the control can inherit the text direction from its parent control.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.ui.commons.TextView#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setTextDirection
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible text views are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.TextView#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * When the control is disabled, it is greyed out and no longer focusable.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.TextView#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setEnabled
 * @function
 */


/**
 * Getter for property <code>helpId</code>.
 * Unique identifier used for help services.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>helpId</code>
 * @public
 * @name sap.ui.commons.TextView#getHelpId
 * @function
 */

/**
 * Setter for property <code>helpId</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sHelpId  new value for property <code>helpId</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setHelpId
 * @function
 */


/**
 * Getter for property <code>accessibleRole</code>.
 * The ARIA role for the control.
 *
 * Default value is <code>Document</code>
 *
 * @return {sap.ui.core.AccessibleRole} the value of property <code>accessibleRole</code>
 * @public
 * @name sap.ui.commons.TextView#getAccessibleRole
 * @function
 */

/**
 * Setter for property <code>accessibleRole</code>.
 *
 * Default value is <code>Document</code> 
 *
 * @param {sap.ui.core.AccessibleRole} oAccessibleRole  new value for property <code>accessibleRole</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setAccessibleRole
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Defines the visual appearance of the control.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.commons.TextViewDesign} the value of property <code>design</code>
 * @public
 * @name sap.ui.commons.TextView#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.commons.TextViewDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setDesign
 * @function
 */


/**
 * Getter for property <code>wrapping</code>.
 * Disabled automatic wrapping of the text.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * @name sap.ui.commons.TextView#getWrapping
 * @function
 */

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setWrapping
 * @function
 */


/**
 * Getter for property <code>semanticColor</code>.
 * Semantic color of the text View
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.ui.commons.TextViewColor} the value of property <code>semanticColor</code>
 * @public
 * @name sap.ui.commons.TextView#getSemanticColor
 * @function
 */

/**
 * Setter for property <code>semanticColor</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.ui.commons.TextViewColor} oSemanticColor  new value for property <code>semanticColor</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setSemanticColor
 * @function
 */


/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.ui.commons.TextView#getTextAlign
 * @function
 */

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setTextAlign
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of the TextView
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.TextView#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#setWidth
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.TextView#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.TextView#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.TextView#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.TextView#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.TextView} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextView#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.TextView#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.TextView#removeAllAriaLabelledBy
 * @function
 */

	
// Start of sap\ui\commons\TextView.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/*
 * @see JSDoc generated by SAPUI5 Control API generator
 */
sap.ui.commons.TextView.prototype.setText = function(sText) {
	this.setProperty("text", sText, true); // no re-rendering!
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		var aLines = this.getText().split("\n");
		for (var i = 0; i < aLines.length; i++) {
			aLines[i] = jQuery.sap.encodeHTML(aLines[i]);
		}
		sText = aLines.join("<br>");
		oDomRef.innerHTML = sText;
		// when no tooltip is applied use the text as tooltip
		if (!this.getTooltip_AsString() && sText) {
			oDomRef.title = this.getText(); // IE8 doesn't like HTML encoded attribute values
		}
	}
	if (this._oPopup) {
		this._oPopup.destroy();
		delete this._oPopup;
	}
	return this;
};

sap.ui.commons.TextView.prototype.exit = function() {
	if (this._oPopup) {
		this._oPopup.destroy();
		delete this._oPopup;
	}
};
/*
sap.ui.commons.TextView.prototype.onBeforeRendering = function() {
	if (this._oPopup) {
		this._oPopup.destroy();
		delete this._oPopup;
	}
};

sap.ui.commons.TextView.prototype.onmouseover = function(oEvent) {
	var oRef = this.getDomRef();
	if (Math.abs(oRef.clientWidth - oRef.scrollWidth) < 2){
		return;
	}

	if (!this._oPopup) {
		 this._oPopup = new sap.ui.core.Popup();
		 this._oPopup.setDurations(0, 0); // no animations
		 this._oPopup.setContent(this._createInfo());
		 this._oPopup.attachOpened(this._handleOpened, this);
	}

	var eDock = sap.ui.core.Popup.Dock;
	this._oPopup.open(0, eDock.BeginTop, eDock.BeginTop, this, "0 1", "fit", true);
};

sap.ui.commons.TextView.prototype._createInfo = function(){
	var $Me   = jQuery(this.getDomRef());
	var sText = $Me.html();
	var sHtml = "<span id='" + this.getId()+'-info' + "' class='sapUiTvInfo " + $Me.attr("class") + "'>" + sText + "</span>";

	var oDomRef = jQuery(sHtml).appendTo(sap.ui.getCore().getStaticAreaRef());
	var that = this;
	jQuery(oDomRef).mouseout([this.getId()], function(oEvent){
		that._oPopup.close();
	});
	return oDomRef;
};

sap.ui.commons.TextView.prototype._handleOpened = function(){
	var that = this;
	jQuery.sap.byId(this.getId()+'-info').mouseout([this.getId()], function(oEvent){
		that._oPopup.close();
	});
};*/
}; // end of sap/ui/commons/TextView.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Title') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Title.
jQuery.sap.declare("sap.ui.commons.Title");

jQuery.sap.require('sap.ui.core.Title'); // unlisted dependency retained



/**
 * Constructor for a new Title.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Title#constructor sap.ui.core.Title}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents a title element that can be used for aggregation with other controls
 * @extends sap.ui.core.Title
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.core library. Please use this one.
 * @name sap.ui.commons.Title
 */
sap.ui.core.Title.extend("sap.ui.commons.Title", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.Title with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Title.extend
 * @function
 */


// Start of sap\ui\commons\Title.js
/* Overwrite to have right "since" in there */

/**
* Getter for property <code>level</code>.
* Defines the level of the title. If set to auto the level of the title is chosen by the control rendering the title.
*
* Currently not all controls using the Title.control supporting this property.
*
* Default value is <code>Auto</code>
*
* @return {sap.ui.commons.TitleLevel} the value of property <code>level</code>
* @public
* @since 1.9.1
* @name sap.ui.commons.Title#getLevel
* @function
*/
/**
* Setter for property <code>level</code>.
*
* Default value is <code>Auto</code>
*
* @param {sap.ui.commons.TitleLevel} oLevel new value for property <code>level</code>
* @return {sap.ui.commons.Title} <code>this</code> to allow method chaining
* @public
* @since 1.9.1
* @name sap.ui.commons.Title#setLevel
* @function
*/ 
}; // end of sap/ui/commons/Title.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ToggleButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ToggleButton.
jQuery.sap.declare("sap.ui.commons.ToggleButton");




/**
 * Constructor for a new ToggleButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPressed pressed} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.Button#constructor sap.ui.commons.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The ToggleButton Control is a Button that can be toggled between pressed and normal state
 * @extends sap.ui.commons.Button
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ToggleButton
 */
sap.ui.commons.Button.extend("sap.ui.commons.ToggleButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"pressed" : {type : "boolean", group : "Data", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ToggleButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ToggleButton.extend
 * @function
 */


/**
 * Getter for property <code>pressed</code>.
 * The property is “true” when the control is toggled. The default state of this property is "false".
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pressed</code>
 * @public
 * @name sap.ui.commons.ToggleButton#getPressed
 * @function
 */

/**
 * Setter for property <code>pressed</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPressed  new value for property <code>pressed</code>
 * @return {sap.ui.commons.ToggleButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ToggleButton#setPressed
 * @function
 */


// Start of sap\ui\commons\ToggleButton.js
/**
 * Function is called when ToggleButton is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.ToggleButton.prototype.onclick = function(oEvent) {
	if (this.getEnabled()){
		this.setPressed(!this.getPressed());
		if (this.$().is(":visible")){
			this.firePress({pressed: this.getPressed()});
		}
	}
	oEvent.preventDefault();
	oEvent.stopPropagation();
};


sap.ui.commons.ToggleButton.prototype.setPressed = function(bPressed) {
	if (bPressed != this.getProperty("pressed")) {
		this.setProperty("pressed", bPressed, true);
		if (!this.getPressed()){
			this.getRenderer().ondeactivePressed(this);
		} else {
			this.getRenderer().onactivePressed(this);
		}
		this.getRenderer().updateImage(this);
	}
	return this;
};


sap.ui.commons.ToggleButton.prototype.onAfterRendering = function() {
	if (!this.getPressed()){
		this.getRenderer().ondeactivePressed(this);
	} else {
		this.getRenderer().onactivePressed(this);
	}
};

}; // end of sap/ui/commons/ToggleButton.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Toolbar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Toolbar.
jQuery.sap.declare("sap.ui.commons.Toolbar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Toolbar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getDesign design} : sap.ui.commons.ToolbarDesign (default: sap.ui.commons.ToolbarDesign.Flat)</li>
 * <li>{@link #getStandalone standalone} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.commons.ToolbarItem[]</li>
 * <li>{@link #getRightItems rightItems} : sap.ui.commons.ToolbarItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A horizontal row of items where in many cases the single toolbar items are buttons containing icons. Note that all controls with the
 * sap.ui.commons.ToolbarItem interface can be used as item: Button, ComboBox, TextField.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.Toolbar
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Toolbar
 */
sap.ui.core.Control.extend("sap.ui.commons.Toolbar", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.core.Toolbar"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"design" : {type : "sap.ui.commons.ToolbarDesign", group : "Appearance", defaultValue : sap.ui.commons.ToolbarDesign.Flat},
		"standalone" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.commons.ToolbarItem", multiple : true, singularName : "item"}, 
    	"rightItems" : {type : "sap.ui.commons.ToolbarItem", multiple : true, singularName : "rightItem"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Toolbar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Toolbar.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.Toolbar#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * When there is not enough space for the toolbar to display all items, the rightmost items are overflowing into a drop-down menu.
 * 
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Toolbar#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#setWidth
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Design settings are theme-dependent.
 *
 * Default value is <code>Flat</code>
 *
 * @return {sap.ui.commons.ToolbarDesign} the value of property <code>design</code>
 * @public
 * @name sap.ui.commons.Toolbar#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Flat</code> 
 *
 * @param {sap.ui.commons.ToolbarDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#setDesign
 * @function
 */


/**
 * Getter for property <code>standalone</code>.
 * Per default, tool bars have the stand alone status.
 * Alternatively, they can be nested in other controls and then inherit the design from their parent control.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>standalone</code>
 * @public
 * @name sap.ui.commons.Toolbar#getStandalone
 * @function
 */

/**
 * Setter for property <code>standalone</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bStandalone  new value for property <code>standalone</code>
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#setStandalone
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregating the tool bar items.
 * 
 * <strong>Note</strong>: this is the default aggregation for Toolbar.
 * @return {sap.ui.commons.ToolbarItem[]}
 * @public
 * @name sap.ui.commons.Toolbar#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.commons.ToolbarItem} vItem the item to remove or its index or id
 * @return {sap.ui.commons.ToolbarItem} the removed item or null
 * @public
 * @name sap.ui.commons.Toolbar#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.ToolbarItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Toolbar#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.ToolbarItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Toolbar#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#destroyItems
 * @function
 */


/**
 * Getter for aggregation <code>rightItems</code>.<br/>
 * Aggregating the right side tool bar items.
 * 
 * @return {sap.ui.commons.ToolbarItem[]}
 * @public
 * @name sap.ui.commons.Toolbar#getRightItems
 * @function
 */


/**
 * Inserts a rightItem into the aggregation named <code>rightItems</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *          oRightItem the rightItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the rightItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the rightItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the rightItem is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#insertRightItem
 * @function
 */

/**
 * Adds some rightItem <code>oRightItem</code> 
 * to the aggregation named <code>rightItems</code>.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oRightItem the rightItem to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#addRightItem
 * @function
 */

/**
 * Removes an rightItem from the aggregation named <code>rightItems</code>.
 *
 * @param {int | string | sap.ui.commons.ToolbarItem} vRightItem the rightItem to remove or its index or id
 * @return {sap.ui.commons.ToolbarItem} the removed rightItem or null
 * @public
 * @name sap.ui.commons.Toolbar#removeRightItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>rightItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.ToolbarItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Toolbar#removeAllRightItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.ToolbarItem</code> in the aggregation named <code>rightItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.ToolbarItem}
 *            oRightItem the rightItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Toolbar#indexOfRightItem
 * @function
 */
	

/**
 * Destroys all the rightItems in the aggregation 
 * named <code>rightItems</code>.
 * @return {sap.ui.commons.Toolbar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Toolbar#destroyRightItems
 * @function
 */


// Start of sap\ui\commons\Toolbar.js
jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * Initialize this control.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.init = function() {
	this.bOpen = false; // the overflow popup state

	// Buffer for performance, updated after rendering
	this.oDomRef = null;
	this.oInnerRef = null;
	this.oOverflowDomRef = null;
	this.bHasRightItems = false;

	this.bRtl = sap.ui.getCore().getConfiguration().getRTL();

	// for resize detection
	this._detectVisibleItemCountChangeTimer = null;

	// delegate function to recognize if item is (re)rendered
	var oThat = this;
	this.oItemDelegate = {
			onAfterRendering: jQuery.proxy(oThat._itemRendered, oThat)
	};
};

sap.ui.commons.Toolbar.prototype.onBeforeRendering = function() {
	sap.ui.commons.ToolbarRenderer.emptyOverflowPopup(this); // if rerendering happens while there are still items in the popup (and it is open), the items will be duplicated
	this.cleanup();

	this.$("mn").unbind("keyup", this._handleKeyUp);

	this.bFirstTime = true;
};

/**
 * Used for after-rendering initialization.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.onAfterRendering = function() {

	this.oDomRef = this.getDomRef();
	this.oInnerRef = this.oDomRef.firstChild.firstChild;
	jQuery(this.oInnerRef).css("visibility", "visible");
	var sOverflowId = this.getId() + "-mn";
	this.oOverflowDomRef = jQuery.sap.domById(sOverflowId);

	// Initialize the ItemNavigation if required
	if (!this.oItemNavigation) {
		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
		this.addDelegate(this.oItemNavigation);
	}

	// cannot use sapspace because this triggers onkeydown and sets the focus to the first button in the overflow popup
	// and the subsequent keyup will make the browser fire a click event on that button
	this.$("mn").bind("keyup", jQuery.proxy(this._handleKeyUp, this));

	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.oDomRef, jQuery.proxy(this.ontoolbarresize, this));
	var iRightItemsLength =  this.getRightItems().length;
	this.bHasRightItems = iRightItemsLength > 0;
	if (this.bHasRightItems) {
		this.sRightSideResizeListenerId = sap.ui.core.ResizeHandler.register(this.oDomRef.lastChild, jQuery.proxy(this.onrightsideresize, this));
		// Re-initialize the ItemNavigation with changed DomRefs after rendering and set the overflow icon properly
		this.updateAfterResize(true);
		this._observeVisibleItemCountChange(40);
	} else {
		// Re-initialize the ItemNavigation with changed DomRefs after rendering and set the overflow icon properly
		this.updateAfterResize(true);
		this._observeVisibleItemCountChange(350);
	}
};


/**
 * Handle the space event on the menu open button.
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
sap.ui.commons.Toolbar.prototype._handleKeyUp = function (oEvent) {
	if ((oEvent.keyCode == jQuery.sap.KeyCodes.SPACE)
			&& (oEvent.target.id === this.getId() + "-mn")) {
		this.handleOverflowButtonTriggered();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};

/**
 * Does all the cleanup when the Toolbar is to be destroyed.
 * Called from the element's destroy() method.
 * @private
 */
sap.ui.commons.Toolbar.prototype.exit = function () {

	this.cleanup();

	// Remove the item navigation delegate
	if (this.oItemNavigation) {
		this.removeDelegate(this.oItemNavigation);
		this.oItemNavigation.destroy();
		delete this.oItemNavigation;
	}

	this.oItemDelegate = undefined;
	jQuery(window).unbind("resize", this.onwindowresize);

	// No super.exit() to call
};


/**
 * Called after rendering and after each actual change of visible items
 * in order to re-initialize item navigation
 * with the currently visible items. Update the visibility of the overflow button.
 *
 * @param bClearTabStops Whether the tab indices of all toolbar items should be set to -1
 * @private
 */
sap.ui.commons.Toolbar.prototype.updateAfterResize = function(bClearTabStops) {
	var visibleItemInfo = this.getVisibleItemInfo();

	// store to detect next change of visible items caused by resizing
	this._oLastVisibleItem = visibleItemInfo.oLastVisibleItem;
	this._oFirstInvisibleItem = visibleItemInfo.oFirstInvisibleItem;
	this._iLastVisibleItemTop = visibleItemInfo.iLastVisibleItemTop;

	// adapt the overflow and ItemNavigation
	this.updateItemNavigation(visibleItemInfo.iAllItemsBeforeBreak, bClearTabStops);
	this.updateOverflowIcon(visibleItemInfo.bOverflow);

	// no additional update needed
	if (this.sUpdateItemNavigationTimer) {
		jQuery.sap.clearDelayedCall(this.sUpdateItemNavigationTimer);
		this.sUpdateItemNavigationTimer = null;
	}
};


/**
 * Compares the current element positions with the last recorded ones to detect a change of visible items
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype._detectVisibleItemCountChange = function() {
	// Stop the periodic overflow checker
	if (!this.getDomRef()) {
		if (this._detectVisibleItemCountChangeTimer) {
			jQuery.sap.clearDelayedCall(this._detectVisibleItemCountChangeTimer);
			this._detectVisibleItemCountChangeTimer = null;
		}
		return;
	}

	if (this._oLastVisibleItem && this._oFirstInvisibleItem) { // case 1: overflow was visible
		var lastLeft = this._oLastVisibleItem.offsetLeft;
		var firstLeft = this._oFirstInvisibleItem.offsetLeft;
		var lastTop = this._oLastVisibleItem.offsetTop;

		var bInvisibleHasMovedUp = this.bRtl ? (firstLeft < lastLeft) : (firstLeft > lastLeft);

		if ((lastTop != this._iLastVisibleItemTop)  // last visible item has moved into second line => less visible items
				|| (!this.bOpen && bInvisibleHasMovedUp)) { // first invisible item has moved to the right of the previously last visible one
			// (and there is no reason for it to move to the right when it is still in 2nd row or later
			// except for if the popup has just opened) so it is visible now
			// => more visible items
			if (this.bOpen) {
				this.closePopup(true);
			}
			this.updateAfterResize(false);
		}

	} else if (this._oLastVisibleItem && !this._oFirstInvisibleItem) { // case 2: overflow was NOT visible
		if (this._oLastVisibleItem.offsetTop != this._iLastVisibleItemTop) { // last visible item has moved into second line => less visible items
			// popup cannot be open, as there was no overflow, so there is no need to close it
			this.updateAfterResize(false);
		}

	} else if (!this._oLastVisibleItem && !this._oFirstInvisibleItem) { // case 3: no items at all
		// nothing to do

	} else {
		// should never happen, as there is always one visible item
		// don't log, as this is called several times per second...   jQuery.sap.log.warning("Toolbar " + this.getId() + ": illegal state");
	}

	this._observeVisibleItemCountChange(350);

	if (this.bFirstTime && this.bHasRightItems) {
		this.onrightsideresize();
		this.bFirstTime = false;
	}
};

sap.ui.commons.Toolbar.prototype._observeVisibleItemCountChange = function(i) {
	this._detectVisibleItemCountChangeTimer = jQuery.sap.delayedCall(i, this, "_detectVisibleItemCountChange");
};


/**
 * Initializes the ItemNavigation delegate with the visible items in the toolbar, so navigation
 * only happens among those. Optionally clears all tab stops, this is required to make the Tab key
 * navigate out of the Toolbar.
 *
 * ItemNavigation handles Tabindexes. But if TabStop is on now invisible item set it to last
 * visible one.
 *
 * @param iVisibleItems The number of currently visible toolbar items
 * @param bClearTabStops Whether the tab indices of all toolbar items should be set to -1
 * @private
 */
sap.ui.commons.Toolbar.prototype.updateItemNavigation = function(iAllItemsBeforeBreak, bClearTabStops) {
	this.oItemNavigation.setRootDomRef(this.oDomRef);
	var aItemDomRefs = [];

	var aLeftItems = this.getItems();
	for (var i = 0; i < iAllItemsBeforeBreak; i++) {
		var oDomRef = aLeftItems[i].getFocusDomRef();
		if (oDomRef) { // separators return null here
			aItemDomRefs.push(oDomRef);
		}
	}
	aItemDomRefs.push(this.oOverflowDomRef);
	
	this.iLeftItemDomRefCount = aItemDomRefs.length;
	
	var aRightItems = this.getRightItems();
	for (var i = 0; i < aRightItems.length; i++) {
		var oDomRef = aRightItems[i].getFocusDomRef();
		if (oDomRef) { // separators return null here
			aItemDomRefs.push(oDomRef);
		}
	}

	this.oItemNavigation.setItemDomRefs(aItemDomRefs);
	this.iItemDomRefCount = aItemDomRefs.length;

	// If called directly after rendering, also the remaining tabstops need to be cleared
	if (bClearTabStops) {
		for (var i = iAllItemsBeforeBreak; i < aLeftItems.length; i++) {
			var oDomRef = aLeftItems[i].getFocusDomRef();
			var $Item = jQuery(oDomRef);
			if (oDomRef && ($Item.attr("tabindex") == "0")) { // set tabindex to -1 only if already set to 0
				$Item.attr("tabIndex", -1);
			}
		}

		for (var i = 0; i < aRightItems.length; i++) {
			var oDomRef = aRightItems[i].getFocusDomRef();
			var $Item = jQuery(oDomRef);
			if (oDomRef && ($Item.attr("tabindex") == "0")) { // set tabindex to -1 only if already set to 0
				$Item.attr("tabIndex", -1);
			}
		}
	}
};


/**
 * Returns the number of toolbar items that are currently visible.
 * If the toolbar has not been rendered yet, value "0" is returned.
 * Requirement here is that every control has exactly one root HTML element.
 *
 * @return The number of toolbar items that are currently visible
 * @private
 */
sap.ui.commons.Toolbar.prototype.getVisibleItemInfo = function() {
	// Compute actual number of items currently hidden due to overflow
	var iVisibleItems = 0;
	if (this.oInnerRef) {
		var aElements = this.oInnerRef.childNodes;

		this.bRtl = sap.ui.getCore().getConfiguration().getRTL();

		/* Check for each item how far it is from the parent's left border:
		 * As long as the items are in the same row, this offset increases, but
		 * the first item with lower offset is the first item in the second row.
		 */
		var sOverflowMenuId = this.getId() + "-mn";
		var bLineBreak,
			oElement,
			currentOffsetWidth = 0,
			currentOffsetLeft,
			lastOffsetWidth,
			lastOffsetLeft = 0,
			oLastVisibleItem = null,
			oFirstInvisibleItem = null,
			iLastVisibleItemTop,
			iAllItemsBeforeBreak = 0,
			bOverflow = false; // default value is used when there are no items

		for (var i = 1,count = aElements.length; i < count; i++) {
			oElement = aElements[i];
			currentOffsetLeft = oElement.offsetLeft;

			// find out whether the current element is a line *below* the last element
			if (i == 1) {
				lastOffsetWidth = aElements[0].offsetWidth;
				lastOffsetLeft = aElements[0].offsetLeft;
			}
			if (this.bRtl) {
				currentOffsetWidth = oElement.offsetWidth;
				bLineBreak = (currentOffsetLeft + currentOffsetWidth >= lastOffsetLeft + lastOffsetWidth);
			} else {
				bLineBreak = (currentOffsetLeft <= lastOffsetLeft) && (oElement.offsetTop > aElements[0].offsetTop);
			}

			if (bLineBreak) {	

				// There was a line break, current i is the number of items that were in the first row
				iVisibleItems = i;
				
				// remember DomRefs and top distance of last visible item
				oLastVisibleItem = aElements[i-1];
				oFirstInvisibleItem = oElement;
				iLastVisibleItemTop = oLastVisibleItem.offsetTop;
				bOverflow = true;
				break;

			} else if (oElement.id == sOverflowMenuId) {
				// This is the overflow button, there was no line break
				iVisibleItems = i;
				// Therefore, iVisibleItems should be the total number of children minus 1 (the overflow menu)
				jQuery.sap.assert(iVisibleItems === (count-1), "visible items (" + iVisibleItems + ") must be one less than the items count (" + count + ")");
				oLastVisibleItem = aElements[i-1];
				oFirstInvisibleItem = null;
				iLastVisibleItemTop = oLastVisibleItem.offsetTop;
				bOverflow = false;
				break;

			} else {
				// Regular toolbar item, to the right of the last one, so just proceed
				lastOffsetLeft = currentOffsetLeft;
				lastOffsetWidth = currentOffsetWidth;
			}
		}

		// Get a real number of the all items that are not in the overflow incl.visible and hidden items
		var aLeftItems = this.getItems();
		var iLeftItemCount = aLeftItems.length;
		for (var i = 0; i < iLeftItemCount; i++) {
			if (aLeftItems[i].getDomRef() === oLastVisibleItem) {
				iAllItemsBeforeBreak = i + 1 ;
				break;
			}
		}
	}
	
	return {
		"count":iVisibleItems,
		"oLastVisibleItem": oLastVisibleItem,
		"oFirstInvisibleItem": oFirstInvisibleItem,
		"iLastVisibleItemTop": iLastVisibleItemTop,
		"iAllItemsBeforeBreak": iAllItemsBeforeBreak,
		"bOverflow": bOverflow
	};
};


/**
 * Modifies the visibility of the overflow button
 *
 * @param bOverflow whether the overflow button should be displayed
 * @private
 */
sap.ui.commons.Toolbar.prototype.updateOverflowIcon = function(bOverflow) {
	// set visibility of overflow button
	this.oOverflowDomRef.style.display = bOverflow || this.bOpen ? "block" : "none";
};


/**
 * Handle the click event on the menu open button.
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
sap.ui.commons.Toolbar.prototype.onclick = function(oEvent) {
	if (oEvent.target.id === this.getId() + "-mn") {
		this.handleOverflowButtonTriggered();
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}
};


/**
 * Handle the arrow down event on the menu open button. This opens the popup, if closed.
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
sap.ui.commons.Toolbar.prototype.onsapdown = function(oEvent) {
	if (oEvent.target.id === this.getId() + "-mn") {
		if(!this.bOpen) {
			this.handleOverflowButtonTriggered();
			oEvent.preventDefault();
			// Stop other events like sapnext to be processed afterwards
			oEvent.stopImmediatePropagation();
		}
	}
};


/**
 * Handle the arrow up event on the menu open button. This closes the popup, if open.
 *
 * @param {jQuery.EventObject} oEvent The forwarded browser event
 * @private
 */
sap.ui.commons.Toolbar.prototype.onsapup = function(oEvent) {
	if (oEvent.target.id === this.getId() + "-mn") {
		if(this.bOpen) {
			this.handleOverflowButtonTriggered();
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}
	}
};


/**
 * Initializes (if required) and opens/closes the overflow popup.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.handleOverflowButtonTriggered = function() {
	// Initialize the popup
	if (!this.bPopupInitialized) {
		this.popup = new sap.ui.core.Popup(new sap.ui.commons.ToolbarOverflowPopup(this), false, true, true);

		this.bPopupInitialized = true;
	}

	// Open/close the overflow popup
	if(this.bOpen) {
		this.closePopup(false);
	} else {
		this.openPopup();
	}
};



/* POPUP functionality */

/**
 * Opens the overflow popup.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.openPopup = function() {
	this.getRenderer().setActive(this);

	sap.ui.commons.ToolbarRenderer.fillOverflowPopup(this);
	this.popup.attachEvent("opened", this.handlePopupOpened, this);
	this.popup.attachEvent("closed", this.handlePopupClosed, this);

	// Register for window resize event during the popup is opened, so that the popup will be closed if the window is resized.
	jQuery(window).bind("resize", jQuery.proxy(this.onwindowresize, this));

	//Open popup with a little delay in IE8 to avoid focus calls when the popup is not yet opened
	var iDuration = !!sap.ui.Device.browser.internet_explorer && (sap.ui.Device.browser.version == 7 || sap.ui.Device.browser.version == 8) ? 1 : 0;
	this.popup.open(iDuration, sap.ui.core.Popup.Dock.EndTop, sap.ui.core.Popup.Dock.EndBottom, this.$("mn"));
	this.bOpen = true;
};

sap.ui.commons.Toolbar.prototype.handlePopupOpened = function() {
	var aAllItems = this.getItems();
	var iItemCount = aAllItems.length;
	var iAllItemsBeforeBreak = this.getVisibleItemInfo().iAllItemsBeforeBreak;

	var aNavigableItems = [];
	for (var i = iAllItemsBeforeBreak; i < iItemCount; i++) {
		var oDomRef = aAllItems[i].getFocusDomRef();
		if (oDomRef) { // separators return null here
			aNavigableItems.push(oDomRef);
		}
	}

	// Init item navigation and set initial focus
	this.popup.getContent().initItemNavigation(aNavigableItems);
};

/**
 * Closes the overflow popup.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.closePopup = function(bResetFocus) {
	this._bResetFocus = bResetFocus;
	this.popup.close();
	// We do not need to close the popup on window resize if it already closed
	jQuery(window).unbind("resize", this.onwindowresize);
};

sap.ui.commons.Toolbar.prototype.handlePopupClosed = function() {
	this.getRenderer().unsetActive(this);

	this.bOpen = false;
	sap.ui.commons.ToolbarRenderer.emptyOverflowPopup(this);

	// Cleanup tabindex again and re-initialize item navigation
	var iAllItemsBeforeBreak = this.getVisibleItemInfo().iAllItemsBeforeBreak;
	this.updateItemNavigation(iAllItemsBeforeBreak, true); // TODO: reinit only required if item navigation also used for popup
	if(this._bResetFocus) {
		this.oItemNavigation.focusItem(this.iLeftItemDomRefCount - 1);
	}
	this._bResetFocus = false;
};


// ****************************************************************
// Overwrite generated items handling
// ****************************************************************

/**
 * Prepares the given oCtrl for usage in a toolbar.
 * @param {sap.ui.core.Control} oCtrl The control instance whose focus info should be re-directed
 * @private
 */
sap.ui.commons.Toolbar.prototype.prepareFocusInfoRedirect = function(oCtrl) {
	//jQuery.sap.assert(oCtrl._orig_getFocusInfo === undefined);

	// Check if the toolbar item (Control) has already _orig_getFocusInfo and if yes, do not set it again
	if (oCtrl && !oCtrl._orig_getFocusInfo) {
		var sId = this.getId();

		oCtrl._orig_getFocusInfo = oCtrl.getFocusInfo;
		oCtrl.getFocusInfo = function() {
			return {id: sId, childInfo: this._orig_getFocusInfo()};
		};
		
		var that = this;
		oCtrl._orig_applyFocusInfo = oCtrl.applyFocusInfo;
		oCtrl.applyFocusInfo = function(oFocusInfo) {
			return that.applyFocusInfo(oFocusInfo.childInfo);
		};
	}
	return oCtrl;
};

/**
 * Cleans up the given oCtrl after usage in a toolbar. Will be used in remove* functions
 * @param {sap.ui.core.Control} oCtrl The control instance that should be reset to standard focus info
 * @private
 */
sap.ui.commons.Toolbar.prototype.cleanupFocusInfoRedirect = function(oCtrl) {
	//jQuery.sap.assert(oCtrl._orig_getFocusInfo !== undefined);
	//jQuery.sap.assert(typeof(oCtrl._orig_getFocusInfo) === "function");
	if (oCtrl) {
		oCtrl.getFocusInfo = oCtrl._orig_getFocusInfo;
		delete oCtrl._orig_getFocusInfo;
		delete oCtrl._orig_applyFocusInfo;
	}
	return oCtrl;
};

// Overwrite
sap.ui.commons.Toolbar.prototype.insertItem = function(oItem, iIndex) {
	this.insertAggregation("items", this.prepareFocusInfoRedirect(oItem), iIndex);

	oItem.addDelegate(this.oItemDelegate);

	return this;
};

// Overwrite
sap.ui.commons.Toolbar.prototype.addItem = function(oItem) {
	this.addAggregation("items", this.prepareFocusInfoRedirect(oItem));

	oItem.addDelegate(this.oItemDelegate);

	return this;
};

// Overwrite
sap.ui.commons.Toolbar.prototype.removeItem = function(vElement) {
	var tmp = this.removeAggregation("items", vElement);

	tmp.removeDelegate(this.oItemDelegate);

	return this.cleanupFocusInfoRedirect(tmp);
};

// Overwrite
sap.ui.commons.Toolbar.prototype.removeAllItems = function() {
	var aTmp = this.removeAllAggregation("items");
	for(var i = 0, iL = aTmp.length; i < iL; i++){
		aTmp[i] = this.cleanupFocusInfoRedirect(aTmp[i]);
		aTmp[i].removeDelegate(this.oItemDelegate);
	}
	return aTmp;
};

// Overwrite
sap.ui.commons.Toolbar.prototype.insertRightItem = function(oItem, iIndex) {
	this.insertAggregation("rightItems", this.prepareFocusInfoRedirect(oItem), iIndex);

	oItem.addDelegate(this.oItemDelegate);

	return this;
};

// Overwrite
sap.ui.commons.Toolbar.prototype.addRightItem = function(oItem) {
	this.addAggregation("rightItems", this.prepareFocusInfoRedirect(oItem));

	oItem.addDelegate(this.oItemDelegate);

	return this;
};

// Overwrite
sap.ui.commons.Toolbar.prototype.removeRightItem = function(vElement) {
	var tmp = this.removeAggregation("rightItems", vElement);

	tmp.removeDelegate(this.oItemDelegate);

	return this.cleanupFocusInfoRedirect(tmp);
};

// Overwrite
sap.ui.commons.Toolbar.prototype.removeAllRightItems = function() {
	var aTmp = this.removeAllAggregation("rightItems");
	for(var i = 0, iL = aTmp.length; i < iL; i++){
		aTmp[i] = this.cleanupFocusInfoRedirect(aTmp[i]);
		aTmp[i].removeDelegate(this.oItemDelegate);
	}
	return aTmp;
};

/**
 * Overwrite
 * @private
 */
sap.ui.commons.Toolbar.prototype.getFocusInfo = function () {
	var sId = this.getId();
	if(this.bOpen) {
		return {id: sId, childId: sId};
	}
	else {
		return {id: sId};
	}
};

/**
 * Overwrite
 * @private
 */
sap.ui.commons.Toolbar.prototype.applyFocusInfo = function (oFocusInfo) {
	if (oFocusInfo) {
		var sChildId = oFocusInfo.childId;
		if (this.bOpen && sChildId){
			if (sChildId === this.getId()) {
				return;
			}
			var oCtrl = sap.ui.getCore().getControl(sChildId);
			//else
			var oContent;
			if (oCtrl && this.popup && (oContent = this.popup.getContent()) &&
					jQuery.sap.containsOrEquals(oContent.getDomRef(), oCtrl.getDomRef())) {
				oContent.applyFocusInfo(oFocusInfo.childInfo);
				return;
			}
		}
	}
	this.focus();
};


//****************************************************************
//  ToolbarOverflowPopup
//****************************************************************

/**
 * ToolbarOverflowPopup is a slim element without metadata where the element is required for ItemNavigation
 * acting as dummy control. The control is required by Popup and wrapping the HTML rendered for the popup contents.
 *
 * @private
 * @name sap.ui.commons.ToolbarOverflowPopup
 * @function
 */
sap.ui.core.Element.extend("sap.ui.commons.ToolbarOverflowPopup", /** @lends sap.ui.commons.ToolbarOverflowPopup.prototype */ {

  constructor : function(oToolbar) {
  	this.oToolbar = oToolbar;
  	var sId = oToolbar.getId() + "-pu";

  	// Call super constructor
  	sap.ui.core.Element.call(this, sId);
  },

  /**
   * Initializes the ItemNavigation for this popup and focuses the first item
   *
   * @param aNavigableItems The DOM references of the toolbar items displayed in this popup
   * @private
   */
  initItemNavigation : function(aNavigableItems) {
  	// Initialize the ItemNavigation if required
  	if (!this.oItemNavigation) {
  		this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
  		this.addDelegate(this.oItemNavigation);
  	}

  	this.oItemNavigation.setRootDomRef(sap.ui.commons.ToolbarRenderer.getPopupArea(this.oToolbar));
  	this.oItemNavigation.setItemDomRefs(aNavigableItems);
  	this.oItemNavigation.focusItem(0);
  },

  /**
   * Called by the Popup, required to simulate a control inside the Popup when there is only some HTML.
   * The root of this HTML is returned here.
   *
   * @private
   */
  getDomRef : function() {
  	var oPu = sap.ui.commons.ToolbarRenderer.getPopupArea(this.oToolbar);
  	if (oPu) {
  		return oPu.parentNode;
  	} else {
  		return null;
  	}
  },

  /**
   * Called by the Popup.
   *
   * @private
   */
  isActive : function() {
  	return sap.ui.commons.ToolbarRenderer.getPopupArea(this.oToolbar) != null;
  },

  /**
   * Handle the onsapescape event on the overflow popup, this closes the popup
   *
   * @param {jQuery.EventObject} oEvent The forwarded browser event
   * @private
   */
  onsapescape : function(oEvent) {
  	this.oToolbar.closePopup(true);
  },

  /**
   * Handle the tab key event on the overflow popup, this closes the popup
   *
   * @param {jQuery.EventObject} oEvent the forwarded browser event
   * @private
   */
  // Should ideally advance to the next tab position but currently only focuses the overflow button again.
  onsaptabnext : function(oEvent) {
  	this.oToolbar.closePopup(true);
  	oEvent.preventDefault();
  	oEvent.stopPropagation();
  },

  /**
   * Handle the tab back key event on the overflow popup, this closes the popup
   *
   * @param {jQuery.EventObject} oEvent The forwarded browser event
   * @private
   */
    // Should ideally advance to the next tab position but currently only focuses the overflow button again.
  onsaptabprevious : function(oEvent) {
  	this.oToolbar.closePopup(true);
  	oEvent.preventDefault();
  	oEvent.stopPropagation();
  }

});

/**
 * Called if an item is rerendered to update the item navigation.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype._itemRendered = function() {
    if (this.oItemNavigation) {
          this.updateAfterResize(true);
    } else {
    	if (!this.sUpdateItemNavigationTimer) {
    		this.sUpdateItemNavigationTimer = jQuery.sap.delayedCall(0, this, "updateAfterResize", [true])
    	}
    }
};

/**
 * Handles the window resize event.
 *
 * @param {jQuery.Event}  oEvent Event object
 * @private
 */
sap.ui.commons.Toolbar.prototype.onwindowresize = function(oEvent) {
	if (this.bOpen) {
		this.closePopup(true);
	}
};

/**
 * Handles the window resize event.
 *
 * @param {jQuery.Event}  oEvent Event object
 * @private
 */
sap.ui.commons.Toolbar.prototype.ontoolbarresize = function(oEvent) {
	if (this.bOpen) {
		this.closePopup(true);
	}
};

/**
 * Handles the right side resize event.
 *
 * @param {jQuery.Event}  oEvent Event object
 * @private
 */
sap.ui.commons.Toolbar.prototype.onrightsideresize = function() {

	// Proove if the Dom referece exist, and if not - clean up the references.
	if (!this.getDomRef()) {
		this.cleanup();
		return;
	}

	if (this.getRightItems().length > 0){
		var oRightRef = this.oDomRef.lastChild;
		var iRightSideWidth = oRightRef.offsetWidth;
		if (this.bRtl) {
			jQuery(this.oInnerRef).css("margin-left", (iRightSideWidth + 10) + "px");
		}
		else {
			jQuery(this.oInnerRef).css("margin-right", (iRightSideWidth + 10) + "px");
		}
		var oFirstItem = this.oDomRef.firstChild.firstChild.firstChild;
		var iOverflowWidth = this.getDomRef("mn").offsetWidth;
		var iMinWidth = oFirstItem.offsetWidth + iRightSideWidth + iOverflowWidth + 20; // 20px is margin for overflow button and the last  visible item
		jQuery(this.oDomRef).css("min-width", iMinWidth + "px");
		jQuery(this.oInnerRef).css("visibility", "visible");
	}
};

/**
 * Clean up the control.
 *
 * @private
 */
sap.ui.commons.Toolbar.prototype.cleanup = function() {

	// stop the periodic overflow checker
	if (this._detectVisibleItemCountChangeTimer) {
		jQuery.sap.clearDelayedCall(this._detectVisibleItemCountChangeTimer);
		this._detectVisibleItemCountChangeTimer = null;
	}

	// stop the delay call of update itemNavigation because its updated onAfterRendering
	if (this.sUpdateItemNavigationTimer) {
		jQuery.sap.clearDelayedCall(this.sUpdateItemNavigationTimer);
		this.sUpdateItemNavigationTimer = null;
	}

	// Cleanup resize event registration before re-rendering
	if (this.sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
	
	if (this.sRightSideResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this.sRightSideResizeListenerId);
		this.sRightSideResizeListenerId = null;
	}

};


}; // end of sap/ui/commons/Toolbar.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ToolbarSeparator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ToolbarSeparator.
jQuery.sap.declare("sap.ui.commons.ToolbarSeparator");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new ToolbarSeparator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisplayVisualSeparator displayVisualSeparator} : boolean (default: true)</li>
 * <li>{@link #getDesign design} : sap.ui.commons.ToolbarSeparatorDesign</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A small vertical line that is generally added to the tool bar between the items to visually separate them.
 * @extends sap.ui.core.Element
 * @implements sap.ui.commons.ToolbarItem
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ToolbarSeparator
 */
sap.ui.core.Element.extend("sap.ui.commons.ToolbarSeparator", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"displayVisualSeparator" : {type : "boolean", group : "Appearance", defaultValue : true},
		"design" : {type : "sap.ui.commons.ToolbarSeparatorDesign", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ToolbarSeparator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ToolbarSeparator.extend
 * @function
 */


/**
 * Getter for property <code>displayVisualSeparator</code>.
 * When set to false, there is no visual indication of separation by a vertical line but by a wider space.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>displayVisualSeparator</code>
 * @public
 * @name sap.ui.commons.ToolbarSeparator#getDisplayVisualSeparator
 * @function
 */

/**
 * Setter for property <code>displayVisualSeparator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDisplayVisualSeparator  new value for property <code>displayVisualSeparator</code>
 * @return {sap.ui.commons.ToolbarSeparator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ToolbarSeparator#setDisplayVisualSeparator
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Design of the Separator.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.commons.ToolbarSeparatorDesign} the value of property <code>design</code>
 * @public
 * @name sap.ui.commons.ToolbarSeparator#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.commons.ToolbarSeparatorDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.ToolbarSeparator} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ToolbarSeparator#setDesign
 * @function
 */


// Start of sap\ui\commons\ToolbarSeparator.js
sap.ui.commons.ToolbarSeparator.prototype.getFocusDomRef = function() {
	return undefined;
};
}; // end of sap/ui/commons/ToolbarSeparator.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Tree') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Tree.
jQuery.sap.declare("sap.ui.commons.Tree");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new Tree.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getShowHeaderIcons showHeaderIcons} : boolean (default: true)</li>
 * <li>{@link #getShowHorizontalScrollbar showHorizontalScrollbar} : boolean (default: false)</li>
 * <li>{@link #getMinWidth minWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getSelectionMode selectionMode} : sap.ui.commons.TreeSelectionMode (default: sap.ui.commons.TreeSelectionMode.Single)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getNodes nodes} <strong>(default aggregation)</strong> : sap.ui.commons.TreeNode[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.Tree#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.Tree#event:selectionChange selectionChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Simple tree to display item in a hierarchical way
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Tree
 */
sap.ui.core.Control.extend("sap.ui.commons.Tree", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"expandAll", "collapseAll"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : 'auto'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : 'auto'},
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"showHeaderIcons" : {type : "boolean", group : "Misc", defaultValue : true},
		"showHorizontalScrollbar" : {type : "boolean", group : "Misc", defaultValue : false},
		"minWidth" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"selectionMode" : {type : "sap.ui.commons.TreeSelectionMode", group : "Behavior", defaultValue : sap.ui.commons.TreeSelectionMode.Single}
	},
	defaultAggregation : "nodes",
	aggregations : {
    	"nodes" : {type : "sap.ui.commons.TreeNode", multiple : true, singularName : "node", bindable : "bindable"}
	},
	events : {
		"select" : {allowPreventDefault : true}, 
		"selectionChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Tree with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Tree.extend
 * @function
 */

sap.ui.commons.Tree.M_EVENTS = {'select':'select','selectionChange':'selectionChange'};


/**
 * Getter for property <code>title</code>.
 * Tree title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.commons.Tree#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#setTitle
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Tree width
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.Tree#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Tree height
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.Tree#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#setHeight
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * Tree Header is display. If false, the tree will be in a transparent mode
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.ui.commons.Tree#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#setShowHeader
 * @function
 */


/**
 * Getter for property <code>showHeaderIcons</code>.
 * Show Header icons (e.g. Expand/Collapse all). Only consider if showHeader is true
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeaderIcons</code>
 * @public
 * @name sap.ui.commons.Tree#getShowHeaderIcons
 * @function
 */

/**
 * Setter for property <code>showHeaderIcons</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeaderIcons  new value for property <code>showHeaderIcons</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#setShowHeaderIcons
 * @function
 */


/**
 * Getter for property <code>showHorizontalScrollbar</code>.
 * Display horizontal scrollbar. If false, the overflow content will be hidden
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showHorizontalScrollbar</code>
 * @public
 * @name sap.ui.commons.Tree#getShowHorizontalScrollbar
 * @function
 */

/**
 * Setter for property <code>showHorizontalScrollbar</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowHorizontalScrollbar  new value for property <code>showHorizontalScrollbar</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#setShowHorizontalScrollbar
 * @function
 */


/**
 * Getter for property <code>minWidth</code>.
 * Minimal width for the Tree. Can be useful when, for example, the width is specified in percentage, to avoid the tree to become too narrow when container is resize
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>minWidth</code>
 * @public
 * @name sap.ui.commons.Tree#getMinWidth
 * @function
 */

/**
 * Setter for property <code>minWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sMinWidth  new value for property <code>minWidth</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#setMinWidth
 * @function
 */


/**
 * Getter for property <code>selectionMode</code>.
 * Selection mode of the Tree.
 *
 * Default value is <code>Single</code>
 *
 * @return {sap.ui.commons.TreeSelectionMode} the value of property <code>selectionMode</code>
 * @public
 * @name sap.ui.commons.Tree#getSelectionMode
 * @function
 */

/**
 * Setter for property <code>selectionMode</code>.
 *
 * Default value is <code>Single</code> 
 *
 * @param {sap.ui.commons.TreeSelectionMode} oSelectionMode  new value for property <code>selectionMode</code>
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#setSelectionMode
 * @function
 */


/**
 * Getter for aggregation <code>nodes</code>.<br/>
 * First level nodes
 * 
 * <strong>Note</strong>: this is the default aggregation for Tree.
 * @return {sap.ui.commons.TreeNode[]}
 * @public
 * @name sap.ui.commons.Tree#getNodes
 * @function
 */


/**
 * Inserts a node into the aggregation named <code>nodes</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *          oNode the node to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the node should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the node is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the node is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#insertNode
 * @function
 */

/**
 * Adds some node <code>oNode</code> 
 * to the aggregation named <code>nodes</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oNode the node to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#addNode
 * @function
 */

/**
 * Removes an node from the aggregation named <code>nodes</code>.
 *
 * @param {int | string | sap.ui.commons.TreeNode} vNode the node to remove or its index or id
 * @return {sap.ui.commons.TreeNode} the removed node or null
 * @public
 * @name sap.ui.commons.Tree#removeNode
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>nodes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.TreeNode[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Tree#removeAllNodes
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.TreeNode</code> in the aggregation named <code>nodes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oNode the node whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Tree#indexOfNode
 * @function
 */
	

/**
 * Destroys all the nodes in the aggregation 
 * named <code>nodes</code>.
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#destroyNodes
 * @function
 */


/**
 * Binder for aggregation <code>nodes</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#bindNodes
 * @function
 */

/**
 * Unbinder for aggregation <code>nodes</code>.
 *
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#unbindNodes
 * @function
 */


/**
 * Event is fired when a tree node is selected. 
 *
 * @name sap.ui.commons.Tree#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.commons.TreeNode} oControlEvent.getParameters.node The node which has been selected.
 * @param {object} oControlEvent.getParameters.nodeContext The binding context of the selected node.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.ui.commons.Tree</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Tree</code>.<br/> itself. 
 *  
 * Event is fired when a tree node is selected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Tree</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.ui.commons.Tree</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'node' of type <code>sap.ui.commons.TreeNode</code> The node which has been selected.</li>
 * <li>'nodeContext' of type <code>object</code> The binding context of the selected node.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.commons.Tree#fireSelect
 * @function
 */


/**
 * fired when the selection of the tree has been changed 
 *
 * @name sap.ui.commons.Tree#selectionChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.commons.TreeNode[]} oControlEvent.getParameters.nodes The nodes which has been selected.
 * @param {object[]} oControlEvent.getParameters.nodeContexts The binding context of the selected nodes.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selectionChange' event of this <code>sap.ui.commons.Tree</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.Tree</code>.<br/> itself. 
 *  
 * fired when the selection of the tree has been changed 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.Tree</code>.<br/> itself.
 *
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#attachSelectionChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selectionChange' event of this <code>sap.ui.commons.Tree</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Tree#detachSelectionChange
 * @function
 */

/**
 * Fire event selectionChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'nodes' of type <code>sap.ui.commons.TreeNode[]</code> The nodes which has been selected.</li>
 * <li>'nodeContexts' of type <code>object[]</code> The binding context of the selected nodes.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.Tree} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.Tree#fireSelectionChange
 * @function
 */


/**
 * Expands all nodes in the tree
 *
 * @name sap.ui.commons.Tree.prototype.expandAll
 * @function

 * @type void
 * @public
 */


/**
 * Collapses all nodes in the tree
 *
 * @name sap.ui.commons.Tree.prototype.collapseAll
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\commons\Tree.js
sap.ui.commons.Tree.prototype.resizeListenerId;

sap.ui.commons.Tree.prototype.init = function(){
   this.bAllCollapsed = false;
   this.allowTextSelection(false);

   this.oSelectedNode = null;
   this.oSelectedContext = null;

   this.oSelectedNodeMap = {};
   this.oSelectedContextMap = {}; 


   this.iOldScrollTop = null;

   //Create Buttons for Header

	var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	this.oCollapseAllButton = new sap.ui.commons.Button(this.getId() + "-CollapseAll", { icon: this.getIconPrefix() + "CollapseAll.png", tooltip: oResourceBundle.getText("TREE_COLLAPSE_ALL"), lite: true });
	this.oExpandAllButton	= new sap.ui.commons.Button(this.getId() + "-ExpandAll", { icon: this.getIconPrefix() + "ExpandAll.png", tooltip: oResourceBundle.getText("TREE_EXPAND_ALL"), lite: true });
	this.oCollapseAllButton.attachPress(this.onCollapseAll,this);
	this.oExpandAllButton.attachPress(this.onExpandAll,this);
	this.oCollapseAllButton.addStyleClass("sapUiTreeCol");
	this.oExpandAllButton.addStyleClass("sapUiTreeExp");
};

/**
 * Does all the cleanup when the Tree is to be destroyed.
 * Called from the element's destroy() method.
 * @private
 */
sap.ui.commons.Tree.prototype.exit = function(){
	if ( this.oCollapseAllButton ) {
		this.oCollapseAllButton.destroy();
		this.oCollapseAllButton = null;
	}
	if ( this.oExpandAllButton ) {
		this.oExpandAllButton.destroy();
		this.oExpandAllButton = null;
	}
};

// Enumeration for different types of selection in the tree
sap.ui.commons.Tree.SelectionType = {
	Select: "Select",
	Toggle: "Toggle",
	Range: "Range"
}

/***********************************************************************************
* EVENTS HANDLING
***********************************************************************************/

/** Handler for "Theme Changed" event.
 * @private
 */
sap.ui.commons.Tree.prototype.onThemeChanged = function(){
	this.oCollapseAllButton.setIcon(this.getIconPrefix() + "CollapseAll.png");
	this.oExpandAllButton.setIcon(this.getIconPrefix() + "ExpandAll.png");
};

/** Handler for "Expand All" button.
 * @private
 */
sap.ui.commons.Tree.prototype.onExpandAll = function(){
	this.expandAll();
};

/**Handler for "Collapse All" button.
 * @private
 */
sap.ui.commons.Tree.prototype.onCollapseAll = function(){
	this.collapseAll();
};

/*"*********************************************************************************
* PUBLIC METHODS
***********************************************************************************/
sap.ui.commons.Tree.prototype.expandAll = function(){
	var aNodes = this.getNodes();
	for(var i=0;i<aNodes.length;i++){
		aNodes[i].expand(true);
	}
};

sap.ui.commons.Tree.prototype.collapseAll = function(){
	var aNodes = this.getNodes();
	for(var i=0;i<aNodes.length;i++){
		aNodes[i].collapse(true);
	}
};

/***********************************************************************************
* KEYBOARD NAVIGATION
***********************************************************************************/
/**
* DOWN key behavior
* Opens the section or activates the UI element on DOWN key
* @private
* @param oEvent Browser event
*/
sap.ui.commons.Tree.prototype.onsapdown = function(oEvent){
	this.moveFocus(false);
	oEvent.preventDefault();
};

/**
* UP key behavior
* Opens the section or activates the UI element on UP key
* @private
* @param oEvent Browser event
*/
sap.ui.commons.Tree.prototype.onsapup = function(oEvent){
	this.moveFocus(true);
	oEvent.preventDefault();
};

/**
 * The general HOME key event of the tree
 * @private
 * @param {event} oEvent The saphome event object
 */
sap.ui.commons.Tree.prototype.onsaphome = function(oEvent) {
	this.placeFocus(this.getFirstSibling(oEvent.target));
	oEvent.preventDefault();
};

/**
 * The general CTRL+HOME key event of the tree
 * @private
 * @param {event} oEvent The saphome event object
 */
sap.ui.commons.Tree.prototype.onsaphomemodifiers = function(oEvent) {
	this.placeFocus(this.getFirst());
	oEvent.preventDefault();
};

/**
 * The general END key event of the tree
 * @private
 * @param {event} oEvent The sapend event object
 */
sap.ui.commons.Tree.prototype.onsapend = function(oEvent) {
	this.placeFocus(this.getLastSibling(oEvent.target));
	oEvent.preventDefault();
};

/**
 * The general CTRL+END key event of the tree
 * @private
 * @param {event} oEvent The sapend event object
 */
sap.ui.commons.Tree.prototype.onsapendmodifiers = function(oEvent) {
	this.placeFocus(this.getLast());
	oEvent.preventDefault();
};

/**
 * The numpad STAR(*) key event of the tree
 * @private
 * @param {event} oEvent The sapcollapseall event object
 */
sap.ui.commons.Tree.prototype.onsapcollapseall = function(oEvent) {

	if(this.bAllCollapsed ){
		this.expandAll();
	}
	else{
		this.collapseAll();
	}

	this.bAllCollapsed = !this.bAllCollapsed;
};

/***********************************************************************************
* HELPER METHODS - DOM NAVIGATION
***********************************************************************************/

/**
 * Determine the icon prefix for the embedded button icons
 * @private
 */
sap.ui.commons.Tree.prototype.getIconPrefix = function() {
	var sIconPrefix = "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/";
	
	if(!sap.ui.getCore().getConfiguration().getRTL()){
		sIconPrefix		+= "img/tree/";
	}
	else{
		sIconPrefix		+= "img-RTL/tree/";
	}
	return sap.ui.resource("sap.ui.commons", sIconPrefix);
};

/**Returns the first Sibling tree node based on DOM Tree node provided
 * @param oDomNode The DOM Tree node from which calculate the first sibling
 * @returns The first sibling tree node
 * @private
*/
sap.ui.commons.Tree.prototype.getFirstSibling = function(oDomNode) {
	var aDomFirstSiblingNode	= jQuery(oDomNode).siblings(".sapUiTreeNode:visible").first();

	if(aDomFirstSiblingNode.length){
		return aDomFirstSiblingNode[0];
	}
	return null;
};

/**Returns the last Sibling tree node based on DOM Tree node provided
 * @param oDomNode The DOM Tree node from which calculate the last sibling
 * @returns The last sibling tree node
 * @private
*/
sap.ui.commons.Tree.prototype.getLastSibling= function(oDomNode) {
	var aDomLastSiblingNode	= jQuery(oDomNode).siblings(".sapUiTreeNode:visible").last();

	if(aDomLastSiblingNode.length){
		return aDomLastSiblingNode[0];
	}
	return null;
};

/**Returns the first tree node of the tree. Children of collapsed nodes (hidden) are not considered.
 * @returns The first tree node
 * @private
*/
sap.ui.commons.Tree.prototype.getFirst = function() {
	var aDomFirstNode		= this.$().find(".sapUiTreeNode:visible").first();

	if(aDomFirstNode.length){
		return aDomFirstNode[0];
	}
	return null;
};

/**Returns the last tree node of the tree. Children of collapsed nodes (hidden) are not considered.
 * @returns The last tree node
 * @private
*/
sap.ui.commons.Tree.prototype.getLast = function() {
	var aDomLastNode		= this.$().find(".sapUiTreeNode:visible").last();

	if(aDomLastNode.length){
		return aDomLastNode[0];
	}
	return null;

};

/***********************************************************************************
* HELPER METHODS - FOCUS MANAGEMENT
***********************************************************************************/

/**
 * Move the focus by one position, either UP or DOWN depending of "bMoveUp"
 * @param bMoveUp When true the focus is move up. Otherwise, it's moved down
 * @private
 */
sap.ui.commons.Tree.prototype.moveFocus = function(bMoveUp){
   var afocusedNodeDom	= jQuery(".sapUiTreeNode:focus");
   if(afocusedNodeDom.length){

	   var oCurrNode = sap.ui.getCore().getControl(afocusedNodeDom[0].id)
;
	   var aDomAllNodes = this.$().find(".sapUiTreeNode:visible");
	   var currIndex	= aDomAllNodes.index(afocusedNodeDom[0]);

	   var nextIndex = currIndex;
	   if(bMoveUp){
		   nextIndex--;
	   }
	   else{
		   nextIndex++;
	   }

	   if(nextIndex >= 0 && nextIndex < aDomAllNodes.length){
			var oDomNextNode	= aDomAllNodes.eq( nextIndex );
			var oNextNode = sap.ui.getCore().getControl(oDomNextNode[0].id);
			oCurrNode.blur();
			oNextNode.focus();
	   }
	}

};

/**Adjusts the focus after a node is collapsed. This is necessary as the currently focused node can then be hidden,
 * leading the tree not being focusable anymore.
 *
 * When the focusable is being hid by the collapsing of its parent, the focus is then set on this parent.
 *
 * @private
 */
sap.ui.commons.Tree.prototype.adjustFocus = function(){

	var oFocusableNode = this.$().find('.sapUiTreeNode[tabIndex="0"]');

	if(!oFocusableNode.is(':visible')){


		var aDomAllNodes		= this.$().find(".sapUiTreeNode");
		var focusIndex			= aDomAllNodes.index(oFocusableNode[0]);
		var aDomPrecedingNodes	= aDomAllNodes.filter(":lt("+focusIndex+")");
		var aDomVisiblePrecedingNodes = aDomPrecedingNodes.filter(":visible");
		var oNewFocusNode		= aDomVisiblePrecedingNodes[aDomVisiblePrecedingNodes.length-1];

		if(oNewFocusNode) {
			oNewFocusNode.setAttribute("tabindex", "0");

			if( jQuery(".sapUiTreeNode:focus").is(":not(:visible)")){
				oNewFocusNode.focus();
			}
		}

	}

};

/**Places the focus on the node corresponding to given DOM Tree Node
 * @param oDomTargetNode The DOM Tree Node corresponding to the node to focus
 * @private
 */
sap.ui.commons.Tree.prototype.placeFocus = function(oDomTargetNode){

	if(!oDomTargetNode){
		return; //No Target node provided!
	}

	var oDomfocusedNode	= this.$().find(".sapUiTreeNode[tabIndex='0']");
	if(oDomfocusedNode.length){
		oDomfocusedNode[0].setAttribute("tabindex", "-1");
	}

	oDomTargetNode.setAttribute("tabindex", "0");
	var oTargetNode = sap.ui.getCore().getControl(oDomTargetNode.id);
	oTargetNode.focus();
};

/***********************************************************************************
* HELPER METHODS - SELECTION MANAGEMENT
***********************************************************************************/
/**Adjusts the selection, when expanding, by re-selecting a children node when the expanded node was
   selected only to reprensented the selection of a children node
 * @param oExpandingDomNode The Node being expanded
 * @private
 */
sap.ui.commons.Tree.prototype.adjustSelectionOnExpanding = function(oExpandingDomNode) {

	var $Tree = this.$(),
		$ExpandingDomNode = jQuery(oExpandingDomNode),
		$DomSelectedNode,
		$DomParent;

	//Current node is a fake selection, remove it. A child will be either another fake selection or an actual one.
	if($ExpandingDomNode.hasClass("sapUiTreeNodeSelectedParent")) {
		$ExpandingDomNode.removeClass("sapUiTreeNodeSelectedParent");
	}

	//If the actual selection now visible, remove all fake ones
	var $DomActualSelection = $Tree.find(".sapUiTreeNodeSelected:visible");
	if ($DomActualSelection.length){
		$Tree.find(".sapUiTreeNodeSelectedParent").removeClass("sapUiTreeNodeSelectedParent");
	}
	else {
		$DomSelectedNode = $Tree.find(".sapUiTreeNodeSelected");

		//Find first visible parent node
		$DomParent = $DomSelectedNode.parent(".sapUiTreeChildrenNodes").prev(".sapUiTreeNode");

		while ($DomParent.length && !$DomParent.is(":visible")) {
			$DomParent = $DomParent.parent(".sapUiTreeChildrenNodes").prev(".sapUiTreeNode");
		}
		$DomParent.addClass("sapUiTreeNodeSelectedParent");
	}
};

/**Adjusts the selection, when collapsing, selecting a parent when the actual selected node is
 * not visible.
 * @param oDomCollapsingNode The Node being expanded
 * @private
 */
sap.ui.commons.Tree.prototype.adjustSelectionOnCollapsing = function(oDomCollapsingNode){

	if (this.getSelectionMode() != sap.ui.commons.TreeSelectionMode.Multi) {
		var $DomCollapsingNode = jQuery(oDomCollapsingNode),
		sChildrenId = "#" + $DomCollapsingNode.attr("id") + "-children",
		$DomActualSelSubNode = $DomCollapsingNode.siblings(sChildrenId).find(".sapUiTreeNodeSelected"),
		$DomParentSelSubNode = $DomCollapsingNode.siblings(sChildrenId).find(".sapUiTreeNodeSelectedParent");

		if($DomActualSelSubNode.length || $DomParentSelSubNode.length){
			$DomCollapsingNode.addClass("sapUiTreeNodeSelectedParent");

			if($DomParentSelSubNode.length){
				$DomParentSelSubNode.removeClass("sapUiTreeNodeSelectedParent");
			}
		}
	} else {
		var $DomCollapsingNode = jQuery(oDomCollapsingNode),
		sChildrenId = "#" + $DomCollapsingNode.attr("id") + "-children",
		$DomActualSelSubNode = $DomCollapsingNode.siblings(sChildrenId).find(".sapUiTreeNodeSelected");
		$DomActualSelSubNode.removeClass("sapUiTreeNodeSelected");		
	}
};

/**
 * override this method on Element.js and return true if tree binding
 * @private
 */
sap.ui.commons.Tree.prototype.isTreeBinding = function(sName) {
	return (sName == "nodes");
};

/**
 * override element updateAggregation method with this one and update the tree node bindings
 * @private
 */
sap.ui.commons.Tree.prototype.updateNodes = function(){
	var oContext = this.oSelectedContext, 
		oNode;
	this.oSelectedNode = null;
	this.oSelectedContext = null;
	this.updateAggregation("nodes");
	if (oContext) {
		oNode = this.getNodeByContext(oContext);
		this.setSelection(oNode, true);
 	}
};


/**
 * Returns the node with the given context, or null if no such node currently exists
 * 
 * @param {sap.ui.model.Context} oContext the context of the node to be retrieved
 * @public
 * @since 1.19
 */
sap.ui.commons.Tree.prototype.getNodeByContext = function(oContext){
	return this.findNode(this, function(oNode) {
		return oNode.getBindingContext() == oContext;
	});
};

/**
 * Search through all existing nodes and return the first node which matches using
 * the given matching function
 * 
 * @param {function} fnMatch the matching function
 * @param {sap.ui.commons.Tree|sap.ui.commons.TreeNode} oNode the node to check
 * @returns The found node
 * @private
 */
sap.ui.commons.Tree.prototype.findNode = function(oNode, fnMatch) {
	var oFoundNode,
		that = this;
	if (fnMatch(oNode)) {
		return oNode;
	}
	jQuery.each(oNode.getNodes(), function(i, oNode) {
		oFoundNode = that.findNode(oNode, fnMatch);
		if (oFoundNode) return false;
	});
	return oFoundNode;
};

/**Returns the selected node in the tree. If not selection, returns false.
 * @returns The selected node
 * @private
 */
sap.ui.commons.Tree.prototype.getSelection = function(){
	return this.oSelectedNode;
};

/**Sets the selected node reference of the Tree
 * @private
 */
sap.ui.commons.Tree.prototype.setSelection = function(oNode, sType, bSuppressEvent){
	var bDoSelected = true;
	switch (this.getSelectionMode()) {
	case sap.ui.commons.TreeSelectionMode.Single:
		this._setSelectedNode(oNode, bSuppressEvent)
		break;	
	case sap.ui.commons.TreeSelectionMode.Multi:
		if (sType == sap.ui.commons.Tree.SelectionType.Range) {
			this._setSelectedNodeMap(oNode, bSuppressEvent)
		}
		else if (sType == sap.ui.commons.Tree.SelectionType.Toggle) {
			this._setSelectedNodeMap(oNode, bSuppressEvent)
		}
		else {
			this._setSelectedNode(oNode, bSuppressEvent)
		}
		break;
	case sap.ui.commons.TreeSelectionMode.None:
		break;	
	}
};

/**Rerendering handling. Sets the scroll position so that the selected node stays on the position it 
 * was before rerendering, for example after the expand and adding the nodes dynamically.
 * @private
 */
sap.ui.commons.Tree.prototype.onAfterRendering = function () {
	if (this.iOldScrollTop) {
		this.$("TreeCont").scrollTop(this.iOldScrollTop);
	}
};

/**Rerendering handling. Remembers the scroll position of the selected node.
 * @private
 */
sap.ui.commons.Tree.prototype.onBeforeRendering = function() {
	this.iOldScrollTop = this.$("TreeCont").scrollTop();
};


sap.ui.commons.Tree.prototype._setSelectedNode = function(oNode, bSuppressEvent) {
	var bDoSelect = true;
	if (!bSuppressEvent) {
		bDoSelect = this.fireSelect({node: oNode, nodeContext: oNode && oNode.getBindingContext()});
	}	
	if (bDoSelect) {
		if (this.oSelectedNode) {
			this.oSelectedNode.deselect();
		}
		if (oNode) {
			oNode.select(bSuppressEvent, true);
		}
		this.oSelectedNode = oNode;
		this.oSelectedContext = oNode && oNode.getBindingContext();
		if (this.getSelectionMode() == sap.ui.commons.TreeSelectionMode.Multi) {
			this.oSelectedNodeMap = {};
			this.oSelectedNodeMap[this.oSelectedNode.getId()] = this.oSelectedNode;
			this.oSelectedContextMap = {};
			this.oSelectedContextMap[this.oSelectedNode.getId()] = this.oSelectedContext;
		}
//		this.fireSelectionChange({nodes: [this.oSelectedNode], nodeContexts: [this.oSelectedContext]});
	}
};

sap.ui.commons.Tree.prototype._setSelectedNodeMap = function(oNode, bSuppressEvent) {
	var aNodes = [], aNodeContexts = [];
	this.oSelectedNode = oNode;
	if (this.oSelectedNodeMap[this.oSelectedNode.getId()] != this.oSelectedNode) {
		if (oNode) {
			oNode.select(bSuppressEvent, false);
		}
		this.oSelectedNode = oNode;
		this.oSelectedContext = oNode && oNode.getBindingContext();
		this.oSelectedNodeMap[this.oSelectedNode.getId()] = this.oSelectedNode;
		this.oSelectedContextMap[this.oSelectedNode.getId()] = this.oSelectedContext;
	}
	else {
		delete this.oSelectedNodeMap[this.oSelectedNode.getId()];
		delete this.oSelectedContextMap[this.oSelectedNode.getId()];
		if (this.oSelectedNode) {
			this.oSelectedNode.deselect();
		}
//		if (oNode) {
//			oNode.select(bSuppressEvent)
//		}
//		this.oSelectedNode = oNode;
//		this.oSelectedContext = oNode && oNode.getBindingContext();
	}
	if (!bSuppressEvent) {
		jQuery.map(this.oSelectedNodeMap, function(sId, oNode) {aNodes.push(oNode)});
		jQuery.map(this.oSelectedContextMap, function(sId, oNode) {aNodeContexts.push(oNode)});
		this.fireSelectionChange({nodes: aNodes, nodeContexts: aNodeContexts});
	}

};


}; // end of sap/ui/commons/Tree.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TreeNode') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TreeNode.
jQuery.sap.declare("sap.ui.commons.TreeNode");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new TreeNode.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getExpanded expanded} : boolean (default: true)</li>
 * <li>{@link #getHasExpander hasExpander} : boolean (default: false)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIsSelected isSelected} : boolean (default: false)</li>
 * <li>{@link #getSelectable selectable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getNodes nodes} <strong>(default aggregation)</strong> : sap.ui.commons.TreeNode[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.TreeNode#event:toggleOpenState toggleOpenState} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.TreeNode#event:selected selected} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Tree node element
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.TreeNode
 */
sap.ui.core.Element.extend("sap.ui.commons.TreeNode", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"select", "expand", "collapse"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"expanded" : {type : "boolean", group : "Misc", defaultValue : true},
		"hasExpander" : {type : "boolean", group : "Misc", defaultValue : false},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"isSelected" : {type : "boolean", group : "Misc", defaultValue : false},
		"selectable" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	defaultAggregation : "nodes",
	aggregations : {
    	"nodes" : {type : "sap.ui.commons.TreeNode", multiple : true, singularName : "node"}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"toggleOpenState" : {}, 
		"selected" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.TreeNode with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.TreeNode.extend
 * @function
 */

sap.ui.commons.TreeNode.M_EVENTS = {'toggleOpenState':'toggleOpenState','selected':'selected'};


/**
 * Getter for property <code>text</code>.
 * Node text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.TreeNode#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#setText
 * @function
 */


/**
 * Getter for property <code>expanded</code>.
 * Node is expanded
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * @name sap.ui.commons.TreeNode#getExpanded
 * @function
 */

/**
 * Setter for property <code>expanded</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bExpanded  new value for property <code>expanded</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#setExpanded
 * @function
 */


/**
 * Getter for property <code>hasExpander</code>.
 * Should the node has an expander.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>hasExpander</code>
 * @public
 * @name sap.ui.commons.TreeNode#getHasExpander
 * @function
 */

/**
 * Setter for property <code>hasExpander</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bHasExpander  new value for property <code>hasExpander</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#setHasExpander
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon to display in front of the node
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ui.commons.TreeNode#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#setIcon
 * @function
 */


/**
 * Getter for property <code>isSelected</code>.
 * Node is selected
 * 
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isSelected</code>
 * @public
 * @name sap.ui.commons.TreeNode#getIsSelected
 * @function
 */

/**
 * Setter for property <code>isSelected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsSelected  new value for property <code>isSelected</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#setIsSelected
 * @function
 */


/**
 * Getter for property <code>selectable</code>.
 * The node is selectable. If true, clicking on the node text triggers "selected" event
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>selectable</code>
 * @public
 * @name sap.ui.commons.TreeNode#getSelectable
 * @function
 */

/**
 * Setter for property <code>selectable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSelectable  new value for property <code>selectable</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#setSelectable
 * @function
 */


/**
 * Getter for aggregation <code>nodes</code>.<br/>
 * Subnodes for the current node
 * 
 * <strong>Note</strong>: this is the default aggregation for TreeNode.
 * @return {sap.ui.commons.TreeNode[]}
 * @public
 * @name sap.ui.commons.TreeNode#getNodes
 * @function
 */


/**
 * Inserts a node into the aggregation named <code>nodes</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *          oNode the node to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the node should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the node is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the node is inserted at 
 *             the last position        
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#insertNode
 * @function
 */

/**
 * Adds some node <code>oNode</code> 
 * to the aggregation named <code>nodes</code>.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oNode the node to add; if empty, nothing is inserted
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#addNode
 * @function
 */

/**
 * Removes an node from the aggregation named <code>nodes</code>.
 *
 * @param {int | string | sap.ui.commons.TreeNode} vNode the node to remove or its index or id
 * @return {sap.ui.commons.TreeNode} the removed node or null
 * @public
 * @name sap.ui.commons.TreeNode#removeNode
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>nodes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.TreeNode[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.TreeNode#removeAllNodes
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.TreeNode</code> in the aggregation named <code>nodes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.TreeNode}
 *            oNode the node whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.TreeNode#indexOfNode
 * @function
 */
	

/**
 * Destroys all the nodes in the aggregation 
 * named <code>nodes</code>.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#destroyNodes
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.TreeNode#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.TreeNode#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.TreeNode#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.TreeNode#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.TreeNode#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.TreeNode#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * Node state has changed. 
 *
 * @name sap.ui.commons.TreeNode#toggleOpenState
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.opened Node has been opened if true
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'toggleOpenState' event of this <code>sap.ui.commons.TreeNode</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.TreeNode</code>.<br/> itself. 
 *  
 * Node state has changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.TreeNode</code>.<br/> itself.
 *
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#attachToggleOpenState
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'toggleOpenState' event of this <code>sap.ui.commons.TreeNode</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#detachToggleOpenState
 * @function
 */

/**
 * Fire event toggleOpenState to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'opened' of type <code>boolean</code> Node has been opened if true</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.TreeNode#fireToggleOpenState
 * @function
 */


/**
 * Node is selected 
 *
 * @name sap.ui.commons.TreeNode#selected
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'selected' event of this <code>sap.ui.commons.TreeNode</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.TreeNode</code>.<br/> itself. 
 *  
 * Node is selected 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.TreeNode</code>.<br/> itself.
 *
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#attachSelected
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'selected' event of this <code>sap.ui.commons.TreeNode</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TreeNode#detachSelected
 * @function
 */

/**
 * Fire event selected to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.TreeNode#fireSelected
 * @function
 */


/**
 * Select the node, and if any, deselects the previously selected node
 *
 * @name sap.ui.commons.TreeNode.prototype.select
 * @function

 * @type void
 * @public
 */


/**
 * Expands the node
 *
 * @name sap.ui.commons.TreeNode.prototype.expand
 * @function

 * @type void
 * @public
 */


/**
 * Collapses the node
 *
 * @name sap.ui.commons.TreeNode.prototype.collapse
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\commons\TreeNode.js
sap.ui.commons.TreeNode.ANIMATION_DURATION	 = 600;

jQuery.sap.require('sap.ui.core.CustomStyleClassSupport'); // unlisted dependency retained

sap.ui.core.CustomStyleClassSupport.apply(sap.ui.commons.TreeNode.prototype);

//***********************************************************************************
//* PUBLIC METHODS
//***********************************************************************************

/**Expands the node
 * @public
 */

sap.ui.commons.TreeNode.prototype.expand = function(bExpandChildren){

	var oDomNode = this.$();
	if(oDomNode.hasClass("sapUiTreeNodeCollapsed")){
		//If not, not an expandable node
		oDomNode.toggleClass("sapUiTreeNodeCollapsed");
		oDomNode.toggleClass("sapUiTreeNodeExpanded");

		var oDomChildrenNodes = this.$("children");
		if(oDomChildrenNodes){
			oDomChildrenNodes.stop(true, true);
			oDomChildrenNodes.show(sap.ui.commons.TreeNode.ANIMATION_DURATION,this.getCallbackFunction(this,oDomNode,false));
		}
		oDomNode.attr("aria-expanded", "true");
		this.fireToggleOpenState({opened:true});

	}
	//Change property anyway. (Even if node has no expander)
	this.setProperty("expanded", true, true); //Suppress Re-rendering

	if(bExpandChildren){
		var aNodes = this.getNodes();
		for(var i=0;i<aNodes.length;i++){
			aNodes[i].expand(bExpandChildren);
		}
	}

};



/**Collapses the node
 * @public
 */
sap.ui.commons.TreeNode.prototype.collapse = function(bCollapseChildren){

	var oDomNode = this.$();

	if(oDomNode.hasClass("sapUiTreeNodeExpanded")){
		//If not, not a collapsable node

		oDomNode.toggleClass("sapUiTreeNodeCollapsed");
		oDomNode.toggleClass("sapUiTreeNodeExpanded");

		var oDomChildrenNodes = this.$("children");
		if(oDomChildrenNodes){
			oDomChildrenNodes.stop(true, true);
			oDomChildrenNodes.hide(sap.ui.commons.TreeNode.ANIMATION_DURATION,this.getCallbackFunction(this,oDomNode,true));
		}
		oDomNode.attr("aria-expanded", "false");
		this.fireToggleOpenState({opened:false});

	}
	//Change property anyway. (Even if node has no expander)
	this.setProperty("expanded", false, true); //Suppress Re-rendering

	if(bCollapseChildren){
		var aNodes = this.getNodes();
		for(var i=0;i<aNodes.length;i++){
			aNodes[i].collapse(bCollapseChildren);
		}
	}

};

/**Select the node, and if any, deselects the previously selected node
 * @public
 */
sap.ui.commons.TreeNode.prototype.select = function(bSuppressEvent, bDeselectOtherNodes) {
	var oTree = this.getTree(),
		$Tree;

	this.setProperty("isSelected", true, true);

	// If not connected to a tree or not rendered yet, return here
	if (!oTree || !this.getDomRef()) {
		return;
	}

	$Tree = oTree.$();

	//Remove selection elsewhere
	var oDomSelectedNode = $Tree.find(".sapUiTreeNodeSelected");

	switch (oTree.getSelectionMode()) {
	case sap.ui.commons.TreeSelectionMode.Single:
			oDomSelectedNode.removeClass("sapUiTreeNodeSelected").removeAttr("aria-selected");
			$Tree.find(".sapUiTreeNodeSelectedParent").removeClass("sapUiTreeNodeSelectedParent");
		break;
	case sap.ui.commons.TreeSelectionMode.Multi:
		if (bDeselectOtherNodes) {
			oDomSelectedNode.removeClass("sapUiTreeNodeSelected").removeAttr("aria-selected");
			$Tree.find(".sapUiTreeNodeSelectedParent").removeClass("sapUiTreeNodeSelectedParent");
		}
		break;
	case sap.ui.commons.TreeSelectionMode.None:
		break;
	};

	if(oDomSelectedNode.length){
		//Any Selection found
		var oSelectedNode = sap.ui.getCore().getControl(oDomSelectedNode[0].id);
		if (oTree.getSelectionMode() == sap.ui.commons.TreeSelectionMode.Single){
			oSelectedNode.setProperty("isSelected", false, true); //Suppress Re-rendering
		}
	}

	//Set selection on clicked node
	this.$().closest(".sapUiTreeNode").addClass("sapUiTreeNodeSelected").attr("aria-selected", "true");

	if (!bSuppressEvent) {
		this.fireSelected();
	}

	this.scrollIntoView();

};

//***********************************************************************************
//* SELECTION PRIVATE METHODS
//***********************************************************************************

/**Deselect the node
 * @private
 */
sap.ui.commons.TreeNode.prototype.deselect = function(bSuppressEvent) {
	var oTree = this.getTree();

	this.setProperty("isSelected", false, true);

	// If not connected to a tree or not rendered yet, return here
	if (!oTree || !this.getDomRef()) {
		return;
	}

	this.$().removeClass("sapUiTreeNodeSelected").removeAttr("aria-selected");
};

/**Returns true if the node has a selected child node, which is not visible
 * @returns True if the node has such child node
 * @private
 */
sap.ui.commons.TreeNode.prototype.hasSelectedHiddenChild = function(){
	var aNodes = this.getNodes();
	for(var i=0;i<aNodes.length;i++){

		if((!aNodes[i].isVisible() && aNodes[i].getIsSelected()) || aNodes[i].hasSelectedHiddenChild()){
			return true;
		}
	}
	return false;
};

/**
 * Redefinition of Setter for property <code>isSelected</code> for validation purpose
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {boolean} bIsSelected  new value for property <code>isSelected</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setIsSelected = function(bIsSelected) {

	if(!this.getSelectable()){
		//Node is not selectable.
		return this;
	}

	if (bIsSelected) {
		this.select(true);
	}
	else {
		this.deselect();
	}
	return this;
};

/**
 * Redefinition of Setter for property <code>selectable</code> for validation purpose.
 *
 * Default value is <code>true</code>
 *
 * @param {boolean} bSelectable  new value for property <code>selectable</code>
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TreeNode.prototype.setSelectable = function(bSelectable) {

	if(!bSelectable && this.getIsSelected()){
		//Setting the node to not selectable: remove selection
		this.setIsSelected(false);
	}

	this.setProperty("selectable", bSelectable);
	return this;
};

//***********************************************************************************
//* EVENTS HANDLING
//***********************************************************************************

/** The mouse click event, which will expand/collapse the node
 * @param {event} oEvent The click event object
 * @private
 */
sap.ui.commons.TreeNode.prototype.onclick = function(oEvent){
	var oDomClicked = oEvent.target,
	oTree = this.getTree();

	if(jQuery(oDomClicked).is(".sapUiTreeNode") || jQuery(oDomClicked).is(".sapUiTreeNodeNotSelectable") ){
		//When user click a Not-Selectable node text, it behaves as clicking on the node itself
		if(jQuery(oDomClicked).is(".sapUiTreeNodeNotSelectable")){
			//Get the node itself
			oDomClicked = jQuery(oDomClicked).closest(".sapUiTreeNode")[0];
		}
		//Expand/Collapse
		if(jQuery(oDomClicked).hasClass("sapUiTreeNodeExpanded")){
			this.collapse();
		}
		else{
			this.expand();
		}

		oTree.placeFocus(oDomClicked);
		oDomClicked.focus();

	}
	else if(jQuery(oDomClicked).is(".sapUiTreeNodeContent") || jQuery(oDomClicked).is(".sapUiTreeIcon")){
		var sSelectionType = sap.ui.commons.Tree.SelectionType.Select;
		if (oTree.getSelectionMode() == sap.ui.commons.TreeSelectionMode.Multi) {
			if (oEvent.shiftKey) {
				sSelectionType = sap.ui.commons.Tree.SelectionType.Range;
			}
			if (oEvent.metaKey || oEvent.ctrlKey) {
				sSelectionType = sap.ui.commons.Tree.SelectionType.Toggle;
			}
		}
		oTree.setSelection(this, sSelectionType);

		//Set focus
		oDomClicked = jQuery(oDomClicked).closest(".sapUiTreeNode")[0];
		oTree.placeFocus(oDomClicked);
		oDomClicked.focus();
	}
};


//***********************************************************************************
//* KEYBOARD NAVIGATION
//***********************************************************************************
/** The generic selection event (ENTER or SPACE)
* @param {event} oEvent The sapselect event object
 * @private
 */
sap.ui.commons.TreeNode.prototype.onsapselect = function(oEvent){

	if(this.getSelectable()){
		this.getTree().setSelection(this);
	}
	else if(this.getExpanded()){
		this.collapse();
	}
	else{
		this.expand();
	}


};

/**
 * The numpad + key event, which will expand the current node
 * @param {event} oEvent The sapexpand event object
 * @private
 */
sap.ui.commons.TreeNode.prototype.onsapexpand = function(oEvent) {
	this.expand();
};

/**
 * The numpad - key event, which will expand the current node
 * @private
 * @param {event} oEvent The sapcollapse event object
 */
sap.ui.commons.TreeNode.prototype.onsapcollapse = function(oEvent) {
	this.collapse();

};

/**
* LEFT key behavior
* Opens the section or activates the UI element on LEFT key
* @private
* @param oEvent Browser event
*/
sap.ui.commons.TreeNode.prototype.onsapleft = function(oEvent){
	if (sap.ui.getCore().getConfiguration().getRTL()) {
		this.expand();
	}
	else {
		this.collapse();
	}
	oEvent.preventDefault();
};

/**
* RIGHT key behavior
* Opens the section or activates the UI element on RIGHT key
* @private
* @param oEvent Browser event
*/
sap.ui.commons.TreeNode.prototype.onsapright = function(oEvent){
	if (sap.ui.getCore().getConfiguration().getRTL()) {
		this.collapse();
	}
	else {
		this.expand();
	}
	oEvent.preventDefault();
};

//***********************************************************************************
//* FOCUS HANDLING
//***********************************************************************************

/**Focuses the node
 * @private
 */
sap.ui.commons.TreeNode.prototype.focus = function () {
	var domFocus = this.getFocusDomRef();
	if(domFocus){
		domFocus.setAttribute("tabindex", "0");
		domFocus.focus();
	}
};

/**Removes focus from the node
 * @private
 */
sap.ui.commons.TreeNode.prototype.blur = function () {
	var domFocus = this.getFocusDomRef();
	if(domFocus){
		domFocus.setAttribute("tabindex", "-1");
	}
};



//***********************************************************************************
//* HELPER METHODS
//***********************************************************************************

/** Returns the parent tree control. Not necessarily the direct parent if the node is a subnode.
 * @returns The parent tree control
 * @private
 */
sap.ui.commons.TreeNode.prototype.getTree = function() {
	var parent = this.getParent();

	while(parent instanceof sap.ui.commons.TreeNode){
		parent = parent.getParent();
	}
	return parent;
};

/** Returns true if the node has any subnodes.
 * @returns True if the node has any subnode
 * @private
 */
sap.ui.commons.TreeNode.prototype.hasChildren = function(){
	var aSubNodes = this.getNodes();
	if(aSubNodes.length){
		return true;
	}
	return false;
};

/** Returns true if the node is visible(parent and all grand parent expanded).
 * @returns True if the node is visible
 * @private
 */
sap.ui.commons.TreeNode.prototype.isVisible = function(){
	var parent = this.getParent();
	while(parent instanceof sap.ui.commons.TreeNode){
		if(!parent.getExpanded()){
			return false;
		}

		parent = parent.getParent();
	}
	return true;
};


/**
* Used for Javascript closure.
* @private
* @return	Returns a function to be called as callback function for jQuery animation
*/
sap.ui.commons.TreeNode.prototype.getCallbackFunction = function(oNode,oDomNode,bCollapsing){
	var oTree = oNode.getTree();
	if(bCollapsing){
		return function(){
			oTree.adjustFocus();
			oTree.adjustSelectionOnCollapsing(oDomNode);
		};
	}
	else{
		return function(){
			oTree.adjustSelectionOnExpanding(oDomNode);
		};
	}
};

/**
 * In case the selected node is not visible, change the scroll position of the
 * tree to get it into view.
 *
 * @return {sap.ui.commons.TreeNode} <code>this</code> to allow method chaining
 * @private
 */
sap.ui.commons.TreeNode.prototype.scrollIntoView = function() {
	var $Node = this.$(),
		$Tree = this.getTree().$(),
		$TreeCont = $Tree.find(".sapUiTreeCont"),
		iOffsetTop = $Node[0].offsetTop,
		iScrollTop = $TreeCont.scrollTop(),
		iHeight = $TreeCont.height(),
		iNewScrollTop;

	if (iOffsetTop > iScrollTop + iHeight) {
		iNewScrollTop = iOffsetTop - Math.floor(iHeight * 0.8);
		$TreeCont.animate({scrollTop:iNewScrollTop});
	}
	else if (iOffsetTop < iScrollTop) {
		iNewScrollTop = iOffsetTop - Math.floor(iHeight * 0.2);
		$TreeCont.animate({scrollTop:iNewScrollTop});
	}
};

//***********************************************************************************
//* REDEFINITIONS
//***********************************************************************************

/**
 * Returns the regular tooltip. If empty, returns the text
* @private
 * @return {string} string tooltip
 */
sap.ui.commons.TreeNode.prototype.getTooltip_AsString = function() {
	var sTooltip;
	var oTooltip = this.getTooltip();
	if (typeof oTooltip === "string" || oTooltip instanceof String ) {
		sTooltip = oTooltip;
	}

	if(!sTooltip){
		sTooltip = this.getText();
	}
	return sTooltip;
};

}; // end of sap/ui/commons/TreeNode.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TriStateCheckBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TriStateCheckBox.
jQuery.sap.declare("sap.ui.commons.TriStateCheckBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TriStateCheckBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelectionState selectionState} : sap.ui.commons.TriStateCheckBoxState (default: sap.ui.commons.TriStateCheckBoxState.Unchecked)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.TriStateCheckBox#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * TriStateCheckBox to reflect mixed state for checkboxes. The control can display three states, namely checked, unchecked and mixed. However, mixed state cannot be directly reached by user interaction on the particular control.
 * It can be only set by the control's public toggle function, to make a behaviour possible which is e.g. required in checkbox trees.
 * 
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.7.2
 * @name sap.ui.commons.TriStateCheckBox
 */
sap.ui.core.Control.extend("sap.ui.commons.TriStateCheckBox", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"toggle"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"selectionState" : {type : "sap.ui.commons.TriStateCheckBoxState", group : "Data", defaultValue : sap.ui.commons.TriStateCheckBoxState.Unchecked},
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.TriStateCheckBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.TriStateCheckBox.extend
 * @function
 */

sap.ui.commons.TriStateCheckBox.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>selectionState</code>.
 * Defines the states of the checkbox
 *
 * Default value is <code>Unchecked</code>
 *
 * @return {sap.ui.commons.TriStateCheckBoxState} the value of property <code>selectionState</code>
 * @public
 * @name sap.ui.commons.TriStateCheckBox#getSelectionState
 * @function
 */

/**
 * Setter for property <code>selectionState</code>.
 *
 * Default value is <code>Unchecked</code> 
 *
 * @param {sap.ui.commons.TriStateCheckBoxState} oSelectionState  new value for property <code>selectionState</code>
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#setSelectionState
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the check box
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.commons.TriStateCheckBox#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#setText
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.TriStateCheckBox#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Using this property, the control could be disabled, if required.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.TriStateCheckBox#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#setEnabled
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Specifies whether the user shall be allowed to flag the check box
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.commons.TriStateCheckBox#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#setEditable
 * @function
 */


/**
 * Getter for property <code>valueState</code>.
 * Accepts the core enumeration ValueState.type that supports 'None', 'Error', 'Warning' and 'Success'.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.ui.commons.TriStateCheckBox#getValueState
 * @function
 */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#setValueState
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width can be set to an absolute value. If no value is set, the control width results from the text length.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.TriStateCheckBox#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#setWidth
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * The value can be set to LTR or RTL. Otherwise, the control inherits the text direction from its parent control.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.ui.commons.TriStateCheckBox#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#setTextDirection
 * @function
 */


/**
 * 
 * Event is triggered when the control status is changed by the user by flagging or unflagging the checkbox.
 *  
 *
 * @name sap.ui.commons.TriStateCheckBox#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.selectionState
 *         Checks whether the box is flagged or not flagged.
 * 
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.TriStateCheckBox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.TriStateCheckBox</code>.<br/> itself. 
 *  
 * 
 * Event is triggered when the control status is changed by the user by flagging or unflagging the checkbox.
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.TriStateCheckBox</code>.<br/> itself.
 *
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.TriStateCheckBox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TriStateCheckBox#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectionState' of type <code>string</code> 
					Checks whether the box is flagged or not flagged.
					</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.TriStateCheckBox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.TriStateCheckBox#fireChange
 * @function
 */


/**
 * 
 * Changes the current value of the control.
 * 
 *
 * @name sap.ui.commons.TriStateCheckBox.prototype.toggle
 * @function
 * @param {string} 
 *         sDestState
 * 
 *         destined selection state of checkbox
 * 

 * @type void
 * @public
 */


// Start of sap\ui\commons\TriStateCheckBox.js
/**
 * Event handler called when the check box is clicked.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
 sap.ui.commons.TriStateCheckBox.prototype.onclick = function(oEvent) {
	if(!!sap.ui.Device.browser.internet_explorer && (!this.getEnabled())){
		// in IE tabindex = -1 hides focus, so in disabled case tabindex must be temporarily set to 0
		// as long as CheckBox is focused
		this.$().attr("tabindex", 0).addClass("sapUiTriCbFoc"); // the CSS class itself is not used, but IE only draws the standard focus outline when it is added
	}
	this.userToggle(oEvent);
};

/** 
 * Event handler called on focus out
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TriStateCheckBox.prototype.onfocusout = function(oEvent) {

	if(!!sap.ui.Device.browser.internet_explorer && (!this.getEnabled())){
		// in IE tabindex = -1 hides focus, so in disabled case tabindex must be temporarily set to 0
		// as long as CheckBox is focused - now unset this again
		this.$().attr("tabindex", -1).removeClass("sapUiTriCbFoc");
	}
};

/** 
 * Event handler called when the space key is pressed.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TriStateCheckBox.prototype.onsapspace = function(oEvent) {
	this.userToggle(oEvent);
};

/** 
 * Method called internally whenever a user clicks on a tri-state checkbox:
 * users can only switch between checked and unchecked by direct manipulation by click or key
 *
 * @param {jQuery.Event} oEvent
 * @private
 */

sap.ui.commons.TriStateCheckBox.prototype.userToggle = function(oEvent){
if (this.getEnabled() && this.getEditable()) {
	// don't allow users to switch to mixed state manually
		if (this.getSelectionState() === 'Mixed' || this.getSelectionState() === "Unchecked"){
			this.toggle("Checked");
		}
		else{
			this.toggle("Unchecked");
		}
		this.fireChange({selectionState: this.getSelectionState()});
	} else {
		// CheckBox has been activated by the user, but value cannot be changed
		// do nothing, but restore the focus to the complete control
		this.getDomRef().focus();
	}
};

/**
 * Method called whenever a user clicks on a tri-state checkbox
 *
 * @param destState 
 * @public
 */
sap.ui.commons.TriStateCheckBox.prototype.toggle = function(destState) {
	if (destState in sap.ui.commons.TriStateCheckBoxState){
			this.setSelectionState(destState);
	}
};
}; // end of sap/ui/commons/TriStateCheckBox.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ValueHelpField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ValueHelpField.
jQuery.sap.declare("sap.ui.commons.ValueHelpField");




/**
 * Constructor for a new ValueHelpField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIconURL iconURL} : sap.ui.core.URI</li>
 * <li>{@link #getIconHoverURL iconHoverURL} : sap.ui.core.URI</li>
 * <li>{@link #getIconDisabledURL iconDisabledURL} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.ValueHelpField#event:valueHelpRequest valueHelpRequest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.TextField#constructor sap.ui.commons.TextField}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A TextField with an attached icon which triggeres an event.
 * @extends sap.ui.commons.TextField
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ValueHelpField
 */
sap.ui.commons.TextField.extend("sap.ui.commons.ValueHelpField", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"iconURL" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"iconHoverURL" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"iconDisabledURL" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null}
	},
	events : {
		"valueHelpRequest" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ValueHelpField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ValueHelpField.extend
 * @function
 */

sap.ui.commons.ValueHelpField.M_EVENTS = {'valueHelpRequest':'valueHelpRequest'};


/**
 * Getter for property <code>iconURL</code>.
 * Url of the standard icon for the value help. If no parameter is supplied the default icon image will be shown.
 * This can be an URI to an image or an icon font URI.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconURL</code>
 * @public
 * @name sap.ui.commons.ValueHelpField#getIconURL
 * @function
 */

/**
 * Setter for property <code>iconURL</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconURL  new value for property <code>iconURL</code>
 * @return {sap.ui.commons.ValueHelpField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ValueHelpField#setIconURL
 * @function
 */


/**
 * Getter for property <code>iconHoverURL</code>.
 * URL of the icon for the value help when hovered. If no parameter is supplied the standard icon image will be shown.
 * If a icon font icon is used, this property is ignored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconHoverURL</code>
 * @public
 * @name sap.ui.commons.ValueHelpField#getIconHoverURL
 * @function
 */

/**
 * Setter for property <code>iconHoverURL</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconHoverURL  new value for property <code>iconHoverURL</code>
 * @return {sap.ui.commons.ValueHelpField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ValueHelpField#setIconHoverURL
 * @function
 */


/**
 * Getter for property <code>iconDisabledURL</code>.
 * URL of the icon for the value help when disabled. If no parameter is supplied the default icon image will be shown.
 * If a icon font icon is used, this property is ignored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconDisabledURL</code>
 * @public
 * @name sap.ui.commons.ValueHelpField#getIconDisabledURL
 * @function
 */

/**
 * Setter for property <code>iconDisabledURL</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconDisabledURL  new value for property <code>iconDisabledURL</code>
 * @return {sap.ui.commons.ValueHelpField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ValueHelpField#setIconDisabledURL
 * @function
 */


/**
 * Event which is fired when the ValueHelp is requested. 
 *
 * @name sap.ui.commons.ValueHelpField#valueHelpRequest
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'valueHelpRequest' event of this <code>sap.ui.commons.ValueHelpField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.ValueHelpField</code>.<br/> itself. 
 *  
 * Event which is fired when the ValueHelp is requested. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.ValueHelpField</code>.<br/> itself.
 *
 * @return {sap.ui.commons.ValueHelpField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ValueHelpField#attachValueHelpRequest
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'valueHelpRequest' event of this <code>sap.ui.commons.ValueHelpField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.ValueHelpField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ValueHelpField#detachValueHelpRequest
 * @function
 */

/**
 * Fire event valueHelpRequest to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ValueHelpField} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.ValueHelpField#fireValueHelpRequest
 * @function
 */


// Start of sap\ui\commons\ValueHelpField.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


sap.ui.commons.ValueHelpField.prototype.onBeforeRendering = function(){
	var sIcon = sap.ui.core.theming.Parameters.get('sap.ui.commons.ValueHelpField:sapUiValueHelpIconDsblUrl');
	this.sIconDsblUrl = jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIcon;

	sIcon = sap.ui.core.theming.Parameters.get('sap.ui.commons.ValueHelpField:sapUiValueHelpIconRegularUrl');
	this.sIconRegularUrl = jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIcon;
	
	sIcon = sap.ui.core.theming.Parameters.get('sap.ui.commons.ValueHelpField:sapUiValueHelpIconHoverUrl');
	this.sIconHoverUrl = jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIcon;
};

sap.ui.commons.ValueHelpField.prototype.onmouseover = function (oEvent) {

	if (oEvent.target.id == this.getId() + '-icon' && this.getEnabled() && this.getEditable() && !this.bIsIconURI) {
		if (this.getIconHoverURL()) {
			this.sIconHoverUrl = this.getIconHoverURL();
		} else if (this.getIconURL()) {
			this.sIconHoverUrl = this.sIconRegularUrl;
		} else {
			var sIcon = sap.ui.core.theming.Parameters.get('sap.ui.commons.ValueHelpField:sapUiValueHelpIconHoverUrl');
			this.sIconHoverUrl = jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIcon;
		}
		var oIcon = jQuery.sap.byId(oEvent.target.id);
		oIcon.attr( 'src', this.sIconHoverUrl );
	}
};

sap.ui.commons.ValueHelpField.prototype.onmouseout = function (oEvent) {
	if (oEvent.target.id == this.getId() + '-icon' && this.getEnabled() && this.getEditable() && !this.bIsIconURI) {
		var oIcon = jQuery.sap.byId(oEvent.target.id);
		oIcon.attr( 'src', this.sIconRegularUrl );
	}
};

sap.ui.commons.ValueHelpField.prototype.onclick = function(oEvent){
if (oEvent.target.id == this.getId() + '-icon' && this.getEnabled() && this.getEditable()) {
		this.fireValueHelpRequest({/* no parameters */});
	}
};

sap.ui.commons.ValueHelpField.prototype.setEnabled = function(bEnabled) {
	var bOldEnabled = this.getEnabled();
	sap.ui.commons.TextField.prototype.setEnabled.apply(this, arguments);

	if (this.getDomRef() && bOldEnabled != bEnabled && !this.bIsIconURI) {
		var oIcon = this.$("icon");
		if (bEnabled) {
			oIcon.attr( 'src', this.sIconRegularUrl );
			oIcon.removeClass('sapUiTfValueHelpDsblIcon');
			oIcon.addClass('sapUiTfValueHelpRegularIcon');
		} else {
			oIcon.attr( 'src', this.sIconRegularUrl );
			oIcon.removeClass('sapUiTfValueHelpRegularIcon');
			oIcon.addClass('sapUiTfValueHelpDsblIcon');
		}
	}
};

sap.ui.commons.ValueHelpField.prototype.setEditable = function(bEditable) {
	var bOldEditable = this.getEditable();
	sap.ui.commons.TextField.prototype.setEditable.apply(this, arguments);

	if (this.getDomRef() && bOldEditable != bEditable && !this.bIsIconURI) {
		var oIcon = this.$("icon");
		if (bEditable) {
			oIcon.removeClass('sapUiTfValueHelpDsblIcon');
			oIcon.addClass('sapUiTfValueHelpRegularIcon');
		} else {
			oIcon.removeClass('sapUiTfValueHelpRegularIcon');
			oIcon.addClass('sapUiTfValueHelpDsblIcon');
		}
	}
};

/**
 * Handle F4 event
 * @param {jQuery.Event} oEvent the occurring event
 * @protected
 */
sap.ui.commons.ValueHelpField.prototype.onsapshow = function(oEvent) {
	this._checkChange(oEvent);
	this.fireValueHelpRequest({/* no parameters */});
	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/*
 * Extends the method inherited from sap.ui.core.Element by providing information on Search Help access
 *
 * @return {string} string tooltip or undefined
 * @public
 */
sap.ui.commons.ValueHelpField.prototype.getTooltip_AsString = function() {
	var sTooltipString = sap.ui.commons.TextField.prototype.getTooltip_AsString.apply(this, arguments);
	if (this.getEnabled() && this.getEditable()) {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
		// ResourceBundle always returns the key if the text is not found
		var sSearchHelp = rb.getText("DDBX_SHI_ARIA");
		sSearchHelp = sSearchHelp === "DDBX_SHI_ARIA"?"Open search help via {0}":sSearchHelp;
		sSearchHelp = sSearchHelp.replace("{0}", rb.getText("DDBX_SHIF4"));
		return (sTooltipString?sTooltipString + " - ":"") + sSearchHelp;
	} else {
		return sTooltipString;
	}
};

/**
 * Called after the theme has been switched. Some adjustments required.
 * @private
 */
sap.ui.commons.ValueHelpField.prototype.onThemeChanged = function (oEvent) {
	if(this.getDomRef()){
		this.invalidate();
	}
};

sap.ui.commons.ValueHelpField.prototype.exit = function(){
	this.sIconRegularUrl = undefined;
	this.sIconHoverUrl = undefined;
	this.sIconDsblUrl = undefined;
};
}; // end of sap/ui/commons/ValueHelpField.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.Form') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.form.Form.
jQuery.sap.declare("sap.ui.commons.form.Form");

jQuery.sap.require('sap.ui.layout.form.Form'); // unlisted dependency retained



/**
 * Constructor for a new form/Form.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.Form#constructor sap.ui.layout.form.Form}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Form control.
 * Holder for form control to be rendered in a specific form layout.
 * A Form supports VariantLayoutData for it's conent to allow a simple switching of Layouts.
 * @extends sap.ui.layout.form.Form
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.form.Form
 */
sap.ui.layout.form.Form.extend("sap.ui.commons.form.Form", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.form.Form with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.form.Form.extend
 * @function
 */


// Start of sap\ui\commons\form\Form.js
/**
 * This file defines behavior for the control,
 */

/* Overwrite to have right "since" in there */

/**
* Getter for property <code>visible</code>.
* Invisible Forms are not rendered.
*
* Default value is <code>true</code>
*
* @return {boolean} the value of property <code>visible</code>
* @public
* @since 1.12.0
* @name sap.ui.commons.form.Form#getVisible
* @function
*/

/**
* Setter for property <code>visible</code>.
*
* Default value is <code>true</code>
*
* @param {boolean} bVisible new value for property <code>visible</code>
* @return {sap.ui.commons.form.Form} <code>this</code> to allow method chaining
* @public
* @since 1.12.0
* @name sap.ui.commons.form.Form#setVisible
* @function
*/
}; // end of sap/ui/commons/form/Form.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.FormContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.form.FormContainer.
jQuery.sap.declare("sap.ui.commons.form.FormContainer");

jQuery.sap.require('sap.ui.layout.form.FormContainer'); // unlisted dependency retained



/**
 * Constructor for a new form/FormContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.FormContainer#constructor sap.ui.layout.form.FormContainer}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Used to group form elements.
 * Can contain other form elements or containers.
 * @extends sap.ui.layout.form.FormContainer
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.form.FormContainer
 */
sap.ui.layout.form.FormContainer.extend("sap.ui.commons.form.FormContainer", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.form.FormContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.form.FormContainer.extend
 * @function
 */


// Start of sap\ui\commons\form\FormContainer.js
/**
 * This file defines behavior for the control,
 */

/* Overwrite to have right "since" in there */

/**
* Getter for property <code>visible</code>.
* Invisible FormContainers are not rendered.
*
* Default value is <code>true</code>
*
* @return {boolean} the value of property <code>visible</code>
* @public
* @since 1.12.0
* @name sap.ui.commons.form.FormContainer#getVisible
* @function
*/

/**
* Setter for property <code>visible</code>.
*
* Default value is <code>true</code>
*
* @param {boolean} bVisible new value for property <code>visible</code>
* @return {sap.ui.commons.form.FormContainer} <code>this</code> to allow method chaining
* @public
* @since 1.12.0
* @name sap.ui.commons.form.FormContainer#setVisible
* @function
*/
}; // end of sap/ui/commons/form/FormContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.FormElement') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.form.FormElement.
jQuery.sap.declare("sap.ui.commons.form.FormElement");

jQuery.sap.require('sap.ui.layout.form.FormElement'); // unlisted dependency retained



/**
 * Constructor for a new form/FormElement.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.FormElement#constructor sap.ui.layout.form.FormElement}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A form element is a combination of one label and different controls associated to this label.
 * @extends sap.ui.layout.form.FormElement
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.form.FormElement
 */
sap.ui.layout.form.FormElement.extend("sap.ui.commons.form.FormElement", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.form.FormElement with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.form.FormElement.extend
 * @function
 */


// Start of sap\ui\commons\form\FormElement.js
/**
 * This file defines behavior for the control,
 */

/* Overwrite to have right "since" in there */

/**
* Getter for property <code>visible</code>.
* Invisible FormElements are not rendered.
*
* Default value is <code>true</code>
*
* @return {boolean} the value of property <code>visible</code>
* @public
* @since 1.12.0
* @name sap.ui.commons.form.FormElement#getVisible
* @function
*/
/**
* Setter for property <code>visible</code>.
*
* Default value is <code>true</code>
*
* @param {boolean} bVisible new value for property <code>visible</code>
* @return {sap.ui.commons.form.FormElement} <code>this</code> to allow method chaining
* @public
* @since 1.12.0
* @name sap.ui.commons.form.FormElement#setVisible
* @function
*/
}; // end of sap/ui/commons/form/FormElement.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.FormLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.form.FormLayout.
jQuery.sap.declare("sap.ui.commons.form.FormLayout");

jQuery.sap.require('sap.ui.layout.form.FormLayout'); // unlisted dependency retained



/**
 * Constructor for a new form/FormLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.FormLayout#constructor sap.ui.layout.form.FormLayout}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Base layout for Forms.
 * Other Layouts must inherit from this one.
 * @extends sap.ui.layout.form.FormLayout
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.form.FormLayout
 */
sap.ui.layout.form.FormLayout.extend("sap.ui.commons.form.FormLayout", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.form.FormLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.form.FormLayout.extend
 * @function
 */


// Start of sap\ui\commons\form\FormLayout.js
/**
 * This file defines behavior for the control,
 */

}; // end of sap/ui/commons/form/FormLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.GridContainerData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.form.GridContainerData.
jQuery.sap.declare("sap.ui.commons.form.GridContainerData");

jQuery.sap.require('sap.ui.layout.form.GridContainerData'); // unlisted dependency retained



/**
 * Constructor for a new form/GridContainerData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.GridContainerData#constructor sap.ui.layout.form.GridContainerData}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Grid layout specific properties for FormContainers.
 * The width and height properties of the elements are ignored since the witdh and heights are defined by the grid cells.
 * @extends sap.ui.layout.form.GridContainerData
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.form.GridContainerData
 */
sap.ui.layout.form.GridContainerData.extend("sap.ui.commons.form.GridContainerData", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.form.GridContainerData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.form.GridContainerData.extend
 * @function
 */


// Start of sap\ui\commons\form\GridContainerData.js
///**
// * This file defines behavior for the control, 
// */
//sap.ui.commons.form.GridLayoutdata.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/ui/commons/form/GridContainerData.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.GridElementData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.form.GridElementData.
jQuery.sap.declare("sap.ui.commons.form.GridElementData");

jQuery.sap.require('sap.ui.layout.form.GridElementData'); // unlisted dependency retained



/**
 * Constructor for a new form/GridElementData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.GridElementData#constructor sap.ui.layout.form.GridElementData}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The grid specific layout data for FormElement fields.
 * The width property of the elements is ignored since the width is defined by grid cells.
 * @extends sap.ui.layout.form.GridElementData
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.form.GridElementData
 */
sap.ui.layout.form.GridElementData.extend("sap.ui.commons.form.GridElementData", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.form.GridElementData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.form.GridElementData.extend
 * @function
 */


// Start of sap\ui\commons\form\GridElementData.js
///**
// * This file defines behavior for the control, 
// */
//sap.ui.commons.form.GridElementData.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/ui/commons/form/GridElementData.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.GridLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.form.GridLayout.
jQuery.sap.declare("sap.ui.commons.form.GridLayout");

jQuery.sap.require('sap.ui.layout.form.GridLayout'); // unlisted dependency retained



/**
 * Constructor for a new form/GridLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.GridLayout#constructor sap.ui.layout.form.GridLayout}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This Layout implements a guideline 2.0 grid. This can be a 16 column grid or an 8 column grid.
 * 
 * To adjust the content inside the GridLayout GridContainerData and GridElementData could be used.
 * @extends sap.ui.layout.form.GridLayout
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.form.GridLayout
 */
sap.ui.layout.form.GridLayout.extend("sap.ui.commons.form.GridLayout", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.form.GridLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.form.GridLayout.extend
 * @function
 */


// Start of sap\ui\commons\form\GridLayout.js
/**
 * This file defines behavior for the control
 */
}; // end of sap/ui/commons/form/GridLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.ResponsiveLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.form.ResponsiveLayout.
jQuery.sap.declare("sap.ui.commons.form.ResponsiveLayout");

jQuery.sap.require('sap.ui.layout.form.ResponsiveLayout'); // unlisted dependency retained



/**
 * Constructor for a new form/ResponsiveLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.ResponsiveLayout#constructor sap.ui.layout.form.ResponsiveLayout}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Renders a form with responsive layout. Internally the ResponsiveFlowLayout is used.
 * @extends sap.ui.layout.form.ResponsiveLayout
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.10.0
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.form.ResponsiveLayout
 */
sap.ui.layout.form.ResponsiveLayout.extend("sap.ui.commons.form.ResponsiveLayout", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.form.ResponsiveLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.form.ResponsiveLayout.extend
 * @function
 */


// Start of sap\ui\commons\form\ResponsiveLayout.js
/**
 * This file defines behavior for the control,
 */
}; // end of sap/ui/commons/form/ResponsiveLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.form.SimpleForm') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.form.SimpleForm.
jQuery.sap.declare("sap.ui.commons.form.SimpleForm");

jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained



/**
 * Constructor for a new form/SimpleForm.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.form.SimpleForm#constructor sap.ui.layout.form.SimpleForm}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Use the SimpleForm to create a form based on title, label and fields that are stacked in the content aggregation. Add Title to start a new FormContainer(Group). Add Label to start a new row in the container. Add Input/Display controls as needed. Use LayoutData to influence the layout for special cases in the Input/Display controls.
 * @extends sap.ui.layout.form.SimpleForm
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.12
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.form.SimpleForm
 */
sap.ui.layout.form.SimpleForm.extend("sap.ui.commons.form.SimpleForm", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.form.SimpleForm with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.form.SimpleForm.extend
 * @function
 */


// Start of sap\ui\commons\form\SimpleForm.js
///**
//* This file defines behavior for the control,
//*/

/* Overwrite to have right "since" in there */

/**
* Getter for property <code>layout</code>.
* The FormLayout that is used to render the SimpleForm
*
* Default value is <code>ResponsiveLayout</code>
*
* @return {sap.ui.commons.form.SimpleFormLayout} the value of property <code>layout</code>
* @public
* @since 1.14
* @name sap.ui.commons.form.SimpleForm#getLayout
* @function
*/
/**
* Setter for property <code>layout</code>.
*
* Default value is <code>ResponsiveLayout</code>
*
* @param {sap.ui.commons.form.SimpleFormLayout} oLayout new value for property <code>layout</code>
* @return {sap.ui.commons.form.SimpleForm} <code>this</code> to allow method chaining
* @public
* @since 1.14
* @name sap.ui.commons.form.SimpleForm#setLayout
* @function
*/
}; // end of sap/ui/commons/form/SimpleForm.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.BorderLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.BorderLayout.
jQuery.sap.declare("sap.ui.commons.layout.BorderLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new layout/BorderLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRtl rtl} : boolean (default: false)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTop top} : sap.ui.commons.layout.BorderLayoutArea</li>
 * <li>{@link #getBegin begin} : sap.ui.commons.layout.BorderLayoutArea</li>
 * <li>{@link #getCenter center} : sap.ui.commons.layout.BorderLayoutArea</li>
 * <li>{@link #getEnd end} : sap.ui.commons.layout.BorderLayoutArea</li>
 * <li>{@link #getBottom bottom} : sap.ui.commons.layout.BorderLayoutArea</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Based upon the border layout as it comes with the Java standard. Using this layout, you are able to divide your available UI space into five areas whose sizes can be defined. These areas are: Top: Header; Bottom: Footer; Begin: Left/right-hand side panel; Center: Content area
 * in the middle; End: Right/left-hand side panel.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.layout.BorderLayout
 */
sap.ui.core.Control.extend("sap.ui.commons.layout.BorderLayout", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"createArea", "setAreaData", "addContent", "insertContent", "removeContent", "removeAllContent", "getContent", "indexOfContent", "destroyContent", "getAreaData", "getAreaById", "getArea"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"rtl" : {type : "boolean", group : "Appearance", defaultValue : false, deprecated: true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
	},
	aggregations : {
    	"top" : {type : "sap.ui.commons.layout.BorderLayoutArea", multiple : false}, 
    	"begin" : {type : "sap.ui.commons.layout.BorderLayoutArea", multiple : false}, 
    	"center" : {type : "sap.ui.commons.layout.BorderLayoutArea", multiple : false}, 
    	"end" : {type : "sap.ui.commons.layout.BorderLayoutArea", multiple : false}, 
    	"bottom" : {type : "sap.ui.commons.layout.BorderLayoutArea", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.BorderLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.BorderLayout.extend
 * @function
 */


/**
 * Getter for property <code>rtl</code>.
 * The RTL setting swaps the areas Begin and End. Since version 1.5.2, this property is deprecated and ignored as it conflicts with the central configuration for the page.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>rtl</code>
 * @public
 * @deprecated Since version 1.5.2. 
 * RTL should not be configured on control level but is determined by a global configuration.
 * @name sap.ui.commons.layout.BorderLayout#getRtl
 * @function
 */

/**
 * Setter for property <code>rtl</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRtl  new value for property <code>rtl</code>
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.5.2. 
 * RTL should not be configured on control level but is determined by a global configuration.
 * @name sap.ui.commons.layout.BorderLayout#setRtl
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the overall width of the layout
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.layout.BorderLayout#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Defines the overall height of the layout
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.layout.BorderLayout#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>top</code>.<br/>
 * Represents the Top area
 * 
 * @return {sap.ui.commons.layout.BorderLayoutArea}
 * @public
 * @name sap.ui.commons.layout.BorderLayout#getTop
 * @function
 */


/**
 * Setter for the aggregated <code>top</code>.
 * @param {sap.ui.commons.layout.BorderLayoutArea} oTop
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#setTop
 * @function
 */
	

/**
 * Destroys the top in the aggregation 
 * named <code>top</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#destroyTop
 * @function
 */


/**
 * Getter for aggregation <code>begin</code>.<br/>
 * Represents the Begin area
 * 
 * @return {sap.ui.commons.layout.BorderLayoutArea}
 * @public
 * @name sap.ui.commons.layout.BorderLayout#getBegin
 * @function
 */


/**
 * Setter for the aggregated <code>begin</code>.
 * @param {sap.ui.commons.layout.BorderLayoutArea} oBegin
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#setBegin
 * @function
 */
	

/**
 * Destroys the begin in the aggregation 
 * named <code>begin</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#destroyBegin
 * @function
 */


/**
 * Getter for aggregation <code>center</code>.<br/>
 * Represents the Center area
 * 
 * @return {sap.ui.commons.layout.BorderLayoutArea}
 * @public
 * @name sap.ui.commons.layout.BorderLayout#getCenter
 * @function
 */


/**
 * Setter for the aggregated <code>center</code>.
 * @param {sap.ui.commons.layout.BorderLayoutArea} oCenter
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#setCenter
 * @function
 */
	

/**
 * Destroys the center in the aggregation 
 * named <code>center</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#destroyCenter
 * @function
 */


/**
 * Getter for aggregation <code>end</code>.<br/>
 * Represents the End area
 * 
 * @return {sap.ui.commons.layout.BorderLayoutArea}
 * @public
 * @name sap.ui.commons.layout.BorderLayout#getEnd
 * @function
 */


/**
 * Setter for the aggregated <code>end</code>.
 * @param {sap.ui.commons.layout.BorderLayoutArea} oEnd
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#setEnd
 * @function
 */
	

/**
 * Destroys the end in the aggregation 
 * named <code>end</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#destroyEnd
 * @function
 */


/**
 * Getter for aggregation <code>bottom</code>.<br/>
 * Represents the Bottom area
 * 
 * @return {sap.ui.commons.layout.BorderLayoutArea}
 * @public
 * @name sap.ui.commons.layout.BorderLayout#getBottom
 * @function
 */


/**
 * Setter for the aggregated <code>bottom</code>.
 * @param {sap.ui.commons.layout.BorderLayoutArea} oBottom
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#setBottom
 * @function
 */
	

/**
 * Destroys the bottom in the aggregation 
 * named <code>bottom</code>.
 * @return {sap.ui.commons.layout.BorderLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayout#destroyBottom
 * @function
 */


/**
 * Creates the specified area and adds the given controls to it. Returns the created area.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.createArea
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies which area will be created. If the area is already available, the method call is ignored.
 * @param {sap.ui.core.Control} 
 *         oControls
 *         Any number of controls can be submitted to be added to the newly created area; where each control is submitted as one argument.

 * @type sap.ui.commons.layout.BorderLayoutArea
 * @public
 */


/**
 * Sets the properties of the specified area with the given values
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.setAreaData
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area whose properties will be set
 * @param {object} 
 *         oData
 *         JSON-like object that contains the values to be set

 * @type void
 * @public
 */


/**
 * Adds controls to the specified area
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.addContent
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area where controls will be added
 * @param {sap.ui.core.Control} 
 *         oControls
 *         N controls can be submitted to be added. Each control is submitted as one argument.

 * @type void
 * @public
 */


/**
 * Inserts controls to an area at a given index.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.insertContent
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area where the controls shall be inserted.
 * @param {int} 
 *         iIndex
 *         Specifies the index where the controls shall be added. For a negative value of iIndex, the content is inserted at
 *         position '0'; for a value greater than the current size of the aggregation, the content is inserted at the last position.
 * @param {sap.ui.core.Control} 
 *         oControl
 *         N controls can be submitted to be added. Each control is submitted as one argument.

 * @type void
 * @public
 */


/**
 * Removes the content with the given index from an area
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.removeContent
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area whose content shall be removed
 * @param {int} 
 *         iIndex
 *         Specifies the index of the control that shall be removed

 * @type void
 * @public
 */


/**
 * Removes all content from an area
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.removeAllContent
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area whose content shall be removed

 * @type void
 * @public
 */


/**
 * Returns all controls inside the specified area inside an array
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.getContent
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area whose content controls shall be returned.

 * @type sap.ui.core.Control[]
 * @public
 */


/**
 * Determines the index of a given content control
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.indexOfContent
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area that will be searched
 * @param {sap.ui.core.Control} 
 *         oContent
 *         Specifies the control whose index will be searched

 * @type int
 * @public
 */


/**
 * Destroys the content of the specified area
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.destroyContent
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area whose content will be destroyed

 * @type void
 * @public
 */


/**
 * Returns a JSON-like object that contains all property values of the requested area
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.getAreaData
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area whose data will be returned

 * @type object
 * @public
 */


/**
 * Returns the object of the specified area. If the area does not exist, the area will be created and returned.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.getAreaById
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 *         Specifies the area whose object will be returned.

 * @type sap.ui.commons.layout.BorderLayoutArea
 * @public
 */


/**
 * Returns the area of the given type. If the area does not exist, it will be created when create is set to true.
 *
 * @name sap.ui.commons.layout.BorderLayout.prototype.getArea
 * @function
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} 
 *         oAreaId
 * 
 * @param {boolean} 
 *         bCreate
 * 

 * @type sap.ui.commons.layout.BorderLayoutAreaTypes
 * @public
 */


// Start of sap\ui\commons\layout\BorderLayout.js
sap.ui.commons.layout.BorderLayout.prototype._getOrCreateArea = function(sAreaId, aContent) {

	var Types = sap.ui.commons.layout.BorderLayoutAreaTypes,
		that = this,
		oArea;

	function create(sMutator) {
		var oArea;
		
		if ( aContent ) {
			oArea = new sap.ui.commons.layout.BorderLayoutArea({
				id : that.getId() + "--" + sAreaId,
				areaId : sAreaId,
				content : aContent
			});
			that[sMutator](oArea);
		}
		
		return oArea;
	}

	// check for a valid area id
	if ( !Types.hasOwnProperty(sAreaId) ) {
		throw new Error("Invalid Area Id '" + sAreaId + "'");
	}

	// get or create
	switch(sAreaId)
	{
		case Types.top:	
			oArea = this.getTop() || create("setTop");
			break;
		case Types.begin:
			oArea = this.getBegin() || create("setBegin");
			break;
		case Types.center:
			oArea = this.getCenter() || create("setCenter");
			break;
		case Types.end:	
			oArea = this.getEnd() || create("setEnd");
			break;
		case Types.bottom:	
			oArea = this.getBottom() || create("setBottom");
			break;
		default:
			jQuery.sap.assert(false, "default case must not be reached");
			break;
	}

	return oArea;
};

sap.ui.commons.layout.BorderLayout.prototype.getArea = function(sAreaId, bCreate) {
	return this._getOrCreateArea(sAreaId, bCreate ? [] : null);
};

sap.ui.commons.layout.BorderLayout.prototype.createArea = function(sAreaId, oContent /* ... */) {
	return this._getOrCreateArea(sAreaId, Array.prototype.slice.call(arguments, 1));
};

sap.ui.commons.layout.BorderLayout.prototype.getAreaById = function(sAreaId) {
	return this._getOrCreateArea(sAreaId, []);
};

sap.ui.commons.layout.BorderLayout.prototype.getAreaData = function(sAreaId) {
	var oArea = this.getAreaById(sAreaId);
	return oArea ? 
		{
			size         : oArea.getSize(),
			visible      : oArea.getVisible(),
			overflowX    : oArea.getOverflowX(),
			overflowY    : oArea.getOverflowY(),
			contentAlign : oArea.getContentAlign()
		} : {};
};

sap.ui.commons.layout.BorderLayout.prototype.setAreaData = function(sAreaId, oData) {
	this.getArea(sAreaId, true).applySettings(oData);
	return this;
};

sap.ui.commons.layout.BorderLayout.prototype.addContent = function(sAreaId) {
	var oArea = this.getArea(sAreaId, true),
		i;
	
	for(var i=1; i<arguments.length; i++) {
		oArea.addContent(arguments[i]);
	}
	return this;
};

sap.ui.commons.layout.BorderLayout.prototype.insertContent = function(sAreaId, iIndex) { //obsolete
	var oArea = this.getArea(sAreaId, true), 
		i;
	
	for(i=2; i<arguments.length; i++) {
		oArea.insertContent(arguments[i], iIndex++);
	}
	return this;
};

sap.ui.commons.layout.BorderLayout.prototype.removeContent = function(sAreaId, vElement) {
	var oArea = this.getAreaById(sAreaId);
	if ( oArea ) {
		oArea.removeContent(vElement);
	}
	return this;
};

sap.ui.commons.layout.BorderLayout.prototype.removeAllContent = function(sAreaId) {
	var oArea = this.getAreaById(sAreaId);
	if ( oArea ) {
	  oArea.removeAllContent();
	}
	return this;
};

sap.ui.commons.layout.BorderLayout.prototype.getContent = function(sAreaId) {
	var oArea = this.getAreaById(sAreaId);
	return oArea ? oArea.getContent() : [];
};

sap.ui.commons.layout.BorderLayout.prototype.indexOfContent = function(sAreaId, oContent) {
	var oArea = this.getAreaById(sAreaId);
	return oArea ? oArea.indexOfContent(oContent) : -1;
};

sap.ui.commons.layout.BorderLayout.prototype.destroyContent = function(sAreaId) {
	this.getAreaById(sAreaId, true).destroyContent();
	return this;
};


/*
 TODOS

 - rename BorderLayoutAreaTypes to BorderLayoutAreaPosition
 - Borderlayout.createArea, getAreaById, setAreaData -> getArea(pos), setArea(pos, settings);
 - BorderlayoutArea.areaId: deprecate, redundant
 - BorderLayout.overflow: defaults?
 - RTL support in general: really swap classes or trust in our mirroring?
 */

}; // end of sap/ui/commons/layout/BorderLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.BorderLayoutArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.BorderLayoutArea.
jQuery.sap.declare("sap.ui.commons.layout.BorderLayoutArea");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new layout/BorderLayoutArea.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAreaId areaId} : sap.ui.commons.layout.BorderLayoutAreaTypes (default: sap.ui.commons.layout.BorderLayoutAreaTypes.top)</li>
 * <li>{@link #getOverflowX overflowX} : string (default: 'auto')</li>
 * <li>{@link #getOverflowY overflowY} : string (default: 'auto')</li>
 * <li>{@link #getContentAlign contentAlign} : string (default: 'left')</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize (default: '100px')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The BorderLayoutArea represents one area of a BorderLayout
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea
 */
sap.ui.core.Element.extend("sap.ui.commons.layout.BorderLayoutArea", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"areaId" : {type : "sap.ui.commons.layout.BorderLayoutAreaTypes", group : "Identification", defaultValue : sap.ui.commons.layout.BorderLayoutAreaTypes.top, deprecated: true},
		"overflowX" : {type : "string", group : "Misc", defaultValue : 'auto'},
		"overflowY" : {type : "string", group : "Misc", defaultValue : 'auto'},
		"contentAlign" : {type : "string", group : "Misc", defaultValue : 'left'},
		"size" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '100px'},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.BorderLayoutArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.BorderLayoutArea.extend
 * @function
 */


/**
 * Getter for property <code>areaId</code>.
 * Defines which area the element represents: top, begin, center, end, bottom
 *
 * Default value is <code>top</code>
 *
 * @return {sap.ui.commons.layout.BorderLayoutAreaTypes} the value of property <code>areaId</code>
 * @public
 * @deprecated Since version 1.3.3. 
 * Redundant to the aggregation by the parent border layout.
 * @name sap.ui.commons.layout.BorderLayoutArea#getAreaId
 * @function
 */

/**
 * Setter for property <code>areaId</code>.
 *
 * Default value is <code>top</code> 
 *
 * @param {sap.ui.commons.layout.BorderLayoutAreaTypes} oAreaId  new value for property <code>areaId</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.3.3. 
 * Redundant to the aggregation by the parent border layout.
 * @name sap.ui.commons.layout.BorderLayoutArea#setAreaId
 * @function
 */


/**
 * Getter for property <code>overflowX</code>.
 * The overflow mode of the area in horizontal direction as CSS value
 *
 * Default value is <code>auto</code>
 *
 * @return {string} the value of property <code>overflowX</code>
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#getOverflowX
 * @function
 */

/**
 * Setter for property <code>overflowX</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {string} sOverflowX  new value for property <code>overflowX</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#setOverflowX
 * @function
 */


/**
 * Getter for property <code>overflowY</code>.
 * The overflow mode of the area in vertical direction as CSS value
 *
 * Default value is <code>auto</code>
 *
 * @return {string} the value of property <code>overflowY</code>
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#getOverflowY
 * @function
 */

/**
 * Setter for property <code>overflowY</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {string} sOverflowY  new value for property <code>overflowY</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#setOverflowY
 * @function
 */


/**
 * Getter for property <code>contentAlign</code>.
 * The content alignment as CSS value
 *
 * Default value is <code>left</code>
 *
 * @return {string} the value of property <code>contentAlign</code>
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#getContentAlign
 * @function
 */

/**
 * Setter for property <code>contentAlign</code>.
 *
 * Default value is <code>left</code> 
 *
 * @param {string} sContentAlign  new value for property <code>contentAlign</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#setContentAlign
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Defines the height or the width. Is not used when the area element is in Center.
 *
 * Default value is <code>100px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is <code>100px</code> 
 *
 * @param {sap.ui.core.CSSSize} sSize  new value for property <code>size</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#setSize
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Controls within the area
 * 
 * <strong>Note</strong>: this is the default aggregation for layout/BorderLayoutArea.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.layout.BorderLayoutArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.BorderLayoutArea#destroyContent
 * @function
 */


// Start of sap\ui\commons\layout\BorderLayoutArea.js
jQuery.sap.require('sap.ui.core.CustomStyleClassSupport'); // unlisted dependency retained

sap.ui.core.CustomStyleClassSupport.apply(sap.ui.commons.layout.BorderLayoutArea.prototype);

sap.ui.commons.layout.BorderLayoutArea.prototype.getAreaId = function() {
	var oParent = this.getParent();
	return (oParent && oParent instanceof sap.ui.commons.layout.BorderLayout) ? this.sParentAggregationName : undefined;
};

sap.ui.commons.layout.BorderLayoutArea.prototype.setVisible = function(bVisible, oBorderLayout) {
	var sAreaId = this.getAreaId();
	
	// if the current area is the center or if no BorderLayout is provided, no animation will be shown
	if (sAreaId === "center" || !oBorderLayout) {
		this.setProperty("visible", bVisible);
		return this;
	}
	
	// with animation
	this.setProperty("visible", bVisible, true);
	this.getParent().getMetadata().getRenderer().animate(this, bVisible);
	
	return this;
};



}; // end of sap/ui/commons/layout/BorderLayoutArea.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.HorizontalLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.HorizontalLayout.
jQuery.sap.declare("sap.ui.commons.layout.HorizontalLayout");

jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained



/**
 * Constructor for a new layout/HorizontalLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.HorizontalLayout#constructor sap.ui.layout.HorizontalLayout}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A layout that provides support for horizontal alignment of controls
 * @extends sap.ui.layout.HorizontalLayout
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.layout.HorizontalLayout
 */
sap.ui.layout.HorizontalLayout.extend("sap.ui.commons.layout.HorizontalLayout", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.HorizontalLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.HorizontalLayout.extend
 * @function
 */


// Start of sap\ui\commons\layout\HorizontalLayout.js

}; // end of sap/ui/commons/layout/HorizontalLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.MatrixLayoutCell') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.MatrixLayoutCell.
jQuery.sap.declare("sap.ui.commons.layout.MatrixLayoutCell");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new layout/MatrixLayoutCell.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.ui.commons.layout.BackgroundDesign (default: 'Transparent')</li>
 * <li>{@link #getColSpan colSpan} : int (default: 1)</li>
 * <li>{@link #getHAlign hAlign} : sap.ui.commons.layout.HAlign (default: 'Begin')</li>
 * <li>{@link #getPadding padding} : sap.ui.commons.layout.Padding (default: 'End')</li>
 * <li>{@link #getRowSpan rowSpan} : int (default: 1)</li>
 * <li>{@link #getSeparation separation} : sap.ui.commons.layout.Separation (default: 'None')</li>
 * <li>{@link #getVAlign vAlign} : sap.ui.commons.layout.VAlign (default: 'Middle')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Non-control element used as part of a matrix layout's inner structure.
 * 
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell
 */
sap.ui.core.Element.extend("sap.ui.commons.layout.MatrixLayoutCell", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"addStyleClass", "removeStyleClass", "hasStyleClass"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	aggregatingType : "MatrixLayoutRow",
	properties : {
		"backgroundDesign" : {type : "sap.ui.commons.layout.BackgroundDesign", group : "", defaultValue : 'Transparent'},
		"colSpan" : {type : "int", group : "", defaultValue : 1},
		"hAlign" : {type : "sap.ui.commons.layout.HAlign", group : "", defaultValue : 'Begin'},
		"padding" : {type : "sap.ui.commons.layout.Padding", group : "", defaultValue : 'End'},
		"rowSpan" : {type : "int", group : "", defaultValue : 1},
		"separation" : {type : "sap.ui.commons.layout.Separation", group : "", defaultValue : 'None'},
		"vAlign" : {type : "sap.ui.commons.layout.VAlign", group : "", defaultValue : 'Middle'}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.MatrixLayoutCell with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.MatrixLayoutCell.extend
 * @function
 */


/**
 * Getter for property <code>backgroundDesign</code>.
 * 
 * Determines the matrix layout cell's background design.
 * 
 *
 * Default value is <code>'Transparent'</code>
 *
 * @return {sap.ui.commons.layout.BackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#getBackgroundDesign
 * @function
 */

/**
 * Setter for property <code>backgroundDesign</code>.
 *
 * Default value is <code>'Transparent'</code> 
 *
 * @param {sap.ui.commons.layout.BackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#setBackgroundDesign
 * @function
 */


/**
 * Getter for property <code>colSpan</code>.
 * 
 * Determines how many columns of the underlying grid structure are occupied
 * by this matrix layout cell.
 * 
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>colSpan</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#getColSpan
 * @function
 */

/**
 * Setter for property <code>colSpan</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iColSpan  new value for property <code>colSpan</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#setColSpan
 * @function
 */


/**
 * Getter for property <code>hAlign</code>.
 * 
 * Determines the horizontal alignment of the matrix layout cell's content
 * with the cell's borders.
 * 
 *
 * Default value is <code>'Begin'</code>
 *
 * @return {sap.ui.commons.layout.HAlign} the value of property <code>hAlign</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#getHAlign
 * @function
 */

/**
 * Setter for property <code>hAlign</code>.
 *
 * Default value is <code>'Begin'</code> 
 *
 * @param {sap.ui.commons.layout.HAlign} oHAlign  new value for property <code>hAlign</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#setHAlign
 * @function
 */


/**
 * Getter for property <code>padding</code>.
 * 
 * Determines the padding of the matrix layout cell's content within the
 * cell's borders. The default value is appropriate for all cells in a
 * form-like layout. Consider to remove the padding on the outer layout in
 * case of nesting.
 * 
 *
 * Default value is <code>'End'</code>
 *
 * @return {sap.ui.commons.layout.Padding} the value of property <code>padding</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#getPadding
 * @function
 */

/**
 * Setter for property <code>padding</code>.
 *
 * Default value is <code>'End'</code> 
 *
 * @param {sap.ui.commons.layout.Padding} oPadding  new value for property <code>padding</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#setPadding
 * @function
 */


/**
 * Getter for property <code>rowSpan</code>.
 * Determines how many rows of the underlying grid structure are occupied by this matrix layout cell.
 * In case a row-height is used, all rows affected by the RowSpan must have the same unit.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>rowSpan</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#getRowSpan
 * @function
 */

/**
 * Setter for property <code>rowSpan</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iRowSpan  new value for property <code>rowSpan</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#setRowSpan
 * @function
 */


/**
 * Getter for property <code>separation</code>.
 * 
 * Determines how a matrix layout cell is separated from its predecessor,
 * via a vertical gutter of variable width, with or without a vertical line.
 * 
 *
 * Default value is <code>'None'</code>
 *
 * @return {sap.ui.commons.layout.Separation} the value of property <code>separation</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#getSeparation
 * @function
 */

/**
 * Setter for property <code>separation</code>.
 *
 * Default value is <code>'None'</code> 
 *
 * @param {sap.ui.commons.layout.Separation} oSeparation  new value for property <code>separation</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#setSeparation
 * @function
 */


/**
 * Getter for property <code>vAlign</code>.
 * 
 * Determines the vertical alignment of the matrix layout cell's content
 * with the cell's borders.
 * 
 *
 * Default value is <code>'Middle'</code>
 *
 * @return {sap.ui.commons.layout.VAlign} the value of property <code>vAlign</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#getVAlign
 * @function
 */

/**
 * Setter for property <code>vAlign</code>.
 *
 * Default value is <code>'Middle'</code> 
 *
 * @param {sap.ui.commons.layout.VAlign} oVAlign  new value for property <code>vAlign</code>
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#setVAlign
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The matrix layout cell's content (arbitrary controls).
 * 
 * If the matrix row has a defined height and the matrix has layoutFixed = true, the controls inside of a cell should all use the same unit for its height property.
 * 
 * <strong>Note</strong>: this is the default aggregation for layout/MatrixLayoutCell.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.layout.MatrixLayoutCell} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutCell#destroyContent
 * @function
 */


/**
 * The string given as "sStyleClass" will be added to the "class" attribute of this element's root HTML element.
 * 
 * This method is intended to be used to mark controls as being of a special type for which
 * special styling can be provided using CSS selectors that reference this style class name.
 * 
 * <pre>
 * Example:
 * myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
 * 
 * ...and in CSS:
 * .myRedTextButton {
 * color: red;
 * }
 * </pre>
 * 
 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
 * make the text in this particular button red.
 * 
 * Only characters allowed inside HTML attributes are allowed.
 * Quotes are not allowed and this method will ignore any strings containing quotes.
 * Strings containing spaces are interpreted as ONE custom style class (even though CSS selectors interpret them
 * as different classes) and can only removed later by calling removeStyleClass() with exactly the
 * same (space-containing) string as parameter.
 * Multiple calls with the same sStyleClass will have no different effect than calling once.
 * If sStyleClass is null, the call is ignored.
 * 
 * Returns <code>this</code> to allow method chaining
 *
 * @name sap.ui.commons.layout.MatrixLayoutCell.prototype.addStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the CSS class name to be added

 * @type sap.ui.commons.layout.MatrixLayoutCell
 * @public
 */


/**
 * Removes the given string from the list of custom style classes that have been set previously.
 * Regular style classes like "sapUiBtn" cannot be removed.
 * 
 * Returns <code>this</code> to allow method chaining
 *
 * @name sap.ui.commons.layout.MatrixLayoutCell.prototype.removeStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the style to be removed

 * @type sap.ui.commons.layout.MatrixLayoutCell
 * @public
 */


/**
 * Returns true if the given style class string is valid and if this Element has this style class set via a previous call to addStyleClass().
 *
 * @name sap.ui.commons.layout.MatrixLayoutCell.prototype.hasStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the style to check for

 * @type boolean
 * @public
 */


// Start of sap\ui\commons\layout\MatrixLayoutCell.js
jQuery.sap.require('sap.ui.core.CustomStyleClassSupport'); // unlisted dependency retained

sap.ui.core.CustomStyleClassSupport.apply(sap.ui.commons.layout.MatrixLayoutCell.prototype);
}; // end of sap/ui/commons/layout/MatrixLayoutCell.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.MatrixLayoutRow') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.MatrixLayoutRow.
jQuery.sap.declare("sap.ui.commons.layout.MatrixLayoutRow");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new layout/MatrixLayoutRow.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} <strong>(default aggregation)</strong> : sap.ui.commons.layout.MatrixLayoutCell[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Non-control element used as part of a matrix layout's inner structure.
 * 
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow
 */
sap.ui.core.Element.extend("sap.ui.commons.layout.MatrixLayoutRow", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"addStyleClass", "removeStyleClass", "hasStyleClass"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	aggregatingType : "MatrixLayout",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null}
	},
	defaultAggregation : "cells",
	aggregations : {
    	"cells" : {type : "sap.ui.commons.layout.MatrixLayoutCell", multiple : true, singularName : "cell"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.MatrixLayoutRow with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.MatrixLayoutRow.extend
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of the row.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.layout.MatrixLayoutRow} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>cells</code>.<br/>
 * 
 * The matrix layout row's individual cells.
 * 
 * 
 * <strong>Note</strong>: this is the default aggregation for layout/MatrixLayoutRow.
 * @return {sap.ui.commons.layout.MatrixLayoutCell[]}
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow#getCells
 * @function
 */


/**
 * Inserts a cell into the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutCell}
 *          oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the cell should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the cell is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.MatrixLayoutRow} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow#insertCell
 * @function
 */

/**
 * Adds some cell <code>oCell</code> 
 * to the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutCell}
 *            oCell the cell to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.MatrixLayoutRow} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow#addCell
 * @function
 */

/**
 * Removes an cell from the aggregation named <code>cells</code>.
 *
 * @param {int | string | sap.ui.commons.layout.MatrixLayoutCell} vCell the cell to remove or its index or id
 * @return {sap.ui.commons.layout.MatrixLayoutCell} the removed cell or null
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow#removeCell
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.layout.MatrixLayoutCell[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow#removeAllCells
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.layout.MatrixLayoutCell</code> in the aggregation named <code>cells</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutCell}
 *            oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow#indexOfCell
 * @function
 */
	

/**
 * Destroys all the cells in the aggregation 
 * named <code>cells</code>.
 * @return {sap.ui.commons.layout.MatrixLayoutRow} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayoutRow#destroyCells
 * @function
 */


/**
 * The string given as "sStyleClass" will be added to the "class" attribute of this element's root HTML element.
 * 
 * This method is intended to be used to mark controls as being of a special type for which
 * special styling can be provided using CSS selectors that reference this style class name.
 * 
 * <pre>
 * Example:
 * myButton.addStyleClass("myRedTextButton"); // add a CSS class to one button instance
 * 
 * ...and in CSS:
 * .myRedTextButton {
 * color: red;
 * }
 * </pre>
 * 
 * This will add the CSS class "myRedTextButton" to the Button HTML and the CSS code above will then
 * make the text in this particular button red.
 * 
 * Only characters allowed inside HTML attributes are allowed.
 * Quotes are not allowed and this method will ignore any strings containing quotes.
 * Strings containing spaces are interpreted as ONE custom style class (even though CSS selectors interpret them
 * as different classes) and can only removed later by calling removeStyleClass() with exactly the
 * same (space-containing) string as parameter.
 * Multiple calls with the same sStyleClass will have no different effect than calling once.
 * If sStyleClass is null, the call is ignored.
 * 
 * Returns <code>this</code> to allow method chaining
 *
 * @name sap.ui.commons.layout.MatrixLayoutRow.prototype.addStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the CSS class name to be added

 * @type sap.ui.commons.layout.MatrixLayoutRow
 * @public
 */


/**
 * Removes the given string from the list of custom style classes that have been set previously.
 * Regular style classes like "sapUiBtn" cannot be removed.
 * 
 * Returns <code>this</code> to allow method chaining
 *
 * @name sap.ui.commons.layout.MatrixLayoutRow.prototype.removeStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the style to be removed

 * @type sap.ui.commons.layout.MatrixLayoutRow
 * @public
 */


/**
 * Returns true if the given style class string is valid and if this Element has this style class set via a previous call to addStyleClass().
 *
 * @name sap.ui.commons.layout.MatrixLayoutRow.prototype.hasStyleClass
 * @function
 * @param {string} 
 *         sStyleClass
 *         the style to check for

 * @type boolean
 * @public
 */


// Start of sap\ui\commons\layout\MatrixLayoutRow.js
jQuery.sap.require('sap.ui.core.CustomStyleClassSupport'); // unlisted dependency retained

sap.ui.core.CustomStyleClassSupport.apply(sap.ui.commons.layout.MatrixLayoutRow.prototype);

}; // end of sap/ui/commons/layout/MatrixLayoutRow.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.PositionContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.PositionContainer.
jQuery.sap.declare("sap.ui.commons.layout.PositionContainer");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new layout/PositionContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTop top} : sap.ui.core.CSSSize</li>
 * <li>{@link #getBottom bottom} : sap.ui.core.CSSSize</li>
 * <li>{@link #getLeft left} : sap.ui.core.CSSSize</li>
 * <li>{@link #getRight right} : sap.ui.core.CSSSize</li>
 * <li>{@link #getCenterHorizontally centerHorizontally} : boolean (default: false)</li>
 * <li>{@link #getCenterVertically centerVertically} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getControl control} <strong>(default aggregation)</strong> : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Is used to specify the position of a control in the AbsoluteLayout
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.layout.PositionContainer
 */
sap.ui.core.Element.extend("sap.ui.commons.layout.PositionContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"updatePosition"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"top" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"bottom" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"left" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"right" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"centerHorizontally" : {type : "boolean", group : "Dimension", defaultValue : false},
		"centerVertically" : {type : "boolean", group : "Dimension", defaultValue : false}
	},
	defaultAggregation : "control",
	aggregations : {
    	"control" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.PositionContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.PositionContainer.extend
 * @function
 */


/**
 * Getter for property <code>top</code>.
 * Defines the distance to the top of the layout (as specified in HTML)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>top</code>
 * @public
 * @name sap.ui.commons.layout.PositionContainer#getTop
 * @function
 */

/**
 * Setter for property <code>top</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sTop  new value for property <code>top</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.PositionContainer#setTop
 * @function
 */


/**
 * Getter for property <code>bottom</code>.
 * Defines the distance to the bottom of the layout (as specified in HTML)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>bottom</code>
 * @public
 * @name sap.ui.commons.layout.PositionContainer#getBottom
 * @function
 */

/**
 * Setter for property <code>bottom</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sBottom  new value for property <code>bottom</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.PositionContainer#setBottom
 * @function
 */


/**
 * Getter for property <code>left</code>.
 * Defines the distance to the left of the layout (as specified in HTML)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>left</code>
 * @public
 * @name sap.ui.commons.layout.PositionContainer#getLeft
 * @function
 */

/**
 * Setter for property <code>left</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sLeft  new value for property <code>left</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.PositionContainer#setLeft
 * @function
 */


/**
 * Getter for property <code>right</code>.
 * Defines the distance to the right of the layout (as specified in HTML)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>right</code>
 * @public
 * @name sap.ui.commons.layout.PositionContainer#getRight
 * @function
 */

/**
 * Setter for property <code>right</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sRight  new value for property <code>right</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.PositionContainer#setRight
 * @function
 */


/**
 * Getter for property <code>centerHorizontally</code>.
 * Indicates whether this container shall be centered horizontally within the AbsoluteLayout area.
 * The values of the attributes left and right are ignored when this feature is activated.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>centerHorizontally</code>
 * @public
 * @name sap.ui.commons.layout.PositionContainer#getCenterHorizontally
 * @function
 */

/**
 * Setter for property <code>centerHorizontally</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCenterHorizontally  new value for property <code>centerHorizontally</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.PositionContainer#setCenterHorizontally
 * @function
 */


/**
 * Getter for property <code>centerVertically</code>.
 * Indicates whether this container should be centered vertically within the AbsoluteLayout area.
 * The values of the attributes top and bottom are ignored when this feature is activated.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>centerVertically</code>
 * @public
 * @name sap.ui.commons.layout.PositionContainer#getCenterVertically
 * @function
 */

/**
 * Setter for property <code>centerVertically</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bCenterVertically  new value for property <code>centerVertically</code>
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.PositionContainer#setCenterVertically
 * @function
 */


/**
 * Getter for aggregation <code>control</code>.<br/>
 * Child control of the position container
 * 
 * <strong>Note</strong>: this is the default aggregation for layout/PositionContainer.
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.ui.commons.layout.PositionContainer#getControl
 * @function
 */


/**
 * Setter for the aggregated <code>control</code>.
 * @param {sap.ui.core.Control} oControl
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.PositionContainer#setControl
 * @function
 */
	

/**
 * Destroys the control in the aggregation 
 * named <code>control</code>.
 * @return {sap.ui.commons.layout.PositionContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.PositionContainer#destroyControl
 * @function
 */


/**
 * Updates the position properties of the container according to the given position in JSON style.
 *
 * @name sap.ui.commons.layout.PositionContainer.prototype.updatePosition
 * @function
 * @param {object} 
 *         oPos
 *         JSON-like object which defines the position of the child control in the absolute layout. The object is expected
 *         to have one or more out of the attributes top, bottom, left, right (each with a value of type sap.ui.core.CSSSize). If no object
 *         is given, nothing is updated.

 * @type void
 * @public
 */


// Start of sap\ui\commons\layout\PositionContainer.js
(function() {

//**** Overridden API Functions ****

sap.ui.commons.layout.PositionContainer.prototype.setControl = function(oControl) {
	cleanup(this);

	if(this.getDomRef()) {
		this.setAggregation("control", oControl, true);
		notifyLayoutOnChange(this, oControl ? "CTRL_CHANGE" : "CTRL_REMOVE");
	}else{
		if(this.getParent() && this.getParent().getDomRef()){
			this.setAggregation("control", oControl, true);
			if(oControl) {
				notifyLayoutOnChange(this, "CTRL_ADD");
			}
		}else{
			this.setAggregation("control", oControl);
		}
	}
	
	if(oControl){
		oControl.attachEvent("_change", onPropertyChanges, this);
	}

	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.destroyControl = function() {
	cleanup(this);

	var bSuppressRerendering = !!this.getDomRef();
	this.destroyAggregation("control", bSuppressRerendering);
	if(bSuppressRerendering) {
		notifyLayoutOnChange(this, "CTRL_REMOVE");
	}

	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setTop = function(sTop) {
	setProp(this, "top", sTop, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setBottom = function(sBottom) {
	setProp(this, "bottom", sBottom, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setLeft = function(sLeft) {
	setProp(this, "left", sLeft, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setRight = function(sRight) {
	setProp(this, "right", sRight, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setCenterHorizontally = function(bCenterHorizontally) {
	setProp(this, "centerHorizontally", bCenterHorizontally, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.setCenterVertically = function(bCenterVertically) {
	setProp(this, "centerVertically", bCenterVertically, true);
	return this;
};


sap.ui.commons.layout.PositionContainer.prototype.updatePosition = function(oPos) {
	if(!oPos) {
		oPos = {};
	}

	setProp(this, "centerHorizontally", oPos.centerHorizontally ? oPos.centerHorizontally : null);
	setProp(this, "centerVertically", oPos.centerVertically ? oPos.centerVertically : null);
	setProp(this, "left", oPos.left ? oPos.left : null);
	setProp(this, "right", oPos.right ? oPos.right : null);
	setProp(this, "top", oPos.top ? oPos.top : null);
	var bNotify = setProp(this, "bottom", oPos.bottom ? oPos.bottom : null);
	if(bNotify) {
		notifyLayoutOnChange(this, "CTRL_POS");
	}

};


//**** Other Functions ****

/**
 * Checks the position information for the child control against the width/height property and
 * returns the compute position.
 *
 * @private
 */
sap.ui.commons.layout.PositionContainer.prototype.getComputedPosition = function() {
	var sTop = this.getTop();
	var sBottom = this.getBottom();
	var sLeft = this.getLeft();
	var sRight = this.getRight();
	var sWidth = null;
	var sHeight = null;

	var oControl = this.getControl();

	if(oControl){
		if(this.getCenterHorizontally()){
			sLeft = "50%";
			sRight = null;
		}else{
			if(!checkProperty(this, oControl, "width", "left", sLeft, "right", sRight)) {
				sRight = undefined;
			}
			if(!sLeft && !sRight) {
				sLeft = "0px";
			}
		}

		if(this.getCenterVertically()){
			sTop = "50%";
			sBottom = null;
		}else{
			if(!checkProperty(this, oControl, "height", "top", sTop, "bottom", sBottom)) {
				sBottom = undefined;
			}
			if(!sTop && !sBottom) {
				sTop = "0px";
			}
		}

		sWidth = getContainerDimension(oControl, "width");
		sHeight = getContainerDimension(oControl, "height");
	}

	return {top: sTop, bottom: sBottom, left: sLeft, right: sRight, width: sWidth, height: sHeight};
};


/**
 * Factory for <code>sap.ui.commons.layout.PositionContainer</code> using a given
 * child control and a position in JSON style.
 *
 * @private
 */
sap.ui.commons.layout.PositionContainer.createPosition = function(oControl, oPos) {
	var oPosition = new sap.ui.commons.layout.PositionContainer();
	oPosition.setControl(oControl);
	if(oPos) {
		if(oPos.left) {
			oPosition.setLeft(oPos.left);
		}
		if(oPos.right) {
			oPosition.setRight(oPos.right);
		}
		if(oPos.top) {
			oPosition.setTop(oPos.top);
		}
		if(oPos.bottom) {
			oPosition.setBottom(oPos.bottom);
		}
		if(oPos.centerHorizontally) {
			oPosition.setCenterHorizontally(oPos.centerHorizontally);
		}
		if(oPos.centerVertically) {
			oPosition.setCenterVertically(oPos.centerVertically);
		}
	}
	return oPosition;
};


/**
 * Cleans up and optionally reinitalizes the event handler registrations of the element.
 *
 * @private
 */
sap.ui.commons.layout.PositionContainer.prototype.reinitializeEventHandlers = function(bCleanupOnly) {
	if(this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	if(!bCleanupOnly && this.getDomRef() && (this.getCenterHorizontally() || this.getCenterVertically())) {
		var that = this;
		var onResize = function(){
			var jRef = jQuery(that.getDomRef());
			if(that.getCenterHorizontally()){
				jRef.css("margin-left", "-"+jRef.children().outerWidth()/2+"px");
			}
			if(that.getCenterVertically()){
				jRef.css("margin-top", "-"+jRef.children().outerHeight()/2+"px");
			}
		};
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), onResize);
		onResize();
	}
};


/**
 * Called when the element is destroyed.
 *
 * @private
 */
sap.ui.commons.layout.PositionContainer.prototype.exit = function(oPos) {
	this.reinitializeEventHandlers(true);
};


/**
 * Called when the element is instanciated.
 *
 * @private
 */
sap.ui.commons.layout.PositionContainer.prototype.init = function() {
	this._disableWidthCheck = true;
	this._disableHeightCheck = false;
};


//**** Private Helper Functions ****

/**
 * Sets the value of the given property and notifies the layout
 * if necessary and desired.
 *
 * @private
 */
var setProp = function(oThis, sProp, oValue, bNotifyLayout) {
	var bSuppressRerendering = !!oThis.getDomRef();
	oThis.setProperty(sProp, oValue, bSuppressRerendering);
	if(bSuppressRerendering && bNotifyLayout) {
		notifyLayoutOnChange(oThis, "CTRL_POS");
	}
	return bSuppressRerendering;
};


/**
 * Notifies the layout of this container about the change of the given type.
 *
 * @private
 */
var notifyLayoutOnChange = function(oThis, sChangeType) {
	var oLayout = oThis.getParent();
	if(oLayout) {
		oLayout.contentChanged(oThis, sChangeType);
	}
};


/**
 * @see sap.ui.commons.layout.AbsoluteLayout#cleanUpControl
 *
 * @private
 */
var cleanup = function(oThis) {
	var oControl = oThis.getControl();
	if(oControl) {
		sap.ui.commons.layout.AbsoluteLayout.cleanUpControl(oControl);
		oControl.detachEvent("_change", onPropertyChanges, oThis);
	}
};


/**
 * Checks whether the position settings fits to the set height/width attribute of a control.
 *
 * @private
 */
var checkProperty = function(oPositionContainer, oControl, sProp, sPos1, sVal1, sPos2, sVal2) {
	if(sVal1 && sVal2) {
		var oLayout = oPositionContainer.getParent();
		var oProp = getPropertyInfo(oControl, sProp);
		if(oProp) {
			var val = oControl[oProp._sGetter]();
			if(!(!val || val == "" || val == "auto" || val == "inherit")) {
				jQuery.sap.log.warning("Position "+sPos2+"="+sVal2+" ignored, because child control "+oControl.getId()+" has fixed "+sProp+" ("+val+").",
						"", "AbsoluteLayout '"+(oLayout ? oLayout.getId() : "_undefined")+"'");
				return false;
			}
		}else{
			if((sProp === "width" && !oPositionContainer._disableWidthCheck) || (sProp === "height" && !oPositionContainer._disableHeightCheck)){
				jQuery.sap.log.warning("Position "+sPos2+"="+sVal2+" ignored, because child control "+oControl.getId()+" not resizable.",
						"", "AbsoluteLayout '"+(oLayout ? oLayout.getId() : "_undefined")+"'");
				return false;
			}
		}
	}
	return true;
};


/**
 * Checks whether the given control has a property with the given name and type 'sap.ui.core.CSSSize' and
 * returns the corresponding metadata object.
 *
 * @private
 */
var getPropertyInfo = function(oControl, sPropertyName) {
	var oMetadata = oControl.getMetadata();
	oMetadata._enrichChildInfos();
	var oPropertyInfo = oMetadata.getAllProperties()[sPropertyName];
	if(oPropertyInfo && sap.ui.base.DataType.getType(oPropertyInfo.type) == sap.ui.base.DataType.getType("sap.ui.core.CSSSize")) {
		return oPropertyInfo;
	}
	return null;
};


/**
 * Returns the value width or height property (depending of <code>sDim</code>) of the given
 * control if the width or height is specified in %.
 *
 * @private
 */
var getContainerDimension = function(oControl, sDim){
	var oProp = getPropertyInfo(oControl, sDim);
	if(oProp) {
		var val = oControl[oProp._sGetter]();
		if(val && jQuery.sap.endsWith(val, "%")) {
			return val;
		}
	}
	return null;
};


/**
 * Handler on child control to check for property changes on width or height attribute.
 *
 * @private
 */
var onPropertyChanges = function(oEvent){
	var sProp = oEvent.getParameter("name");
	var parent = this.getParent();
	
	if((sProp === "width" || sProp === "height") && parent && parent.getDomRef()){
		notifyLayoutOnChange(this, "CTRL_POS");
	}
};

}());
}; // end of sap/ui/commons/layout/PositionContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.ResponsiveFlowLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.ResponsiveFlowLayout.
jQuery.sap.declare("sap.ui.commons.layout.ResponsiveFlowLayout");

jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayout'); // unlisted dependency retained



/**
 * Constructor for a new layout/ResponsiveFlowLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.ResponsiveFlowLayout#constructor sap.ui.layout.ResponsiveFlowLayout}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This is a layout where several controls can be added. These controls are blown up to fit a whole line. If the window resizes the controls are moved between the lines and resized again.
 * @extends sap.ui.layout.ResponsiveFlowLayout
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.layout.ResponsiveFlowLayout
 */
sap.ui.layout.ResponsiveFlowLayout.extend("sap.ui.commons.layout.ResponsiveFlowLayout", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.ResponsiveFlowLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.ResponsiveFlowLayout.extend
 * @function
 */


// Start of sap\ui\commons\layout\ResponsiveFlowLayout.js

}; // end of sap/ui/commons/layout/ResponsiveFlowLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.ResponsiveFlowLayoutData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.ResponsiveFlowLayoutData.
jQuery.sap.declare("sap.ui.commons.layout.ResponsiveFlowLayoutData");

jQuery.sap.require('sap.ui.layout.ResponsiveFlowLayoutData'); // unlisted dependency retained



/**
 * Constructor for a new layout/ResponsiveFlowLayoutData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.ResponsiveFlowLayoutData#constructor sap.ui.layout.ResponsiveFlowLayoutData}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This is a LayoutData Element that can be added to a control if this control is used within a ResponsiveFlowLayout
 * @extends sap.ui.layout.ResponsiveFlowLayoutData
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @deprecated Since version 1.16.0. 
 * moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.layout.ResponsiveFlowLayoutData
 */
sap.ui.layout.ResponsiveFlowLayoutData.extend("sap.ui.commons.layout.ResponsiveFlowLayoutData", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.ResponsiveFlowLayoutData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.ResponsiveFlowLayoutData.extend
 * @function
 */


// Start of sap\ui\commons\layout\ResponsiveFlowLayoutData.js
/*!
 * @copyright@
 */

/* Overwrite to have right "since" in there */

/**
* Getter for property <code>margin</code>.
* This property prevents any margin of the element if set to false
*
* Default value is <code>true</code>
*
* @return {boolean} the value of property <code>margin</code>
* @public
* @since 1.11.0
* @name sap.ui.commons.layout.ResponsiveFlowLayoutData#getMargin
* @function
*/
/**
* Setter for property <code>margin</code>.
*
* Default value is <code>true</code>
*
* @param {boolean} bMargin new value for property <code>margin</code>
* @return {sap.ui.layout.ResponsiveFlowLayoutData} <code>this</code> to allow method chaining
* @public
* @since 1.11.0
* @name sap.ui.commons.layout.ResponsiveFlowLayoutData#setMargin
* @function
*/
}; // end of sap/ui/commons/layout/ResponsiveFlowLayoutData.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.VerticalLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.VerticalLayout.
jQuery.sap.declare("sap.ui.commons.layout.VerticalLayout");

jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained



/**
 * Constructor for a new layout/VerticalLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.layout.VerticalLayout#constructor sap.ui.layout.VerticalLayout}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * In this layout the elemnts are orderd one below the other
 * @extends sap.ui.layout.VerticalLayout
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @deprecated Since version 1.16.0. 
 * Moved to sap.ui.layout library. Please use this one.
 * @name sap.ui.commons.layout.VerticalLayout
 */
sap.ui.layout.VerticalLayout.extend("sap.ui.commons.layout.VerticalLayout", { metadata : {

	// ---- object ----
	deprecated : true,

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.VerticalLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.VerticalLayout.extend
 * @function
 */


// Start of sap\ui\commons\layout\VerticalLayout.js

}; // end of sap/ui/commons/layout/VerticalLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.AutoCompleteRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.AutoComplete
jQuery.sap.declare("sap.ui.commons.AutoCompleteRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class Renderer for the sap.ui.commons.AutoComplete
 * @static
 */
sap.ui.commons.AutoCompleteRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.ComboBoxRenderer);

sap.ui.commons.AutoCompleteRenderer.renderExpander = function(rm, oCtrl){
	if(!oCtrl.__sARIATXT) {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
		oCtrl.__sARIATXT = rb.getText("AUTOCOMPLETE_ARIA_SUGGEST");
	}
	
	rm.write("<span id=\"", oCtrl.getId(), "-ariaLbl\" style=\"display:none;\">", oCtrl.__sARIATXT, "</span>");
};

sap.ui.commons.AutoCompleteRenderer.renderOuterAttributes = function(rm, oCtrl) {
	rm.addClass("sapUiTfAutoComp");
	sap.ui.commons.ComboBoxRenderer.renderOuterAttributes.apply(this, arguments);
};

//@see sap.ui.commons.ComboBoxRenderer.renderComboARIAInfo
sap.ui.commons.AutoCompleteRenderer.renderComboARIAInfo = function(rm, oCtrl) {
	var mProps = {
		role: "textbox",
		owns: oCtrl.getId() + "-input " + oCtrl._getListBox().getId()
	};

	if (!oCtrl.getEnabled()) {
		mProps["disabled"] = true;
	}

	rm.writeAccessibilityState(null, mProps); //null because otherwise automatic generated attributes will be rendered twice
};


//@see sap.ui.commons.ComboBoxRenderer.renderARIAInfo
sap.ui.commons.AutoCompleteRenderer.renderARIAInfo = function(rm, oCtrl) {
	var mProps = {
		autocomplete: "list",
		live: "polite",
		relevant: "all",
		setsize: oCtrl._getListBox().getItems().length
	};

	if (oCtrl.getValueState() == sap.ui.core.ValueState.Error) {
		mProps["invalid"] = true;
	}

	rm.writeAccessibilityState(oCtrl, mProps);
};


}; // end of sap/ui/commons/AutoCompleteRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.Callout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.Callout.
jQuery.sap.declare("sap.ui.commons.Callout");




/**
 * Constructor for a new Callout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.CalloutBase#constructor sap.ui.commons.CalloutBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Callout is a small popup with some useful information and links that is shown when a mouse is hovered over a specific view element.
 * @extends sap.ui.commons.CalloutBase
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.Callout
 */
sap.ui.commons.CalloutBase.extend("sap.ui.commons.Callout", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.Callout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.Callout.extend
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content of the Callout
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.commons.Callout#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.commons.Callout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Callout#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.commons.Callout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Callout#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.commons.Callout#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.Callout#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.Callout#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.Callout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.Callout#destroyContent
 * @function
 */


// Start of sap\ui\commons\Callout.js
///**
// * This file defines behavior for the Callout control
// */
}; // end of sap/ui/commons/Callout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.ComboBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.ComboBox.
jQuery.sap.declare("sap.ui.commons.ComboBox");




/**
 * Constructor for a new ComboBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxPopupItems maxPopupItems} : int (default: 10)</li>
 * <li>{@link #getDisplaySecondaryValues displaySecondaryValues} : boolean (default: false)</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.core.ListItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getListBox listBox} : string | sap.ui.commons.ListBox</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.TextField#constructor sap.ui.commons.TextField}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * The control provides a field that allows end users to either enter some text, or to choose an entry out of a list of pre-defined items. The choosable items can be provided in the form of complete list boxes, single listbox items, or text strings defined for the current application.
 * 
 * @extends sap.ui.commons.TextField
 * @implements sap.ui.commons.ToolbarItem
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.ComboBox
 */
sap.ui.commons.TextField.extend("sap.ui.commons.ComboBox", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"maxPopupItems" : {type : "int", group : "Behavior", defaultValue : 10},
		"displaySecondaryValues" : {type : "boolean", group : "Misc", defaultValue : false},
		"selectedKey" : {type : "string", group : "Data", defaultValue : null},
		"selectedItemId" : {type : "string", group : "Data", defaultValue : null}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.core.ListItem", multiple : true, singularName : "item", bindable : "bindable"}, 
    	"myListBox" : {type : "sap.ui.commons.ListBox", multiple : false, visibility : "hidden"}
	},
	associations : {
		"listBox" : {type : "sap.ui.commons.ListBox", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.ComboBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.ComboBox.extend
 * @function
 */


/**
 * Getter for property <code>maxPopupItems</code>.
 * 
 * Defines the number of items that shall be displayed at once. If the overall number of list items is higher than the setting, a scrollbar is provided.
 * 
 *
 * Default value is <code>10</code>
 *
 * @return {int} the value of property <code>maxPopupItems</code>
 * @public
 * @name sap.ui.commons.ComboBox#getMaxPopupItems
 * @function
 */

/**
 * Setter for property <code>maxPopupItems</code>.
 *
 * Default value is <code>10</code> 
 *
 * @param {int} iMaxPopupItems  new value for property <code>maxPopupItems</code>
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#setMaxPopupItems
 * @function
 */


/**
 * Getter for property <code>displaySecondaryValues</code>.
 * Indicates whether the "additionalText" property that is available for sap.ui.core.ListItem shall be displayed in the list.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displaySecondaryValues</code>
 * @public
 * @name sap.ui.commons.ComboBox#getDisplaySecondaryValues
 * @function
 */

/**
 * Setter for property <code>displaySecondaryValues</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplaySecondaryValues  new value for property <code>displaySecondaryValues</code>
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#setDisplaySecondaryValues
 * @function
 */


/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item.
 * If the value has no corresponding item the key is empty.
 * If duplicate keys exists the first item matching the key is used.
 * If the key is set to a not existing value it will not be changed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * @name sap.ui.commons.ComboBox#getSelectedKey
 * @function
 */

/**
 * Setter for property <code>selectedKey</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedKey  new value for property <code>selectedKey</code>
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#setSelectedKey
 * @function
 */


/**
 * Getter for property <code>selectedItemId</code>.
 * Id of Selected item. If the value has no corresponding item, the selected item id is empty.
 * If the selected item id is set to an not existing item, it will not be changed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedItemId</code>
 * @public
 * @name sap.ui.commons.ComboBox#getSelectedItemId
 * @function
 */

/**
 * Setter for property <code>selectedItemId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedItemId  new value for property <code>selectedItemId</code>
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#setSelectedItemId
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * 
 * Getter for aggregation items. Allows setting ListItems (see sap.ui.core.ListBox) that shall be displayed in the list.
 * 
 * 
 * <strong>Note</strong>: this is the default aggregation for ComboBox.
 * @return {sap.ui.core.ListItem[]}
 * @public
 * @name sap.ui.commons.ComboBox#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.ListItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.ListItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.ListItem} vItem the item to remove or its index or id
 * @return {sap.ui.core.ListItem} the removed item or null
 * @public
 * @name sap.ui.commons.ComboBox#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.ListItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.ComboBox#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.ListItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.ListItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.ComboBox#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#destroyItems
 * @function
 */


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#bindItems
 * @function
 */

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#unbindItems
 * @function
 */


/**
 * Using this method, you provide a listbox control. This allows reuse of item lists in different controls. Either a control id can be used as new target, or a control instance.
 * The ListBox must not be rendered somewhere in the UI. But if you want to bind the ListBox Items to a model it must be in the control tree. So we suggest to add it as dependent somewhere (e.g. to the view or the first used ComboBox). If it is not set as child or dependant to an other control it will be automatically set as dependent to the first ComboBox where it is assigned.
 *
 * @return {string} Id of the element which is the current target of the <code>listBox</code> association, or null
 * @public
 * @name sap.ui.commons.ComboBox#getListBox
 * @function
 */

/**
 * Using this method, you provide a listbox control. This allows reuse of item lists in different controls. Either a control id can be used as new target, or a control instance.
 * The ListBox must not be rendered somewhere in the UI. But if you want to bind the ListBox Items to a model it must be in the control tree. So we suggest to add it as dependent somewhere (e.g. to the view or the first used ComboBox). If it is not set as child or dependant to an other control it will be automatically set as dependent to the first ComboBox where it is assigned.
 *
 * @param {string | sap.ui.commons.ListBox} vListBox 
 *    Id of an element which becomes the new target of this <code>listBox</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.ComboBox#setListBox
 * @function
 */


	
// Start of sap\ui\commons\ComboBox.js
jQuery.sap.require('jquery.sap.strings'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


/**
 * Initializes the control.
 * It is called from the constructor.
 * @private
 */
sap.ui.commons.ComboBox.prototype.init = function(){

	sap.ui.commons.TextField.prototype.init.apply(this, arguments);
	this._iClosedUpDownIdx = -1;
	this._sCloseId = null;
	this.setAccessibleRole(sap.ui.core.AccessibleRole.Combobox);

	if (sap.ui.Device.browser.mobile) {
		this.mobile = true;
	}
};

/**
 * Destroy the private ListBox if it exists.
 * @private
 */
sap.ui.commons.ComboBox.prototype.exit = function() {
	if ( this._oListBox ) {
		this._oListBoxDelegate && this._oListBox.removeDelegate(this._oListBoxDelegate);
		if (this.getAggregation("myListBox")) {
			this.destroyAggregation("myListBox", true);
		}else{
			this._oListBox.destroy();
		}
		this._oListBox = null;
	}else if(this.getListBox()){
		var oListBox = sap.ui.getCore().byId(this.getListBox());
		if (oListBox) {
			oListBox.detachEvent("itemsChanged", this._handleItemsChanged, this);
			oListBox.detachEvent("itemInvalidated",this._handleItemInvalidated, this);
		}
	}
	this._sWantedSelectedKey = undefined;
	this._sWantedSelectedItemId = undefined;

	if (this._sHandleItemsChanged) {
		jQuery.sap.clearDelayedCall(this._sHandleItemsChanged);
		this._sHandleItemsChanged = null;
	}
};


//***********************************************************
// Mouse handling...
//***********************************************************

/*
 * Handle click events triggered on the control and if triggered on F4-button open or close the proposal list
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onclick = function(oEvent){
	if(this.getEnabled && this.getEnabled() && this.getEditable() && oEvent.target === this.getF4ButtonDomRef()){
		if(this.oPopup && this.oPopup.isOpen()){
			this._close();
		} else if(!this._F4ForClose) {
			this._open();
		}
		this.focus();
	}
	this._F4ForClose = false;
};

/*
 * Handle mousedown events triggered on the control
 *
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onmousedown = function(oEvent){

	var oF4ButtonDomRef = this.getF4ButtonDomRef();

	if(oEvent.target !== oF4ButtonDomRef || !this.getEnabled() || !this.getEditable()) {
		if (this.oPopup && this.oPopup.isOpen()) {
			// stop propagation of event, otherwise if the ComboBox is in a dialog (popup) this will move in front of the listbox
			oEvent.stopPropagation();
		}
		return;
	}else if(oEvent.target == oF4ButtonDomRef && jQuery(this.getFocusDomRef()).data("sap.INItem")) {
		// in case of ItemNavigation focus the input field and stop the propagation to prevent
		// ItemNavigation to set focus to other item.
		oEvent.stopPropagation();
		this.focus();
	}

	if(this.oPopup && this.oPopup.isOpen()){
		this._F4ForClose = true;
	} else {
		this._F4ForOpen = true;
	}
};


//***********************************************************
// Keyboard handling...
//***********************************************************

/**
 * Handle sapshow pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapshow = function(oEvent){

	if (this.mobile) {
		return;
	}

	if(this.oPopup && this.oPopup.isOpen()) {
		this._close();
	}
	else {
		this._open();
	}
	oEvent.preventDefault();
	oEvent.stopImmediatePropagation();
};

/**
 * Handle sapnextmodifiers pseudo events on the control
 * if in toolbar prevent item navigation if popup is opened.
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapnextmodifiers = function(oEvent){
	sap.ui.commons.TextField.prototype.onsapnextmodifiers.apply(this, arguments);
	if( oEvent.keyCode == jQuery.sap.KeyCodes.ARROW_DOWN && oEvent.altKey ){
		this.onsapshow(oEvent);
		oEvent.stopPropagation();
	}
};

/**
 * Handle saphide pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsaphide = function(oEvent){

	if (this.mobile) {
		return;
	}

	this._close();
	oEvent.stopPropagation(); // prevent item navigation in toolbar
};

/**
 * Handle sapescape pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapescape = function(oEvent) {

	if(this.oPopup && this.oPopup.isOpen()){
		this._close();
		oEvent.stopPropagation(); // if comboBox is on a popup don't close this popup too
	}
	// standard behavior of TextField
	sap.ui.commons.TextField.prototype.onsapescape.apply(this, arguments);

	// restore index, itemId and so on
	var sItemId = this.getSelectedItemId();
	if (sItemId) {
		var oItem = sap.ui.getCore().byId(sItemId);
		this._iClosedUpDownIdx = this.indexOfItem(oItem);
		var oListBox = this._getListBox();
		oListBox.setSelectedIndex(this._iClosedUpDownIdx);
		jQuery(this.getInputDomRef()).attr("aria-posinset", this._iClosedUpDownIdx+1);
	}else {
		jQuery(this.getInputDomRef()).removeAttr("aria-posinset");
		this._iClosedUpDownIdx = -1;
	}

};

/**
 * Handle sapenter pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapenter = function(oEvent) {
	this._close();
	this._checkChange(oEvent);
};


//***********************************************************
//Focus handling...
//***********************************************************

/*
 * Handle the sapfocusleave pseudo event and ensure that when the focus moves to the list box,
 * the check change functionality (incl. fireChange) is not triggered.
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onsapfocusleave = function(oEvent) {

	var oLB = this._getListBox();
	if(oEvent.relatedControlId && jQuery.sap.containsOrEquals(oLB.getFocusDomRef(), sap.ui.getCore().byId(oEvent.relatedControlId).getFocusDomRef())){
		this.focus();
	} else {
		// we left the ComboBox to another (unrelated) control and thus have to fire the change (if needed).
		sap.ui.commons.TextField.prototype.onsapfocusleave.apply(this, arguments);
	}

};

//***********************************************************
// Change handling and related event firing
//***********************************************************

/**
 * Compares the previous value with the current value and fires the "Change" event
 * if the ComboBox is editable and the value has changed or whether the value has been changed
 * e.g. via up/down or auto-complete feature
 *
 * @param {jQuery.Event} oEvent
 * @param {boolean} [bImmediate] indicate whether the check should happen immediately or delayed (e.g. to avoid focusout / click double event processing)
 * @protected
 */
sap.ui.commons.ComboBox.prototype._checkChange = function(oEvent, bImmediate) {

	var oInput = this.getInputDomRef();
	if (!oInput) {
		// to be save if some one deletes field from DOM during delayed call
		return;
	}

	var sNewVal = jQuery(oInput).val(),
		sOldVal = this.getValue();

	if(!this._F4ForOpen && (this.getEditable() && this.getEnabled())){
		var aItems = this.getItems(),
			oItem = null,
			oText,
			sKey,
			sId,
			iIndex;
		var oListBox = this._getListBox();

		if (sOldVal != sNewVal){
			this.setValue(sNewVal, true);

			for(var i = 0, l = aItems.length; i < l; i++){
				oText = aItems[i].getText();
				if(oText === sNewVal) {
					if (i == this._iClosedUpDownIdx) {
						// it's the currently selected item
						oItem = aItems[i];
						sKey = oItem.getKey();
						sId  = oItem.getId();
						iIndex = i;
						break;
					} else if(!iIndex){
						// if not the currently selected item, use the first found one
						oItem = aItems[i];
						sKey = oItem.getKey();
						sId  = oItem.getId();
						iIndex = i;
					}
				}
			}
			this.setProperty("selectedKey", sKey, true); // no rerendering needed
			this.setProperty("selectedItemId", sId, true); // no rerendering needed
			if (sId) {
				this._iClosedUpDownIdx = iIndex;
			}else {
				this._iClosedUpDownIdx = -1;
			}
			if (this.mobile) {
				if (!sId) {
					// no list item entered (free text) => add one dummy item to the select box
					this._addDummyOption(sNewVal);
				}else{
					this._removeDummyOption();
					this.getDomRef("select").selectedIndex = iIndex;
				}
			}
		}else {
			// same value, check if different Item
			var sOldItemId = this.getSelectedItemId();
			var sNewItemId;
			iIndex = this._iClosedUpDownIdx;
			if (iIndex >= 0) {
				oItem = aItems[iIndex];
				if (oItem.getText() == sNewVal) {
					// only if same Text
					sNewItemId = oItem.getId();
				}
			}
			if (sNewItemId && sNewItemId != sOldItemId) {
				this.setSelectedItemId(sNewItemId, true);
			} else{
				return;
			}
		}
		this.fireChange({newValue:sNewVal, selectedItem: oItem});
	}
};

//***********************************************************
// Advanced keyboard handling... type ahead, up / down navigation, ...
//***********************************************************

/**
 * Handle the keypress event
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype.onkeypress = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no implemented typeAhead
		return;
	}

	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	if(this._sTypeAhead) {
		jQuery.sap.clearDelayedCall(this._sTypeAhead);
	}

	var oKC = jQuery.sap.KeyCodes;
	if(sap.ui.commons.ComboBox._isHotKey(oEvent) || oEvent.keyCode === oKC.F4 && oEvent.which === 0 /*this is the Firefox case and ensures 's' with same charCode is accepted*/) {
		return;
	}

	var iKC = oEvent.which || oEvent.keyCode;
	if(iKC !== oKC.DELETE && iKC !== oKC.BACKSPACE && iKC !== oKC.ESCAPE){
		this._sTypeAhead = jQuery.sap.delayedCall(200, this, "_doTypeAhead");
	} else{
		// standard behavior of TextField
		sap.ui.commons.TextField.prototype.onkeypress.apply(this, arguments);
		if (iKC !== oKC.ESCAPE) {
			jQuery(this.getInputDomRef()).removeAttr("aria-posinset");
		}
	}
	// Do not cancel the event as this would prevent typing in the field.
};

/**
 * Handle the sapup event
 * TODO How do we enable switching this off? e.g. in table case, arrow keys might trigger
 *      cell navigation instead of this one? is there a special key to 're-enable' again? like right-Alt key?
 *
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype.onsapup = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no implemented typeAhead
		return;
	}

	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	if (jQuery(this.getFocusDomRef()).data("sap.InNavArea")) {
		// parent handles arrow navigation
		return;
	}

	var oListBox = this._getListBox(),
		aItems = oListBox.getItems(),
		oDomRef = this.getInputDomRef(),
		oValue = jQuery(oDomRef).val();

	var i = this._prepareUpDown(aItems, oValue);
	i = this._updateIdx(aItems, oDomRef, i-1, i);

	oEvent.preventDefault();
	oEvent.stopPropagation(); // prevent itemNavigation if ComboBox is in toolbar
};

/**
 * Handle the sapdown event.
 * TODO How do we enable switching this off? e.g. in table case, arrow keys might trigger
 *      cell navigation instead of this one? is there a special key to 're-enable' again? like right-Alt key?
 *
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype.onsapdown = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no implemented typeAhead
		return;
	}

	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	if (jQuery(this.getFocusDomRef()).data("sap.InNavArea")) {
		// parent handles arrow navigation
		return;
	}

	var oListBox = this._getListBox(),
		aItems = oListBox.getItems(),
		oDomRef = this.getInputDomRef(),
		oValue = jQuery(oDomRef).val();

	var i = this._prepareUpDown(aItems, oValue);
	i = this._updateIdx(aItems, oDomRef, i+1, i);

	oEvent.preventDefault();
	oEvent.stopPropagation(); // prevent itemNavigation if ComboBox is in toolbar
};

/**
 * Handle the saphome event.
 * TODO How do we enable switching this off? e.g. in table case, arrow keys might trigger
 *      cell navigation instead of this one? is there a special key to 're-enable' again? like right-Alt key?
 *
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */

sap.ui.commons.ComboBox.prototype.onsaphome = function(oEvent) {
	sap.ui.commons.TextField.prototype.onsaphome.apply(this, arguments);

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no implemented typeAhead
		return;
	}

	if(!this.getEditable() || !this.getEnabled() || !this.oPopup || !this.oPopup.isOpen()) {
		return;
	}

	var oListBox = this._getListBox(),
		aItems = oListBox.getItems(),
		oDomRef = this.getInputDomRef();

	var i = this._updateIdx(aItems, oDomRef,0);

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Handle the sapend event.
 * TODO How do we enable switching this off? e.g. in table case, arrow keys might trigger
 *      cell navigation instead of this one? is there a special key to 're-enable' again? like right-Alt key?
 *
 * @param {jQuery.Event} oEvent the event that occurred on the ComboBox
 * @private
 */

sap.ui.commons.ComboBox.prototype.onsapend = function(oEvent) {
	sap.ui.commons.TextField.prototype.onsapend.apply(this, arguments);

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no implemented typeAhead
		return;
	}

	if(!this.getEditable() || !this.getEnabled() || !this.oPopup || !this.oPopup.isOpen()) {
		return;
	}

	var oListBox = this._getListBox(),
		aItems = oListBox.getItems(),
		oDomRef = this.getInputDomRef();

	var i = aItems.length - 1;
	i = this._updateIdx(aItems, oDomRef, i);

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * method for delayed handle of type ahead in closed combobox
 * @private
 */
sap.ui.commons.ComboBox.prototype._doTypeAhead = function(){
	this._sTypeAhead = null;
	this._sWantedSelectedKey = undefined; // something typed -> do not search again for not existing items
	this._sWantedSelectedItemId = undefined;
	var oLB = this._getListBox(),
		aItems = oLB.getItems(),
		oItem,
		oText,
		$Ref = jQuery(this.getInputDomRef()),
		oValue = $Ref.val(),
		startsWith = jQuery.sap.startsWithIgnoreCase;
	this._sTypedChars = oValue;
	var bFound = false;
	var i = 0;
	for (var l = aItems.length; i < l; i++){
		oItem = aItems[i];
		oText = "" + oItem.getText();
		if(startsWith(oText, oValue) && oItem.getEnabled()) {
			$Ref.attr("aria-posinset", i+1);
			$Ref.val(oText);
			this._doSelect(oValue.length, oText.length);

			oLB.setSelectedIndex(i);
			oLB.scrollToIndex(i, true);
			bFound = true;
			if(this.mobile){
				this._removeDummyOption();
				this.getDomRef("select").selectedIndex = i;
			}
			return;
		}
	}
	oLB.clearSelection();
	oLB.scrollToIndex(i, true);
	if (!bFound) {
		$Ref.removeAttr("aria-posinset");
		if(this.mobile){
			this._addDummyOption(oValue);
		}
	}
};

/**
 * Prepares for the up and down arrow handling.
 * Checks whether there is a set index and this still matches the given value
 * @param {sap.ui.core.ListItem[]} aItems array of listitems that should be used.
 * @param {string} oValue
 * @type int
 * @return the new index
 * @private
 */
sap.ui.commons.ComboBox.prototype._prepareUpDown = function(aItems, oValue){
	var oText;
	if(this._iClosedUpDownIdx >= 0 && aItems[this._iClosedUpDownIdx] && aItems[this._iClosedUpDownIdx].getText() !== oValue) {
		this._iClosedUpDownIdx = -1;
	}

	if(this._iClosedUpDownIdx === -1){
		for(var i = 0, l = aItems.length; i < l; i++){
			oText = aItems[i].getText();
			if(oText === oValue) {
				this._iClosedUpDownIdx = i;
				break;
			}
		}
	}
	return this._iClosedUpDownIdx;
};

/**
 * Updates the value of the comboBox taking the given idx into account.
 *
 * @param {sap.ui.core.ListItem[]} aItems the items belonging to this ComboBox
 * @param {string} oDomRef the dom ref of the inputField to update
 * @param {int} iNewIdx the index to set
 * @param {int} [iCurIdx] The index to 'fall back to'.
 *						  Leave blank in case of navigation to 'first' (home-key) or 'last' (end-key). Will ensure 'first' or 'last' selectable item will be selected.
 * @return {int} the actually set index (which might have been corrected)
 * @private
 */
sap.ui.commons.ComboBox.prototype._updateIdx = function(aItems, oDomRef, iNewIdx, iCurIdx){
	var l = aItems.length,
		bFirst = iNewIdx === 0 && iCurIdx === undefined,
		bLast = iNewIdx === l-1 && iCurIdx === undefined,
		bDown = iCurIdx !== undefined && iCurIdx < iNewIdx || bFirst,
		i = (iNewIdx < 0 ? 0 : (iNewIdx < l ? iNewIdx: l - 1)),
		$Ref = jQuery(oDomRef);
	var oItem,
		bValid = false;
	do {
		iNewIdx = bDown ? i++ : i--;
		oItem = aItems[iNewIdx];
		bValid = oItem && oItem.getEnabled() && !(oItem instanceof sap.ui.core.SeparatorItem) && oItem.getId() !== this.getId() + "_shi";
	} while(!bValid && i < l && i >= 0);
	if(bValid){
		var oText = oItem.getText();
		var iPos = iNewIdx + 1;
		if (this._determinePosinset) {
			iPos = this._determinePosinset(aItems, iNewIdx); //in DropdownBox separators must be removed from Posinset
		}
		$Ref.attr("aria-posinset", iPos);
		$Ref.val(oText);
		this._doSelect();

		var oListBox = this._getListBox();
		oListBox.setSelectedIndex(iNewIdx);
		oListBox.scrollToIndex(iNewIdx, true);
	} else {
		iNewIdx = iCurIdx;
	}
	this._iClosedUpDownIdx = iNewIdx;
	return iNewIdx;
};

/**
 * Selects the text of the InputDomRef in the given range
 * @param {int} [iStart=0] start position of the text selection
 * @param {int} [iEnd=<length of text>] end position of the text selection
 * @return {sap.ui.commons.ComboBox} this DropdownBox instance
 * @private
 */
sap.ui.commons.ComboBox.prototype._doSelect = function(iStart, iEnd){

	var oDomRef =this.getInputDomRef();

	if (oDomRef) {
		//if no Dom-Ref - no selection (Maybe popup closed)
		var $Ref = jQuery(oDomRef);
		oDomRef.focus();
		$Ref.selectText(iStart?iStart:0, iEnd?iEnd:$Ref.val().length);
	}

	return this;

};


//***********************************************************
// DOM Ref handling
//***********************************************************

/**
 * Returns the DomRef which represents the icon for value help.
 * Could be overwritten in child-classes
 *
 * @return {Element} The F4-element's DOM reference or null
 * @protected
 */
sap.ui.commons.ComboBox.prototype.getF4ButtonDomRef = function() {
	return this.getDomRef("icon");
};


//***********************************************************
// List Box handling (incl. creation of 'private one')
//***********************************************************

/**
 * Returns the private listbox.
 * Creates a new one if not yet done.
 * @type sap.ui.commons.ListBox
 * @return the private listbox
 * @private
 */
sap.ui.commons.ComboBox.prototype._getPrivateListBox = function(){
	if(this._oListBox) {
		return this._oListBox;
	}
	// else
	this._oListBox = new sap.ui.commons.ListBox(this.getId() + "-lb", {allowMultiSelect:false});
	this.setAggregation("myListBox", this._oListBox, true);
	this._oListBox.attachEvent("itemsChanged",this._handleItemsChanged, this);
	this._oListBox.attachEvent("itemInvalidated",this._handleItemInvalidated, this);

	if (this.getDomRef()) {
		// update ARIA info
		this.$().attr("aria-owns",  this.getId() + "-input " + this._oListBox.getId());
	}

	return this._oListBox;
};

/*
 * get the existing ListBox - shared or private. But if n private exist, do not create one
 */
sap.ui.commons.ComboBox.prototype._getExistingListBox = function(){

	var sListBox = this.getListBox(),
		oListBox;
	if(sListBox) {
		oListBox = sap.ui.getCore().getControl(sListBox);
	} else if(this._oListBox){
		oListBox = this._getPrivateListBox();
	}

	return oListBox;

};

/**
 * Returns the listbox that should be used.
 * This is either the one set from outside or the one created as 'private'
 * @type sap.ui.commons.ListBox
 * @param {boolean} bUpdateListBox indicate whether the ListBox should be updated for rerendering
 * @return the listbox that should be used
 * @private
 */
sap.ui.commons.ComboBox.prototype._getListBox = function(bUpdateListBox){

	var oListBox = this._getExistingListBox();
	if(!oListBox) {
		oListBox = this._getPrivateListBox();
	}
	if(bUpdateListBox){
		oListBox.setAllowMultiSelect(false);
		oListBox.setDisplaySecondaryValues(this.getDisplaySecondaryValues());

		var oDomRef = this.getDomRef();
		if(oDomRef) {
			oListBox.setMinWidth(jQuery(oDomRef).rect().width + "px");
		}
	}
	return oListBox;
};


//***********************************************************
// Closing and opening the drop down
//***********************************************************

/**
 * Opens the proposal list of the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype._open = function(iDuration){

	if(this.mobile) {
		return; // on mobile devices use native dropdown.
	}

	if(iDuration === undefined){
		iDuration = -1;
	}

	if(!this.getEditable() || !this.getEnabled()) {
		return;
	}

	if(!this.oPopup) {
		this.oPopup = new sap.ui.core.Popup();
	}

	this._F4ForOpen = false;

	var oListBox = this._getListBox(!this.oPopup.isOpen());
	var oPopup = this.oPopup;
	this._prepareOpen(oListBox);
	if(!this._oListBoxDelegate) {
		this._oListBoxDelegate = {oCombo: this, onclick: function(oEvent){ // FIXME: is this code ever executed? ListBox selection triggers _handleSelect which closes the Popup and removes this delegate again before the delegates for onclick are called
			// cover also the case of 'confirm initial proposal'
			var itemId = jQuery(oEvent.target).closest("li").attr("id");
			if (itemId) {
				// could also be done via EventPool... but whose to use? Combo's? ListBox'?
				var oEvent = new sap.ui.base.Event("_internalSelect", this.oCombo, {selectedId: itemId});
				this.oCombo._handleSelect(oEvent);
			}
		}};
	}
	oListBox.addDelegate(this._oListBoxDelegate);

	// and update the given popup instance
	oPopup.setContent(oListBox);
	oPopup.setAutoClose(true);
	oPopup.setAutoCloseAreas([this.getDomRef()]);
	oPopup.setDurations(0, 0); // no animations
	oPopup.setInitialFocusId(this.getId()+'-input'); // to prevent popup to set focus to the ListBox -> stay in input field

	// now, as everything is set, ensure HTML is up-to-date
	// This is separated in a function because controls which inherit the Combobox (e.g. SearchField) might override this
	// Here is also the possibility to interrupt the open procedure of the list (e.g. when the list is empty)
	var bSkipOpen = this._rerenderListBox(oListBox);
	if(bSkipOpen) {
		return;
	}

	oPopup.attachOpened(this._handleOpened, this);
	// attachClosed moved to _handleOpened

	var eDock = sap.ui.core.Popup.Dock;
	oPopup.open(iDuration, eDock.BeginTop, eDock.BeginBottom, this/*.getDomRef()*/, null, null, true);
	jQuery(oListBox.getFocusDomRef()).attr("tabIndex", "-1");
	//attachSelect moved to _handleOpened

	jQuery(this.getDomRef()).attr("aria-expanded", true);

};

/**
 * Rerenders the attached Listbox
 * @private
 */
sap.ui.commons.ComboBox.prototype._rerenderListBox = function(oListBox){
//	do not use oListBox.rerender(); because this not deletes rerender-timer. So it will be rerendered
//  twice in DropdownBox.
	sap.ui.getCore().applyChanges();
	return false;
};

/**
 * Walks over the list of available items in the given oListBox and updates the visual selection.
 * Also updates the Popup to show the right content.
 *
 * @param {sap.ui.commons.ListBox} oListBox listBox belonging to this ComboBox instance.
 * @private
 */
sap.ui.commons.ComboBox.prototype._prepareOpen = function(oListBox) {
	// update the list and the input field
	var $Ref = jQuery(this.getInputDomRef()),
		oValue = $Ref.val(),
		oNewValue,
		aItems = oListBox.getItems(),
		oText,
		startsWith = jQuery.sap.startsWithIgnoreCase,
		bEmptyString = oValue === "",
		sSelectedItemId = this.getSelectedItemId(),
		oItem;
	var i = 0;
	var iIndex = -1;
	for (var l = aItems.length; i < l; i++){
		oItem = aItems[i];
		if(!oItem.getEnabled()) {
			continue;
		}
		oText = "" + oItem.getText();
		if(bEmptyString || startsWith(oText, oValue)) {
			// maybe more than one item fit, try to find the right one (if nothing found use the first one)
			if (oText == oValue && i == this._iClosedUpDownIdx) {
				// it's the currently selected item of the list (after last liveChange)
				iIndex = i;
				oNewValue = oText;
				break;
			}else if (this._iClosedUpDownIdx < 0 && oText == oValue && oItem.getId() == sSelectedItemId) {
				// it's the currently selected item of the ComboBox (after last change event)
				iIndex = i;
				oNewValue = oText;
				break;
			}else if(iIndex < 0){
				iIndex = i;
				oNewValue = oText;
			}
		}
	}
	if (iIndex >= 0) {
		// ensure to mark pending only when set new
		this._iClosedUpDownIdx = iIndex;
		$Ref.attr("aria-posinset", iIndex+1);
		$Ref.val(oNewValue);
		this._doSelect();
		this._fireLiveChange();
	}
	var iItemsLength = oListBox.getItems().length;
	var iMaxPopupItems = this.getMaxPopupItems();
	oListBox.setVisibleItems(iMaxPopupItems < iItemsLength ? iMaxPopupItems : -1); // if less than max items let LisBox determine the size
	oListBox.setSelectedIndex(iIndex);

	// preparation of Popup moved to _open method again to allow cleaner implementation in dropdown box
};

/**
 * Once the ListBox is opened, we can update the scroll position
 * @private
 */
sap.ui.commons.ComboBox.prototype._handleOpened = function(){
	this.oPopup.detachOpened(this._handleOpened, this);
	var oListBox = this._getListBox();
	oListBox.scrollToIndex(this._iClosedUpDownIdx, true);
	oListBox.attachSelect(this._handleSelect, this);
	// and also ensure we get to know it closes / gets closed via automatic-close again
	this.oPopup.attachClosed(this._handleClosed, this);

	if (!!sap.ui.Device.browser.internet_explorer) {
		// as IE just ignores syncron focus() called from popup by opening it must be called asynchron
		// otherwise onfocusin is not executed.
		jQuery.sap.delayedCall(0, this, function(){
			jQuery(this.getInputDomRef()).focus();
		});
	}

	// if ComboBox is open -> switch to action mode
	if (jQuery(this.getFocusDomRef()).data("sap.InNavArea")) {
		jQuery(this.getFocusDomRef()).data("sap.InNavArea", false);
	}

};

/**
 * Closes  the proposal list of the ComboBox
 * @private
 */
sap.ui.commons.ComboBox.prototype._close = function(oEvent){
	if(this.oPopup) { // only if there is a Popup, the list box might have been used
		this.oPopup.close(0);
	}
};

/**
 * As there might also be situation where the auto-close functionality triggers the close,
 * ensure to handle everything in the event listener
 * @private
 */
sap.ui.commons.ComboBox.prototype._handleClosed = function(){
	this.oPopup.detachClosed(this._handleClosed, this);
	var oListBox = this._getListBox();
	oListBox.removeDelegate(this._oListBoxDelegate);
	oListBox.detachSelect(this._handleSelect, this);
	jQuery(this.getDomRef()).attr("aria-expanded", false);

	if(this._cleanupClose) {
		this._cleanupClose(oListBox);
	}
};

/**
 * This method is attached to the ListBox instance when it is open
 * to handle the click event occurring in the ListBox.
 * It additionally closes the Popup.
 * @param {sap.ui.base.Event} oControlEvent The event that was raised by the Listbox
 * @private
 */
sap.ui.commons.ComboBox.prototype._handleSelect = function(oControlEvent) {

	var iSelected = oControlEvent.getParameter("selectedIndex"),
		iSelectedId = oControlEvent.getParameter("selectedId"),
		oItem = oControlEvent.getParameter("selectedItem");

	if(!oItem && iSelectedId){
		oItem = sap.ui.getCore().byId(iSelectedId);
		if(oItem.getParent() !== this._getListBox(false)) {// can this happen?
			oItem = null;
		}
		iSelected = jQuery.inArray(oItem, this._getListBox().getItems());
	}
	if(oItem && oItem.getEnabled()) {
		var sNewValue = oItem.getText();
		this._iClosedUpDownIdx = iSelected;
		this._close(); // to allow DropdownBox to set this._iClosedUpDownIdx in _cleanupClose
		jQuery(this.getInputDomRef()).attr("aria-posinset", this._getListBox().getSelectedIndex()+1);
		var sOldValue = this.getValue();
		var sOldKey = this.getSelectedKey();
		var sNewKey = oItem.getKey();
		var sOldId = this.getSelectedItemId();
		var sNewId = oItem.getId();

		this._sTypedChars = sNewValue;
		this._sWantedSelectedKey = undefined;
		this._sWantedSelectedItemId = undefined;
		if (sOldValue != sNewValue || sOldKey != sNewKey || sOldId != sNewId) {
			this.setValue(sNewValue, true);
			this.setProperty("selectedKey", sNewKey, true); // no rerendering needed
			this.setProperty("selectedItemId", sNewId, true); // no rerendering needed
			this.fireChange({newValue: sNewValue, selectedItem: oItem});
		}else if(sNewValue != jQuery(this.getInputDomRef()).val()){
			// input field value was changed while type-Ahead during opening -> just restore
			jQuery(this.getInputDomRef()).val(sNewValue);
		}
	}
	this._doSelect();
	return oItem;
};


//***********************************************************
// Handle aggregation and association
//***********************************************************

//Handle items aggregation
sap.ui.commons.ComboBox.prototype.getItems = function(){
	// to not force creation if internal ListBox do not use _getListBox()
	var oListBox = this._getExistingListBox();

	return oListBox?oListBox.getItems():[];
};
sap.ui.commons.ComboBox.prototype.insertItem = function(oItem, iIndex){
	oItem = this.validateAggregation("items", oItem, /* multiple */ true);
	this._getListBox().insertItem(oItem, iIndex);
	return this;
};
sap.ui.commons.ComboBox.prototype.addItem = function(oItem){
	oItem = this.validateAggregation("items", oItem, /* multiple */ true);
	this._getListBox().addItem(oItem);
	return this;
};
sap.ui.commons.ComboBox.prototype.removeItem = function(vElement) {
	return this._getListBox().removeItem(vElement);
};
sap.ui.commons.ComboBox.prototype.removeAllItems = function() {
	// to not force creation if internal ListBox do not use _getListBox()
	var oListBox = this._getExistingListBox();

	return oListBox?oListBox.removeAllItems():[];
};
sap.ui.commons.ComboBox.prototype.indexOfItem = function(oItem){
	return this._getListBox().indexOfItem(oItem);
};
sap.ui.commons.ComboBox.prototype.destroyItems = function(){
	var oListBox = this._getExistingListBox();
	if (oListBox) {
		this._getListBox().destroyItems();
	}
	return this;
};

sap.ui.commons.ComboBox.prototype.updateItems = function(){

	this.bNoItemCheck = true;

	this.updateAggregation("items");

	this.bNoItemCheck = undefined;

	//handleItemsChange must be called asyncronous to insure that all bindingInfos are updated (item + selectedKey)
	if (!this._sHandleItemsChanged) {
		this._sHandleItemsChanged = jQuery.sap.delayedCall(0, this, "_handleItemsChanged", [null, true]);
	}

};

// handle listBox association
sap.ui.commons.ComboBox.prototype.setListBox = function(sListBox) {

	var oOldListBox = sap.ui.getCore().byId(this.getListBox());
	if (oOldListBox) {
		oOldListBox.detachEvent("itemsChanged", this._handleItemsChanged, this);
		oOldListBox.detachEvent("itemInvalidated",this._handleItemInvalidated, this);
		if (this._bListBoxDependentSet) {
			this.removeDependent(oOldListBox);
			this._bListBoxDependentSet = false;
		}
	}

	// if we created our own listBox beforehand, destroy it as the newly set one should win.
	if (this._oListBox && sListBox) {
		this._oListBox.detachEvent("itemsChanged", this._handleItemsChanged, this);
		this._oListBox.detachEvent("itemInvalidated",this._handleItemInvalidated, this);
		if (this.getAggregation("myListBox")) {
			this.destroyAggregation("myListBox", true);
		}else{
			this._oListBox.destroy();
		}
		this._oListBox = null;
	}
	this.setAssociation("listBox", sListBox);

	var oListBox = typeof sListBox === "string" ? sap.ui.getCore().byId(sListBox) : sListBox; 
	if (oListBox && oListBox.attachEvent) {
		oListBox.attachEvent("itemsChanged",this._handleItemsChanged, this);
		oListBox.attachEvent("itemInvalidated",this._handleItemInvalidated, this);
	}

	if (oListBox && !oListBox.getParent()) {
		// ListBox has no parent, add as dependent to prove the model in case of databinding
			this.addDependent(oListBox);
			this._bListBoxDependentSet = true;
	}

	if (this.getDomRef() && oListBox) {
		// update ARIA info
		this.$().attr("aria-owns", this.getId() + "-input " + oListBox.getId());
	}

	return this;
};

sap.ui.commons.ComboBox.prototype._handleItemsChanged = function(oEvent, bDelayed){

	if (this.bNoItemCheck) {
		return;
	}

	if (bDelayed) {
		// only clear if really from an delayed call
		this._sHandleItemsChanged = null;
	}

	// check if selected item is still valid
	var aItems = [];
	if (this._getExistingListBox()) {
		// do not use this.getItems because AutoComplete has there an other logic
		aItems = this._getListBox().getItems();
	}
	var sSelectedKey = this.getSelectedKey();
	var sSelectedItemId = this.getSelectedItemId();
	var sNewKey, sNewId, sNewValue;
	var sValue = this.getValue();
	var iIndex = -1;
	var bFoundByKey = false;
	var bFoundById = false;
	var bFoundByValue = false;
	this._iClosedUpDownIdx = -1;
	var bBoundValue = !!this.getBinding("value");
	var bBoundSelectedKey = !!this.getBinding("selectedKey");
	// binding for itemId makes no sense...

	if (bBoundValue && bBoundSelectedKey) {
		// if both bound -> only use key
		bBoundValue = false;
	}

	for ( var i = 0; i < aItems.length; i++) {
		var oItem= aItems[i];
		if ((this._sWantedSelectedKey || this._sWantedSelectedItemId)
		     && (oItem.getKey() == this._sWantedSelectedKey || oItem.getId() == this._sWantedSelectedItemId)
		     && oItem.getEnabled()) {
			// Item set before exist - now it exist
			sNewKey = oItem.getKey();
			sNewId = oItem.getId();
			sNewValue = oItem.getText();
			iIndex = i;
			this._sWantedSelectedKey = undefined;
			this._sWantedSelectedItemId = undefined;
			break;
		}else if (sSelectedKey && oItem.getKey() == sSelectedKey && oItem.getEnabled() && !(bFoundByValue && bBoundValue)) {
			// if not a WantedKey or Id is used, first search for key
			bFoundByKey = true;
			sNewKey = sSelectedKey;
			sNewId = oItem.getId();
			sNewValue = oItem.getText();
			iIndex = i;

			if (sNewValue == sValue && sNewId == sSelectedItemId
			    && !this._sWantedSelectedKey  && !this._sWantedSelectedItemId) {
				// value, id and key still the same and no not items searched for existence
				break;
			}
			if (bBoundSelectedKey && !this._sWantedSelectedKey  && !this._sWantedSelectedItemId) {
				// bound on key and no not items searched for existence
				break;
			}
		}else if (sSelectedItemId && oItem.getId() == sSelectedItemId && oItem.getEnabled() && !bFoundByKey && !(bFoundByValue && bBoundValue)) {
			// if not a WantedKey or Id is used and not found by key search for ID
			bFoundById = true;
			sNewKey = oItem.getKey();
			sNewId = sSelectedItemId;
			sNewValue = oItem.getText();
			iIndex = i;
		}else if (oItem.getText() == sValue && oItem.getEnabled() && !(bFoundByKey && !bBoundValue) && !(bFoundById && !bBoundValue) && !bFoundByValue) {
			// if not a WantedKey or Id is used and not found by key or ID, search for Value (use only first hit)
			bFoundByValue = true;
			sNewKey = oItem.getKey();
			sNewId = oItem.getId();
			sNewValue = sValue;
			iIndex = i;
			if (bBoundValue && !this._sWantedSelectedKey  && !this._sWantedSelectedItemId) {
				// bound on value and no not items searched for existence
				break;
			}
		}
	}

	this._iClosedUpDownIdx = iIndex;
	if (sValue != sNewValue && iIndex >= 0) { //only if item found
		this.setProperty("value", sNewValue, true); // no rerendering needed
		jQuery(this.getInputDomRef()).val(sNewValue);
	}
	this.setProperty("selectedKey", sNewKey, true); // no rerendering needed
	this.setProperty("selectedItemId", sNewId, true); // no rerendering needed
	var oDomRef = this.getDomRef();
	if ( oDomRef ) {
		jQuery(this.getInputDomRef()).attr("aria-setsize", aItems.length);
		if (sNewId) {
			jQuery(this.getInputDomRef()).attr("aria-posinset", iIndex+1);
		}else{
			jQuery(this.getInputDomRef()).removeAttr("aria-posinset");
		}
		if (this.mobile) {
			// refresh und rebulid select options because not ever known what exactly changed
			var oSelect = this.getDomRef("select");
			while (oSelect.length > 0) {
				oSelect.remove(0);
			}
			for ( var i = 0; i < aItems.length; i++) {
				var oItem= aItems[i];
				var oOption = document.createElement("option");
				oOption.text = oItem.getText();
				oOption.id = this.getId()+"-"+oItem.getId();
				if (!oItem.getEnabled()) {
					oOption.disabled = "disabled";
				}
				oSelect.add(oOption, null);
			}
			oSelect.selectedIndex = iIndex;
		}
	}

};

sap.ui.commons.ComboBox.prototype._handleItemInvalidated = function(oEvent){

	// an Item had changed -> check if text or key must be changed
	var oItem = oEvent.getParameter("item");
	if (oItem.getId() == this.getSelectedItemId()) {
		if (oItem.getKey() != this.getSelectedKey()) {
			this.setProperty("selectedKey", oItem.getKey(), true); // no rerendering needed
		}
		if (oItem.getText() != this.getValue()) {
			// just update the value without changing wanted key or id
			sap.ui.commons.TextField.prototype.setValue.apply(this, [oItem.getText()]);
		}
	}

	// maybe the wanted selected item is available now
	if (!this._sHandleItemsChanged) {
		// if there is an async. call outstanding, no call for item needed
		this._handleItemsChanged(oEvent);
	}

};

//***********************************************************
// Focus information handling and rendering related
//***********************************************************

/**
 * Returns an object representing the serialized focus information
 * To be overwritten by the specific control method
 * @return {object} an object representing the serialized focus information
 * @private
 */
sap.ui.commons.ComboBox.prototype.getFocusInfo = function(){
	return {id: this.getId(), sTypedChars: this._sTypedChars};
};

/*
 * Applies the focus info
 * To be overwritten by the specific control method
 * @param {object} oFocusInfo
 * @private
 */
sap.ui.commons.ComboBox.prototype.applyFocusInfo = function(oFocusInfo){

	var $Inp = jQuery(this.getInputDomRef());
	$Inp.val(oFocusInfo.sTypedChars);
	if (!this.getSelectedItemId() || sap.ui.getCore().byId(this.getSelectedItemId()).getText() != oFocusInfo.sTypedChars) {
		// text entred before and is not the currently selected item -> just restore type-ahead
		this._doTypeAhead();
	}
	this.focus();
	return this;
};

/*
 * Ensure that handed in ListBoxes are taken from the visible UI immediately.
 * @protected
 */
sap.ui.commons.ComboBox.prototype.onAfterRendering = function(oEvent){

	// if a ListBox is given (shared ListBox) make sure that is nor visible and move it in the
	// static UI Area. Not needed for private ListBox
	var sListBox = this.getListBox();
	if(sListBox) {
		var oListBox = sap.ui.getCore().getControl(sListBox);
		if (oListBox.getDomRef()) {
			oListBox.$().appendTo(sap.ui.getCore().getStaticAreaRef());
		}
	}

	if (this.mobile) {
		var that = this;
		this.$("select").bind("change", function(){
			var newVal = that.$("select").val();
			//as iPad ignores disabled attibute on option - check if item is enabled -> otherwise ignore
			var aItems = that.getItems();
			var bEnabled = true;
			var iOldIndex = 0;
			var sOldValue = that.getValue();

			for ( var i = 0; i < aItems.length; i++) {
				if (aItems[i].getText() == newVal) {
					// Value found
					bEnabled = aItems[i].getEnabled();
				}
				if (aItems[i].getText() == sOldValue) {
					// old Value found
					iOldIndex = i;
				}
			}
			if (bEnabled) {
				that.setValue(newVal);
				that.fireChange({newValue:newVal, selectedItem: sap.ui.getCore().byId(that.getSelectedItemId())});
			}else{
				that.getDomRef("select").selectedIndex = iOldIndex;
			}
		});
		// set initial selected item
		if(this.getSelectedItemId()){
			for ( var i = 0; i < this.getItems().length; i++) {
				var oItem = this.getItems()[i];
				if (this.getSelectedItemId() == oItem.getId()) {
					this.getDomRef("select").selectedIndex = i;
					break;
				}
			}
		}else {
			this._addDummyOption(this.getValue());
		}
	}
};


//***********************************************************
// Misc.
//***********************************************************

/**
 * Figure out whether the triggered key was a hotkey
 * @param {jQuery.Event} oEvent the event fired on the ComboBox
 * @private
 * @static
 */
sap.ui.commons.ComboBox._isHotKey = function(oEvent){
	if(oEvent.altKey || oEvent.ctrlKey || oEvent.metaKey) {
		return true;
	}

	var iKeyCode = oEvent.keyCode || oEvent.which,
		eKC = jQuery.sap.KeyCodes;

	switch(iKeyCode){
		// some keys can be identified as hotkey 'all alone'
		case eKC.ENTER:
		case eKC.SHIFT:
		case eKC.TAB:
		case eKC.ALT:
		case eKC.CONTROL:
			return true;
		// as  some keys share the keycode with standard characters (only in keypress event), ensure that which equals 0
		case eKC.END:
		case eKC.HOME:
		case eKC.ARROW_LEFT:
		case eKC.ARROW_UP:
		case eKC.ARROW_RIGHT:
		case eKC.ARROW_DOWN:
		case eKC.F1:
		case eKC.F2:
		case eKC.F3:
		case eKC.F4:
		case eKC.F5:
		case eKC.F6:
		case eKC.F7:
		case eKC.F8:
		case eKC.F9:
		case eKC.F10:
		case eKC.F11:
		case eKC.F12:
			if (oEvent.type == "keypress") {
				return oEvent.which === 0;
			} else {
				return true;
			}
		default:
			return false;
	}
};

/*
 * Overwrite of standard function
 */
sap.ui.commons.ComboBox.prototype.setSelectedKey = function(sSelectedKey) {

	if (this.getSelectedKey() == sSelectedKey) {
		// not changed
		return this;
	}

	if (!sSelectedKey && this._isSetEmptySelectedKeyAllowed()) {
		// selectedKey explicit not set -> select no item and initialize value
		return this;
	}

	// find corresponding item
	var aItems = this.getItems();
	var bNotFound = true;
	var sSelectedItemId;
	var iIndex;

	for ( var i = 0; i < aItems.length; i++) {
		if (aItems[i].getKey() == sSelectedKey && aItems[i].getEnabled()) {
			// key found -> set corresponding value
			var oSelectedItem = aItems[i];
			sSelectedItemId = oSelectedItem.getId();
			var sValue = oSelectedItem.getText();
			this.setValue(sValue, true);
			this._sTypedChars = sValue;
			iIndex = i;

			bNotFound = false;
			break;
		}
	}
	if (!bNotFound) {
		this.setProperty("selectedKey", sSelectedKey, true); // no rerendering needed
		this.setProperty("selectedItemId", sSelectedItemId, true); // no rerendering needed
		var oDomRef = this.getDomRef();
		if ( oDomRef ) {
			jQuery(this.getInputDomRef()).attr("aria-posinset", iIndex+1);
			if (this.mobile) {
				this._removeDummyOption();
				this.getDomRef("select").selectedIndex = iIndex;
			}
		}
		this._sWantedSelectedKey = undefined;
		this._iClosedUpDownIdx = iIndex;
	}else{
		// remember key to set later if items are updated
		this._sWantedSelectedKey = sSelectedKey;
		this._iClosedUpDownIdx = -1;
	}
	this._sWantedSelectedItemId = undefined; // delete wanted ID, because key was used later
	return this;
};

/*
 * To be overwritten by DropdownBox
 * in ComboBox an empty selected Key is allowed, then select no item and initialize value
 */
sap.ui.commons.ComboBox.prototype._isSetEmptySelectedKeyAllowed = function() {

		this.setProperty("selectedKey", "", true); // no rerendering needed
		this.setProperty("selectedItemId", "", true); // no rerendering needed
		this.setValue("", true);
		return true;

};

/*
 * Overwrite of standard function
 */
sap.ui.commons.ComboBox.prototype.setSelectedItemId = function(sSelectedItemId) {

	if (this.getSelectedItemId() == sSelectedItemId) {
		// not changed
		return this;
	}

	if (!sSelectedItemId && this._isSetEmptySelectedKeyAllowed()) {
		// selectedItemId explicit not set -> select no item and initialize value
		return this;
	}

	//find corresponding item
	var aItems = this.getItems();
	var bNotFound = true;
	var sKey;
	var iIndex;

	for ( var i = 0; i < aItems.length; i++) {
		if (aItems[i].getId() == sSelectedItemId && aItems[i].getEnabled()) {
			// key found -> set corresponding value
			var oSelectedItem = aItems[i];
			sKey = oSelectedItem.getKey();
			var sValue = oSelectedItem.getText();
			this.setValue(sValue, true);
			this._sTypedChars = sValue;
			iIndex = i;

			bNotFound = false;
			break;
		}
	}
	if (!bNotFound) {
		this.setProperty("selectedItemId", sSelectedItemId, true); // no rerendering needed
		this.setProperty("selectedKey", sKey, true); // no rerendering needed
		var oDomRef = this.getDomRef();
		if ( oDomRef ) {
			jQuery(this.getInputDomRef()).attr("aria-posinset", iIndex+1);
			if (this.mobile) {
				this._removeDummyOption();
				this.getDomRef("select").selectedIndex = iIndex;
			}
		}
		this._sWantedSelectedItemId = undefined;
		this._iClosedUpDownIdx = iIndex;
	}else{
		// remember ID to set later if items are updated
		this._sWantedSelectedItemId = sSelectedItemId;
		this._iClosedUpDownIdx = -1;
	}
	this._sWantedSelectedKey = undefined; // delete wanted key, because ID was used later
	return this;
};

/*
 * Overwrite of TextField function
 * additional parameter bNotSetSelectedKey to not set selected key because set
 * from calling function
 */
sap.ui.commons.ComboBox.prototype.setValue = function(sValue, bNotSetSelectedKey) {

	if (!bNotSetSelectedKey) {
		// find key for value
		var aItems = this.getItems();
		var sKey;
		var sSelectedItemId;
		var iIndex;
		this._iClosedUpDownIdx = -1;

		for ( var i = 0; i < aItems.length; i++) {
			if (aItems[i].getText() == sValue && aItems[i].getEnabled()) {
				// Value found -> set corresponding key
				var oSelectedItem = aItems[i];
				sSelectedItemId = oSelectedItem.getId();
				sKey = oSelectedItem.getKey();
				iIndex = i;
				this._iClosedUpDownIdx = iIndex;
				break;
			}
		}
		this.setProperty("selectedKey", sKey, true); // no rerendering needed
		this.setProperty("selectedItemId", sSelectedItemId, true); // no rerendering needed
		var oDomRef = this.getDomRef();
		if ( oDomRef ) {
			if (sSelectedItemId) {
				jQuery(this.getInputDomRef()).attr("aria-posinset", iIndex+1);
			}else{
				jQuery(this.getInputDomRef()).removeAttr("aria-posinset");
			}
			if (this.mobile) {
				if (!sSelectedItemId) {
					// no list item entered (free text) => add one dummy item to the select box
					this._addDummyOption(sValue);
				}else{
					this._removeDummyOption();
					this.getDomRef("select").selectedIndex = iIndex;
				}
			}
		}
	}

	// call standard TextField function
	sap.ui.commons.TextField.prototype.setValue.apply(this, [sValue]);
	this._sTypedChars = this.getValue();
	this._sWantedSelectedKey = undefined;
	this._sWantedSelectedItemId = undefined;
	return this;
};

/*
 * Overwite of INVALIDATE
 * do not invalidate ComboBox if only ListBox is changed
*/
sap.ui.commons.ComboBox.prototype.invalidate = function(oOrigin) {

	if(!oOrigin || !(oOrigin instanceof sap.ui.commons.ListBox) || oOrigin != this._getListBox()){
		sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	}else{
		// register ListBox as invalidated
		if(this.getUIArea() && oOrigin.getDomRef()){
			this.getUIArea().addInvalidatedControl(oOrigin);
		}
	}

};

/*
 * Overwrite CLONE to set aggregation of ListBox
 */
sap.ui.commons.ComboBox.prototype.clone = function(sIdSuffix){

	var oClone = sap.ui.core.Control.prototype.clone.apply(this, arguments),
		oListBox = this.getAggregation("myListBox"),
		oListBoxClone;

	// if listbox exists, clone it and add it to the combobox clone
	// FIX 20120905 FWE when items is fully bound for this ComboBox, _oListBox exists already in the clone and must not be cloned again  
	if (oListBox && !oClone._oListBox) { 
		// detatch event handlers to not clone it.
		oListBox.detachEvent("itemsChanged", this._handleItemsChanged, this);
		oListBox.detachEvent("itemInvalidated",this._handleItemInvalidated, this);

		oListBoxClone = oListBox.clone(sIdSuffix);
		// attach events to clone
		oListBoxClone.attachEvent("itemsChanged",oClone._handleItemsChanged, oClone);
		oListBoxClone.attachEvent("itemInvalidated",oClone._handleItemInvalidated, oClone);
		oClone.setAggregation("myListBox", oListBoxClone, true);
		oClone._oListBox = oListBoxClone;

		// attach events again
		oListBox.attachEvent("itemsChanged",this._handleItemsChanged, this);
		oListBox.attachEvent("itemInvalidated",this._handleItemInvalidated, this);
	}

	return oClone;

};

sap.ui.commons.ComboBox.prototype._addDummyOption = function(sValue){

	var oOption = this.getDomRef("dummyOption");
	if(!oOption){
		var aItems = this.getItems();
		oOption = document.createElement("option");
		oOption.text = sValue;
		oOption.id = this.getId()+"-dummyOption";
		if (aItems.length > 0) {
			this.getDomRef("select").add(oOption, jQuery.sap.domById(this.getId()+"-"+aItems[0].getId()));
		}else{
			this.getDomRef("select").add(oOption, null);
		}
	}else{
		oOption.text = sValue;
	}
	this.getDomRef("select").selectedIndex = 0;

};

sap.ui.commons.ComboBox.prototype._removeDummyOption = function(){

	var oOption = this.getDomRef("dummyOption");
	if (oOption) {
		this.getDomRef("select").remove(0);
	}

};

sap.ui.commons.ComboBox.prototype.getFocusDomRef = function() {

	if (this.mobile) {
		return this.getDomRef("select") || null;
	} else {
		return this.getDomRef("input") || null;
	}

};

// to overwrite JS doc with new event parameter

/**
 * Fire event change to attached listeners.
 *
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new / changed value of the textfield.</li>
 * <li>'selectedItem' of type <code>sap.ui.core.ListItem</code> selected item </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.ComboBox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.ComboBox#fireChange
 * @function
 */

/**
 * Event is fired when the text in the field has changed AND the focus leaves the ComboBox or the Enter key is pressed.
 *
 * @name sap.ui.commons.ComboBox#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new / changed value of the ComboBox.
 * @param {sap.ui.core.ListItem} oControlEvent.getParameters.selectedItem The new / changed item of the ComboBox.
 * @public
 */

}; // end of sap/ui/commons/ComboBox.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.DatePicker') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.DatePicker.
jQuery.sap.declare("sap.ui.commons.DatePicker");




/**
 * Constructor for a new DatePicker.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLocale locale} : string</li>
 * <li>{@link #getYyyymmdd yyyymmdd} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.TextField#constructor sap.ui.commons.TextField}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Allows end users to interact with dates.
 * Entries can directly be written in, or selected from a calendar pad.
 * Note: Dates can always be manually entered in the fix YYYYMMDD format, on top of the flexible "locale" format.
 * If the value is provided via data binding, using a Date.type the formatter of the Date.type is used.
 * Since version 1.22 the unified.Calendar is used inside the datePicker. So applications using the DatePicker should load the unified library. Otherwise it will be loaded the first time a DatePicker is opened.
 * @extends sap.ui.commons.TextField
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.DatePicker
 */
sap.ui.commons.TextField.extend("sap.ui.commons.DatePicker", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"locale" : {type : "string", group : "Misc", defaultValue : null},
		"yyyymmdd" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.DatePicker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.DatePicker.extend
 * @function
 */


/**
 * Getter for property <code>locale</code>.
 * Defines the locale (language and country), e.g. "en-US", whose translations and Date formatters should be used to render the DatePicker.If the value property is bound to a model using a Date type the locale will be ignored, because the locale information of the model are used.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>locale</code>
 * @public
 * @name sap.ui.commons.DatePicker#getLocale
 * @function
 */

/**
 * Setter for property <code>locale</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLocale  new value for property <code>locale</code>
 * @return {sap.ui.commons.DatePicker} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.DatePicker#setLocale
 * @function
 */


/**
 * Getter for property <code>yyyymmdd</code>.
 * Defines the date as a "yyyymmdd" string, independent from the format used. The inherited textField "value" attribute uses the date format as configured via the locale.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>yyyymmdd</code>
 * @public
 * @name sap.ui.commons.DatePicker#getYyyymmdd
 * @function
 */

/**
 * Setter for property <code>yyyymmdd</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sYyyymmdd  new value for property <code>yyyymmdd</code>
 * @return {sap.ui.commons.DatePicker} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.DatePicker#setYyyymmdd
 * @function
 */


// Start of sap\ui\commons\DatePicker.js
jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained


(function() {

	sap.ui.commons.DatePicker.prototype.init = function(){

		sap.ui.commons.TextField.prototype.init.apply(this, arguments);

		this._oFormatYyyymmdd = sap.ui.core.format.DateFormat.getInstance({pattern: "yyyyMMdd"});

		if (sap.ui.Device.browser.mobile) {
			this._bMobile = true;
			this._oFormatMobile = sap.ui.core.format.DateFormat.getInstance({pattern: "yyyy-MM-dd"});
		}

	};

	sap.ui.commons.DatePicker.prototype.exit = function() {

		this._oDate = undefined;
		this._oLocale = undefined;

		if(this._oPopup) {
			if (this._oPopup.isOpen()) {
				this._oPopup.close();
			}
			delete this._oPopup;
		}

		if (this._oCalendar) {
			this._oCalendar.destroy();
			delete this._oCalendar;
		}

	};

	sap.ui.commons.DatePicker.prototype.onAfterRendering = function() {

		if (this._bMobile) {
			// convert output to mobile format
			if (this._oDate) {
				var $Input = jQuery(this.getInputDomRef());
				var sOutputValue = this._oFormatMobile.format(this._oDate);
				$Input.val(sOutputValue);
			}
		}

	};

	sap.ui.commons.DatePicker.prototype.invalidate = function(oOrigin) {

		if(!oOrigin || oOrigin != this._oCalendar){
			// Calendar is only invalidated by DatePicker itself -> so don't invalidate DatePicker
			sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
		}

	};

	sap.ui.commons.DatePicker.prototype.onsapshow = function(oEvent) {

		var that = this;

		_toggleOpen(that);

		oEvent.preventDefault(); // otherwise IE opens the address bar history

	};

	sap.ui.commons.DatePicker.prototype.onsappageup = function(oEvent){

		//increase by one day
		var that = this;
		_incraseDate(that, 1, "day");

	};

	sap.ui.commons.DatePicker.prototype.onsappageupmodifiers = function(oEvent){

		var that = this;
		if (!oEvent.ctrlKey && oEvent.shiftKey) {
			// increase by one month
			_incraseDate(that, 1, "month");
		} else {
			// increase by one year
			_incraseDate(that, 1, "year");
		}

	};

	sap.ui.commons.DatePicker.prototype.onsappagedown = function(oEvent){

		//decrease by one day
		var that = this;
		_incraseDate(that, -1, "day");

	};

	sap.ui.commons.DatePicker.prototype.onsappagedownmodifiers = function(oEvent){

		var that = this;
		if (!oEvent.ctrlKey && oEvent.shiftKey) {
			// decrease by one month
			_incraseDate(that, -1, "month");
		} else {
			// decrease by one year
			_incraseDate(that, -1, "year");
		}

	};

	sap.ui.commons.DatePicker.prototype.onclick = function(oEvent) {

		if (jQuery(oEvent.target).hasClass("sapUiTfDateIcon") && !this._bMobile) {
			var that = this;
			_toggleOpen(that);
		}

	};

	sap.ui.commons.DatePicker.prototype.onsapfocusleave = function(oEvent){

		// Ignore event if DatePicker is opening or clicked on opener.
		if(this._oCalendar && oEvent.relatedControlId &&
		  (jQuery.sap.containsOrEquals(this._oCalendar.getDomRef(), sap.ui.getCore().byId(oEvent.relatedControlId).getFocusDomRef()) ||
		  this.getId() == oEvent.relatedControlId)){
			return;
		}

		sap.ui.commons.TextField.prototype.onsapfocusleave.apply(this, arguments);

	};

	sap.ui.commons.DatePicker.prototype.setValue = function(sValue) {

		var sOldValue = this.getValue();
		if (sValue == sOldValue) {
			return;
		}

		var that = this;
		_checkLocaleAllowed(that);

		this.setProperty("value", sValue, true);
		this._bValueSet = true;

		if (sValue) {
			this._oDate = this._parseValue(sValue);
		} else {
			this._oDate = undefined;
		}

		var sYyyymmdd = "";
		if (this._oDate) {
			sYyyymmdd = this._oFormatYyyymmdd.format(this._oDate);
		}

		this.setProperty("yyyymmdd", sYyyymmdd, true);

		if (this.getDomRef()) {
			// update value in input field
			var sOutputValue = "";
			var $Input = jQuery(this.getInputDomRef());
			if (this._bMobile && this._oDate) {
				// on mobile devices the date is displayed in native pattern, so it must be
				// converted into control pattern for value property
				sOutputValue = this._oFormatMobile.format(this._oDate);
			}else{
				// format date again - maybe value uses not the right pattern ???
				sOutputValue = sValue;
			}
			$Input.val(sOutputValue);
		}

		return this;

	};

	sap.ui.commons.DatePicker.prototype.setYyyymmdd = function(sYyyymmdd) {

		var sOldYyyymmdd = this.getYyyymmdd();
		if (sYyyymmdd == sOldYyyymmdd) {
			return;
		}

		this.setProperty("yyyymmdd", sYyyymmdd, true);
		this._bValueSet = false;

		var sValue = "";

		if (sYyyymmdd) {
			this._oDate = this._oFormatYyyymmdd.parse(sYyyymmdd);
		} else {
			this._oDate = undefined;
		}

		if (this._oDate) {
			sValue = this._formatValue(this._oDate);
		}
		this.setProperty("value", sValue, true);

		if (this.getDomRef()) {
			// update value in input field
			var sOutputValue = "";
			var $Input = jQuery(this.getInputDomRef());
			if (this._bMobile && this._oDate) {
				// on mobile devices the date is displayed in native pattern, so it must be
				// converted into control pattern for value property
				sOutputValue = this._oFormatMobile.format(this._oDate);
			}else{
				// format date again - maybe value uses not the right pattern ???
				sOutputValue = sValue;
			}
			$Input.val(sOutputValue);
		}

		return this;

	};

	sap.ui.commons.DatePicker.prototype.setLocale = function(sLocale) {

		// Worth checking if there is any change to process:
		var sOldLoc = this.getLocale();
		if(sLocale == sOldLoc) {
			return this;
		}

		// Saving the supplied locale:
		// "true" to suppress rendering. Rendering done on VALUE change.
		this.setProperty("locale", sLocale, true);

		var that = this;
		_checkLocaleAllowed(that);

		// get locale object and save it as it is used in the formatter
		this._oLocale = new sap.ui.core.Locale(sLocale);

		// to create new formatter according to locale
		this._sUsedPattern = undefined;

		// format value according to new locale
		var sValue = "";
		if (this._bValueSet) {
			// value was set, maybe locale set later -> parse again
			sValue = this.getValue();

			if (sValue) {
				this._oDate = this._parseValue(sValue);
			} else {
				this._oDate = undefined;
			}

			var sYyyymmdd = "";
			if (this._oDate) {
				sYyyymmdd = this._oFormatYyyymmdd.format(this._oDate);
			}

			this.setProperty("yyyymmdd", sYyyymmdd, true);
		}else{
			// yyyymmdd set or date set by calendar -> format to value again
			if (this._oDate) {
				sValue = this._formatValue(this._oDate);
			}
			this.setProperty("value", sValue, true);
		}

		if (this.getDomRef()) {
			// update value in input field
			var sOutputValue = "";
			var $Input = jQuery(this.getInputDomRef());
			if (this._bMobile && this._oDate) {
				// on mobile devices the date is displayed in native pattern, so it must be
				// converted into control pattern for value property
				sOutputValue = this._oFormatMobile.format(this._oDate);
			}else{
				// format date again - maybe value uses not the right pattern ???
				sOutputValue = sValue;
			}
			$Input.val(sOutputValue);
		}

		return this;

	};

	/*
	 * Overwrites the method in TextField to add additional YYYYMMDD parameter
	 */
	sap.ui.commons.DatePicker.prototype._checkChange = function(oEvent) {

		var oInput = this.getInputDomRef();
		var sNewValue = oInput && oInput.value;

		if (this._bMobile && sNewValue != "") {
			// on mobile devices the date is displayed in native pattern, so it must be
			// converted into control pattern for value property
			this._oDate = this._oFormatMobile.parse(sNewValue);
			sNewValue = this._formatValue(this._oDate);
		}

		if(this.getEditable() && this.getEnabled() && sNewValue != this.getValue()) {
			// check if input in valid pattern
			var bWrong = false;
			if (sNewValue != "") {
				if (!this._bMobile) {
					// in mobile case no wrong input is possible
					this._oDate = this._parseValue(sNewValue);
					if (this._oDate) {
						// just format date to right pattern, because maybe a fallback pattern is used in the parsing
						sNewValue = this._formatValue(this._oDate);
						oInput.value = sNewValue;
						if(this._oPopup && this._oPopup.isOpen()) {
							this._oCalendar.focusDate(this._oDate);
							if (!this._oDateRange.getStartDate() || this._oDateRange.getStartDate().getTime() != this._oDate.getTime()) {
								this._oDateRange.setStartDate(new Date(this._oDate.getTime()));
							}
						}
					}else{
						bWrong = true;
					}
				}
			}else{
				this._oDate = undefined;
			}

			// set the value in any case
			// in DataBinding case a parsing error is thrown if date can not be parsed
			this.setProperty("value", sNewValue, true);
			this._bValueSet = false;
			if (!bWrong) {
				var sYyyymmdd = "";
				if (this._oDate) {
					sYyyymmdd = this._oFormatYyyymmdd.format(this._oDate);
				}

				this.setProperty("yyyymmdd", sYyyymmdd, true);
			}

			this.fireChange( bWrong );
		}else if(this.getEditable() && this.getEnabled() && sNewValue == this.getYyyymmdd()){
			// the same date is entered as yyyymmdd again -> just set converted value to input field
			oInput.value = this.getValue();
		}

	};

	/**
	 * Fire event change to attached listeners.
	 *
	 * Expects following event parameters:
	 * <ul>
	 * <li>'newValue' of type <code>string</code> The new / changed value of the DatePicker.</li>
	 * <li>'newYyyymmdd' of type <code>string</code> The new / changed Yyyymmdd of the DatePicker. </li>
	 * <li>'invalidValue' of type <code>boolean</code> The new / changed value of the DatePicker is not a valid date. </li>
	 * </ul>
	 *
	 * @param {Map} [mArguments] the arguments to pass along with the event.
	 * @return {sap.ui.commons.DatePicker} <code>this</code> to allow method chaining
	 * @protected
	 * @name sap.ui.commons.DatePicker#fireChange
	 * @function
	 */
	sap.ui.commons.DatePicker.prototype.fireChange = function(bInvalidValue) {

		this.fireEvent("change", {newValue:this.getValue(),
			newYyyymmdd: this.getYyyymmdd(),
			invalidValue: bInvalidValue});

		return this;

	};

	sap.ui.commons.DatePicker.prototype._parseValue = function(sValue) {

		var that = this;

		var oFormat = _getFormatter(that);

		// convert to date object
		var oDate = oFormat.parse(sValue);
		return oDate;

	};

	sap.ui.commons.DatePicker.prototype._formatValue = function(oDate) {

		var that = this;

		var oFormat = _getFormatter(that);

		// convert to date object
		var sValue = oFormat.format(oDate);
		return sValue;

	};

	function _getFormatter(oThis){

		var sPattern = "";
		var oBinding = oThis.getBinding("value");
		var oLocale;

		if (oBinding && oBinding.oType && (oBinding.oType instanceof sap.ui.model.type.Date)) {
			sPattern = oBinding.oType.getOutputPattern();
		}

		if (!sPattern) {
			// no databinding is used -> use pattern from locale
			oLocale = _getUsedLocale(oThis);
			var oLocaleData = sap.ui.core.LocaleData.getInstance(oLocale);
			sPattern = oLocaleData.getDatePattern("medium");
		}

		if (sPattern != this._sUsedPattern) {
			oThis._sUsedPattern = sPattern;

			if (sPattern == "short" || sPattern == "medium" || sPattern == "long") {
				oThis._oFormat = sap.ui.core.format.DateFormat.getInstance({style: sPattern}, oLocale);
			} else {
				oThis._oFormat = sap.ui.core.format.DateFormat.getInstance({pattern: sPattern}, oLocale);
			}
		}

		return oThis._oFormat;

	};

	function _getUsedLocale(oThis) {

		// Fetch and check if the Control locale can be supported:
		var sLocale = oThis.getLocale();
		var oLocale;
		if (sLocale) {
			oLocale = oThis._oLocale;
		}else {
			oLocale = sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale();
		}

		return oLocale;

	};

	function _checkLocaleAllowed(oThis) {

		var oBinding = oThis.getBinding("value");
		var sLocale = oThis.getLocale();

		if (oBinding && oBinding.oType && (oBinding.oType instanceof sap.ui.model.type.Date) && sLocale) {
			jQuery.sap.log.warning("DatePicker " + oThis.getId() + ": Using a locale and Databinding at the same time is not supported");
			oThis._bIgnoreLocale = true;
		}

	};

	function _open(oThis){

		if(!oThis._oPopup) {
			jQuery.sap.require("sap.ui.core.Popup");
			oThis._oPopup = new sap.ui.core.Popup();
			oThis._oPopup.setAutoClose(true);
			oThis._oPopup.setDurations(0, 0); // no animations
			oThis._oPopup.attachClosed(_handleClosed, oThis);
		}

		if (!oThis._oCalendar) {
			sap.ui.getCore().loadLibrary("sap.ui.unified");
			jQuery.sap.require("sap.ui.unified.library");
			oThis._oCalendar = new sap.ui.unified.Calendar(oThis.getId()+"-cal");
			oThis._oDateRange = new sap.ui.unified.DateRange();
			oThis._oCalendar.addSelectedDate(oThis._oDateRange);
			oThis._oCalendar.attachSelect(_selectDate, oThis);
			oThis._oCalendar.attachCancel(_cancel, oThis);
			oThis._oPopup.setContent(oThis._oCalendar);
			// use compact design in commons
			oThis._oCalendar.addStyleClass("sapUiSizeCompact");
			oThis._oCalendar.setPopupMode(true);
			oThis._oCalendar.setParent(oThis, undefined, true); // don't invalidate DatePicker
		}

		oThis._checkChange(); // to prove is something was typed in manually

		var oDate = oThis._oDate;

		if (oDate) {
			oThis._oCalendar.focusDate(oDate);
			if (!oThis._oDateRange.getStartDate() || oThis._oDateRange.getStartDate().getTime() != oDate.getTime()) {
				oThis._oDateRange.setStartDate(new Date(oDate.getTime()));
			}
		} else {
			if (oThis._oDateRange.getStartDate()) {
				oThis._oDateRange.setStartDate(undefined);
			}
		}

		if (!this._bIgnoreLocale) {
			oThis._oCalendar.setLocale(oThis.getLocale());
		}

		oThis._oPopup.setAutoCloseAreas([oThis.getDomRef()]);

		var eDock = sap.ui.core.Popup.Dock;
		oThis._oPopup.open(0, eDock.BeginTop, eDock.BeginBottom, oThis, null, null, true);

	};

	function _toggleOpen(oThis){

		if (oThis.getEditable() && oThis.getEnabled()) {
			if(!oThis._oPopup || !oThis._oPopup.isOpen()) {
				_open(oThis);
			} else {
				oThis._oPopup.close();
				oThis.focus();
			}
		}

	};

	function _selectDate(oEvent){

		var aSelectedDates = this._oCalendar.getSelectedDates();
		var sOutputValue = "";

		if (aSelectedDates.length > 0) {
			this._oDate = aSelectedDates[0].getStartDate();
			sOutputValue = this._formatValue(this._oDate);
		}

		this._oPopup.close();
		this.focus();
		// do not call this._checkChange(); because we already have the date object and no wrong entry is possible
		var sNewValue = this._formatValue(this._oDate);
		this.setProperty("value", sNewValue, true);
		this._bValueSet = false;
		var sYyyymmdd = this._oFormatYyyymmdd.format(this._oDate);
		this.setProperty("yyyymmdd", sYyyymmdd, true);

		// set inputs value after properties because of placeholder logic for IE
		var $Input = this.$("input");
		if ($Input.val() !== sOutputValue) {
			$Input.val(sOutputValue);
			this._curpos = sOutputValue.length;
			$Input.cursorPos(this._curpos);
		}

		this.fireChange();

	};

	function _cancel(oEvent) {

		if(this._oPopup && this._oPopup.isOpen()) {
			this._oPopup.close();
			this.focus();
		}

	};

	function _handleClosed(oEvent) {

		// remove focus from DatePicker field
		if(!jQuery.sap.containsOrEquals(this.getDomRef(), document.activeElement) && this.getRenderer().onblur) {
			this.getRenderer().onblur(this);
		}

	};

	function _incraseDate(oThis, iNumber, sUnit) {

		var oOldDate = oThis._oDate;

		if (oOldDate && oThis.getEditable() && oThis.getEnabled()) {
			// use a new date object to have a real updated property
			var oDate = new Date (oOldDate.getTime());

			switch (sUnit) {
			case "day":
				oDate.setDate(oDate.getDate() + iNumber);
				break;
			case "month":
				oDate.setMonth(oDate.getMonth() + iNumber);
				break;
			case "year":
				oDate.setFullYear(oDate.getFullYear() + iNumber);
				break;

			default:
				break;
			}

			oThis._oDate = oDate;

			// update value in input field
			var $Input = jQuery(oThis.getInputDomRef());
			var sOutputValue = oThis._formatValue(oDate);
			$Input.val(sOutputValue);

		}

	};

}());

}; // end of sap/ui/commons/DatePicker.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.DatePickerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.DatePicker
jQuery.sap.declare("sap.ui.commons.DatePickerRenderer");



/**
 * @class DatePicker renderer.
 * @static
 * For a common look&feel, the DatePicker extends the TextField control,
 * just like the ComboBox does.
 */
sap.ui.commons.DatePickerRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.TextFieldRenderer);

/**
 * Hint: "renderOuterAttributes" is a reserved/hard-coded TextField extending function!
 *       It is used to allow extensions to display help icons.
 *
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager currently rendering this control
 * @param {sap.ui.commons.DatePicker}
 *            oControl the DatePicker whose "value help" should be rendered
 * @private
 */
sap.ui.commons.DatePickerRenderer.renderOuterAttributes = function(rm, oControl) {
	// To share the overall ComboBox styling:
	// Note: Would be best if a more generic className had been used for this, like
	//       "sapUiTfIconContainer", as ComboBox and DatePicker and F4Help are likely
	//       to always share a common container look. (Only icon should differ.)
	//       Then, in the unlikely case where one of them would want to differ from the
	//       others, then this one would only need to add its own className on top of
	//       the generic one, e.g. "sapUiTfDateContainer" for the DatePicker.
	// Referencing "sapUiTfCombo" for now.
	rm.addClass("sapUiTfCombo");
	this.renderDatePickerARIAInfo(rm, oControl);
};

/**
 * Renders additional HTML for the DatePicker to the TextField (sets the icon)
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager The RenderManager that can be used for
 *                                                 writing to the Render-Output-Buffer.
 * @param {sap.ui.fw.Control} oControl An object representation of the control that should
 *                                     be rendered.
 */
sap.ui.commons.DatePickerRenderer.renderOuterContentBefore = function(rm, oControl){

	rm.write("<div");
	rm.writeAttribute('id', oControl.getId() + '-icon');
	rm.writeAttribute('tabindex', '-1'); // to do not close popup by click on it
	// As mentioned above, a more generic "sapUiTfIcon" className could have been used...
	// One would just have had to add its own icon className!
	// Using "sapUiTfDateIcon" for now, as it proved easier to define instead of overwriting
	// the ComboBox image sources and backgrounds.
	rm.addClass("sapUiTfDateIcon");
	rm.writeClasses();
	rm.write("></div>"); //No Symbol for HCB Theme, as done by ComboBox.

	// invisible span with description for keyboard navigation
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
		// ResourceBundle always returns the key if the text is not found
	var sText = rb.getText("DATEPICKER_KEYBOARD");
	var sDateType = rb.getText("DATEPICKER_DATE_TYPE");

	var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oControl, oControl.getTooltip_AsString());
	if (sTooltip) {
		// add tooltip to description because it is not read by JAWS from title-attribute if a label is assigned
		sText = sTooltip + ". " + sText;
	}
	sText = sDateType + ". " + sText;
	rm.write('<SPAN id="' + oControl.getId() + '-Descr" style="visibility: hidden; display: none;">');
	rm.writeEscaped(sText);
	rm.write('</SPAN>');

};

/*
 * Renders the inner attributes for the input element of the DatePicker
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oDatePicker an object representation of the control that should be rendered
 */
sap.ui.commons.DatePickerRenderer.renderInnerAttributes = function(rm, oDatePicker) {

	if (oDatePicker._bMobile) {
		rm.writeAttribute('type', 'date');
		rm.addStyle('position', 'absolute'); // to lay input field over expander icon
	}

};

/*
 * Renders ARIA information for the outer DIV
 *
 * @param {sap.ui.fw.RenderManager} oRenderManager the RenderManager that can be used for
 *                                                 writing to the Render-Output-Buffer
 * @param {sap.ui.fw.Control} oControl an object representation of the control that should
 *                                     be rendered
 */
sap.ui.commons.DatePickerRenderer.renderDatePickerARIAInfo = function(rm, oControl) {

	// no ARIA on outer DIV because focus is only on the input field
	// so no ARIA necessary here -> if there it brings some conufing reading by JAWS

	// IMPORTANT: According to jQuery forums, DatePicker Accessibility is to be delivered in a
	//            future release. No release mentionned.
	// So there is not much point about doing more about this at the moment.

};

sap.ui.commons.DatePickerRenderer.renderARIAInfo = function(rm, oDatePicker) {

	var mProps= {
		role: oDatePicker.getAccessibleRole().toLowerCase(),
		multiline: false,
		autocomplete: "none",
		haspopup: true,
		describedby: {value: oDatePicker.getId() + "-Descr", append: true}};

	if (oDatePicker.getValueState() == sap.ui.core.ValueState.Error) {
		mProps["invalid"] = true;
	}

	rm.writeAccessibilityState(oDatePicker, mProps);

};

sap.ui.commons.DatePickerRenderer.convertPlaceholder = function(oDatePicker) {

	var sPlaceholder = oDatePicker.getPlaceholder();

	if (sPlaceholder.length == 8 && !isNaN(sPlaceholder)) {
		var oDate = oDatePicker._oFormatYyyymmdd.parse(sPlaceholder);
		if (oDate) {
			sPlaceholder = oDatePicker._formatValue(oDate);
		}
	}

	return sPlaceholder;

};
}; // end of sap/ui/commons/DatePickerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.DropdownBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.DropdownBox.
jQuery.sap.declare("sap.ui.commons.DropdownBox");




/**
 * Constructor for a new DropdownBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSearchHelpEnabled searchHelpEnabled} : boolean (default: false)</li>
 * <li>{@link #getSearchHelpText searchHelpText} : string</li>
 * <li>{@link #getSearchHelpAdditionalText searchHelpAdditionalText} : string</li>
 * <li>{@link #getSearchHelpIcon searchHelpIcon} : sap.ui.core.URI</li>
 * <li>{@link #getMaxHistoryItems maxHistoryItems} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.DropdownBox#event:searchHelp searchHelp} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.ComboBox#constructor sap.ui.commons.ComboBox}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The control provides a field that allows end users to an entry out of a list of pre-defined items. The choosable items can be provided in the form of complete list boxes or single list items.
 * Binding (see DataBinding) is also supported for list items.
 * @extends sap.ui.commons.ComboBox
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.DropdownBox
 */
sap.ui.commons.ComboBox.extend("sap.ui.commons.DropdownBox", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"clearHistory"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"searchHelpEnabled" : {type : "boolean", group : "Behavior", defaultValue : false},
		"searchHelpText" : {type : "string", group : "Appearance", defaultValue : null},
		"searchHelpAdditionalText" : {type : "string", group : "Appearance", defaultValue : null},
		"searchHelpIcon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"maxHistoryItems" : {type : "int", group : "Behavior", defaultValue : 0}
	},
	events : {
		"searchHelp" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.DropdownBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.DropdownBox.extend
 * @function
 */

sap.ui.commons.DropdownBox.M_EVENTS = {'searchHelp':'searchHelp'};


/**
 * Getter for property <code>searchHelpEnabled</code>.
 * Whether the DropdownBox's search help should be enabled.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>searchHelpEnabled</code>
 * @public
 * @name sap.ui.commons.DropdownBox#getSearchHelpEnabled
 * @function
 */

/**
 * Setter for property <code>searchHelpEnabled</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSearchHelpEnabled  new value for property <code>searchHelpEnabled</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.DropdownBox#setSearchHelpEnabled
 * @function
 */


/**
 * Getter for property <code>searchHelpText</code>.
 * (optional) The text to use for the search help entry.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>searchHelpText</code>
 * @public
 * @name sap.ui.commons.DropdownBox#getSearchHelpText
 * @function
 */

/**
 * Setter for property <code>searchHelpText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSearchHelpText  new value for property <code>searchHelpText</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.DropdownBox#setSearchHelpText
 * @function
 */


/**
 * Getter for property <code>searchHelpAdditionalText</code>.
 * (optional) The additional Text to use for the search help entry.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>searchHelpAdditionalText</code>
 * @public
 * @name sap.ui.commons.DropdownBox#getSearchHelpAdditionalText
 * @function
 */

/**
 * Setter for property <code>searchHelpAdditionalText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSearchHelpAdditionalText  new value for property <code>searchHelpAdditionalText</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.DropdownBox#setSearchHelpAdditionalText
 * @function
 */


/**
 * Getter for property <code>searchHelpIcon</code>.
 * (optional) The src of the icon to use for the search help entry.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>searchHelpIcon</code>
 * @public
 * @name sap.ui.commons.DropdownBox#getSearchHelpIcon
 * @function
 */

/**
 * Setter for property <code>searchHelpIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sSearchHelpIcon  new value for property <code>searchHelpIcon</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.DropdownBox#setSearchHelpIcon
 * @function
 */


/**
 * Getter for property <code>maxHistoryItems</code>.
 * Maximum number of history items in the list.
 * If 0 no history is displayed or stored. The history is locally stored on the client. Therefore do not activate this feature when this control handles confidential data.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxHistoryItems</code>
 * @public
 * @name sap.ui.commons.DropdownBox#getMaxHistoryItems
 * @function
 */

/**
 * Setter for property <code>maxHistoryItems</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxHistoryItems  new value for property <code>maxHistoryItems</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.DropdownBox#setMaxHistoryItems
 * @function
 */


/**
 * Event fired whenever the configured searchHelpItem is clicked or the searchHelpItem is configured and F4 key is pressed. 
 *
 * @name sap.ui.commons.DropdownBox#searchHelp
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The current value of the DropdownBox.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'searchHelp' event of this <code>sap.ui.commons.DropdownBox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.DropdownBox</code>.<br/> itself. 
 *  
 * Event fired whenever the configured searchHelpItem is clicked or the searchHelpItem is configured and F4 key is pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.DropdownBox</code>.<br/> itself.
 *
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.DropdownBox#attachSearchHelp
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'searchHelp' event of this <code>sap.ui.commons.DropdownBox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.DropdownBox#detachSearchHelp
 * @function
 */

/**
 * Fire event searchHelp to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The current value of the DropdownBox.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.DropdownBox#fireSearchHelp
 * @function
 */


/**
 * Using this method the history of the DropdownBox can be cleared.
 * This might be necessary if the items of the DropdownBox have changed. Otherwise invalid items may appear in the history.
 *
 * @name sap.ui.commons.DropdownBox.prototype.clearHistory
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\commons\DropdownBox.js
jQuery.sap.require('sap.ui.core.History'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.SeparatorItem'); // unlisted dependency retained


/**
 * Initialization method.
 * @private
 */
sap.ui.commons.DropdownBox.prototype.init = function() {
	sap.ui.commons.ComboBox.prototype.init.apply(this, arguments);
	this._oValueBeforePaste = null;
	this._oValueBeforeOpen = null;
	this.__aItems = null;
	this._iCursorPosBeforeBackspace = null;
	/** {sap.ui.core.ListItem[]} Array of ListItems containing SearchHelp followed by Separator @private */
	this._searchHelpItem = null;
	this._iItemsForHistory = 10; // UX defined history shall appear if there are more than 10 items
	this._oHistory = new sap.ui.core.History(this.getId());
};

/**
 * Cleanup instance.
 * @private
 */
sap.ui.commons.DropdownBox.prototype.exit = function() {
	var sIdPrefix = this.getId() + "-h-",i;
	// destroys searchHelpItems
	if ( this._searchHelpItem ) {
		this._searchHelpItem[0].destroy();
		this._searchHelpItem[1].destroy();
		this._searchHelpItem = null;
	}

	sap.ui.commons.ComboBox.prototype.exit.apply(this, arguments);
	// check for and remaining history items and destroy them
	function remove(id) {
	  var oItem = sap.ui.getCore().byId(id);
	  oItem && oItem.destroy();
	}
	for(var i = 0; i < this.getMaxHistoryItems(); i++) {
	  remove(sIdPrefix+i);
	}
	if (this.__oSeparator) {
		this.__oSeparator.destroy();
		this.__oSeparator = null;
	}
	this._oHistory = null;

	this.__aItems = null;
	this._sWantedValue = undefined;
};

/**
 * Ensure that handed in ListBoxes are taken from the visible UI immediately.
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onAfterRendering = function(oEvent){

	sap.ui.commons.ComboBox.prototype.onAfterRendering.apply(this, arguments);

	if (!this._sHandleItemsChanged) {
		// if _handleItemsChanges is executed, checkValueInItems is executed inside
		this.checkValueInItems();
	}

};

/*
 * Handle items aggregation (if Popup is opened, ListBox has invalid data because of history and filter)
 */
sap.ui.commons.DropdownBox.prototype.getItems = function(){

	if (this.oPopup && this.oPopup.isOpen()) {
		// take items from typeAhead array
		return this.__aItems;
	}else{
		return sap.ui.commons.ComboBox.prototype.getItems.apply(this, arguments);
	}

};
sap.ui.commons.DropdownBox.prototype.insertItem = function(oItem, iIndex){
	if (this.oPopup && this.oPopup.isOpen()) {
		// take items from typeAhead array
		this.__aItems.splice(iIndex, 0, oItem);
		if (this.__aItems.length <= this._iItemsForHistory && !this._searchHelpItem) {
			// if no history ListBox is not changed -> update ListBox too
			this._getListBox().insertItem(oItem, iIndex);
		}
		if (!this.bNoItemCheck) {
			// history might be not up do date -> rebuild; suppose the text before cursor is just typed in to use filter
			var $Ref = jQuery(this.getInputDomRef());
			var iCursorPos = $Ref.cursorPos();
			this._doTypeAhead($Ref.val().substr(0, iCursorPos), "");
		}
		return this;
	}else{
		return sap.ui.commons.ComboBox.prototype.insertItem.apply(this, arguments);
	}
};
sap.ui.commons.DropdownBox.prototype.addItem = function(oItem){
	if (this.oPopup && this.oPopup.isOpen()) {
		// take items from typeAhead array
		this.__aItems.push(oItem);
		if (this.__aItems.length <= this._iItemsForHistory && !this._searchHelpItem) {
			// if no history ListBox is not changed -> update ListBox too
			this._getListBox().addItem(oItem);
		}
		if (!this.bNoItemCheck) {
			// history might be not up do date -> rebuild; suppose the text before cursor is just typed in to use filter
			var $Ref = jQuery(this.getInputDomRef());
			var iCursorPos = $Ref.cursorPos();
			this._doTypeAhead($Ref.val().substr(0, iCursorPos), "");
		}
		return this;
	}else{
		return sap.ui.commons.ComboBox.prototype.addItem.apply(this, arguments);
	}
};
sap.ui.commons.DropdownBox.prototype.removeItem = function(vElement) {
	if (this.oPopup && this.oPopup.isOpen()) {
		// take items from typeAhead array
		var oItem = null;
		var vOriginalElement = vElement;

		if (typeof(vElement) == "string") { // ID of the element is given
			vElement = sap.ui.getCore().byId(vElement);
		}

		if (typeof(vElement) == "object") { // the element itself is given or has just been retrieved
			for (var i = 0; i < this.__aItems.length; i++) {
				if (this.__aItems[i] == vElement) {
					vElement = i;
					break;
				}
			}
		}

		if (typeof(vElement) == "number") { // "vElement" is the index now
			if (vElement < 0 || vElement >= this.__aItems.length) {
				jQuery.sap.log.warning("Element.removeAggregation called with invalid index: Items, " + vElement);

			} else {
				oItem = this.__aItems[vElement];
				this.__aItems.splice(vElement, 1);
			}
		}
		if (this.__aItems.length <= this._iItemsForHistory && !this._searchHelpItem) {
			// if no history ListBox is not changed -> update ListBox too
			this._getListBox().removeItem(vOriginalElement);
		}
		if (!this.bNoItemCheck) {
			// history might be not up do date -> rebuild; suppose the text before cursor is just typed in to use filter
			var $Ref = jQuery(this.getInputDomRef());
			var iCursorPos = $Ref.cursorPos();
			this._doTypeAhead($Ref.val().substr(0, iCursorPos), "");
		}
		return oItem;
	}else{
		return sap.ui.commons.ComboBox.prototype.removeItem.apply(this, arguments);
	}
};
sap.ui.commons.DropdownBox.prototype.removeAllItems = function() {
	if (this.oPopup && this.oPopup.isOpen()) {
		// take items from typeAhead array
		var aItems = this.__aItems;
		if (!aItems) {
			return [];
		}

		// as an empty list can not have an history or an searchHelp just clear List
		sap.ui.commons.ComboBox.prototype.removeAllItems.apply(this, arguments);

		this.__aItems = new Array();

		return aItems;
	}else{
		return sap.ui.commons.ComboBox.prototype.removeAllItems.apply(this, arguments);
	}
};
sap.ui.commons.DropdownBox.prototype.indexOfItem = function(oItem){
	if (this.oPopup && this.oPopup.isOpen()) {
		// take items from typeAhead array
		if (this.__aItems) {
			if (this.__aItems.length == undefined) {
				return -2;
			} // not a multiple aggregation

			for (var i = 0; i < this.__aItems.length; i++) {
				if (this.__aItems[i] == oItem) {
					return i;
				}
			}
		}
		return -1;
	}else{
		return sap.ui.commons.ComboBox.prototype.indexOfItem.apply(this, arguments);
	}
};
sap.ui.commons.DropdownBox.prototype.destroyItems = function(){
	if (this.oPopup && this.oPopup.isOpen()) {
		// take items from typeAhead array
		if (!this.__aItems) {
			return this;
		}

		// first remove all items from ListBox and then destroy them,
		// do not use destroy function from ListBox because history items and search field item
		// must not be destroyed
		this._getListBox().removeAllItems();

		for (var i = 0; i < this.__aItems.length; i++) {
			if (this.__aItems[i]) {
				this.__aItems[i].destroy();
			}
		}
		this.__aItems = new Array();

		return this;
	}else{
		return sap.ui.commons.ComboBox.prototype.destroyItems.apply(this, arguments);
	}
};

sap.ui.commons.DropdownBox.prototype.updateItems = function(){

	sap.ui.commons.ComboBox.prototype.updateItems.apply(this, arguments);

	if (this.oPopup && this.oPopup.isOpen()) {
		// history might be not up do date -> rebuild; suppose the text before cursor is just typed in to use filter
		var $Ref = jQuery(this.getInputDomRef());
		var iCursorPos = $Ref.cursorPos();
		this._doTypeAhead($Ref.val().substr(0, iCursorPos), "");
	}

};

sap.ui.commons.DropdownBox.prototype._handleItemsChanged = function(oEvent, bDelayed){

	if (this.bNoItemCheck) {
		return;
	}

	if (this.__aItems && (!this.oPopup || !this.oPopup.isOpen())) {
		// if popup is closed internal typeAhead item array must be cleared -> otherwise items could be inconsistent
		throw new Error("DropdownBox "+this.getId()+" : this.__aItems is not empty!");
	}
	if (this.getListBox() && this.oPopup && this.oPopup.isOpen()) {
		// items are maintained directly on ListBox adjust internal item array
		if (this.__aItems.length > this._iItemsForHistory || this._searchHelpItem) {
			switch (oEvent.getParameter("event")) {
			case "destroyItems":
				// destroy items not destroyed from ListBox
				for (var i = 0; i < this.__aItems.length; i++) {
					oItem = this.__aItems[i];
					if ( !oItem.bIsDestroyed ) {
						oItem.destroy();
					}
				}
				this.__aItems = new Array();
				if (this.getSearchHelpEnabled()) {
					// recreate search help and separator item
					this._searchHelpItem = null;
					this.setSearchHelpEnabled(this.getSearchHelpEnabled(), this.getSearchHelpText(), this.getSearchHelpAdditionalText(), this.getSearchHelpIcon());
				}
				break;
			case "removeAllItems":
				this.__aItems = new Array();
				break;
			case "removeItem":
				var oItem = oEvent.getParameter("item");
				for (var i = 0; i < this.__aItems.length; i++) {
					if (this.__aItems[i] == oItem) {
						this.__aItems.splice(i, 1);
						break;
					}
				}
				if (this.__aItems.length <= this._iItemsForHistory) {
					// now we don't have a filter or history any longer -> set all items to ListBox
					this._getListBox().setItems(this.__aItems, false, true);
				}
				break;
			case "insertItem":
				this.__aItems.splice(oEvent.getParameter("index"), 0, oEvent.getParameter("item"));
				break;
			case "addItem":
				this.__aItems.push(oEvent.getParameter("item"));
				break;
			case "setItems":
				this.__aItems = oEvent.getParameter("items");
				break;
			case "updateItems":
				// destroy items not destroyed from ListBox
				for (var i = 0; i < this.__aItems.length; i++) {
					oItem = this.__aItems[i];
					if ( !oItem.bIsDestroyed ) {
						oItem.destroy();
					}
				}
				if (this.getSearchHelpEnabled()) {
					// recreate search help and separator item
					this._searchHelpItem = null;
					this.setSearchHelpEnabled(this.getSearchHelpEnabled(), this.getSearchHelpText(), this.getSearchHelpAdditionalText(), this.getSearchHelpIcon());
				}
				this.__aItems = this._getListBox().getItems();
				break;
			default:
				break;
			}
		}else{
			// no filter, no additional items
			this.__aItems = this._getListBox().getItems();
		}
		// history might be not up do date -> rebuild; suppose the text before cursor is just typed in to use filter
		var $Ref = jQuery(this.getInputDomRef());
		var iCursorPos = $Ref.cursorPos();
		this._doTypeAhead($Ref.val().substr(0, iCursorPos), "");
	}

	sap.ui.commons.ComboBox.prototype._handleItemsChanged.apply(this, arguments);

	this.checkValueInItems();
};

//***********************************************************
//Mouse handling...
//***********************************************************

/**
 * Handle the click event happening in the DropdownBox
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onclick = function(oEvent) {

	if(!this.mobile && this.getEnabled && this.getEnabled() && this.getEditable()){
		if(this.oPopup && this.oPopup.isOpen()){
			this._close();
		} else if(!this._F4ForClose) {
			this._open();
		}
		this.focus();
	}
	this._F4ForClose = false;

};

/**
 * Handle mouseup event
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onmouseup = function(oEvent) {
	if(oEvent.target == this.getF4ButtonDomRef() || this.mobile) {
		return;
	}

	this._doSelect();
	oEvent.preventDefault();

};

sap.ui.commons.DropdownBox.prototype.onmousedown = function(oEvent){

	if(!this.getEnabled() || !this.getEditable()) {
		return;
	}

	// DropdownBox opens and closes on cleck on F4-Button and on input field
	if(this.oPopup && this.oPopup.isOpen()){
		this._F4ForClose = true;
	} else {
		this._F4ForOpen = true;
	}

	sap.ui.commons.ComboBox.prototype.onmousedown.apply(this, arguments);

};


//***********************************************************
//Keyboard handling...
//***********************************************************

/**
 * Handle sapshow pseudo events on the control
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsapshow = function(oEvent){

	if (this.mobile) {
		return;
	}

	if (!this.getEnabled() || !this.getEditable()) {
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
		return;
	}

	if(oEvent.which === jQuery.sap.KeyCodes.F4 && this._searchHelpItem){
		this._close();
		this.fireSearchHelp({value: jQuery(this.getInputDomRef()).val()});
		oEvent.preventDefault();
		oEvent.stopImmediatePropagation();
		return;
	}
	if(this.oPopup && this.oPopup.isOpen()) {
		this._close();
	} else {
		this._open();
		var oLB = this._getListBox();
		oLB.scrollToIndex(oLB.getSelectedIndex());
		this._doSelect();
	}
	oEvent.preventDefault();
	oEvent.stopImmediatePropagation();
};

/**
 * Handle keydown event
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onkeydown = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no own keyboard handling
		return;
	}

	if((!!sap.ui.Device.browser.internet_explorer && (oEvent.which == jQuery.sap.KeyCodes.DELETE || oEvent.which == jQuery.sap.KeyCodes.BACKSPACE)) ||
	   (!!sap.ui.Device.browser.webkit && (oEvent.which == jQuery.sap.KeyCodes.DELETE || oEvent.which == jQuery.sap.KeyCodes.BACKSPACE))) {
		//as IE and Webkit do not fire keypress event for DELETE or BACKSPACE
		this.onkeypress(oEvent);
	}

	if(!!!sap.ui.Device.browser.internet_explorer || oEvent.which !== jQuery.sap.KeyCodes.BACKSPACE) {
		return;
	}

	// Quite a trick to solve the issue with 'delete from last cursorPos' vs. 'delete last (proposed / auto-completed) character in IE
	this._iCursorPosBeforeBackspace = jQuery(this.getInputDomRef()).cursorPos();
};

/**
 * Handle paste event
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onpaste = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no own keyboard handling
		return;
	}

	//prevent 'multiple-pastes' by e.g. holding down paste combination.
	if(this._oValueBeforePaste === null) {
		this._oValueBeforePaste = jQuery(this.getInputDomRef()).val();
	}
};

/**
 * Handle keyup event
 * This must only be considered if it is from Backspace-key in IE or after paste.
 * In case there is a keyup with a tab this results from being entered via tabbing and can be ignored, too.
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onkeyup = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no own keyboard handling
		return;
	}

	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	var iKC = oEvent.which,
		oKC = jQuery.sap.KeyCodes;

	// call keyup function of TextField to get liveChange event
	sap.ui.commons.TextField.prototype.onkeyup.apply(this, arguments);

	if(!(!!sap.ui.Device.browser.internet_explorer && iKC === oKC.BACKSPACE) && this._oValueBeforePaste === null || iKC === oKC.TAB) {
		return;
	}
	// it's either backspace in IE or after paste (cumulating potentially multiple pastes, too)

	// as it is keyboard interaction, open the proposal list (if not yet done)
	if(!this.oPopup || !this.oPopup.isOpen()){
		this.noTypeAheadByOpen = true; // no typeahead and rerendering during open because of ARIA update issues
		this._open();
		this.noTypeAheadByOpen = undefined;
	}
	var $Ref = jQuery(this.getInputDomRef()),
		bValid = false;
	// the first case (backspace-handling) could only be true in IE. For FF we do this (less 'tricky') in keypress handler
	if(iKC === oKC.BACKSPACE && this._iCursorPosBeforeBackspace !== null) {
		var iCursorPos = $Ref.cursorPos();
		if(this._iCursorPosBeforeBackspace !== iCursorPos) {
			iCursorPos++;
		} // 'normalize' cursor position for upcoming handling... especially IE8
		this._iCursorPosBeforeBackspace = null; // forget being called by backspace handling
		bValid = this._doTypeAhead($Ref.val().substr(0, iCursorPos-1), "");
	}
	// this must happen to check for valid entry after paste and if required -> rollback
	else if(!(bValid = this._doTypeAhead("", $Ref.val()))){
		$Ref.val(this._oValueBeforePaste);
	}
	// Ensure visibility as well as filtering and new height is applied
	if(bValid) {
		this._getListBox().rerender();
	}

	this._oValueBeforePaste = null;
};

/**
 * Handle pseudo event onsaphome
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsaphome = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no own keyboard handling
		return;
	}

	if((!this.oPopup || !this.oPopup.isOpen()) && this.getEditable() && this.getEnabled()) {
		sap.ui.commons.TextField.prototype.onsaphome.apply(this, arguments); // before setting the cursor to have old cursor position in there
		var $Ref = jQuery(this.getInputDomRef());
		$Ref.cursorPos(0);
		this._updateSelection();
		oEvent.preventDefault();
	} else {
		sap.ui.commons.ComboBox.prototype.onsaphome.apply(this, arguments);
	}
};

/**
 * Handle pseudo event onsapdelete.
 * If triggered with open dropdown and current item provided by history feature,
 * removes the selected item from this instance's history.
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsapdelete = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no own keyboard handling
		return;
	}

	if(!this.oPopup || !this.oPopup.isOpen()) {
		return;
	}
	var oLB = this._getListBox(),
		oItem = oLB.getSelectedItem(),
		aMatches = oItem.getId().match(/\-h\-([0-4])/),
		iIdx = oLB.getSelectedIndex();
	if(aMatches && aMatches.length === 2){
		this._oHistory.remove(oItem.getText());
		oLB.removeItem(iIdx);
		var iLength = this._oHistory.get().length;
		if(iLength === 0) {// remove separator element, too
			oLB.removeItem(0);
		}
		oLB.rerender();
		var iNewIndex = iIdx + (this._searchHelpItem?2:0);
		if (iNewIndex == iLength) {
			// seperator item can not selected
			iNewIndex++;
		}
		oLB.setSelectedIndex(iNewIndex);
		this.setValue(oLB.getSelectedItem().getText());
	}
};

/**
 * Handle keypress event
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onkeypress = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no own keyboard handling
		return;
	}

	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	var iKC = oEvent.which,
		iKeyCode = oEvent.keyCode,
		oKC = jQuery.sap.KeyCodes;
	if(( sap.ui.commons.ComboBox._isHotKey(oEvent)
		    || ( !!sap.ui.Device.browser.firefox && iKeyCode === oKC.HOME ) || // IE & webkit fires no keypress on HOME, but "$" has the same keyCode
			iKeyCode === oKC.F4 && oEvent.which === 0 ) /*this is the Firefox case and ensures 's' with same charCode is accepted*/
			&& !(oEvent.ctrlKey && oEvent.which == 120)/*Ctrl+X*/ ) {
		return;
	}else if(iKeyCode == oKC.ESCAPE){
		var sValue = this.getProperty("value");
		var oInput = this.getInputDomRef();
		if(oInput && oInput.value !== sValue) {
			jQuery(oInput).val(sValue);
		}
		return;
	}
	var oNewChar = String.fromCharCode(iKC),
		$Ref = jQuery(this.getInputDomRef()),
		iCursorPos = $Ref.cursorPos(),
		sVal = $Ref.val();
	//jQuery.sap.log.debug("current value is: " + sVal + " with cursorPos: " + iCursorPos + " and newChar is: " + oNewChar);

	if(!this.oPopup || !this.oPopup.isOpen()){
		this.noTypeAheadByOpen = true; // no typeahead and rerendering during open because of ARIA update issues
		this._open();
		this.noTypeAheadByOpen = undefined;
	}
	var bValid = false;
	if(iKC === oKC.BACKSPACE) {// only happens in FF or other non-IE-browsers. IE does not support BACKSPACE in keypress
		bValid = this._doTypeAhead(sVal.substr(0, iCursorPos-1), "");
	} else {
		bValid = this._doTypeAhead(sVal.substr(0, iCursorPos), oNewChar);
	}

	oEvent.preventDefault();
};

/**
 * Move the cursor one step to the right (and adapt selection)
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsapright = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no own keyboard handling
		return;
	}

	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	if (!bRtl) {
		this._updateSelection(1);
	} else {
		this._updateSelection(-1);
	}
	oEvent.preventDefault();
};

/**
 * Move the cursor one step to the left (and adapt selection)
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsapleft = function(oEvent) {

	if (oEvent.target.id == this.getId()+"-select") {
		// on native dropdown -> no own keyboard handling
		return;
	}

	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	if (!bRtl) {
		this._updateSelection(-1);
	} else {
		this._updateSelection(1);
	}
	oEvent.preventDefault();
};


//***********************************************************
// Focus handling...
//***********************************************************

/**
 * Handle focusin event
 * Ensures the text gets selected when focus gets into the field
 * @param {jQuery.Event} oEvent the occuring event
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onfocusin = function(oEvent) {

	if (!this.oPopup || !this.oPopup.isOpen() || this._bFocusByOpen) {
		// if popup is open the text-selection is made by doTypeAhead
		// do not select all text in this case
		var $Ref = jQuery(this.getInputDomRef()),
		l = $Ref.val().length;
		if(l > 0 && !this.mobile){
			this._doSelect(0, l);
		}
		this._bFocusByOpen = undefined;
	}
	sap.ui.commons.ComboBox.prototype.onfocusin.apply(this, arguments);
};


//***********************************************************
// Text selection handling...
//***********************************************************

/**
 * Handle the select event happening in the DropdownBox
 * @param {jQuery.Event} oEvent
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onselect = function(oEvent) {

	var iTimeStamp = new Date().getTime();

	if(this._bIgnoreSelect) {
		this._bIgnoreSelect = false;
		this.iOldTimestamp = iTimeStamp;
		return;
	}
	if (this.iOldTimestamp && iTimeStamp - this.iOldTimestamp < 50) {
		// prevent double call of event in IE9 and jQuery 1.7.1
		return;
	}
	this.iOldTimestamp = undefined;

	if (!this.getEnabled() || !this.getEditable()) {
		return;
	}

	var $Ref = jQuery(this.getInputDomRef()),
		iNewCursor = $Ref.cursorPos(),
		sVal = $Ref.val();
	if(sVal.length > 0 && iNewCursor > 0) {
		// if nothing is selected do not initialate value
		this._doTypeAhead(sVal.substr(0,iNewCursor), "");
		if (!this.oPopup || !this.oPopup.isOpen()) {
			// as popup is not open restore listbox item like on popup close
			this._cleanupClose(this._getListBox())
		}
	}
	oEvent.preventDefault();
};

sap.ui.commons.DropdownBox.prototype._determinePosinset = function(aItems, iNewIndex){

	var iPos = iNewIndex + 1;

	if(this.oPopup && this.oPopup.isOpen()){
		this.dontSetPoisinset = undefined;
		var oItem = aItems[iNewIndex];
		// history and search help only available if open
		var bHistory = aItems[0].getId().search(this.getId() + "-h-") != -1;

		if (oItem.getId().search(this.getId() + "-h-") == -1) {
			// no history item
			if (bHistory) {
				//but history items available-> remove separator from index
				iPos = iPos - 1;
			}
			if (this._searchHelpItem) {
				// search help -> remove from index
				iPos = iPos - 2;
			}
		}
	}

	return iPos;

}

/**
 * Selects the text of the InputDomRef in the given range
 * @param {int} [iStart=0] start position of the text selection
 * @param {int} [iEnd=<length of text>] end position of the text selection
 * @return {sap.ui.commons.DropdownBox} this DropdownBox instance
 * @private
 */
sap.ui.commons.DropdownBox.prototype._doSelect = function(iStart, iEnd){

	this._bIgnoreSelect = true;

	var oDomRef =this.getInputDomRef();

	if (oDomRef) {
		//if no Dom-Ref - no selection (Maybe popup closed)
		var $Ref = jQuery(oDomRef);
		// do not call focus in DropdownBox
		$Ref.selectText(iStart ? iStart : 0, iEnd ? iEnd : $Ref.val().length);
	}

	return this;

};

/**
 * Adapt the selection to the cursor position and move the curser beforehand (if parameter iMoveBy is given)
 * @param {int} iMoveBy the number of places the cursor should move (can be positive (move right) or negative (move left))
 * @private
 */
sap.ui.commons.DropdownBox.prototype._updateSelection = function(iMoveBy) {
	var $Ref = jQuery(this.getInputDomRef()),
		iNewCursor = $Ref.cursorPos() + (iMoveBy || 0),
		sVal = $Ref.val();
	this._doTypeAhead(sVal.substr(0,iNewCursor), "");
	if (!this.oPopup || !this.oPopup.isOpen()) {
		// as popup is not open restore listbox item like on popup close
		this._cleanupClose(this._getListBox())
	}else{
		this._getListBox().rerender();
	}
};


//***********************************************************
// Type ahead and list box related
//***********************************************************

/*
 * Returns whether the new value is a valid one
 * @param {object} oValue the value before the event
 * @param {string} oNewChar the newly added character
 * @param {boolean} bNoFilter omit the filtering (e.g. when opening the listbox)
 * @param {int} iItemIndex use this item, only mix up hitory and filter
 * @returns {boolean} whether the new value is a valid one
 * @private
 */
sap.ui.commons.DropdownBox.prototype._doTypeAhead = function(oValue, oNewChar, bNoFilter, iItemIndex){
	if(this.__doTypeAhead === true){
		return; // recursive from opening the Popup and the _prepareOpen-method
	}
	this.__doTypeAhead = true;
	this._sWantedSelectedKey = undefined; // something typed -> do not search again for not existing items
	this._sWantedSelectedItemId = undefined;
	this._sWantedValue = undefined;

	var oLB = this._getListBox(),
		//oSelectedItem = oLB.getSelectedItem(),
		iMaxPopupItems = this.getMaxPopupItems(),
		aItems = this.__aItems || oLB.getItems(),
		iVisibleItemsCnt = aItems.length,
		// filtering and history only apply when more than a certain number of items is there
		bHistory = aItems.length > this._iItemsForHistory,
		bFilter = !bNoFilter && bHistory,
		oNewValue = oValue + oNewChar,
		oSpecials = new RegExp("[.*+?|()\\[\\]{}\\\\]", "g"), // .*+?|()[]{}\
		sRegExpValue = oNewValue.toLowerCase().replace(oSpecials, "\\$&"), //escape special characters
		rValFilter = RegExp("^" +sRegExpValue + ".*$"),
		iMove = oNewChar && oNewChar.length || 0,
		$Ref = jQuery(this.getInputDomRef());

	this.__aItems = aItems;

	if (iVisibleItemsCnt <= 0) {
		// no items -> no typeAhead possible -> everything is wrong
		this.__doTypeAhead = false;
		return false;
	}

	var aCurrentItems,
		// identify items matching already entered value (for autocomplete, item selection)
		aFilteredItems = this._getFilteredItems(aItems, rValFilter),
		bValid = aFilteredItems.length > 0;

	if (!bValid){
		// if not valid just show all items
		bFilter = false;
	}
	// in case we have to filter, only the matching subset of the current items (the configured set) is relevant for display
	if(bFilter) {
		aCurrentItems = aFilteredItems;
	}
	else {
		aCurrentItems = aItems.slice(0);
	}

	var aHistoryItems = [];
	if(bHistory) {
		aHistoryItems = this._addHistoryItems(aCurrentItems, bFilter && rValFilter);
		oLB.setItems(aCurrentItems, false, true); // fire no itemsChanged event because this would update Value property
		iVisibleItemsCnt = aCurrentItems.length;
	}
	oLB.setVisibleItems(iMaxPopupItems < iVisibleItemsCnt ? iMaxPopupItems : -1);

	var oItem,
	iHistLength = aHistoryItems.length;

	if (iItemIndex >= 0) {
		// use the required item
		oItem = aItems[iItemIndex];
	}
	// if there is no filter (e.g. when opening) but a history, try to find the current value in the history
	if(!bFilter && iHistLength > 0 && bValid) {
		aHistoryItems = this._getFilteredItems(aHistoryItems, rValFilter);
		oItem = aHistoryItems[0];
	}
	// in case there is filtering in place, select the first (valid) item
	if(bFilter) {
		oItem = aFilteredItems[0];
	} else if(!oItem) {
		// in case there was no filtering and no valid item from history
		// select the first of the filtered non-history items
		if(aFilteredItems.length > 0) {
			oItem = aFilteredItems[0];
		}else {// use last valid item
			var sOldValue = $Ref.val();
			for ( var i = 0; i < aCurrentItems.length; i++) {
				var oCheckItem = aCurrentItems[i];
				if (oCheckItem.getEnabled() && oCheckItem.getText() == sOldValue) {
					oItem = oCheckItem;
					break;
				}
			}
			if(!oItem) {// still no item found - use first one (can this happen???)
				oItem = aCurrentItems[0];
			}
		}
	}
	// OK, we know what to select, let's insert search help if required
	var oSHI = this._searchHelpItem;
	if(oSHI){
		aCurrentItems.splice(iHistLength++, 0, oSHI[0], oSHI[1]);
		oLB.setItems(aCurrentItems, false, true); // fire no itemsChanged event because this would update Value property
	}
	// find and select the item and update the text and the selection in the inputfield
	var i = oLB.indexOfItem(oItem),
	oText = oItem.getText();
	var iPos = i + 1;
	var iSize = aCurrentItems.length;
	if (aHistoryItems.length > 0){
		iSize = iSize - 1;
	}
	if (oSHI){
		iSize = iSize - 2;
	}
	if (iPos > aHistoryItems.length) {
		if (aHistoryItems.length > 0){
			// no history item but history available -> remove separator from position
			iPos = iPos - 1;
		}
		if(oSHI){
			// search help -> remove search help item and separator from position
			iPos = iPos - 2;
		}
	}
	$Ref.attr("aria-posinset", iPos);
	$Ref.attr("aria-setsize", iSize);
	$Ref.val(oText);
	this._sTypedChars = oNewValue;
	this._doSelect(oValue.length + iMove, oText.length);

	oLB.setSelectedIndex(i);
	if(oSHI && i == 2){
		// special case -> search help item exist and first real item selected -> show search help too
		oLB.scrollToIndex(0);
	}else{
		oLB.scrollToIndex(i);
	}
	this._iClosedUpDownIdx = i;

	if (!bValid){
		$Ref = this.$();
		$Ref.addClass("sapUiTfErr");
		jQuery.sap.delayedCall(300, $Ref, "removeClass", ["sapUiTfErr"]);
		// move cursor back to old position and select from there
		$Ref.cursorPos(oValue.length);
		this._doSelect(oValue.length, oText.length);
	}
	this.__doTypeAhead = false;
	return bValid;
};

/**
 * Walks over the list of available items in the given oListBox and updates the visual selection.
 * Also updates the Popup to show the right content.
 *
 * @param {sap.ui.commons.ListBox} oListBox listBox belonging to this ComboBox instance.
 * @param {sap.ui.core.Popup} oPopup the instance of the Popup functionality used for opening the proposal list
 * @returns {sap.ui.commons.DropdownBox}
 * @private
 */
sap.ui.commons.DropdownBox.prototype._prepareOpen = function(oListBox, oPopup){
	this._oValueBeforeOpen = this.$().val();

	// remember we opening the popup (needed in applyFocusInfo called after rerendering of ListBox)
	this._Opening = true;

	if (!this.noTypeAheadByOpen) {
		// there might be items with same text -> try to find out what is currently selected.
		var aItems = this.getItems();
		var iItemIndex;
		if (this._iClosedUpDownIdx >= 0) {
			iItemIndex = this._iClosedUpDownIdx;
		} else if(this.getSelectedItemId()){
			iItemIndex = this.indexOfItem(sap.ui.getCore().byId(this.getSelectedItemId()));
		}
		this._doTypeAhead("", jQuery(this.getInputDomRef()).val(), true, iItemIndex);
	}
	return this;
};

sap.ui.commons.DropdownBox.prototype._handleOpened = function(){

	sap.ui.commons.ComboBox.prototype._handleOpened.apply(this, arguments);

	if (!sap.ui.Device.browser.internet_explorer) {
		// because in IE already async made in ComboBox
		jQuery(this.getInputDomRef()).focus();
	}else{
		this._bFocusByOpen = true;
	}

};

/**
 * Ensures the given listbox is 'cleaned-up'.
 * @param {sap.ui.commons.ListBox} oListBox the listBox to clean up
 * @returns {sap.ui.commons.DropdownBox} this instance of DropdownBox
 * @private
 */
sap.ui.commons.DropdownBox.prototype._cleanupClose = function(oListBox){
	if(this.__aItems) {
		// restore selected Item
		var oSelectedItem = oListBox.getSelectedItem();
		oListBox.setItems(this.__aItems, false, true); // fire no itemsChanged event because this would update Value property
		this._iClosedUpDownIdx = oListBox.indexOfItem(oSelectedItem);
		oListBox.setSelectedIndex(this._iClosedUpDownIdx);
		this.__aItems = undefined;
	}
	this._oValueBeforeOpen = null;
	this._Opening = undefined;
	return this;
};

/**
 * Returns an array of ListItems matching given rValFilter.
 *
 * @param {sap.ui.core.ListItem[]} aItems array of list items to be filtered
 * @param {RegExp} rValFilter filter expression that can be used to identify valid items
 * @returns {sap.ui.core.ListItem[]} array of list items matching given rValFilter
 * @private
 */
sap.ui.commons.DropdownBox.prototype._getFilteredItems = function(aItems, rValFilter){
	var aTmpItems = aItems.slice(0),
		oItem;
	for (var i = aTmpItems.length - 1; i >= 0; i--){
		oItem = aTmpItems[i];
		if(!rValFilter.test(oItem.getText().toLowerCase()) || !oItem.getEnabled()) {
			aTmpItems.splice(i,1);
		}
	}
	return aTmpItems;
};

/**
 * Enriches provided array of listitems with history if history entries matching given rFilter exist.
 *
 * @param {sap.ui.core.ListItem[]} aItems array of list items to be enriched by history
 * @param {RegExp} rFilter filter expression that can be used to identify valid history items
 * @returns {sap.ui.core.ListItem[]} array of new 'history-list-items' (comprising separator)
 * @private
 */
sap.ui.commons.DropdownBox.prototype._addHistoryItems = function(aItems, rFilter) {
	var sIdPrefix = this.getId() + "-h-",
		oItem,
		aHistory = this._oHistory.get(),
		l = aHistory.length,
		aNewItems = [];
	// add items from history still matching given set of items
	for(var i = 0, j = 0; j < this.getMaxHistoryItems() && i < l; i++){
		if(!rFilter || rFilter.test(aHistory[i])) {
			oItem = (oItem = sap.ui.getCore().byId(sIdPrefix + j)) && oItem.setText(aHistory[i]) || new sap.ui.core.ListItem(sIdPrefix + j, {text: aHistory[i]});
			aNewItems.push(oItem);
			j++;
		}
	}

	if(aNewItems.length > 0) {
		var sSepId = sIdPrefix + "separator",
			oSeparator = this._getSeparator(sSepId);
		aNewItems.push(oSeparator);
	}
	aItems.unshift.apply(aItems, aNewItems);
	return aNewItems;
};

/**
 * Returns the separator instance for this DropdownBox.
 * If sSepId is given, this id will be used to either find or create the Separator.
 * If sSepId is omitted, only previously found separator will be returned but no new Separator would be created.
 *
 * @param {string} [sSepId] id of the separator to find or create. If omitted, only previously found separator will be returned.
 * @returns {sap.ui.core.SeparatorItem} separator item if found or created or null.
 */
sap.ui.commons.DropdownBox.prototype._getSeparator = function(sSepId){
	if(!this.__oSeparator && sSepId){
		this.__oSeparator = sap.ui.getCore().byId(sSepId) || new sap.ui.core.SeparatorItem(sSepId);
	}
	return this.__oSeparator || null;
};


//***************************************************
// Overwritten methods from API
//***************************************************

/* overwrite standard generated fireChange method */
sap.ui.commons.DropdownBox.prototype.fireChange = function(mArguments) {
	this.fireEvent("change", mArguments);
	if(mArguments.newValue && (this.getMaxHistoryItems() > 0)){
		this._oHistory.add(mArguments.newValue);
	}

	this._sWantedValue = undefined;
	return this;
};

/* overrides generated setValue-method */
sap.ui.commons.DropdownBox.prototype.setValue = function(sValue, bNotSetSelectedKey) {
	// normalize 'empty'  values
	sValue = (sValue === undefined || sValue === null || sValue === "") ? "" : sValue;
	var aItems = this.getItems(),
		sText,
		bValueOK = false,
		sFirstEnabledValue;

	// it might be necessary to also check for history... but as this should only contain valid entries, don't worry.
	for (var i = 0, l = aItems.length; i < l && !bValueOK; i++){
		var oItem = aItems[i];
		var bEnabled = oItem.getEnabled();
		sText = oItem.getText();
		if ( bEnabled && !sFirstEnabledValue) {
			sFirstEnabledValue = sText;
		}
		bValueOK = sText === sValue && bEnabled;
	}

	// only set the value in case the given one is valid
	if(bValueOK) {
		sap.ui.commons.ComboBox.prototype.setValue.call(this, sValue, bNotSetSelectedKey);
		this._sWantedValue = undefined;
	}else if (sValue === "" && aItems.length > 0){
		// initialize Dropdownbox to first valid Value
		sap.ui.commons.ComboBox.prototype.setValue.call(this, sFirstEnabledValue, bNotSetSelectedKey);
	}else{
		// remember wanted value for check if items are updated
		this._sWantedValue = sValue;
	}

	return this;
};


//***********************************************************
//Focus information handling and rendering related
//***********************************************************

/**
 * Applies the focus info and ensures the typeAhead feature is re-established again.
 *
 * @param {object} oFocusInfo the focus information belonging to this dropdown
 * @private
 */
sap.ui.commons.DropdownBox.prototype.applyFocusInfo = function(oFocusInfo){
 var $Inp = jQuery(this.getInputDomRef());
 if(jQuery.sap.startsWithIgnoreCase(this.getValue(), oFocusInfo.sTypedChars)) {
	 $Inp.val(oFocusInfo.sTypedChars);
	 this.focus();
	 if (!this.getSelectedItemId() || sap.ui.getCore().byId(this.getSelectedItemId()).getText() != oFocusInfo.sTypedChars) {
		// text entred before and is not the currently selected item -> just restore type-ahead
		 this._doTypeAhead(oFocusInfo.sTypedChars, "");
	}
	 if (!this._Opening && (!this.oPopup || !this.oPopup.isOpen())) {
		 // as popup is not open restore listbox item like on popup close
		 this._cleanupClose(this._getListBox())
	 }
 } else {
	 oFocusInfo.sTypedChars = "";
//	 $Inp.val(this.getValue()); // enable if really needed
	 this.focus();
	 this._doSelect();
 }
 return this;
};

/*
 * Handle the sapfocusleave pseudo event and ensure that when the focus moves to the list box,
 * the check change functionality (incl. fireChange) is not triggered.
 * Before the change event the value must be checked again if it fits to the items, because
 * it might be manipulated using DOM manipulation or a IME tool for entering foreign characters
 * @protected
 */
sap.ui.commons.DropdownBox.prototype.onsapfocusleave = function(oEvent) {

	var oLB = this._getListBox();
	if(oEvent.relatedControlId && jQuery.sap.containsOrEquals(oLB.getFocusDomRef(), sap.ui.getCore().byId(oEvent.relatedControlId).getFocusDomRef())){
		this.focus();
	} else {
		// we left the DropdownBox to another (unrelated) control and thus have to fire the change (if needed).
		var $Inp = jQuery(this.getInputDomRef());
		var sValue = $Inp.val();
		if (!this.getSelectedItemId() || sap.ui.getCore().byId(this.getSelectedItemId()).getText() != sValue) {
			// text entred before and is not the currently selected item -> just restore type-ahead
			this._doTypeAhead(sValue, "");
			if (!this._Opening && (!this.oPopup || !this.oPopup.isOpen())) {
				// as popup is not open restore listbox item like on popup close
				this._cleanupClose(this._getListBox())
			}
		}

		sap.ui.commons.TextField.prototype.onsapfocusleave.apply(this, arguments);
	}

};

/**
 * Extends the method inherited from sap.ui.core.Element by providing information on Search Help access (if needed)
 *
 * @return {string} string tooltip or undefined
 * @public
 */
sap.ui.commons.DropdownBox.prototype.getTooltip_AsString = function() {
	var sTooltipString = sap.ui.commons.ComboBox.prototype.getTooltip_AsString.apply(this, arguments);
	if(!this._searchHelpItem) {
		return sTooltipString;
	} else {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
		// ResourceBundle always returns the key if the text is not found
		var sSearchHelp = rb.getText("DDBX_SHI_ARIA");
		sSearchHelp = sSearchHelp === "DDBX_SHI_ARIA"?"Open search help via {0}":sSearchHelp;
		var sAdditionalText = this._searchHelpItem[0] && this._searchHelpItem[0].getAdditionalText() || rb.getText("DDBX_SHIF4");
		sAdditionalText = sAdditionalText === "DDBX_SHIF4"?"F4":sAdditionalText;
		sSearchHelp = sSearchHelp.replace("{0}", sAdditionalText);
		return (sTooltipString?sTooltipString + " - ":"") + sSearchHelp;
	}
};


//***************************************************
// Handling of list events
//***************************************************

/**
 * This method is attached to the ListBox instance when it is open
 * to handle the click event occurring in the ListBox.
 * It additionally closes the Popup.
 * If clicked on SearchHelp entry triggers the appropriate handling
 *
 * @param {sap.ui.base.Event} oControlEvent The event that was raised by the Listbox
 * @private
 */
sap.ui.commons.DropdownBox.prototype._handleSelect = function(oControlEvent) {
	if(this._searchHelpItem && oControlEvent.getParameter("selectedItem") === this._searchHelpItem[0]){
		var oEvent = jQuery.Event("sapshow");
		oEvent.which = jQuery.sap.KeyCodes.F4;
		this.onsapshow(oEvent);
	} else {
		// if history item is selected search for corresponding real item in list
		var oItem = oControlEvent.getParameter("selectedItem");
		if(!oItem){
			// not from ListBox, from ComboBox _open
			oItem = sap.ui.getCore().byId(oControlEvent.getParameter("selectedId"));
		}
		if (oItem.getId().search(this.getId() + "-h-") != -1) {
			// history item selected
			var oLB = this._getListBox(),
				aItems = oLB.getItems();
			var iLength = this._oHistory.get().length;
			if (iLength > this.getMaxHistoryItems()) {
				iLength = Math.max(this.getMaxHistoryItems(), 0);
			}
			for ( var iIndex = iLength; iIndex < aItems.length; iIndex++) {
				if (aItems[iIndex].getText() == oItem.getText() && aItems[iIndex].getEnabled()) {
					// Item found -> set in event data
					oControlEvent.mParameters.selectedIndex = iIndex;
					if(!oControlEvent.getParameter("selectedIndices")){
						//create arrays
						oControlEvent.mParameters.selectedIndices = new Array(1);
						oControlEvent.mParameters.aSelectedIndices = new Array(1);
					}
					oControlEvent.mParameters.selectedIndices[0] = iIndex;
					oControlEvent.mParameters.aSelectedIndices[0] = iIndex;
					oControlEvent.mParameters.selectedItem = aItems[iIndex];
					break;
				}
			}
		}

		this._sWantedValue = undefined;
		return sap.ui.commons.ComboBox.prototype._handleSelect.apply(this, arguments);
	}
};


//***************************************************
// API method implementation
//***************************************************

/**
 * Overwrite of Setter for property <code>searchHelpEnabled</code>.
 * This method accepts additional parameter to be compatiple with the
 * previous functionality
 *
 * Default value is <code>false</code>
 *
 * @param {boolean} bEnabled new value for property <code>searchHelpEnabled</code>
 * @param {string} sText new value for property <code>searchHelpText</code>
 * @param {string} sAdditionalText new value for property <code>searchHelpAdditionalText</code>
 * @param {string} sIcon new value for property <code>searchHelpIcon</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpEnabled = function(bEnabled, sText, sAdditionalText, sIcon) {

	this.setProperty("searchHelpEnabled", bEnabled);

	// set additional optional properties
	if (sText) {
		this.setProperty("searchHelpText", sText);
	}else{
		sText = this.getSearchHelpText();
	}
	if (sAdditionalText) {
		this.setProperty("searchHelpAdditionalText", sAdditionalText);
	}else{
		sAdditionalText = this.getSearchHelpAdditionalText();
	}
	if (sIcon) {
		this.setProperty("searchHelpIcon", sIcon);
	}else{
		sIcon = this.getSearchHelpIcon();
	}

	if(bEnabled) {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
		if ( rb ) {
			// ResourceBundle always returns the key if the text is not found
			sText = sText || rb.getText("DDBX_SHI");
			sText = sText === "DDBX_SHI"?"Search Help":sText;
			sAdditionalText = sAdditionalText || rb.getText("DDBX_SHIF4");
			sAdditionalText = sAdditionalText === "DDBX_SHIF4"?"F4":sAdditionalText;
		}
		sIcon = sIcon || sap.ui.resource("sap.ui.commons", "images/dropdown/ico12_f4.gif");
		if(!this._searchHelpItem) {
			this._searchHelpItem = [new sap.ui.core.ListItem(this.getId() + "_shi", {
				text: sText,
				additionalText: sAdditionalText,
				enabled: true,
				icon: sIcon
				}),
				new sap.ui.core.SeparatorItem()];
		} else {
			this._searchHelpItem[0].setText(sText).setAdditionalText(sAdditionalText).setIcon(sIcon);
		}
	} else {
		if ( this._searchHelpItem ) {
			this._searchHelpItem[0].destroy();
			this._searchHelpItem[1].destroy();
			this._searchHelpItem = null;
		}
	}

	return this;
};

/**
 * Overwrite of Setter for property <code>searchHelpText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sSearchHelpText new value for property <code>searchHelpText</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpText = function(sSearchHelpText) {
 this.setProperty("searchHelpText", sSearchHelpText);

 this.setSearchHelpEnabled(this.getSearchHelpEnabled(), sSearchHelpText, this.getSearchHelpAdditionalText(), this.getSearchHelpIcon());

 return this;
};

/**
 * Overwrite of Setter for property <code>searchHelpAdditionalText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sSearchHelpAdditionalText new value for property <code>searchHelpAdditionalText</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpAdditionalText = function(sSearchHelpAdditionalText) {
 this.setProperty("searchHelpAdditionalText", sSearchHelpAdditionalText);

 this.setSearchHelpEnabled(this.getSearchHelpEnabled(), this.getSearchHelpText(), sSearchHelpAdditionalText, this.getSearchHelpIcon());

 return this;
};

/**
 * Overwrite of Setter for property <code>searchHelpIcon</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sSearchHelpIcon new value for property <code>searchHelpIcon</code>
 * @return {sap.ui.commons.DropdownBox} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.DropdownBox.prototype.setSearchHelpIcon = function(sSearchHelpIcon) {
 this.setProperty("searchHelpIcon", sSearchHelpIcon);

 this.setSearchHelpEnabled(this.getSearchHelpEnabled(), this.getSearchHelpText(), this.getSearchHelpAdditionalText(), sSearchHelpIcon);

 return this;
};

/**
 * Check if value fits to items. If not, set to first item
 * @private
 */
sap.ui.commons.DropdownBox.prototype.checkValueInItems = function() {

	var sValue = this.getValue();
	var aItems = this.getItems();
	// save and restore wanted item
	var sWantedSelectedKey = this._sWantedSelectedKey;
	var sWantedSelectedItemId = this._sWantedSelectedItemId;

	// only check the value in the items when items are available
	// TODO: reset the value?
	if (aItems && aItems.length > 0) {

		var bValueOK = false;
		var sFirstEnabledValue;

		if (this._sWantedValue) {
			// value set but item not exists -> check now
			for (var i = 0, l = aItems.length; i < l && !bValueOK; i++){
				var oItem = aItems[i];
				var bEnabled = oItem.getEnabled();
				var sText = oItem.getText();
				if ( bEnabled && !sFirstEnabledValue) {
					sFirstEnabledValue = sText;
				}
				bValueOK = sText === this._sWantedValue && bEnabled;
			}

			if(bValueOK){
				sValue = this._sWantedValue;
				this._sWantedValue = undefined;
				sWantedSelectedKey = undefined;
				sWantedSelectedItemId = undefined;
				sap.ui.commons.ComboBox.prototype.setValue.call(this, sValue);
			}
		}

		if(!bValueOK) {
			for (var i = 0, l = aItems.length; i < l && !bValueOK; i++){
				var oItem = aItems[i];
				var bEnabled = oItem.getEnabled();
				var sText = oItem.getText();
				if ( bEnabled && !sFirstEnabledValue) {
					sFirstEnabledValue = sText;
				}
				bValueOK = sText === sValue && bEnabled;
			}
		}

		if(!bValueOK) {
			sValue = sFirstEnabledValue;
			sap.ui.commons.ComboBox.prototype.setValue.call(this, sValue);
		}

	}else{
		// no items
		sValue = "";
		sap.ui.commons.ComboBox.prototype.setValue.call(this, sValue);

	}

	this._sWantedSelectedKey = sWantedSelectedKey;
	this._sWantedSelectedItemId = sWantedSelectedItemId;
	return sValue;

};

/*
 * Overwrite generated setter to delete old history items if not longer needed
 */
sap.ui.commons.DropdownBox.prototype.setMaxHistoryItems = function(iMaxHistoryItems) {

	var iOldMaxHistoryItems = this.getMaxHistoryItems();
	var sIdPrefix = this.getId() + "-h-";
	var oItem;

	this.setProperty('maxHistoryItems', iMaxHistoryItems, true); // No re-rendering

	if (iMaxHistoryItems < iOldMaxHistoryItems) {
		// delete not longer visible history items
		var oListBox = this._getListBox();
		for ( var i = Math.max(iMaxHistoryItems, 0); i < iOldMaxHistoryItems; i++) {
			oItem = sap.ui.getCore().byId(sIdPrefix + i);
			if (oItem) {
				oListBox.removeItem(oItem);
				oItem.destroy();
			}
		}
		if (iMaxHistoryItems <= 0 && this.__oSeparator) {
			// remove separator but do not destroy it because it might be used again
			oListBox.removeItem(this.__oSeparator);
		}
	}
	// new items are added automatically by opening listbox (no support to change property while 
	// listbox is open)

};

sap.ui.commons.DropdownBox.prototype.clearHistory = function() {

	this._oHistory.clear();

	var sIdPrefix = this.getId() + "-h-";
	var oListBox = this._getListBox();
	var oItem;

	for(var i = 0; i < this.getMaxHistoryItems(); i++) {
		if (oItem = sap.ui.getCore().byId(sIdPrefix + i)) {
			oListBox.removeItem(oItem);
			oItem.destroy();
		}
	}
	if (this.__oSeparator) {
		// remove separator but do not destroy it because it might be used again
		oListBox.removeItem(this.__oSeparator);
	}

};

sap.ui.commons.DropdownBox.prototype.ondrop = function(oEvent) {

	// dropping text in DropdownBox makes no sense.
	oEvent.preventDefault();

};

/*
 * in ComboBox an empty selected Key is not allowed (execute same logig as for defined keys)
 */
sap.ui.commons.ComboBox.prototype._isSetEmptySelectedKeyAllowed = function() {

		return false;

};

}; // end of sap/ui/commons/DropdownBox.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.InPlaceEdit') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.InPlaceEdit.
jQuery.sap.declare("sap.ui.commons.InPlaceEdit");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new InPlaceEdit.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getUndoEnabled undoEnabled} : boolean (default: true)</li>
 * <li>{@link #getDesign design} : sap.ui.commons.TextViewDesign (default: sap.ui.commons.TextViewDesign.Standard)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.InPlaceEdit#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.InPlaceEdit#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The InPlaceEdit is a functionality to have text in display mode that can be changed in place.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.8.0
 * @name sap.ui.commons.InPlaceEdit
 */
sap.ui.core.Control.extend("sap.ui.commons.InPlaceEdit", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"clearOldText"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"undoEnabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"design" : {type : "sap.ui.commons.TextViewDesign", group : "Data", defaultValue : sap.ui.commons.TextViewDesign.Standard}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.InPlaceEdit with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.InPlaceEdit.extend
 * @function
 */

sap.ui.commons.InPlaceEdit.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>valueState</code>.
 * Visualizes warnings or errors related to the InPlaceEdit. Possible values: Warning, Error, Success.
 * If the content control has a own valueState property this will be used.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.ui.commons.InPlaceEdit#getValueState
 * @function
 */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.InPlaceEdit#setValueState
 * @function
 */


/**
 * Getter for property <code>undoEnabled</code>.
 * If undo is enabled after changing the text an undo button appears.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>undoEnabled</code>
 * @public
 * @name sap.ui.commons.InPlaceEdit#getUndoEnabled
 * @function
 */

/**
 * Setter for property <code>undoEnabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bUndoEnabled  new value for property <code>undoEnabled</code>
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.InPlaceEdit#setUndoEnabled
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Defines the visual appearance of the control.
 * Currently this is not supported for Labels.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.commons.TextViewDesign} the value of property <code>design</code>
 * @public
 * @since 1.9.0
 * @name sap.ui.commons.InPlaceEdit#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.commons.TextViewDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.ui.commons.InPlaceEdit#setDesign
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content control of the InPlaceEdit.
 * The following controls are allowed:
 * TextField, ComboBox, DropdownBox and Link
 * 
 * <strong>Note</strong>: this is the default aggregation for InPlaceEdit.
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.ui.commons.InPlaceEdit#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param {sap.ui.core.Control} oContent
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.InPlaceEdit#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.InPlaceEdit#destroyContent
 * @function
 */


/**
 * Event is fired when the text in the field has changed AND the focus leaves the InPlaceEdit or the Enter key is pressed. 
 *
 * @name sap.ui.commons.InPlaceEdit#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new / changed value of the InPlaceEdit.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.ui.commons.InPlaceEdit</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.InPlaceEdit</code>.<br/> itself. 
 *  
 * Event is fired when the text in the field has changed AND the focus leaves the InPlaceEdit or the Enter key is pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.InPlaceEdit</code>.<br/> itself.
 *
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.InPlaceEdit#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.ui.commons.InPlaceEdit</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.InPlaceEdit#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new / changed value of the InPlaceEdit.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.InPlaceEdit#fireChange
 * @function
 */


/**
 * This event if fired during typing into the InPlaceEdit and returns the currently entered value. This is not the content of the value property. The value property is only updated by ENTER and by leaving the control. 
 *
 * @name sap.ui.commons.InPlaceEdit#liveChange
 * @event
 * @since 1.16.5
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.liveValue Current value of the Textfield.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.ui.commons.InPlaceEdit</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.InPlaceEdit</code>.<br/> itself. 
 *  
 * This event if fired during typing into the InPlaceEdit and returns the currently entered value. This is not the content of the value property. The value property is only updated by ENTER and by leaving the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.InPlaceEdit</code>.<br/> itself.
 *
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.5
 * @name sap.ui.commons.InPlaceEdit#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.ui.commons.InPlaceEdit</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @public
 * @since 1.16.5
 * @name sap.ui.commons.InPlaceEdit#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'liveValue' of type <code>string</code> Current value of the Textfield.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.InPlaceEdit} <code>this</code> to allow method chaining
 * @protected
 * @since 1.16.5
 * @name sap.ui.commons.InPlaceEdit#fireLiveChange
 * @function
 */


/**
 * Clear the old text after a change to disable the undo functionality. If undoEnabled is false this has no effect.
 *
 * @name sap.ui.commons.InPlaceEdit.prototype.clearOldText
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\commons\InPlaceEdit.js
/**
 * This file defines behavior for the control,
 */


jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/*
 * On focus the InplaceEdit automatically switches to edit mode. Only for Links it stays in display mode to allow link-clicking.
 * When the focus is set outside the control is switches back to display mode. So for styling it is clear that edit mode
 * is always focused. The focusout handling must be done with a delay because in ComboBoxes the click of the expand button fires a focusout event too.
 * So it must be checked if the focus is still inside the control.
 * As the content controls don't bubble their property changes the _change event is handled. Because the InPlaceEdit have to react on content-changes.
 * Changing the content needs a rerendering of the InPlaceEdit. Toggling edit mode also rerenders the control.
 * The focusDomRef is in display mode the display control, in edit mode the edit control.
 * So as the control often rerenders and changes the focusDomRef be careful if you put the control in an ItemNavigation. (Update the DomRefs!)
 */

(function() {

	sap.ui.commons.InPlaceEdit.prototype.init = function(){

		this._bEditMode = false;

	};

	sap.ui.commons.InPlaceEdit.prototype.exit = function(){

		this._bEditMode = undefined;
		this._oDisplayControl = undefined;
		this._oEditControl = undefined;
		this._sOldText = undefined;
		this._sOldTextAvailable = undefined;
		this._bUseEditButton = undefined;
		this._iHeight = undefined;

		if (this._oTextView) {
			this._oTextView.destroy();
			delete this._oTextView;
		}

		if (this._oTextField) {
			this._oTextField.destroy();
			delete this._oTextField;
		}

		if (this._oUndoButton) {
			this._oUndoButton.destroy();
			delete this._oUndoButton;
		}

		if (this._oEditButton) {
			this._oEditButton.destroy();
			delete this._oEditButton;
		}

		var oContent = this.getContent();
		if (oContent) {
			oContent.detachEvent("_change", handleContentInvalidate, this);
			if (oContent instanceof sap.ui.commons.TextField) {
				oContent.detachEvent("change", handleContentChange, this);
				oContent.detachEvent("liveChange", handleContentLiveChange, this);
			}
		}
	};

	sap.ui.commons.InPlaceEdit.prototype.onBeforeRendering = function(){

		var that = this;

		updateControls(that);

		createUndoButton(that); // create here, because if created onfocusin there are focus errors

		// set right parent for RichTooltip
		var oTooltip = this.getTooltip();
		if (oTooltip instanceof sap.ui.core.TooltipBase){
			if (this._bEditMode) {
				oTooltip._currentControl = this._oEditControl;
			} else {
				oTooltip._currentControl = this._oDisplayControl;
			}
		}

	};


	sap.ui.commons.InPlaceEdit.prototype.onAfterRendering = function(){
		//
		// Warning: This method is called several times, for example after the child controls
		//          are (re-)rendered.
		//

		// if TextView is rendered make it not focusable (only InPlaceEdit is focused)
		if (!this._bEditMode && this.getEditable() && this._oTextView && this._oTextView.getDomRef()) {
			this._oTextView.$().attr("tabindex", "0");
		}

		var $Control = this.$();
		// In edit mode use 100% width for edit control, because width is set outside
		if (this._bEditMode) {
			this._oEditControl.$().css("width", "100%");
			if (this._iHeight > 0) {
				// Control is in display mode higher than in edit mode
				// add margins to center edit control
				var iOuterHeight = $Control.height();
				var iDelta = this._iHeight - iOuterHeight;
				// check if already margins added and add them
				var iMargins = $Control.outerHeight(true) - $Control.outerHeight(false);
				iDelta = iDelta + iMargins;
				var iMarginTop = Math.floor(iDelta / 2);
				var iMarginBottom = iDelta - iMarginTop;
				$Control.css("margin-top", iMarginTop + "px").css("margin-bottom", iMarginBottom + "px");
			}
		}else if(this._oDisplayControl.getMetadata().getName() == "sap.ui.commons.Link"){
			// edit icon should be directly next to link
			this._oDisplayControl.$().css("width", "auto").css("max-width", "100%");
		}else{
			var $DisplayControl = this._oDisplayControl.$();
			$DisplayControl.css("width", "100%");
			if (!this._iHeight && this._iHeight != 0 && this.getDesign() != sap.ui.commons.TextViewDesign.Standard) {
				// check if TextView is higher than inPlaceEdits standards height (Header design) ->
				// set to this new height even in edit mode to avoid flickering
				// special case: standard TextView has line height of textFields height in most themes
				// but font size fits. in this case the height should not be changed.
				var iInnerHeight = $DisplayControl.outerHeight(true);
				var iOuterHeight = $Control.innerHeight();
				if (iOuterHeight < iInnerHeight) {
					// because of box-sizing: border-box add borders to height
					var iOffset = $Control.outerHeight() - $Control.innerHeight();
					this._iHeight = iInnerHeight + iOffset;
				}else{
					this._iHeight = 0;
				}
			}
			if (this._iHeight > 0){
				$Control.css("height", this._iHeight + "px");
			}
		}

		// if undo button is rendered remove it from tab-chain
		if (this._sOldTextAvailable && this._oUndoButton && this._oUndoButton.getDomRef()) {
			this._oUndoButton.$().attr("tabindex", "-1");
		}
		if (this._oEditButton && this._oEditButton.getDomRef()) {
			this._oEditButton.$().attr("tabindex", "-1");
		}

		if(this._delayedCallId) {
			jQuery.sap.clearDelayedCall(this._delayedCallId);
			this._delayedCallId = null;
		}

		if(this.getValueState() == sap.ui.core.ValueState.Success) {
			this._delayedCallId = jQuery.sap.delayedCall(3000, this, "removeValidVisualization");
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.removeValidVisualization = function() {

		var oDomRef = this.$();
		if(oDomRef) {
			oDomRef.removeClass("sapUiIpeSucc");
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.clearOldText = function(){

		if (!this.getUndoEnabled()) {
			return;
		}

		if (this._bEditMode) {
			this._sOldText = this._oEditControl.getValue();
			this._sOldTextAvailable = true; // because "" can be a valid text so check for sOldText will not work in this case
		}else{
			this._sOldText = undefined;
			this._sOldTextAvailable = false;
		}
		this.rerender();

	};

/*
 * If a label is assigned to the InPlaceEdit it need to know if it's required
 * So check the content for required
 * @public
 */
	sap.ui.commons.InPlaceEdit.prototype.getRequired = function(){

		if (this.getContent() && this.getContent().getRequired) {
			return this.getContent().getRequired();
		}else{
			return false;
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.getEditable = function(){

		var oContent = this.getContent();

		if ((oContent.getEditable && !oContent.getEditable()) || (oContent.getEnabled && !oContent.getEnabled())) {
			// readOnly or disabled -> only display mode
			return false;
		}else{
			return true;
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.onsapescape = function(oEvent){

		if (this.getUndoEnabled()) {
			// Escape fires no keypress in webkit
			// In Firefox value can not be changed in keydown (onsapescape) event
			// So the escape event is stored in this._bEsc and the value in this._sValue
			if (!!!sap.ui.Device.browser.firefox) {
				var that = this;
				undoTextChange(that);
			} else {
				this._bEsc = true;
			}
			if (this.$().hasClass("sapUiIpeUndo")) {
				// undo is possible -> do not propagate escape (not close popup)
				oEvent.stopPropagation();
			}
			// delete TextFields escape information, because native ESC-logic not needed
			this._oEditControl._bEsc = undefined;
			this._oEditControl._sValue = undefined;
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.onkeypress = function(oEvent){

		// Firefox escape logic
		if (this._bEsc) {
			var that = this;
			this._bEsc = undefined;
			undoTextChange(that);
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.onkeydown = function(oEvent){

		if (oEvent.keyCode == jQuery.sap.KeyCodes.F2 && !this._bEditMode) {
			var that = this;
			switchToEditMode(that);
			this.$().addClass("sapUiIpeFocus");
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.onfocusin = function(oEvent){

		// in display mode focus is on displayControl -> simulate focus on outer DIV
		if (!this._bEditMode) {
			if (!this._bUseEditButton && oEvent.target.id != this.getId()+"--X") {
				// if not a link and not clicked on undo button -> directly switch to edit mode
				var that = this;
				switchToEditMode(that);
			}
			this.$().addClass("sapUiIpeFocus");
		}else if(this._focusDelay){
			// foucusout handling not finished and focus again in control -> just stay in edit mode
			jQuery.sap.clearDelayedCall(this._focusDelay);
			this._focusDelay = null;
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.ontap = function(oEvent){

		// on iOS no focusin event is fired
		if (sap.ui.Device.os.name == "iOS") {
			this.onfocusin(oEvent);
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.onfocusout = function(oEvent){

		if(this._focusDelay){
			jQuery.sap.clearDelayedCall(this._focusDelay);
			this._focusDelay = null;
		}
		this._focusDelay = jQuery.sap.delayedCall(200, this, "_handleFocusOut", arguments); // check delayed because click of ComboBox Expander (shorter than 200 sometimes don't work)

	};

	sap.ui.commons.InPlaceEdit.prototype._handleFocusOut = function(oEvent){

		var oFocusedDom = document.activeElement;
		if (!jQuery.sap.containsOrEquals(this.getDomRef(), oFocusedDom)) {
			// focus is not inside of the InPlaceEdit
			// in display mode focus is on displayControl -> simulate focus on outer DIV
			if (!this._bEditMode) {
				this.$().removeClass("sapUiIpeFocus");
			}
			var that = this;
			switchToDisplayMode(that);
		}
		this._focusDelay = undefined;

	};

	sap.ui.commons.InPlaceEdit.prototype.setContent = function(oContent){

		var oOldContent = this.getContent();
		if (oOldContent) {
			oOldContent.detachEvent("_change", handleContentInvalidate, this);
			if (oOldContent instanceof sap.ui.commons.TextField) {
				oOldContent.detachEvent("change", handleContentChange, this);
				oOldContent.detachEvent("liveChange", handleContentLiveChange, this);
				oOldContent._propagateEsc = undefined;
			}
		}
		this._sOldText = undefined;
		this._sOldTextAvailable = false;
		this._oDisplayControl = undefined;
		this._oEditControl = undefined;

		this.setAggregation("content", oContent);

		if (oContent) {
			// As controls don't bubble their invalidate we have to use the _change event
			oContent.attachEvent("_change", handleContentInvalidate, this);
			if (oContent instanceof sap.ui.commons.TextField) {
				oContent.attachEvent("change", handleContentChange, this);
				oContent.attachEvent("liveChange", handleContentLiveChange, this);
				oContent._propagateEsc = true;
			}
		}

		var that = this;
		updateControls(that);

	};

// since some Properties and the change event are not available on all controls (Link)
// have it as property on InPlaceEdit too. If Content-control has the property too just forward it to
// the content control
// ! what's about setting property before adding content? !
	sap.ui.commons.InPlaceEdit.prototype.setValueState = function(oValueState) {

		var oContent = this.getContent();

		if (oContent && oContent.setValueState) {
			oContent.setValueState(oValueState);
		}else if(this._oEditControl && this._oEditControl.setValueState){
			this._oEditControl.setValueState(oValueState);
			handleContentInvalidate.call(this);
		}else {
			this.setProperty("valueState", oValueState);
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.getValueState = function(){

		var oContent = this.getContent();

		if (oContent && oContent.getValueState) {
			return oContent.getValueState();
		}else if(this._oEditControl && this._oEditControl.getValueState){
			return this._oEditControl.getValueState();
		}else{
			return this.getProperty("valueState");
		}

	};

/**
 * Sets a new tooltip for this InPlaceEdit. The tooltip can either be a simple string
 * (which in most cases will be rendered as the <code>title</code> attribute of this
 * Element) or an instance of {@link sap.ui.core.TooltipBase}.
 *
 * If a new tooltip is set, any previously set tooltip is deactivated.
 *
 * If a content control is assigned to the InPlaceEdit the tooltip of this control
 * is used. A directly set tooltip to the InPlaceEdit is ignored in this case.
 *
 * @param {string|sap.ui.core.TooltipBase} oTooltip.
 * @public
 */
	sap.ui.commons.InPlaceEdit.prototype.setTooltip = function(oTooltip) {

		var oContent = this.getContent();

		if (oContent) {
			oContent.setTooltip(oTooltip);
		} else {
			this._refreshTooltipBaseDelegate(oTooltip);
			this.setAggregation("tooltip", oTooltip);
		}

		return this;

	};

/**
 * Returns the tooltip for this InPlaceEdit if any or an undefined value.
 * The tooltip can either be a simple string or a subclass of
 * {@link sap.ui.core.TooltipBase}.
 *
 * Callers that are only interested in tooltips of type string (e.g. to render
 * them as a <code>title</code> attribute), should call the convenience method
 * {@link #getTooltip_AsString} instead. If they want to get a tooltip text no
 * matter where it comes from (be it a string tooltip or the text from a TooltipBase
 * instance) then they could call {@link #getTooltip_Text} instead.
 *
 * If a content control is assigned to the InPlaceEdit the tooltip of this control
 * is used. A directly set tooltip to the InPlaceEdit is ignored in this case.
 *
 * @return {string|sap.ui.core.TooltipBase} The tooltip for this Element.
 * @public
 */
	sap.ui.commons.InPlaceEdit.prototype.getTooltip = function(){

		var oContent = this.getContent();

		if (oContent) {
			return oContent.getTooltip();
		}else{
			return this.getAggregation("tooltip");
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.setDesign = function(sDesign) {

		this.setProperty("design", sDesign);
		this._iHeight = undefined;

	};

	sap.ui.commons.InPlaceEdit.prototype.clone = function(){

		// on clone don't clone event handler
		var oContent = this.getContent();
		if (oContent) {
			oContent.detachEvent("_change", handleContentInvalidate, this);
			if (oContent instanceof sap.ui.commons.TextField) {
				oContent.detachEvent("change", handleContentChange, this);
				oContent.detachEvent("liveChange", handleContentLiveChange, this);
			}
		}

		var oClone = sap.ui.core.Control.prototype.clone.apply(this, arguments);

		if (oContent) {
			oContent.attachEvent("_change", handleContentInvalidate, this);
			if (oContent instanceof sap.ui.commons.TextField) {
				oContent.attachEvent("change", handleContentChange, this);
				oContent.attachEvent("liveChange", handleContentLiveChange, this);
			}
		}

		return oClone;

	};

	sap.ui.commons.InPlaceEdit.prototype.getFocusDomRef = function(){

		if (!this.getDomRef()) {
			// not rendered
			return;
		}

		// focus is on inner control (display or edit)
		if (this._bEditMode) {
			return this._oEditControl.getFocusDomRef();
		} else {
			return this._oDisplayControl.getFocusDomRef();
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.getIdForLabel = function () {

		// point the label to the edit control because on tabbing in its in edit mode
		// only link must get label on it self

		if (this._oDisplayControl && this._oDisplayControl.getMetadata().getName() == "sap.ui.commons.Link"){
			return this._oDisplayControl.getId();
		} else if (this._oEditControl) {
			return this._oEditControl.getId();
		} else{
			return this.getId();
		}

	};

	sap.ui.commons.InPlaceEdit.prototype.onThemeChanged = function (oEvent) {

		var that = this;
		iconForUndoButton(that);
		iconForEditButton(that);

		this._iHeight = undefined;
		if (this.getDomRef() && !this._bEditMode){
			// if already rendered and in display mode - rerender to calculate height new
			this.rerender();
		}

	};


	// Private variables

	/**
	 * Delegate object for listening to the child elements' events.
	 * WARNING: this is set to the InPlaceEdit-instance. This is done by setting it as the second 
	 *          parameter of the addDelegate call. (See updateControls())
	 * @private
	 */
	var contentDelegate = {
		onAfterRendering : function() {
			this.onAfterRendering(); // WARNING: this means the InPlaceEdit instance
		}
	};


	// Private functions

	function updateControls(oInPlaceEdit){

		var oContent = oInPlaceEdit.getContent();
		if (!oContent) {
			return;
		}

		var oTooltip = oContent.getTooltip();

		switch (oContent.getMetadata().getName()) { // do not check with instanceof because then all classes must be loaded
		case "sap.ui.commons.TextField":
		case "sap.ui.commons.ComboBox":
		case "sap.ui.commons.DropdownBox":
			// use TextView for display
			if (!oInPlaceEdit._oTextView) {
				oInPlaceEdit._oTextView = new sap.ui.commons.TextView(oInPlaceEdit.getId() + "--TV",{
					wrapping: false});
				oInPlaceEdit._oTextView.setParent(oInPlaceEdit);
				// Make sure the delegate is not there twice
				oInPlaceEdit._oTextView.removeDelegate(contentDelegate);
				oInPlaceEdit._oTextView.addDelegate(contentDelegate, oInPlaceEdit);
				oInPlaceEdit._oTextView.getTooltip = function(){
					return this.getParent().getTooltip();
				}
			}
			oInPlaceEdit._oTextView.setText(oContent.getValue());
			oInPlaceEdit._oTextView.setEnabled(oContent.getEnabled());
			oInPlaceEdit._oTextView.setTextDirection(oContent.getTextDirection());
			oInPlaceEdit._oTextView.setVisible(oContent.getVisible());
			oInPlaceEdit._oTextView.setWidth("100%"); // width is set on the outer DIV
			oInPlaceEdit._oTextView.setTextAlign(oContent.getTextAlign());
			oInPlaceEdit._oTextView.setDesign(oInPlaceEdit.getDesign());
			oInPlaceEdit._oTextView.setHelpId(oContent.getHelpId());
			oInPlaceEdit._oTextView.setAccessibleRole(oContent.getAccessibleRole());

			if (oInPlaceEdit._oTextView._oTooltip && oInPlaceEdit._oTextView._oTooltip != oTooltip) {
				oInPlaceEdit._oTextView.removeDelegate(oInPlaceEdit._oTextView._oTooltip);
				oInPlaceEdit._oTextView._oTooltip = undefined;
			}
			if (oTooltip instanceof sap.ui.core.TooltipBase){
				if (!oInPlaceEdit._oTextView._oTooltip || oInPlaceEdit._oTextView._oTooltip != oTooltip) {
					oInPlaceEdit._oTextView.addDelegate(oTooltip);
					oInPlaceEdit._oTextView._oTooltip = oTooltip;
				}
			}

			oInPlaceEdit._oDisplayControl = oInPlaceEdit._oTextView;

			// use oContent for edit
			oInPlaceEdit._oEditControl = oContent;
			oInPlaceEdit._bUseEditButton = false;
			break;

		case "sap.ui.commons.Link":
			// use Link for display
			oInPlaceEdit._oDisplayControl = oContent;

			// Make sure the delegate is not there twice
			oInPlaceEdit._oDisplayControl.removeDelegate(contentDelegate);
			oInPlaceEdit._oDisplayControl.addDelegate(contentDelegate, oInPlaceEdit);

			// use TextField for edit
			if (oInPlaceEdit._oTextField) {
				oInPlaceEdit._oTextField.setValue(oContent.getText());
				oInPlaceEdit._oTextField.setWidth("100%");

				oInPlaceEdit._oEditControl = oInPlaceEdit._oTextField;

				if (oInPlaceEdit._oTextField._oTooltip && oInPlaceEdit._oTextField._oTooltip != oTooltip) {
					oInPlaceEdit._oTextField.removeDelegate(oInPlaceEdit._oTextField._oTooltip);
					oInPlaceEdit._oTextField._oTooltip = undefined;
				}
				if (oTooltip instanceof sap.ui.core.TooltipBase){
					if (!oInPlaceEdit._oTextField._oTooltip || oInPlaceEdit._oTextField._oTooltip != oTooltip) {
						oInPlaceEdit._oTextField.addDelegate(oTooltip);
						oInPlaceEdit._oTextField._oTooltip = oTooltip;
					}
				}
			}

			// for link an edit button is needed to allow the link click
			createEditButton(oInPlaceEdit);
			oInPlaceEdit._bUseEditButton = true;
			break;

		default:
			throw new Error("Control not supported for InPlaceEdit");
		break;
		}

	};

	function switchToEditMode(oInPlaceEdit){

		if (!oInPlaceEdit._bEditMode && oInPlaceEdit.getEditable()) {
			// switch to edit mode
			if (!oInPlaceEdit._oEditControl && oInPlaceEdit.getContent().getMetadata().getName() == "sap.ui.commons.Link") {
				// for Link - create TextField (Only on first edit mode to do not have it if not needed)
				var sValueState = oInPlaceEdit.getValueState(); // initially get ValueState from property, after this its stored on the TextField
				oInPlaceEdit._oTextField = new sap.ui.commons.TextField(oInPlaceEdit.getId() + "--input",{
					valueState: sValueState});
				oInPlaceEdit._oTextField.setParent(oInPlaceEdit);
				oInPlaceEdit._oTextField.attachEvent('change', handleTextFieldChange, oInPlaceEdit); // attach event this way to have the right this-reference in handler
				oInPlaceEdit._oTextField.attachEvent('liveChange', handleContentLiveChange, oInPlaceEdit); // attach event this way to have the right this-reference in handler
				oInPlaceEdit._oTextField._propagateEsc = true;
				oInPlaceEdit._oTextField.getTooltip = function(){
					return this.getParent().getTooltip();
				}
			}

			if (!oInPlaceEdit._sOldTextAvailable && oInPlaceEdit.getUndoEnabled()) {
				// only remember original text, not by toggling between edit and display
				oInPlaceEdit._sOldText = getContentText(oInPlaceEdit);
				oInPlaceEdit._sOldTextAvailable = true;
			}
			oInPlaceEdit._bEditMode = true;
			oInPlaceEdit.rerender();
			oInPlaceEdit._oEditControl.focus();
		}

	};

	function switchToDisplayMode(oInPlaceEdit){

		if (oInPlaceEdit._bEditMode && oInPlaceEdit.getEditable()) {
			// switch to edit mode
			oInPlaceEdit._bEditMode = false;
			if (oInPlaceEdit._sOldText == getContentText(oInPlaceEdit)) {
				// nothing changed
				oInPlaceEdit._sOldText = undefined;
				oInPlaceEdit._sOldTextAvailable = false;
			}
			oInPlaceEdit.rerender();
		}

	};

	function getContentText(oInPlaceEdit){

		var oContent = oInPlaceEdit.getContent();
		if (!oContent) {
			return;
		}

		if (oContent.getValue) {
			return oContent.getValue();
		} else if(oContent.getText){
			return oContent.getText();
		}

	};

	function createUndoButton(oInPlaceEdit){

		if (!oInPlaceEdit._oUndoButton && oInPlaceEdit.getUndoEnabled()) {
			oInPlaceEdit._oUndoButton = new sap.ui.commons.Button(oInPlaceEdit.getId()+"--X",{
				lite: true
			}).setParent(oInPlaceEdit);
			iconForUndoButton(oInPlaceEdit);
			oInPlaceEdit._oUndoButton.attachEvent('press', handleUndoButtonPress, oInPlaceEdit); // attach event this way to have the right this-reference in handler
		}

		if (oInPlaceEdit._oUndoButton) {
			// disable undoButton if field is disabled or readonly
			oInPlaceEdit._oUndoButton.setEnabled(oInPlaceEdit.getEditable());
		}

	};

	function iconForUndoButton(oInPlaceEdit){

		if (oInPlaceEdit._oUndoButton){
			var sIcon = sap.ui.core.theming.Parameters.get('sapUiIpeUndoImageURL');
			var sIconHovered = sap.ui.core.theming.Parameters.get('sapUiIpeUndoImageDownURL');
			if (sIcon) {
				sIcon = jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIcon;
			}else{
				sIcon = "sap-icon://decline";
			}
			if (sIconHovered) {
				sIconHovered = jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIconHovered;
			}
			oInPlaceEdit._oUndoButton.setIcon(sIcon);
			oInPlaceEdit._oUndoButton.setIconHovered(sIconHovered);
		}

	};

	function handleUndoButtonPress(oEvent){

		var that = this;
		undoTextChange(that);

		if (this._bEditMode) {
			this._oEditControl.focus();
			this.$().removeClass("sapUiIpeUndo");
		}

	};

	function undoTextChange(oInPlaceEdit){

		// change text back to old value (only if value changed -> undo button visible)
		if (oInPlaceEdit.getUndoEnabled() && oInPlaceEdit._sOldTextAvailable) {
			var oContent = oInPlaceEdit.getContent();
			if (!oContent) {
				return;
			}

			if (oContent.setValue) {
				oContent.setValue(oInPlaceEdit._sOldText);
			} else if(oContent.setText){
				oContent.setText(oInPlaceEdit._sOldText);
			}
			if (oInPlaceEdit._bEditMode) {
				// to be sure that text is updated in edit mode (e.g. Link case) - update edit control
				oInPlaceEdit._oEditControl.setValue(oInPlaceEdit._sOldText);
			}

			if (oContent.fireChange) {
				// fire change event
				oContent.fireChange({newValue:oInPlaceEdit._sOldText});
			}else{
				// fire InPlaceEdit change event
				oInPlaceEdit.fireChange({newValue:oInPlaceEdit._sOldText})
			}

			if (!oInPlaceEdit._bEditMode) {
				oInPlaceEdit._sOldText = undefined;
				oInPlaceEdit._sOldTextAvailable = false;
			}
		}

	};

	function createEditButton(oInPlaceEdit){

		if (!oInPlaceEdit._oEditButton) {
			oInPlaceEdit._oEditButton = new sap.ui.commons.Button(oInPlaceEdit.getId()+"--Edit",{
				lite: true
			}).setParent(oInPlaceEdit);
			oInPlaceEdit._oEditButton.addStyleClass("sapUiIpeEBtn");
			iconForEditButton(oInPlaceEdit);
			oInPlaceEdit._oEditButton.attachEvent('press', handleEditButtonPress, oInPlaceEdit); // attach event this way to have the right this-reference in handler
		}

	};

	function iconForEditButton(oInPlaceEdit){

		if (oInPlaceEdit._oEditButton){
			var sIcon = sap.ui.core.theming.Parameters.get('sapUiIpeEditImageURL');
			var sIconHovered = sap.ui.core.theming.Parameters.get('sapUiIpeEditImageDownURL');
			if (sIcon) {
				sIcon = jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIcon;
			}else{
				sIcon = "sap-icon://edit";
			}
			if (sIconHovered) {
				sIconHovered = jQuery.sap.getModulePath("sap.ui.commons", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + sIconHovered;
			}
			oInPlaceEdit._oEditButton.setIcon(sIcon);
			oInPlaceEdit._oEditButton.setIconHovered(sIconHovered);
		}

	};

	function handleEditButtonPress(oEvent){

		var that = this;
		switchToEditMode(that);
		this.$().addClass("sapUiIpeFocus");

	};

	function handleTextFieldChange(oEvent){

		var oContent = this.getContent();

		if (oContent.setText) {
			var sNewValue = oEvent.getParameter("newValue");
			oContent.setText(sNewValue);
			this.fireChange({newValue:sNewValue});
		}

	};

	function handleContentChange(oEvent){

		if (this._sOldText != oEvent.getParameter("newValue") && this.getUndoEnabled()){
			this.$().addClass("sapUiIpeUndo");
		}else{
			this.$().removeClass("sapUiIpeUndo");
		}
		this.fireChange(oEvent.getParameters());

	};

	function handleContentLiveChange(oEvent){

		if (this._sOldText != oEvent.getParameter("liveValue") && this.getUndoEnabled()){
			this.$().addClass("sapUiIpeUndo");
		}else{
			this.$().removeClass("sapUiIpeUndo");
		}

		this.fireLiveChange({liveValue:oEvent.getParameter("liveValue")});

	};

	function handleContentInvalidate(){

		if (!this._bEditMode) {
			//in edit mode TextField change must only checked by switch do display mode
			this.invalidate();
		}else{
			//if valueState changes -> class must be adopted on outer DIV but do not rerender
			switch (this.getValueState()) {
			case (sap.ui.core.ValueState.Error) :
				if (!this.$().hasClass('sapUiIpeErr')) {
					this.$().addClass('sapUiIpeErr');
					this.$().removeClass('sapUiIpeWarn');
					this.$().removeClass('sapUiIpeSucc');
				}
			break;
			case (sap.ui.core.ValueState.Success) :
				if (!this.$().hasClass('sapUiIpeSucc')) {
					this.$().addClass('sapUiIpeSucc');
					this.$().removeClass('sapUiIpeErr');
					this.$().removeClass('sapUiIpeWarn');
				}
			break;
			case (sap.ui.core.ValueState.Warning) :
				if (!this.$().hasClass('sapUiIpeWarn')) {
					this.$().addClass('sapUiIpeWarn');
					this.$().removeClass('sapUiIpeErr');
					this.$().removeClass('sapUiIpeSucc');
				}
			break;
			default:
				this.$().removeClass('sapUiIpeWarn');
				this.$().removeClass('sapUiIpeErr');
				this.$().removeClass('sapUiIpeSucc');
			break;
			}
		}

	};

}());
}; // end of sap/ui/commons/InPlaceEdit.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MenuBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.MenuBar.
jQuery.sap.declare("sap.ui.commons.MenuBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new MenuBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getDesign design} : sap.ui.commons.MenuBarDesign (default: sap.ui.commons.MenuBarDesign.Standard)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ui.unified.MenuItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents a user interface area which is the entry point for menus with their menu items. MenuBar is useful for applications which shall offer a
 * set of actions that shall be provided in a structured way. The MenuBar contains the menu titles from where users navigate to the single items. The control supports
 * for example long menu item texts, automated scrolling for menu items when the browser space is not large enough to display all items, defining images for single
 * or all items in a menu, automated layouting of items with or w/o image, and active/non-active items.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.MenuBar
 */
sap.ui.core.Control.extend("sap.ui.commons.MenuBar", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"design" : {type : "sap.ui.commons.MenuBarDesign", group : "Appearance", defaultValue : sap.ui.commons.MenuBarDesign.Standard}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.unified.MenuItem", multiple : true, singularName : "item"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.MenuBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.MenuBar.extend
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * When the MenuBar is not enabled, automatically all single menu items are also displayed as 'disabled'.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.MenuBar#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.MenuBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuBar#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.MenuBar#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.MenuBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuBar#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Specifies the width of the MenuBar
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.MenuBar#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.MenuBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuBar#setWidth
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * Available design options are Header and Standard. Note that design settings are theme-dependent.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.ui.commons.MenuBarDesign} the value of property <code>design</code>
 * @public
 * @name sap.ui.commons.MenuBar#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.ui.commons.MenuBarDesign} oDesign  new value for property <code>design</code>
 * @return {sap.ui.commons.MenuBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuBar#setDesign
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of menu items.
 * 
 * <strong>Note</strong>: this is the default aggregation for MenuBar.
 * @return {sap.ui.unified.MenuItem[]}
 * @public
 * @name sap.ui.commons.MenuBar#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.unified.MenuItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ui.commons.MenuBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuBar#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.unified.MenuItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ui.commons.MenuBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuBar#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.unified.MenuItem} vItem the item to remove or its index or id
 * @return {sap.ui.unified.MenuItem} the removed item or null
 * @public
 * @name sap.ui.commons.MenuBar#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.unified.MenuItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.MenuBar#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.unified.MenuItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.unified.MenuItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.MenuBar#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ui.commons.MenuBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.MenuBar#destroyItems
 * @function
 */


// Start of sap\ui\commons\MenuBar.js
 /*Ensure MenuItemBase is loaded (incl. loading of unified library)*/



sap.ui.commons.MenuItem.extend("sap.ui.commons._DelegatorMenuItem", {
  constructor : function(oAlterEgoItm) {
    sap.ui.commons.MenuItem.apply(this);
    this.oAlterEgoItm = oAlterEgoItm;
    var that = this;
    this.oAlterEgoItm.getSubmenu().getRootMenu = function(){
    	return that.getParent();
    }
  },
  exit : function () {
	this.oAlterEgoItm.getSubmenu().getRootMenu = sap.ui.commons.Menu.prototype.getRootMenu;
    this.oAlterEgoItm = null;
  },
  getText : function() {
    return this.oAlterEgoItm.getText();
  },
  getIcon : function() {
	  return this.oAlterEgoItm.getIcon();
  },
  getEnabled : function() {
	  return this.oAlterEgoItm.getEnabled();
  },
  getVisible : function() {
	  return this.oAlterEgoItm.getVisible();
  },
  getSubmenu : function() {
	  return this.oAlterEgoItm.getSubmenu();
  }
});

(function() {


/**
 * Initialize this control.
 * @private
 */
sap.ui.commons.MenuBar.prototype.init = function() {
	this.oOvrFlwMnu = null;
	this.sCurrentFocusedItemRefId = null;
};


/**
 * Does all the cleanup when the control is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.MenuBar.prototype.exit = function (){
	if(this.oOvrFlwMnu) {
		this.oOvrFlwMnu.destroy();
	}
	this.oOvrFlwMnu = null;
	// Cleanup resize event registration
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};


/**
 * Called before rendering starts by the renderer
 * (This is not the onBeforeRendering method which would be not called for the first rendering)
 * @private
 */
sap.ui.commons.MenuBar.prototype.doBeforeRendering = function() {
	var aItems = this.getItems();
	for(var i=0; i<aItems.length; i++){
		var oMenu = aItems[i].getSubmenu();
		if(oMenu) {
			oMenu.setRootMenuTopStyle(this.getDesign() == sap.ui.commons.MenuBarDesign.Header);
		}
	}

	if(this.oOvrFlwMnu) {
		this.oOvrFlwMnu.setRootMenuTopStyle(this.getDesign() == sap.ui.commons.MenuBarDesign.Header);
	}

	// Cleanup resize event registration before re-rendering
	if(this.sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this.sResizeListenerId);
		this.sResizeListenerId = null;
	}
};


/**
 * Called when the rendering is complete
 * @private
 */
sap.ui.commons.MenuBar.prototype.onAfterRendering = function() {
	//Listen to resizing
	this.sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(), jQuery.proxy(this.onresize, this));

	//Calculate the overflow
	this.onresize();
};


/**
 * Called when the control is resized
 * @private
 */
sap.ui.commons.MenuBar.prototype.onresize = function(oEvent) {
	updateAfterResize(this);
};


/**
 * Behavior implementation which is executed when the focus comes into the control or on one of its children.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onfocusin = function(oEvent){
	var sId = this.getId();
	var jTarget = jQuery(oEvent.target);
	var jTargetId = jTarget.attr("id");
	if(!jTargetId || jTargetId == sId || jTargetId == sId + "-area"){
		var jItems = this.$("area").children();
		this.sCurrentFocusedItemRefId = jItems.length == 0 ? null : jQuery(jItems.get(0)).attr("id");
	} else {
		// Make sure the parent menu item get the focus when a menu is closed via
		// keyboard in order to keep keyboard navigation working
		this.sCurrentFocusedItemRefId = jTargetId;
	}

	var oFocusElement = jQuery.sap.byId(this.sCurrentFocusedItemRefId).get(0);
	if(oFocusElement) {
		oFocusElement.focus();
	}
	
	this.$().attr("tabindex", "-1");
};


/**
 * Behavior implementation which is executed when the focus leaves the control or one of its children.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onfocusout = function(oEvent){
	//Add the control to tab chain again to make tab in working (see onfocusin)
	this.$().attr("tabindex", "0");
};


/**
 * Function is called when mouse key is clicked down.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onmousedown = function(oEvent) {
	var oMenuItem = _getMenuItem(this, oEvent);
	if(oMenuItem === "ovrflw"){
		this._bOvrFlwMnuSkipOpen = this.oOvrFlwMnu && this.oOvrFlwMnu.bOpen;
	}else if(oMenuItem){
		var oMenu = oMenuItem.getSubmenu();
		oMenuItem._bSkipOpen = oMenu && oMenu.bOpen;
	}
};


/**
 * Function is called when mouse leaves the control.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuButton.prototype.onmouseout = function(oEvent) {
	var oMenuItem = _getMenuItem(this, oEvent);
	if(oMenuItem === "ovrflw"){
		var jRef = get$Item(this, oEvent);
		if(this._bOvrFlwMnuSkipOpen && jQuery.sap.checkMouseEnterOrLeave(oEvent, jRef[0])){
			this._bOvrFlwMnuSkipOpen = false;
		}
	}else if(oMenuItem){
		var jRef = get$Item(this, oEvent);
		if(oMenuItem._bSkipOpen && jQuery.sap.checkMouseEnterOrLeave(oEvent, jRef[0])){
			oMenuItem._bSkipOpen = false;
		}
	}
};


/**
 * Behavior implementation which is executed when the user clicks.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onclick = function(oEvent) {
	openItemMenu(this, oEvent, false);
};


/**
 * Behavior implementation which is executed when the user presses the space or enter key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onsapselect = function(oEvent){
	openItemMenu(this, oEvent, true);
};


/**
 * Function is called when down key is pressed without a modifier key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onsapdown = function(oEvent){
	openItemMenu(this, oEvent, true);
};


/**
 * Function is called when down key is pressed with a modifier key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onsapdownmodifiers = function(oEvent){
	if(oEvent.altKey) {
		openItemMenu(this, oEvent, true);
	}
};


/**
 * Behavior implementation which is executed when the user presses the arrow left (RTL: arrow right) key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onsapprevious = function(oEvent){
	if(oEvent.keyCode != jQuery.sap.KeyCodes.ARROW_UP) {//Ignore arrow up
		focusStep(this, oEvent, "prev");
	}
};


/**
 * Behavior implementation which is executed when the user presses the arrow right (RTL: arrow left) key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onsapnext = function(oEvent){
	if(oEvent.keyCode != jQuery.sap.KeyCodes.ARROW_DOWN) {//Ignore arrow down
		focusStep(this, oEvent, "next");
	}
};


/**
 * Behavior implementation which is executed when the user presses the home/pos1 key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onsaphome = function(oEvent){
	focusStep(this, oEvent, "first");
};


/**
 * Behavior implementation which is executed when the user presses the end key.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.MenuBar.prototype.onsapend = function(oEvent){
	focusStep(this, oEvent, "last");
};


//********* Private *********


//Opens the corresponding menu of the selected menu item
var openItemMenu = function(oThis, oEvent, bWithKeyboard) {
	oEvent.preventDefault();
	oEvent.stopPropagation();
	
	if(oThis.getEnabled()){
		var oMenuItem = _getMenuItem(oThis, oEvent);
		if(oMenuItem === "ovrflw"){
			var jRef = get$Item(oThis, oEvent);
			if(oThis.oOvrFlwMnu && !oThis._bOvrFlwMnuSkipOpen){
				var eDock = sap.ui.core.Popup.Dock;
				oThis.oOvrFlwMnu.open(bWithKeyboard, jRef.get(0), eDock.EndTop, eDock.EndBottom, jRef.get(0));
			}
		}else if(oMenuItem){
			if(oMenuItem.getEnabled()) {
				var jRef = get$Item(oThis, oEvent);
				var oMenu = oMenuItem.getSubmenu();
				if(oMenu && !oMenuItem._bSkipOpen){
					var eDock = sap.ui.core.Popup.Dock;
					oMenu.open(bWithKeyboard, jRef.get(0), eDock.BeginTop, eDock.BeginBottom, jRef.get(0));
				}
			}
		}
	}
	
	//Resets all skip open flags
	oThis._bOvrFlwMnuSkipOpen = false;
	var aItems = oThis.getItems();
	for(var i=0; i<aItems.length; i++){
		aItems[i]._bSkipOpen = false;
	}
};


//Returns the jQuery Object of the item which was the target of the event (if exists)
var get$Item = function(oThis, oEvent){
	var jRef = jQuery(oEvent.target);
	if(!jRef.attr("itemidx")) {
		jRef = jRef.parent();
	}
	return jRef.attr("itemidx") ? jRef : null;
};


//Returns the item which was the target of the event (if exists) or "ovrflow" for the overflow
var _getMenuItem = function(oThis, oEvent) {
	var jRef = get$Item(oThis, oEvent);
	if(jRef){
		var sItemIdx = jRef.attr("itemidx");
		if(sItemIdx){
			if(sItemIdx == "ovrflw"){
				return "ovrflw";
			}else{
				var iIdx = parseInt(sItemIdx, 10);
				var oMenuItem = oThis.getItems()[iIdx];
				return oMenuItem;
			}
		}
	}
	return null;
};


//Compute actual number of items currently hidden due to overflow
var getVisibleItemCount = function(oThis){
	var iVisibleItems = 0;

	var jAreaRef = oThis.$("area");
	var jItems = jAreaRef.children();

	var bRtl = sap.ui.getCore().getConfiguration().getRTL();
	var lastOffsetLeft = (bRtl ? 100000 : 0);

	jItems.each(function(iIdx) {
		if(iIdx == 0) {
			return true;
		}

		var currentOffsetLeft = this.offsetLeft;
		var bLineBreak = (bRtl ? (currentOffsetLeft >= lastOffsetLeft) : (currentOffsetLeft <= lastOffsetLeft));

		if(bLineBreak){
			iVisibleItems = iIdx;
			return false;
		}else if(jQuery(this).attr("id") == oThis.getId()+"-ovrflw"){
			// This is the overflow button, there was no line break
			iVisibleItems = iIdx;
			return false;
		}else{
			// Regular item, to the right of the last one, so just proceed
			lastOffsetLeft = currentOffsetLeft;
			return true;
		}
	});

	return iVisibleItems;
};


//Handle the resize of the menubar
var updateAfterResize = function(oThis){
	var iVisibleItems = getVisibleItemCount(oThis);
	var _iVisibleItems = iVisibleItems;

	var jAreaRef = oThis.$("area");
	var jItems = jAreaRef.children();
	var jOvrFlwRef = oThis.$("ovrflw");

	var bUpdateFocus = false;

	if(iVisibleItems < jItems.length-1){
		jOvrFlwRef.attr("style", "display:block;");
		if(!oThis.oOvrFlwMnu){
			oThis.oOvrFlwMnu = new sap.ui.commons.Menu(oThis.getId()+"-ovrflwmnu");
			oThis.oOvrFlwMnu.bUseTopStyle = oThis.getDesign() == sap.ui.commons.MenuBarDesign.Header;
			oThis.oOvrFlwMnu.attachItemSelect(function(oEvent){
				var oItem = oEvent.getParameter("item");
				if(!(oItem instanceof sap.ui.commons._DelegatorMenuItem)){
					var oItemRootMenu = sap.ui.commons.Menu.prototype.getRootMenu.apply(oItem.getParent());
					oItemRootMenu.fireItemSelect({item: oItem});
				}
			});
		}
		oThis.oOvrFlwMnu.destroyItems();
		var aItems = oThis.getItems();
		for(var i=0; i<aItems.length; i++){
			var oItem = aItems[i];
			if(iVisibleItems != 0){
				if(oItem.getVisible()) {
					iVisibleItems--;
				}
				if(iVisibleItems == 0) {
					oThis.sLastVisibleItemId = oItem.getId();
				}
			}else{
				oThis.oOvrFlwMnu.addItem(new sap.ui.commons._DelegatorMenuItem(oItem));
				if(oItem.getId() == oThis.sCurrentFocusedItemRefId){
					bUpdateFocus = true;
				}
			}
		}
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			jItems.attr("aria-setsize", _iVisibleItems+1);
			jOvrFlwRef.attr("aria-posinset", _iVisibleItems+1);
		}
	}else{
		jOvrFlwRef.attr("style", "display:none;");
		if(oThis.oOvrFlwMnu) {
			oThis.oOvrFlwMnu.destroyItems();
		}
		oThis.sLastVisibleItemId = null;
		if(sap.ui.getCore().getConfiguration().getAccessibility()){
			jItems.attr("aria-setsize", _iVisibleItems);
			jOvrFlwRef.attr("aria-posinset", 0);
		}
	}

	jAreaRef.scrollTop(0);

	if(bUpdateFocus){
		oThis.sCurrentFocusedItemRefId = oThis.sLastVisibleItemId;
		jQuery.sap.byId(oThis.sLastVisibleItemId).get(0).focus();
	}
};


//Focus the next (depending on the given direction) step
var focusStep = function(oThis, oEvent, sDir){
	oEvent.stopPropagation();
	oEvent.preventDefault();

	if(!oThis.sCurrentFocusedItemRefId) {
		return;
	}

	var sFollowingFocusItemId = null;
	if(oThis.sLastVisibleItemId && ((oThis.sCurrentFocusedItemRefId == oThis.sLastVisibleItemId && sDir == "next") || sDir == "last")){
		sFollowingFocusItemId = oThis.getId()+"-ovrflw";
	}else if(oThis.sLastVisibleItemId && oThis.sCurrentFocusedItemRefId == oThis.getId()+"-ovrflw" && sDir == "prev"){
		sFollowingFocusItemId = oThis.sLastVisibleItemId;
	}else{
		var sFoo = sDir+"All";
		var bIsJumpToEnd = false;
		if(sDir == "first"){
			sFoo = "prevAll";
			bIsJumpToEnd = true;
		}else if(sDir == "last"){
			sFoo = "nextAll";
			bIsJumpToEnd = true;
		}

		var jCurrentFocusItem = jQuery.sap.byId(oThis.sCurrentFocusedItemRefId);
		var jFollowingItems = jCurrentFocusItem[sFoo](":visible");

		sFollowingFocusItemId = jQuery(jFollowingItems.get(bIsJumpToEnd ? jFollowingItems.length-1 : 0)).attr("id");
	}
	if(sFollowingFocusItemId){
		oThis.sCurrentFocusedItemRefId = sFollowingFocusItemId;
		jQuery.sap.byId(sFollowingFocusItemId).get(0).focus();
	}
};


}());

}; // end of sap/ui/commons/MenuBar.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.PasswordField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.PasswordField.
jQuery.sap.declare("sap.ui.commons.PasswordField");




/**
 * Constructor for a new PasswordField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.TextField#constructor sap.ui.commons.TextField}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A text field with masked characters which borrows its properties and methods from TextField.
 * @extends sap.ui.commons.TextField
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.PasswordField
 */
sap.ui.commons.TextField.extend("sap.ui.commons.PasswordField", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons"
}});


/**
 * Creates a new subclass of class sap.ui.commons.PasswordField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.PasswordField.extend
 * @function
 */


// Start of sap\ui\commons\PasswordField.js
sap.ui.commons.PasswordField.prototype.onfocusin = function(oEvent) {

	sap.ui.commons.TextField.prototype.onfocusin.apply(this, arguments);

	if (!sap.ui.Device.support.input.placeholder && this.getPlaceholder()) {
		// if browser not supports placeholder on input tag, set the password type if focused
		jQuery(this.getInputDomRef()).attr("type", "password");
	}

};

sap.ui.commons.PasswordField.prototype.onsapfocusleave = function(oEvent) {

	if (!sap.ui.Device.support.input.placeholder && this.getPlaceholder()) {
		// if browser not supports placeholder on input tag, remove the password type if placeholder is there and not focused
		var $Input = jQuery(this.getInputDomRef());
		if (!$Input.val()) {
			$Input.removeAttr("type");
		}
	}

	sap.ui.commons.TextField.prototype.onsapfocusleave.apply(this, arguments);

};
}; // end of sap/ui/commons/PasswordField.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RangeSlider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.RangeSlider.
jQuery.sap.declare("sap.ui.commons.RangeSlider");




/**
 * Constructor for a new RangeSlider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue2 value2} : float (default: 80)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.Slider#constructor sap.ui.commons.Slider}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The interactive control is displayed either as a horizontal or a vertical line with two pointers and units of measurement.
 * Users can move the pointers along the line to change a range with graphical support.
 * @extends sap.ui.commons.Slider
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.8.0
 * @name sap.ui.commons.RangeSlider
 */
sap.ui.commons.Slider.extend("sap.ui.commons.RangeSlider", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"value2" : {type : "float", group : "Appearance", defaultValue : 80}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.RangeSlider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.RangeSlider.extend
 * @function
 */


/**
 * Getter for property <code>value2</code>.
 * Current second value of the slider. (Position of the second grip.)
 *
 * Default value is <code>80</code>
 *
 * @return {float} the value of property <code>value2</code>
 * @public
 * @name sap.ui.commons.RangeSlider#getValue2
 * @function
 */

/**
 * Setter for property <code>value2</code>.
 *
 * Default value is <code>80</code> 
 *
 * @param {float} fValue2  new value for property <code>value2</code>
 * @return {sap.ui.commons.RangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.RangeSlider#setValue2
 * @function
 */


// Start of sap\ui\commons\RangeSlider.js
///**
// * This file defines the control behavior.
// */
sap.ui.commons.RangeSlider.prototype.onAfterRendering = function() {
	
	this.oGrip2 = this.getDomRef("grip2");
	// standard behavior of Slider
	sap.ui.commons.Slider.prototype.onAfterRendering.apply(this);

	var fNewValueLeft = this.getValue();
	var fNewValueRight = this.getValue2();

	if (fNewValueLeft >= fNewValueRight) {
		fNewValueLeft = fNewValueRight;
	} else if (fNewValueLeft <= this.getMin()) {
		fNewValueLeft = this.getMin();
	}
	if (fNewValueRight >= this.getMax()) {
		fNewValueRight = this.getMax();
	} else if (fNewValueRight <= fNewValueLeft) {
		fNewValueRight = fNewValueLeft;
	}

	// Calculate grip position
	var iNewPosLeft = (fNewValueLeft - this.getMin())
			/ (this.getMax() - this.getMin()) * this.getBarWidth();
	var iNewPosRight = (fNewValueRight - this.getMin())
			/ (this.getMax() - this.getMin()) * this.getBarWidth();
	
	if (this.bRtl || this.getVertical()) {
		iNewPosLeft = this.getBarWidth()-iNewPosLeft;
		iNewPosRight = this.getBarWidth()-iNewPosRight;
	}
	
	// Move grip to hit the point in the middle
	this.changeGrip(fNewValueLeft, iNewPosLeft, this.oGrip);
	this.changeGrip(fNewValueRight, iNewPosRight, this.oGrip2);

};

/**
 * Function is called when window is resized
 * 
 * @param {jQuery.Event}
 *            oEvent
 * @private
 */
sap.ui.commons.RangeSlider.prototype.onresize = function(oEvent) {

	// If width of control changed -> grip position must be newly calculated

	var fNewValue = this.getValue2();

	var iNewPos = (fNewValue - this.getMin()) / (this.getMax() - this.getMin())
			* this.getBarWidth();
	
	if (this.bRtl || this.getVertical()) {
		iNewPos = this.getBarWidth()-iNewPos;
	}

	this.changeGrip(fNewValue, iNewPos, this.oGrip2);

	sap.ui.commons.Slider.prototype.onresize.apply(this, arguments);

};

/**
 * Function is called when a grip gets focussed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RangeSlider.prototype.onfocusin = function(oEvent) {
	this.oMovingGrip = oEvent.target;
};

/**
 * Function is called when Home key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RangeSlider.prototype.onsaphome = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){
		var fNewValue = 0;
		var iNewPos = 0;

		if (this.oMovingGrip == this.oGrip) {
			fNewValue = this.getMin();
			if (this.getVertical() || (this.bRtl && !this.getVertical())) {
				iNewPos = this.getBarWidth();
			}
		} else if (this.oMovingGrip == this.oGrip2) {
			fNewValue = this.getValue();
			iNewPos = this.getOffsetLeft(this.oGrip) + this.iShiftGrip;
		}

		this.changeGrip(fNewValue, iNewPos, this.oMovingGrip);
		this.handleFireChange();
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when End key pressed
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.RangeSlider.prototype.onsapend = function(oEvent) {

	if (this.getEditable() && this.getEnabled()){
		var fNewValue = 0;
		var iNewPos = 0;

		if (this.oMovingGrip == this.oGrip) {
			fNewValue = this.getValue2();
			iNewPos = this.getOffsetLeft(this.oGrip2) + this.iShiftGrip;
		} else if (this.oMovingGrip == this.oGrip2) {
			fNewValue = this.getMax();
			if (this.getVertical() || (this.bRtl && !this.getVertical())) {
				iNewPos = 0;
			}else{
				iNewPos = this.getBarWidth();
			}
		}

		this.changeGrip(fNewValue, iNewPos, this.oMovingGrip);
		this.handleFireChange();
	}

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Function is called when Slider is moved
 * 
 * @param Grip
 *            oGrip, float fNewValue
 * @private
 */
sap.ui.commons.RangeSlider.prototype.fireLiveChangeForGrip = function(oGrip, fNewValue, fOldValue) {

	if (oGrip == this.oGrip) {
		if (fOldValue != fNewValue) {
			// fire event only if value changed
			this.fireLiveChange({
				value : fNewValue,
				value2 : this.getValue2()
			});
		}
	} else if (oGrip == this.oGrip2) {
		if (fOldValue != fNewValue) {
			// fire event only if value changed
			this.fireLiveChange({
				value2 : fNewValue,
				value : this.getValue()
			});
		}
	}
};

/**
 * Function to set width and position of highlight bar
 * 
 * @param int
 *            iNewPos
 * @private
 */
sap.ui.commons.RangeSlider.prototype.adjustHighlightBar = function(iNewPos, oGrip) {
	if (iNewPos < 0 || isNaN(iNewPos))
		iNewPos = 0;
	var iPosLeft = this.getOffsetLeft(this.oGrip) + this.iShiftGrip;
	var iPosRight = this.getOffsetLeft(this.oGrip2) + this.iShiftGrip;
	var iWidth;
	if (this.getVertical()) {
		this.setLeft(iPosRight, this.oHiLi);
		this.setRight(this.getBarWidth() - iPosLeft, this.oHiLi);
		iWidth = Math.round(iPosLeft - iPosRight);
	} else {
		if (this.bRtl) {
			this.setLeft(iPosRight, this.oHiLi);
			this.setRight(this.getBarWidth() - iPosLeft, this.oHiLi);
		} else {
			this.setLeft(iPosLeft, this.oHiLi);
			this.setRight(this.getBarWidth() - iPosRight, this.oHiLi);
		}
		iWidth = Math.abs(Math.round(iPosRight - iPosLeft));
	}
	if (iWidth < 0)
		iWidth = 0;
	this.setObjectWidth(iWidth + 'px', this.oHiLi);

};

/**
 * Set right/bottom for an object. Translates the value for vertical sldiers and
 * RTL
 * 
 * @private
 * @param int
 *            iNewPos New left attribute for specified object
 * @param {jQuery}
 *            oObject
 * @param oObject
 */
sap.ui.commons.RangeSlider.prototype.setRight = function(iNewPos, oObject) {
	if (oObject == undefined)
		return;
	if (this.getVertical()) {
		oObject.style.bottom = iNewPos + 'px';
	} else {
		oObject.style.right = iNewPos + 'px';
	}
};

/**
 * Function to update value property for grip
 * 
 * @param float
 *            fNewValue
 * @private
 */
sap.ui.commons.RangeSlider.prototype.updateValueProperty = function(fNewValue,
		oGrip) {
	// Do not render complete control again
	if (oGrip == this.oGrip) {
		this.setProperty('value', fNewValue, true);
	} else {
		this.setProperty('value2', fNewValue, true);
	}
};

/*
 * Overwrite of generated function - no new JS-doc. Property setter for the
 * value A new rendering is not necessary, only the grip must be moved.
 * 
 * @param fValue @return {sap.ui.commons.Slider} <code>this</code> to allow
 * method chaining @public
 */
sap.ui.commons.RangeSlider.prototype.setValue = function(fValue) {

	this.setProperty('value', fValue, true); // No re-rendering

	this._oldValue1 = fValue;

	// Check for number -> if NaN -> no change
	if (isNaN(fValue)) {
		return this;
	}

	if (!this.oBar) {
		// Not already rendered -> return and render
		return this;
	}

	var fNewValue = parseFloat(fValue);
	var iNewPos;

	if (fNewValue >= this.getValue2()) {
		fNewValue = this.getValue2();
		iNewPos = this.getOffsetLeft(this.oGrip2) + this.iShiftGrip;
		if(this.bRtl && !this.getVertical()){
			iNewPos = this.getBarWidth() - iNewPos;
		}
	} else if (fNewValue <= this.getMin()) {
		fNewValue = this.getMin();
		if (this.getVertical()) {
			iNewPos = this.getBarWidth();
		} else {
			iNewPos = 0;
		}
	} else {
		iNewPos = (fNewValue - this.getMin()) / (this.getMax() - this.getMin())
				* this.getBarWidth();
	}

	if(this.bRtl && !this.getVertical()){
		iNewPos = this.getBarWidth() - iNewPos;
	}

	this.changeGrip(fNewValue, iNewPos, this.oGrip);
	this._oldValue1 = fNewValue;

	return this;

};

/*
 * Overwrite of generated function - no new JS-doc. Property setter for the
 * value A new rendering is not necessary, only the grip must be moved.
 * 
 * @param fValue @return {sap.ui.commons.Slider} <code>this</code> to allow
 * method chaining @public
 */
sap.ui.commons.RangeSlider.prototype.setValue2 = function(fValue) {

	this.setProperty('value2', fValue, true); // No re-rendering

	this._oldValue2 = fValue;

	// Check for number -> if NaN -> no change
	if (isNaN(fValue)) {
		return this;
	}

	if (!this.oBar) {
		// Not already rendered -> return and render
		return this;
	}

	var fNewValue = parseFloat(fValue);
	var iNewPos;

	if (fNewValue >= this.getMax()) {
		fNewValue = this.getMax();
		if (this.getVertical()) {
			iNewPos = 0;
		} else {
			iNewPos = this.getBarWidth();
		}
	} else if (fNewValue <= this.getValue()) {
		fNewValue = this.getValue();
		iNewPos = this.getOffsetLeft(this.oGrip) + this.iShiftGrip;
		if(this.bRtl && !this.getVertical()){
			iNewPos = this.getBarWidth() - iNewPos;
		}
	} else {
		iNewPos = (fNewValue - this.getMin()) / (this.getMax() - this.getMin())
				* this.getBarWidth();
	}

	if(this.bRtl && !this.getVertical()){
		iNewPos = this.getBarWidth() - iNewPos;
	}

	this.changeGrip(fNewValue, iNewPos, this.oGrip2);
	this._oldValue2 = fNewValue;

	return this;

};

/**
 * Function returns grip for click on left side
 * 
 * @private
 */
sap.ui.commons.RangeSlider.prototype.getLeftGrip = function() {
	return this.oGrip;
};

/**
 * Function returns grip for click on left side
 * 
 * @private
 */
sap.ui.commons.RangeSlider.prototype.getRightGrip = function() {
	return this.oGrip2;
};

/**
 * Get value for specified grip.
 * 
 * @private
 * @param oGrip
 * @return float
 */
sap.ui.commons.RangeSlider.prototype.getValueForGrip = function(oGrip) {
	if (oGrip == this.oGrip) {
		return this.getValue();
	} else {
		return this.getValue2();
	}
};

/**
 * Validate new value
 * 
 * @private
 * @param float
 *            fNewValue, int iNewPos, oGrip, boolean bMin
 * @return oCorrectedData
 */
sap.ui.commons.RangeSlider.prototype.validateNewPosition = function(fNewValue,
		iNewPos, oGrip, bMin) {
	if (!this.bRtl || this.getVertical()) {
		if (oGrip == this.oGrip) {
			if (bMin) {
				if (fNewValue <= this.getMin() || iNewPos <= 0) {
					fNewValue = this.getMin();
					if (this.getVertical()) {
						iNewPos   = this.getBarWidth();
					} else {
						iNewPos   = 0;
					}
				}
			} else {
				if (fNewValue >= this.getValue2()) {
					fNewValue = this.getValue2();
					iNewPos = this.getOffsetLeft(this.oGrip2) + this.iShiftGrip;
				}
			}
		} else {
			if (bMin) {
				if (fNewValue <= this.getValue()) {
					fNewValue = this.getValue();
					iNewPos = this.getOffsetLeft(this.oGrip) + this.iShiftGrip;
				}
			} else {
				if (fNewValue >= this.getMax() || iNewPos >= this.getBarWidth()) {
					fNewValue = this.getMax();
					if (!this.getVertical()) {
						iNewPos   = this.getBarWidth();
					} else {
						iNewPos   = 0;
					}
				}
			}
		}
	} else {
		if (oGrip == this.oGrip) {
			if (bMin) {
				if (fNewValue <= this.getMin() || iNewPos >= this.getBarWidth()) {
					fNewValue = this.getMin();
					iNewPos = this.getBarWidth();
				}
			} else {
				if (fNewValue >= this.getValue2()) {
					fNewValue = this.getValue2();
					iNewPos = this.getOffsetLeft(this.oGrip2);
				}
			}
		} else {
			if (bMin) {
				if (fNewValue <= this.getValue()) {
					fNewValue = this.getValue();
					iNewPos = this.getOffsetLeft(this.oGrip);
				}
			} else {
				if (fNewValue >= this.getMax() || iNewPos <= 0) {
					fNewValue = this.getMax();
					iNewPos = 0;
				}
			}
		}
	}
	this.oGrip.setAttribute('aria-valuemax', this.getValue2());
	this.oGrip2.setAttribute('aria-valuemin', this.getValue());
	return {
		fNewValue : fNewValue,
		iNewPos : iNewPos
	};
};

/**
 * Function is called when Slider is moved
 *
 * @param {DOM.Event} Event
 * @private
 */
sap.ui.commons.RangeSlider.prototype.handleMove = function(event) {
	if (!this.bRtl) {
		if (this.oMovingGrip == this.oGrip2 && this.getValue2() == this.getMax() && (this.getOffsetLeft(this.oGrip2) - this.getOffsetLeft(this.oGrip) < 2)) {
			this.oMovingGrip = this.oGrip;
			this.oGrip.focus();
		} else if (this.oMovingGrip == this.oGrip && this.getValue() == this.getMin() && (this.getOffsetLeft(this.oGrip2) - this.getOffsetLeft(this.oGrip) < 2)) {
			this.oMovingGrip = this.oGrip2;
			this.oGrip2.focus();
		}
	} else {
		if (this.oMovingGrip == this.oGrip && this.getValue2() == this.getMax() && (this.getOffsetLeft(this.oGrip) - this.getOffsetLeft(this.oGrip2) < 2)) {
			this.oMovingGrip = this.oGrip2;
			this.oGrip2.focus();
		} else if (this.oMovingGrip == this.oGrip2 && this.getValue() == this.getMin() && (this.getOffsetLeft(this.oGrip) - this.getOffsetLeft(this.oGrip2) < 2)) {
			this.oMovingGrip = this.oGrip;
			this.oGrip.focus();
		}
	}
	sap.ui.commons.Slider.prototype.handleMove.apply(this, [event]);
};

/*
 * fires the change event. The liveChange event must be fired too if the change
 * event is fired.
 *
 * @param bNoLiveChange fire no LiveChange event
 * @private
 */
sap.ui.commons.RangeSlider.prototype.handleFireChange = function(bNoLiveChange) {

	var iValue1 = this.getValue();
	var iValue2 = this.getValue2();

	// Only fire the events if the values actually changed
	if (iValue1 !== this._oldValue1 || iValue2 !== this._oldValue2) {
		this._oldValue1 = iValue1;
		this._oldValue2 = iValue2;

		this.fireChange({
			value2 : iValue2,
			value  : iValue1
		});

		if (!bNoLiveChange) {
			this.fireLiveChange({
				value  : iValue1,
				value2 : iValue2
			});
		}

	}

};

/*
 * Function returns nearest grip
 * 
 * @private
 */
sap.ui.commons.RangeSlider.prototype.getNearestGrip = function(iOffset) {
	var oMovedGrip;

	if (this.getVertical()) {
		var iDistanceLeft = Math.abs(iOffset - this.getOffsetLeft(this.oGrip2));
		var iDistanceRight = Math.abs(this.getOffsetLeft(this.oGrip) - iOffset);
		if (iDistanceLeft == iDistanceRight) {
			if (iOffset > iDistanceRight) {
				oMovedGrip = this.oGrip;
			} else {
				oMovedGrip = this.oGrip2;
			}
		} else if (iDistanceLeft >= iDistanceRight) {
			oMovedGrip = this.oGrip;
		} else {
			oMovedGrip = this.oGrip2;
		}
	} else {
		var iDistanceLeft = Math.abs(iOffset - this.getOffsetLeft(this.oGrip));
		var iDistanceRight = Math
				.abs(this.getOffsetLeft(this.oGrip2) - iOffset);
		if (iDistanceLeft == iDistanceRight) {
			if ((iOffset > iDistanceRight && !this.bRtl) || (iOffset < iDistanceRight && this.bRtl)) {
				oMovedGrip = this.oGrip2;
			} else {
				oMovedGrip = this.oGrip;
			}
		} else if (iDistanceLeft <= iDistanceRight) {
			oMovedGrip = this.oGrip;
		} else {
			oMovedGrip = this.oGrip2;
		}
	}
	return oMovedGrip;
};

/**
 * Set width/height
 * 
 * @private
 * @param int
 *            iNewPos
 * @param oObject
 */
sap.ui.commons.RangeSlider.prototype.setObjectWidth = function(iNewPos, oObject) {
	if (this.getVertical()) {
		oObject.style.height = iNewPos;
	} else {
		oObject.style.width = iNewPos;
	}
};

/**
 * Check if target is a valid grip
 * 
 * @param string
 *            sMyTargetId
 * @private
 */
sap.ui.commons.RangeSlider.prototype.targetIsGrip = function(sMyTargetId) {
	if (sMyTargetId == this.oGrip.id || sMyTargetId == this.oGrip2.id) {
		return true;
	}
	return false;
};

/**
 * Updates the ARIA state initially and in case of changes.
 *
 * @private
 */
sap.ui.commons.RangeSlider.prototype.setAriaState = function() {

	sap.ui.commons.Slider.prototype.setAriaState.apply(this);
	var fValue = this.getValue2();
	
	if (this.bTextLabels) {
		fValue = this.getNearestLabel(fValue);
	}

	this.oGrip2.setAttribute('aria-valuenow', fValue);
	this.oGrip2.setAttribute('aria-valuetext', 'Value ' + fValue); // to prevent JAWS from saying "percent"
};
}; // end of sap/ui/commons/RangeSlider.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.RowRepeaterRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.commons.RowRepeater
jQuery.sap.declare("sap.ui.commons.RowRepeaterRenderer");




/**
 * @class RowRepeater renderer.
 * @static
 */
sap.ui.commons.RowRepeaterRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.commons.RowRepeaterRenderer.render = function(oRenderManager, oControl){

	// escape directly if control is not visible
	if(!oControl.getVisible()) {
		return;
	}

	// opening root DIV
	oRenderManager.write("<div");
	oRenderManager.writeControlData(oControl);
	// add design CSS class: sapUiRrDesignStandard/sapUiRrDesignTransparent/sapUiRrDesignBareShell
	oRenderManager.addClass("sapUiRrDesign" + oControl.getDesign() );
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render the row repeater header (not in BARESHELL design)
	if( oControl.getDesign() !== sap.ui.commons.RowRepeaterDesign.BareShell){
		this.renderHeader(oRenderManager, oControl);
	}

	// render the row repeater body
	this.renderBody(oRenderManager, oControl);

	// render the row repeater footer (not in BARESHELL design)
	if( oControl.getDesign() !== sap.ui.commons.RowRepeaterDesign.BareShell){
		this.renderFooter(oRenderManager, oControl);
	}

	// closing root DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderHeader = function(oRenderManager, oControl) {

	// render the primary toolbar
	this.renderPrimaryToolbar(oRenderManager, oControl);

	// render the secondary toolbar only if more than one sorter is defined
	if(oControl.getSorters().length>1 && oControl.isBound()) {
		this.renderSecondaryToolbar(oRenderManager, oControl);
	}


};


sap.ui.commons.RowRepeaterRenderer.renderPrimaryToolbar = function(oRenderManager, oControl) {

	// opening primary toolbar DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrPtb");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render a title if the title aggregation is provided
	if(oControl.getTitle()!==null) {
		this.renderTitle(oRenderManager, oControl);
	}

	// render the buttons of the filter
	this.renderFilterToolbar(oRenderManager, oControl);

	// always render the controller that displays either pager or show more
	this.renderController(oRenderManager, oControl);

	// closing primary toolbar DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderTitle = function(oRenderManager, oControl) {

	// local variables
	var oTitle = oControl.getTitle();
	var sTooltip = oTitle.getTooltip_AsString();

//BACKUP FOR LOGO AND TITLE IN A SINGLE SHARED DIV:
//	// opening title DIV
//	oRenderManager.write("<div");
//	oRenderManager.addClass("sapUiRrTitle");
//	oRenderManager.writeClasses();
//	if(sTooltip!==undefined) {
//		oRenderManager.writeAttributeEscaped("title", sTooltip);
//	}
//	oRenderManager.write(">");
//
//	// render the icon if it is defined
//	if(oTitle.getIcon()!==null) {
//		oRenderManager.write("<img");
//		oRenderManager.writeAttributeEscaped("src", oTitle.getIcon());
//		oRenderManager.write("/>");
//	}
//
//	// render the text if provided
//	if(oTitle.getText()!==null) {
//		oRenderManager.writeEscaped(oTitle.getText());
//	}
//
//	// closing title DIV
//	oRenderManager.write("</div>");


//LOGO AND TITLE IN 2 SEPARATE DIVs:
	// render the icon if it is defined
	if(oTitle.getIcon()) {
		// opening logo DIV
		oRenderManager.write("<div");
		oRenderManager.addClass("sapUiRrLogo");
		oRenderManager.writeClasses();
		if(sTooltip!==undefined) {
			oRenderManager.writeAttributeEscaped("title", sTooltip);
		}
		oRenderManager.write(">");

		if (oTitle.getIcon()) {
			oRenderManager.write("<img");
			oRenderManager.writeAttributeEscaped("src", oTitle.getIcon());
			oRenderManager.write("/>");
		}
		// closing DIV
		oRenderManager.write("</div>");
	}

	// render the text if provided
	if(oTitle.getText()) {
		// opening title DIV
		oRenderManager.write("<div");
		oRenderManager.addClass("sapUiRrTitle");
		oRenderManager.writeClasses();
		oRenderManager.writeAttribute("role", "heading");
		oRenderManager.write(">");

		oRenderManager.writeEscaped(oTitle.getText());

		// closing DIV
		oRenderManager.write("</div>");
	}



};


sap.ui.commons.RowRepeaterRenderer.renderFilterToolbar = function(oRenderManager, oControl) {

	// local variables
	var aFilters = oControl.getFilters();
	if (aFilters.length > 0) {
		// opening filter toolbar DIV
		oRenderManager.write("<div");
		oRenderManager.addClass("sapUiRrFilters");
		oRenderManager.writeClasses();
		oRenderManager.write(">");
	
		// don't render any content if there is not minimum 2 filters OR
		// if the row repeater is not bound
		if(aFilters.length>1 && oControl.isBound()) {
			oRenderManager.renderControl(oControl.getAggregation("filterToolbar"));
		}
	
		// closing filter toolbar DIV
		oRenderManager.write("</div>");
	}
};


sap.ui.commons.RowRepeaterRenderer.renderController = function(oRenderManager, oControl) {

	if(!oControl.bPagingMode) {
		// opening controller DIV
		oRenderManager.write("<div");
		oRenderManager.addClass("sapUiRrCtrl");
		oRenderManager.writeClasses();
		oRenderManager.write(">");
	
		// render "show more" button or pager depending on pager mode flag
		
			oRenderManager.renderControl(oControl.getAggregation("headerShowMoreButton"));
		
		// closing controller DIV
		oRenderManager.write("</div>");
	}
};


sap.ui.commons.RowRepeaterRenderer.renderSecondaryToolbar = function(oRenderManager, oControl) {

	// local variables
	var aSorters = oControl.getSorters();

	// opening secondary toolbar DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrStb");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render the "Sort By:" text
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrSortBy");
	oRenderManager.writeClasses();
	oRenderManager.write(">");
	oRenderManager.writeEscaped(oControl.oResourceBundle.getText("SORT_BY") + ":");
	oRenderManager.write("</div>");

	// begin of sorter toolbar wrapping DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrSorters");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render the toolbar
	oRenderManager.renderControl(oControl.getAggregation("sorterToolbar"));

	// end of sorter toolbar wrapping DIV
	oRenderManager.write("</div>");

	// closing secondary toolbar DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderBody = function(oRenderManager, oControl) {

	// variables
	var sId = oControl.getId();
	var iShowMoreSteps = oControl.getShowMoreSteps();
	var iCurrentPage = oControl.getCurrentPage();
	var iNumberOfRows = oControl.getNumberOfRows();
	var iStartIndex = (iCurrentPage-1) * iNumberOfRows;
	var aRows = oControl.getRows();
	var iRowCount = oControl._getRowCount();
	var iMaxRows = iRowCount - iStartIndex;
	var iCurrentVisibleRows = oControl._getRowCount() > iNumberOfRows ? iNumberOfRows : iMaxRows;
	var iLastPage = Math.ceil(iRowCount / iNumberOfRows);
	var iCurrentRow;

	// make sure only to render the max visible rows (not to render pseudo rows)
	iCurrentVisibleRows = Math.min(iCurrentVisibleRows, iMaxRows);

	// in the show more mode we always start with the first row
	if (iShowMoreSteps > 0) {
		iStartIndex = 0;
	}

	// opening body DIV
	oRenderManager.write("<div");
	oRenderManager.writeAttribute("id", sId+"-body");
	oRenderManager.addClass("sapUiRrBody");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// opening UL for current page
	oRenderManager.write("<ul");
	oRenderManager.writeAttribute("id", sId+"-page_"+iCurrentPage);
	oRenderManager.addClass("sapUiRrPage");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// we display a text, if the length of aggregation rows is 0 or we are past the last page
	if(aRows.length===0 || iLastPage<iCurrentPage) {

		// render a "No Data" LI with custom control or default text
			oRenderManager.write("<li");
			oRenderManager.addClass("sapUiRrNoData");
			oRenderManager.writeClasses();
			oRenderManager.write(">");
			var oNoData = oControl.getNoData();
			if (oNoData) {
				oRenderManager.renderControl(oNoData);
			}
			else {
				oRenderManager.writeEscaped(oControl.oResourceBundle.getText("NO_DATA"));
			}
			oRenderManager.write("</li>");

	} else {

		// create additional LI style if row height is fixed
		var sRowHeightStyle;
		if( oControl.getFixedRowHeight() !== "" ) {
			sRowHeightStyle = "height:" + oControl.getFixedRowHeight() + ";overflow:hidden;";
		}

		// loop over all rows visible on current page
		if (oControl.getBinding("rows")) {
			iStartIndex = oControl._bSecondPage ? iNumberOfRows : 0;
		}
		for( iCurrentRow=iStartIndex; iCurrentRow<iStartIndex+iCurrentVisibleRows; iCurrentRow++ ) {

			// open the LI wrapping each row
			oRenderManager.write("<li");
			oRenderManager.writeAttribute("id", sId+"-row_"+iCurrentRow);
			if (sRowHeightStyle) {
				oRenderManager.writeAttribute("style", sRowHeightStyle);
			}
			oRenderManager.addClass("sapUiRrRow");
			oRenderManager.writeClasses();
			oRenderManager.write(">");

			// render the nested control
			oRenderManager.renderControl(aRows[iCurrentRow]);

			// close the wrapping LI
			oRenderManager.write("</li>");

		}

	}

	// closing page UL
	oRenderManager.write("</ul>");

	// closing body DIV
	oRenderManager.write("</div>");

};


sap.ui.commons.RowRepeaterRenderer.renderFooter = function(oRenderManager, oControl) {

	// opening footer DIV
	oRenderManager.write("<div");
	oRenderManager.addClass("sapUiRrFtr");
	oRenderManager.writeClasses();
	oRenderManager.write(">");

	// render "show more" button or pager depending on pager mode flag
	if(oControl.bPagingMode) {
		oRenderManager.renderControl(oControl.getAggregation("footerPager"));
	} else {
		oRenderManager.renderControl(oControl.getAggregation("footerShowMoreButton"));
	}

	// closing footer DIV
	oRenderManager.write("</div>");

};

}; // end of sap/ui/commons/RowRepeaterRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.SearchField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.SearchField.
jQuery.sap.declare("sap.ui.commons.SearchField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new SearchField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableListSuggest enableListSuggest} : boolean (default: true)</li>
 * <li>{@link #getShowListExpander showListExpander} : boolean (default: true)</li>
 * <li>{@link #getEnableClear enableClear} : boolean (default: false)</li>
 * <li>{@link #getShowExternalButton showExternalButton} : boolean (default: false)</li>
 * <li>{@link #getEnableCache enableCache} : boolean (default: true)</li>
 * <li>{@link #getEnableFilterMode enableFilterMode} : boolean (default: false)</li>
 * <li>{@link #getValue value} : string (default: '')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getVisibleItemCount visibleItemCount} : int (default: 20)</li>
 * <li>{@link #getStartSuggestion startSuggestion} : int (default: 3)</li>
 * <li>{@link #getMaxSuggestionItems maxSuggestionItems} : int (default: 10)</li>
 * <li>{@link #getMaxHistoryItems maxHistoryItems} : int (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getSearchProvider searchProvider} : sap.ui.core.search.SearchProvider</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.SearchField#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.commons.SearchField#event:suggest suggest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Allows the user to type search queries and to trigger the search. Optionally, suggestions can be added.
 * @extends sap.ui.core.Control
 * @implements sap.ui.commons.ToolbarItem
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.SearchField
 */
sap.ui.core.Control.extend("sap.ui.commons.SearchField", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem"
	],
	publicMethods : [
		// methods
		"clearHistory", "suggest"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"enableListSuggest" : {type : "boolean", group : "Behavior", defaultValue : true},
		"showListExpander" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enableClear" : {type : "boolean", group : "Behavior", defaultValue : false},
		"showExternalButton" : {type : "boolean", group : "Behavior", defaultValue : false},
		"enableCache" : {type : "boolean", group : "Behavior", defaultValue : true},
		"enableFilterMode" : {type : "boolean", group : "Behavior", defaultValue : false},
		"value" : {type : "string", group : "Data", defaultValue : ''},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"visibleItemCount" : {type : "int", group : "Behavior", defaultValue : 20},
		"startSuggestion" : {type : "int", group : "Behavior", defaultValue : 3},
		"maxSuggestionItems" : {type : "int", group : "Behavior", defaultValue : 10},
		"maxHistoryItems" : {type : "int", group : "Behavior", defaultValue : 0}
	},
	aggregations : {
    	"searchProvider" : {type : "sap.ui.core.search.SearchProvider", multiple : false}
	},
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"search" : {}, 
		"suggest" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.SearchField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.SearchField.extend
 * @function
 */

sap.ui.commons.SearchField.M_EVENTS = {'search':'search','suggest':'suggest'};


/**
 * Getter for property <code>enableListSuggest</code>.
 * Defines whether a pop up list shall be provided for suggestions
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableListSuggest</code>
 * @public
 * @name sap.ui.commons.SearchField#getEnableListSuggest
 * @function
 */

/**
 * Setter for property <code>enableListSuggest</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableListSuggest  new value for property <code>enableListSuggest</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setEnableListSuggest
 * @function
 */


/**
 * Getter for property <code>showListExpander</code>.
 * Defines whether the list expander shall be displayed in the case of an enabled list for suggestions. This feature is deactivated on mobile devices.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showListExpander</code>
 * @public
 * @name sap.ui.commons.SearchField#getShowListExpander
 * @function
 */

/**
 * Setter for property <code>showListExpander</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowListExpander  new value for property <code>showListExpander</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setShowListExpander
 * @function
 */


/**
 * Getter for property <code>enableClear</code>.
 * Defines whether the clear functionality shall be active
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableClear</code>
 * @public
 * @name sap.ui.commons.SearchField#getEnableClear
 * @function
 */

/**
 * Setter for property <code>enableClear</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableClear  new value for property <code>enableClear</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setEnableClear
 * @function
 */


/**
 * Getter for property <code>showExternalButton</code>.
 * Defines whether an additional search button shall be displayed
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showExternalButton</code>
 * @public
 * @name sap.ui.commons.SearchField#getShowExternalButton
 * @function
 */

/**
 * Setter for property <code>showExternalButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowExternalButton  new value for property <code>showExternalButton</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setShowExternalButton
 * @function
 */


/**
 * Getter for property <code>enableCache</code>.
 * When list suggestion is enabled all suggestions are cached and no suggest event is fired.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableCache</code>
 * @public
 * @since 1.10.3
 * @name sap.ui.commons.SearchField#getEnableCache
 * @function
 */

/**
 * Setter for property <code>enableCache</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableCache  new value for property <code>enableCache</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.10.3
 * @name sap.ui.commons.SearchField#setEnableCache
 * @function
 */


/**
 * Getter for property <code>enableFilterMode</code>.
 * Defines whether the search event should also be fired when the SearchField is empty (like a Filter field) and when the clear button (if activated) is pressed.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableFilterMode</code>
 * @public
 * @name sap.ui.commons.SearchField#getEnableFilterMode
 * @function
 */

/**
 * Setter for property <code>enableFilterMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableFilterMode  new value for property <code>enableFilterMode</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setEnableFilterMode
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Text that shall be displayed within the search field
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.ui.commons.SearchField#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setValue
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Disabled fields have different colors, and they can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.commons.SearchField#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setEnabled
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Non-editable controls have different colors, depending on custom settings
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.commons.SearchField#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setEditable
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.SearchField#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Control width in CSS-size
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.SearchField#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setWidth
 * @function
 */


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.ui.commons.SearchField#getMaxLength
 * @function
 */

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setMaxLength
 * @function
 */


/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.ui.commons.SearchField#getTextAlign
 * @function
 */

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setTextAlign
 * @function
 */


/**
 * Getter for property <code>visibleItemCount</code>.
 * 
 * Defines the number of items in the suggestion list that shall be displayed at once. If the overall number of list items is higher than the setting,
 * a scroll bar is provided.
 * 
 *
 * Default value is <code>20</code>
 *
 * @return {int} the value of property <code>visibleItemCount</code>
 * @public
 * @name sap.ui.commons.SearchField#getVisibleItemCount
 * @function
 */

/**
 * Setter for property <code>visibleItemCount</code>.
 *
 * Default value is <code>20</code> 
 *
 * @param {int} iVisibleItemCount  new value for property <code>visibleItemCount</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setVisibleItemCount
 * @function
 */


/**
 * Getter for property <code>startSuggestion</code>.
 * 
 * Minimum length of the entered string triggering the suggestion list.
 * 
 *
 * Default value is <code>3</code>
 *
 * @return {int} the value of property <code>startSuggestion</code>
 * @public
 * @name sap.ui.commons.SearchField#getStartSuggestion
 * @function
 */

/**
 * Setter for property <code>startSuggestion</code>.
 *
 * Default value is <code>3</code> 
 *
 * @param {int} iStartSuggestion  new value for property <code>startSuggestion</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setStartSuggestion
 * @function
 */


/**
 * Getter for property <code>maxSuggestionItems</code>.
 * 
 * Maximum number of suggestion items in the suggestion list.
 * 
 *
 * Default value is <code>10</code>
 *
 * @return {int} the value of property <code>maxSuggestionItems</code>
 * @public
 * @name sap.ui.commons.SearchField#getMaxSuggestionItems
 * @function
 */

/**
 * Setter for property <code>maxSuggestionItems</code>.
 *
 * Default value is <code>10</code> 
 *
 * @param {int} iMaxSuggestionItems  new value for property <code>maxSuggestionItems</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setMaxSuggestionItems
 * @function
 */


/**
 * Getter for property <code>maxHistoryItems</code>.
 * Maximum number of history items in the suggestion list.
 * 0 displays and stores no history. The history is locally stored on the client. Therefore do not activate this feature when this control handles confidential data.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxHistoryItems</code>
 * @public
 * @name sap.ui.commons.SearchField#getMaxHistoryItems
 * @function
 */

/**
 * Setter for property <code>maxHistoryItems</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxHistoryItems  new value for property <code>maxHistoryItems</code>
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setMaxHistoryItems
 * @function
 */


/**
 * Getter for aggregation <code>searchProvider</code>.<br/>
 * Search provider instance which handles the suggestions for this SearchField (e.g. Open Search Protocol).
 * 
 * @return {sap.ui.core.search.SearchProvider}
 * @public
 * @name sap.ui.commons.SearchField#getSearchProvider
 * @function
 */


/**
 * Setter for the aggregated <code>searchProvider</code>.
 * @param {sap.ui.core.search.SearchProvider} oSearchProvider
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#setSearchProvider
 * @function
 */
	

/**
 * Destroys the searchProvider in the aggregation 
 * named <code>searchProvider</code>.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#destroySearchProvider
 * @function
 */


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.SearchField#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.ui.commons.SearchField#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.SearchField#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.ui.commons.SearchField#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.ui.commons.SearchField#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.SearchField#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * Event which is fired when the user triggers a search 
 *
 * @name sap.ui.commons.SearchField#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The search query
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.ui.commons.SearchField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.SearchField</code>.<br/> itself. 
 *  
 * Event which is fired when the user triggers a search 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.SearchField</code>.<br/> itself.
 *
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.ui.commons.SearchField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.SearchField#fireSearch
 * @function
 */


/**
 * Event which is fired when new suggest values are required. 
 *
 * @name sap.ui.commons.SearchField#suggest
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The value for which suggestions are required.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'suggest' event of this <code>sap.ui.commons.SearchField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.SearchField</code>.<br/> itself. 
 *  
 * Event which is fired when new suggest values are required. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.SearchField</code>.<br/> itself.
 *
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#attachSuggest
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'suggest' event of this <code>sap.ui.commons.SearchField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.SearchField#detachSuggest
 * @function
 */

/**
 * Fire event suggest to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The value for which suggestions are required.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.SearchField} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.SearchField#fireSuggest
 * @function
 */


/**
 * Clears the history of the control
 *
 * @name sap.ui.commons.SearchField.prototype.clearHistory
 * @function

 * @type void
 * @public
 */


/**
 * Callback function used to provide the suggest values in the handler of the suggest event (only in list suggestion mode)
 *
 * @name sap.ui.commons.SearchField.prototype.suggest
 * @function
 * @param {string} 
 *         sSSuggestValue
 *         The value which was provided in the corresponding suggest event (parameter 'value')
 * @param {string[]} 
 *         aASuggestions
 *         The list of suggestions belonging to the suggest value

 * @type void
 * @public
 */


// Start of sap\ui\commons\SearchField.js





jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.History'); // unlisted dependency retained


(function() {

var _DEFAULT_VISIBLE_ITEM_COUNT = 20;

//***********************************************
// Internal control functions
//***********************************************

/**
 * Does the setup when the control is created.
 * @private
 */
sap.ui.commons.SearchField.prototype.init = function(){
	_initChildControls(this, this.getEnableListSuggest());
	this._oHistory = new sap.ui.core.History(this.getId());
};


/**
 * Does all the cleanup when the control is to be destroyed.
 * Called from Element's destroy() method.
 * @private
 */
sap.ui.commons.SearchField.prototype.exit = function(){
	if(this._ctrl){
		this._ctrl.destroy();
	}
	if(this._lb){
		this._lb.destroy();
	}
	if(this._btn){
		this._btn.destroy();
	}
	this._ctrl = null;
	this._lb = null;
	this._btn = null;
	this._oHistory = null;
};


/**
 * Called when the theme is changed.
 * @private
 */
sap.ui.commons.SearchField.prototype.onThemeChanged = function(oEvent){
	if (this.getDomRef()) {
		this.invalidate();
	}
};


/**
 * Called when the rendering is complete.
 * @private
 */
sap.ui.commons.SearchField.prototype.onAfterRendering = function(){
	if(this.getShowExternalButton()){
		var iButtonWidth = this._btn.$().outerWidth(true);
		this._ctrl.$().css(sap.ui.getCore().getConfiguration().getRTL() ? "left" : "right", iButtonWidth+"px");
    }
};


sap.ui.commons.SearchField.prototype.getFocusDomRef = function() {
	return this._ctrl.getFocusDomRef();
};


sap.ui.commons.SearchField.prototype.getIdForLabel = function () {
	return this._ctrl.getId()+'-input';
};


sap.ui.commons.SearchField.prototype.onpaste = function (oEvent) {
	var that = this;
	setTimeout(function(){
		//Refresh suggestions on cut or paste
		that._ctrl._triggerValueHelp = true;
		that._ctrl.onkeyup();
	}, 0);
};
sap.ui.commons.SearchField.prototype.oncut = sap.ui.commons.SearchField.prototype.onpaste;


sap.ui.commons.SearchField.prototype.fireSearch = function(mArguments) {
	var sVal = jQuery(this._ctrl.getInputDomRef()).val();
	if(!this.getEditable() || !this.getEnabled()) {
		return this;
	}
	
	this.setValue(sVal);
	
	if(!sVal && !this.getEnableFilterMode()){
		return this;
	}
	
	if(!mArguments) {
		mArguments = {};
	}
	
	if(!mArguments.noFocus){
		sVal = this.getValue();
		this.focus();
		if(sVal && (this.getMaxHistoryItems() > 0)){
			this._oHistory.add(sVal);
		}
		this.fireEvent("search", {query: sVal});
	}
	return this;
};


/**
 * @private
 */
sap.ui.commons.SearchField.prototype.hasListExpander = function(){
	return isMobile() ? false : this.getShowListExpander();
};


//***********************************************
// Overridden getter und setter, API functions
//***********************************************

sap.ui.commons.SearchField.prototype.clearHistory = function() {
	this._oHistory.clear();
};


sap.ui.commons.SearchField.prototype.suggest = function(sSuggestValue, aSuggestions) {
	if(!this.getEnableListSuggest() || !sSuggestValue || !aSuggestions){
		return;
	}
	this._ctrl.updateSuggestions(sSuggestValue, aSuggestions);
};


sap.ui.commons.SearchField.prototype.setEnableListSuggest = function(bEnableListSuggest) {
	if((this.getEnableListSuggest() && bEnableListSuggest) || (!this.getEnableListSuggest() && !bEnableListSuggest)){
		return;
	}
	_initChildControls(this, bEnableListSuggest);
	this.setProperty("enableListSuggest", bEnableListSuggest);
	return this;
};

sap.ui.commons.SearchField.prototype.getValue = function() {
	return _get(this, "Value");
};

sap.ui.commons.SearchField.prototype.setValue = function(sValue) {
	return _set(this, "Value", sValue, !!this.getDomRef(), true);
};

sap.ui.commons.SearchField.prototype.setEnableCache = function(bEnableCache) {
	return this.setProperty("enableCache", bEnableCache, true);
};

sap.ui.commons.SearchField.prototype.getEnabled = function() {
	return _get(this, "Enabled");
};

sap.ui.commons.SearchField.prototype.setEnabled = function(bEnabled) {
	if(this._btn){
		this._btn.setEnabled(bEnabled && this.getEditable());
	}
	return _set(this, "Enabled", bEnabled, false, true);
};

sap.ui.commons.SearchField.prototype.getEditable = function() {
	return _get(this, "Editable");
};

sap.ui.commons.SearchField.prototype.setEditable = function(bEditable) {
	if(this._btn){
		this._btn.setEnabled(bEditable && this.getEnabled());
	}
	return _set(this, "Editable", bEditable, false, true);
};

sap.ui.commons.SearchField.prototype.getMaxLength = function() {
	return _get(this, "MaxLength");
};

sap.ui.commons.SearchField.prototype.setMaxLength = function(iMaxLength) {
	return _set(this, "MaxLength", iMaxLength, false, true);
};

sap.ui.commons.SearchField.prototype.getTextAlign = function() {
	return _get(this, "TextAlign");
};

sap.ui.commons.SearchField.prototype.setTextAlign = function(oTextAlign) {
	return _set(this, "TextAlign", oTextAlign, false, true);
};

sap.ui.commons.SearchField.prototype.getTooltip = function() {
	return _get(this, "Tooltip");
};

sap.ui.commons.SearchField.prototype.setTooltip = function(oTooltip) {
	return _set(this, "Tooltip", oTooltip, true, false);
};

sap.ui.commons.SearchField.prototype.getVisibleItemCount = function() {
	return _get(this, "MaxPopupItems");
};

sap.ui.commons.SearchField.prototype.setVisibleItemCount = function(iVisibleItemCount) {
	return _set(this, "MaxPopupItems", iVisibleItemCount, false, true);
};

sap.ui.commons.SearchField.prototype.setShowExternalButton = function(bShowExternalButton) {
	if(!this._btn){
		jQuery.sap.require("sap.ui.commons.Button");
		var that = this;
		this._btn = new sap.ui.commons.Button(this.getId()+"-btn", {
			text: getText("SEARCHFIELD_BUTTONTEXT"),
			enabled: this.getEditable() && this.getEnabled(),
			press: function(){
				that.fireSearch();
			}
		});
		this._btn.setParent(this);
	}
	this.setProperty("showExternalButton", bShowExternalButton);
	return this;
};


sap.ui.commons.SearchField.prototype.getAriaDescribedBy = function() {
	return this._ctrl.getAriaDescribedBy();
};

sap.ui.commons.SearchField.prototype.getAriaLabelledBy = function() {
	return this._ctrl.getAriaLabelledBy();
};

sap.ui.commons.SearchField.prototype.removeAllAriaDescribedBy = function() {
	return this._ctrl.removeAllAriaDescribedBy();
};

sap.ui.commons.SearchField.prototype.removeAllAriaLabelledBy = function() {
	return this._ctrl.removeAllAriaLabelledBy();
};

sap.ui.commons.SearchField.prototype.removeAriaDescribedBy = function(v) {
	return this._ctrl.removeAriaDescribedBy(v);
};

sap.ui.commons.SearchField.prototype.removeAriaLabelledBy = function(v) {
	return this._ctrl.removeAriaLabelledBy(v);
};

sap.ui.commons.SearchField.prototype.addAriaDescribedBy = function(v) {
	this._ctrl.addAriaDescribedBy(v);
	return this;
};

sap.ui.commons.SearchField.prototype.addAriaLabelledBy = function(v) {
	this._ctrl.addAriaLabelledBy(v);
	return this;
};


//***********************************************
// Private helper functions
//***********************************************

var _set = function(oThis, sMutator, oVal, bSuppressRerendering, bUpdateModelProperty) {
	var oOldVal = _get(oThis, sMutator);
	oThis._ctrl["set"+sMutator](oVal);
	if(!bSuppressRerendering){
		oThis.invalidate();
	}
	if(bUpdateModelProperty) {
		oThis.updateModelProperty(sMutator.toLowerCase(), oVal, oOldVal);
	}
	return oThis;
};


var _get = function(oThis, sGetter) {
	return oThis._ctrl["get"+sGetter]();
};


var _initChildControls = function(oThis, bEnableListSuggest) {
	if(!oThis._lb){
		oThis._lb = new sap.ui.commons.ListBox(oThis.getId()+"-lb");
	}

	var oOldControl = oThis._ctrl;
	var oNewControl = null;
	if(bEnableListSuggest){
		oNewControl = new sap.ui.commons.SearchField.CB(oThis.getId()+"-cb", {listBox: oThis._lb, maxPopupItems: _DEFAULT_VISIBLE_ITEM_COUNT});
		oNewControl.addDependent(oThis._lb);
	}else{
		oNewControl = new sap.ui.commons.SearchField.TF(oThis.getId()+"-tf");
	}
	oNewControl.setParent(oThis);
	if(oOldControl){
		oNewControl.setValue(oOldControl.getValue());
		oNewControl.setEnabled(oOldControl.getEnabled());
		oNewControl.setEditable(oOldControl.getEditable());
		oNewControl.setMaxLength(oOldControl.getMaxLength());
		oNewControl.setTextAlign(oOldControl.getTextAlign());
		oNewControl.setTooltip(oOldControl.getTooltip());
		oNewControl.setMaxPopupItems(oOldControl.getMaxPopupItems());
		
		var aAsso = oOldControl.getAriaDescribedBy();
		for(var i=0; i<aAsso.length; i++){
			oNewControl.addAriaDescribedBy(aAsso[i]);
		}
		oOldControl.removeAllAriaDescribedBy();
		
		aAsso = oOldControl.getAriaLabelledBy();
		for(var i=0; i<aAsso.length; i++){
			oNewControl.addAriaLabelledBy(aAsso[i]);
		}
		oOldControl.removeAllAriaLabelledBy();
		oOldControl.removeAllDependents();
		
		oOldControl.destroy();
	}
	oThis._ctrl = oNewControl;
};


var getText = function(sKey, aArgs) {
	var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons");
	if(rb) {
		return rb.getText(sKey, aArgs);
	}
	return sKey;
};


var isMobile = function() {
	return sap.ui.Device.browser.mobile;
};


//***********************************************
//***********************************************
// Inner Controls
//***********************************************

var _renderSearchIcon = function(oRM, oCtrl){
	oRM.write("<div");
	oRM.writeAttributeEscaped('id', oCtrl.getId() + '-searchico');
	oRM.writeAttribute('unselectable', 'on');
	if(sap.ui.getCore().getConfiguration().getAccessibility()){
		oRM.writeAttribute("role", "presentation");
	}
	oRM.addClass("sapUiSearchFieldIco");
	oRM.writeClasses();
	oRM.write("></div>");
};


//***********************************************
// Inner Control "Search Textfield"
//***********************************************

sap.ui.commons.TextField.extend("sap.ui.commons.SearchField.TF", {
  
	metadata : {
		visibility : "hidden" 
	},
	
  constructor : function (sId, mSettings) {
  	sap.ui.commons.TextField.apply(this, arguments);
  },

  getInputDomRef : function() {
  	return this.getDomRef("input");
  },
  
  onkeyup : function(oEvent) {
  	sap.ui.commons.SearchField.CB.prototype.onkeyup.apply(this, arguments);
  },
  
  _triggerSuggest : function(sCurrentValue) {
  	this._sSuggest = null;
  	if((sCurrentValue && sCurrentValue.length >= this.getParent().getStartSuggestion()) || (!sCurrentValue && this.getParent().getStartSuggestion() == 0)){
  		this.getParent().fireSuggest({value: sCurrentValue});
  	}
  },
  
  _checkChange : function(oEvent, bDoNotFireSearch) {
  	this.getParent().fireSearch({noFocus:bDoNotFireSearch});
  },
  
  onsapfocusleave : function(oEvent) {
  	if(this.getEditable() && this.getEnabled() && this.getRenderer().onblur && oEvent.relatedControlId != this.getId()) {
  		this.getRenderer().onblur(this);
  	}
  	this._checkChange(oEvent, true);
  },
  
  onclick : function(oEvent){
  	if(oEvent.target === this.getDomRef("searchico")) {
  		if(this.getEditable() && this.getEnabled()){
  			this.focus();
  		}
  		if(!this.getParent().getEnableClear()){
  			this._checkChange(oEvent);
  		}else{
  			if(!jQuery(this.getInputDomRef()).val() || !this.getEditable() || !this.getEnabled()){
				return;
			}
  			this.setValue("");
  			this._triggerValueHelp = true;
  			this.onkeyup();
  			if(this.getParent().getEnableFilterMode()){
  				jQuery(this.getInputDomRef()).val("");
  				this.getParent().fireSearch();
  			}
  		}
  	}
  },
  
  getMaxPopupItems : function(){
  	return this._iVisibleItemCount ? this._iVisibleItemCount : _DEFAULT_VISIBLE_ITEM_COUNT;
  },
  
  setMaxPopupItems : function(iMaxPopupItems){
  	this._iVisibleItemCount = iMaxPopupItems;
  },

  //  extend TextFieldRenderer
  renderer : {
    
    renderOuterContentBefore :_renderSearchIcon,
    
    renderOuterAttributes : function(oRM, oCtrl) {
      oRM.addClass("sapUiSearchFieldTf");
    },
    
    renderInnerAttributes : function(oRM, oCtrl) {
    	if (!sap.ui.Device.os.ios) { //on iOS the input is not focused if type search
    		oRM.writeAttribute("type", "search");
    	}
      if(isMobile()){
        oRM.writeAttribute('autocapitalize', 'off');
        oRM.writeAttribute('autocorrect', 'off');
      }
    }
    
  }
});

// TODO enhance Notepad controls to support such assignments (e.g. "a,b" : function () { ... } )
sap.ui.commons.SearchField.TF.prototype.getFocusDomRef = sap.ui.commons.SearchField.TF.prototype.getInputDomRef;


//***********************************************
// Inner Control "Search Combo Box"
//***********************************************

sap.ui.commons.ComboBox.extend("sap.ui.commons.SearchField.CB", {
  
	metadata : {
		visibility : "hidden" 
	},
	
  constructor : function (sId, mSettings) {
  	sap.ui.commons.ComboBox.apply(this, arguments);
  	this._mSuggestions = {};
  	this._aSuggestValues = [];
  	this.mobile = false; //switch off native dropdown version
  },
  
  updateSuggestions : function(sSuggestVal, aSuggestions) {
  	this._mSuggestions[sSuggestVal] = aSuggestions;
  	if(this.getInputDomRef() && jQuery(this.getInputDomRef()).val() === sSuggestVal && this._hasSuggestValue(sSuggestVal)){
  		this._doUpdateList(sSuggestVal);
  		this._aSuggestValues = [sSuggestVal];
  	}
  },
  
  applyFocusInfo : function(oFocusInfo){
	jQuery(this.getInputDomRef()).val(oFocusInfo.sTypedChars);
	return this;
  },
  
  _getListBox : function() {
  	return this.getParent()._lb;
  },
  
  _hasSuggestValue : function(sSuggestVal) {
  	return this._aSuggestValues.length > 0 && sSuggestVal == this._aSuggestValues[this._aSuggestValues.length-1];
  },
  
  _doUpdateList : function(sSuggestVal, bSkipOpen) {
  	if((!this.oPopup || !this.oPopup.isOpen()) && !bSkipOpen){
  		this._open();
  	}else{
  		this._updateList(sSuggestVal);
  	}
  	if(!this._lastKeyIsDel && sSuggestVal === jQuery(this.getInputDomRef()).val()){
  		this._doTypeAhead();
  	}
  },
  
  onclick : function(oEvent) {
  	sap.ui.commons.ComboBox.prototype.onclick.apply(this, arguments);
  	if(oEvent.target === this.getDomRef("searchico")) {
  		if(!this.getParent().getEnableClear()){
  			this.getParent().fireSearch();
  		}else if(jQuery(this.getInputDomRef()).val() && this.getEditable() && this.getEnabled()){
			this.setValue("");
			this._triggerValueHelp = true;
			this.onkeyup(null, true);
			this._aSuggestValues = [];
			if(this.getParent().getEnableFilterMode()){
				jQuery(this.getInputDomRef()).val("");
				this.getParent().fireSearch();
			}
  		}
  		if(this.getEditable() && this.getEnabled()){
  			this.focus();
  		}
  	}else if(jQuery.sap.containsOrEquals(this.getDomRef("providerico"), oEvent.target)) {
  		if(this.getEditable() && this.getEnabled()){
  			this.focus();
  		}
  	}
  },
  
  onkeypress : sap.ui.commons.SearchField.TF.prototype.onkeypress,
  
  onkeyup : function(oEvent, bSkipOpen) {
	this.getParent().$().toggleClass("sapUiSearchFieldVal", !!jQuery(this.getInputDomRef()).val())
	  
  	if(oEvent){
  		var oKC = jQuery.sap.KeyCodes;
  		if(sap.ui.commons.ComboBox._isHotKey(oEvent) || oEvent.keyCode === oKC.F4 && oEvent.which === 0 /*this is the Firefox case and ensures 's' with same charCode is accepted*/) {
  			return;
  		}
  
  		var iKC = oEvent.which || oEvent.keyCode;
  		if(iKC !== oKC.ESCAPE || this instanceof sap.ui.commons.SearchField.TF/*Textfield uses the same onkeyup function therefore check*/) {
  			this._triggerValueHelp = true;
  			this._lastKeyIsDel = iKC == oKC.DELETE || iKC == oKC.BACKSPACE;
  		}
  	}
  
  	if(this._triggerValueHelp){
  		this._triggerValueHelp = false;
  		if(this._sSuggest){
  			jQuery.sap.clearDelayedCall(this._sSuggest);
  			this._sSuggest = null;
  		}
  		var sCurrentValue = jQuery(this.getInputDomRef()).val();
  		if((sCurrentValue && sCurrentValue.length >= this.getParent().getStartSuggestion()) || (!sCurrentValue && this.getParent().getStartSuggestion() == 0)){
  			this._sSuggest = jQuery.sap.delayedCall(200, this, "_triggerSuggest", [sCurrentValue]);
  		}else if(this._doUpdateList){ //Textfield uses the same onkeyup function -> therefore check existence of this function
  			this._doUpdateList(sCurrentValue, bSkipOpen);
  		}
  	}
  },
  
  _triggerSuggest : function(sSuggestValue) {
  	this._sSuggest = null;
  	if(!this._mSuggestions[sSuggestValue] || !this.getParent().getEnableCache()){
  		this._aSuggestValues.push(sSuggestValue);
  		var oSearchProvider = this.getParent().getSearchProvider();
  		if(oSearchProvider){
  			var oSearchField = this.getParent();
  			oSearchProvider.suggest(sSuggestValue, function(sValue, aSuggestions){
  				if(oSearchField){
  					oSearchField.suggest(sValue, aSuggestions);
  				}
  			});
  		}else{
  			this.getParent().fireSuggest({value: sSuggestValue});
  		}
  	}else{
  		this._doUpdateList(sSuggestValue);
  	}
  },
  
  _updateList : function(sSuggestVal) {
  	var bEmpty = false;
  	var oLb = this._getListBox();
  	oLb.destroyAggregation("items", true);
  
  	var addToListbox = function(oLb, aValues, iMax, bSeparatorBefore){
  		aValues = aValues ? aValues : [];
  		var iCount = Math.min(aValues.length, iMax);
  
  		if(bSeparatorBefore && iCount > 0){
  			oLb.addItem(new sap.ui.core.SeparatorItem());
  		}
  
  		for(var i=0; i<iCount; i++){
  			//oLb.addAggregation("items", new sap.ui.core.ListItem({text: aSug[i]}), true);
  			oLb.addItem(new sap.ui.core.ListItem({text: aValues[i]}));
  		}
  		return iCount;
  	};
  
  	var iHistoryCount = addToListbox(oLb, this.getParent()._oHistory.get(sSuggestVal), this.getParent().getMaxHistoryItems(), false);
  
  	var iSuggestCount = addToListbox(oLb,
  			sSuggestVal && sSuggestVal.length >= this.getParent().getStartSuggestion() ? this._mSuggestions[sSuggestVal] : [],
  			this.getParent().getMaxSuggestionItems(),
  			iHistoryCount > 0);
  
  	if(iHistoryCount <= 0 && iSuggestCount == 0) {
  		oLb.addItem(new sap.ui.core.ListItem({text: getText("SEARCHFIELD_NO_ITEMS"), enabled: false}));
  		bEmpty = true;
  	}
  
  	var iItemsLength = oLb.getItems().length;
  	var iMaxPopupItems = this.getMaxPopupItems();
  	oLb.setVisibleItems(iMaxPopupItems < iItemsLength ? iMaxPopupItems : iItemsLength);
  	oLb.setSelectedIndex(-1);
  	oLb.setMinWidth(jQuery(this.getDomRef()).rect().width + "px");
  	oLb.rerender();
  	return bEmpty;
  },
  
  _prepareOpen : function() {},
  
  _open : function() {
  	sap.ui.commons.ComboBox.prototype._open.apply(this, [0]);
  },
  
  _rerenderListBox : function(){
  	return this._updateList(this._aSuggestValues.length > 0 ? this._aSuggestValues[this._aSuggestValues.length-1] : null);
  },
  
  _checkChange : function(oEvent, bImmediate, bDoNotFireSearch) {
  	this.getParent().fireSearch({noFocus:bDoNotFireSearch});
  },
  
  onsapfocusleave : function(oEvent) {
  	if(oEvent.relatedControlId === this._getListBox().getId()){
  		this.focus();
  		return;
  	}
  	this._checkChange(oEvent, true, true);
  },
  
  onfocusout : function(oEvent) {
  	if(this.getEditable() && this.getEnabled() && this.getRenderer().onblur) {
  		this.getRenderer().onblur(this);
  	}
  	this._checkChange(oEvent, true, true);
  },
  
  onsapshow : function(oEvent){
  	if(this.getParent().hasListExpander()){
  		sap.ui.commons.ComboBox.prototype.onsapshow.apply(this, arguments);
  	}else{
  		oEvent.preventDefault();
  		oEvent.stopImmediatePropagation();
  	}
  },
  
  _handleSelect : function(oControlEvent) {
  	var oItem = sap.ui.commons.ComboBox.prototype._handleSelect.apply(this, arguments);
  	if(oItem && oItem.getEnabled()) {
  		this.getParent().fireSearch();
  	}
  },
  
  // extend ComboBoxRenderer
  renderer : {
    
    renderOuterContentBefore : function(oRM, oCtrl){
    	if(oCtrl.getParent().hasListExpander()){
    		sap.ui.commons.ComboBoxRenderer.renderOuterContentBefore.apply(this, arguments);
    	}
    	_renderSearchIcon.apply(this, arguments);
    
    	if(oCtrl.getParent().getSearchProvider() && oCtrl.getParent().getSearchProvider().getIcon()){
    		oRM.write("<div");
    		oRM.writeAttributeEscaped('id', oCtrl.getId() + '-providerico');
    		oRM.writeAttribute('unselectable', 'on');
    		if(sap.ui.getCore().getConfiguration().getAccessibility()){
    			oRM.writeAttribute("role", "presentation");
    		}
    		oRM.addClass("sapUiSearchFieldProvIco");
    		oRM.writeClasses();
    		oRM.write("><img src=\""+oCtrl.getParent().getSearchProvider().getIcon()+"\"/></div>");
    	}
    },
    
    renderOuterAttributes : function(oRM, oCtrl) {
    	sap.ui.commons.ComboBoxRenderer.renderOuterAttributes.apply(this, arguments);
    	oRM.addClass("sapUiSearchFieldCb");
    	if(oCtrl.getParent().getSearchProvider() && oCtrl.getParent().getSearchProvider().getIcon()){
    		oRM.addClass("sapUiSearchFieldCbProv");
    	}
    },
    
    renderInnerAttributes : function(oRM, oCtrl) {
    	if (!sap.ui.Device.os.ios) { //on iOS the input is not focused if type search
    		oRM.writeAttribute("type", "search");
    	}
    	if(isMobile()){
    		oRM.writeAttribute('autocapitalize', 'off');
    		oRM.writeAttribute('autocorrect', 'off');
    	}
    }
  }
  
});

}());

}; // end of sap/ui/commons/SearchField.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.TextArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.TextArea.
jQuery.sap.declare("sap.ui.commons.TextArea");




/**
 * Constructor for a new TextArea.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getCols cols} : int</li>
 * <li>{@link #getRows rows} : int</li>
 * <li>{@link #getWrapping wrapping} : sap.ui.core.Wrapping</li>
 * <li>{@link #getCursorPos cursorPos} : int</li>
 * <li>{@link #getExplanation explanation} : string</li>
 * <li>{@link #getLabeledBy labeledBy} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.TextField#constructor sap.ui.commons.TextField}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Control to enter or display multible row text.
 * @extends sap.ui.commons.TextField
 *
 * @author  
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.TextArea
 */
sap.ui.commons.TextField.extend("sap.ui.commons.TextArea", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"cols" : {type : "int", group : "Dimension", defaultValue : null},
		"rows" : {type : "int", group : "Dimension", defaultValue : null},
		"wrapping" : {type : "sap.ui.core.Wrapping", group : "Appearance", defaultValue : null},
		"cursorPos" : {type : "int", group : "Appearance", defaultValue : null},
		"explanation" : {type : "string", group : "Misc", defaultValue : null},
		"labeledBy" : {type : "string", group : "Identification", defaultValue : null, deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.TextArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.TextArea.extend
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Height of text field. When it is set (CSS-size such as % or px), this is the exact size.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.TextArea#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextArea#setHeight
 * @function
 */


/**
 * Getter for property <code>cols</code>.
 * Number of Columns. Cols means number of characters per row. This proprty is only used if Width is not used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>cols</code>
 * @public
 * @name sap.ui.commons.TextArea#getCols
 * @function
 */

/**
 * Setter for property <code>cols</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iCols  new value for property <code>cols</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextArea#setCols
 * @function
 */


/**
 * Getter for property <code>rows</code>.
 * Number of Rows. This proprty is only used if Height is not used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>rows</code>
 * @public
 * @name sap.ui.commons.TextArea#getRows
 * @function
 */

/**
 * Setter for property <code>rows</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iRows  new value for property <code>rows</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextArea#setRows
 * @function
 */


/**
 * Getter for property <code>wrapping</code>.
 * Text wrapping. Possible values are: Soft, Hard, Off.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.Wrapping} the value of property <code>wrapping</code>
 * @public
 * @name sap.ui.commons.TextArea#getWrapping
 * @function
 */

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.Wrapping} oWrapping  new value for property <code>wrapping</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextArea#setWrapping
 * @function
 */


/**
 * Getter for property <code>cursorPos</code>.
 * Position of cursor, e.g., to let the user re-start typing at the same position as before the server roundtrip
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>cursorPos</code>
 * @public
 * @name sap.ui.commons.TextArea#getCursorPos
 * @function
 */

/**
 * Setter for property <code>cursorPos</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iCursorPos  new value for property <code>cursorPos</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextArea#setCursorPos
 * @function
 */


/**
 * Getter for property <code>explanation</code>.
 * text which appears, in case quick-help is switched on
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>explanation</code>
 * @public
 * @name sap.ui.commons.TextArea#getExplanation
 * @function
 */

/**
 * Setter for property <code>explanation</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sExplanation  new value for property <code>explanation</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.TextArea#setExplanation
 * @function
 */


/**
 * Getter for property <code>labeledBy</code>.
 * ID of label control
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>labeledBy</code>
 * @public
 * @deprecated Since version 1.5.2. 
 * Please use association AriaLabelledBy instead.
 * @name sap.ui.commons.TextArea#getLabeledBy
 * @function
 */

/**
 * Setter for property <code>labeledBy</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabeledBy  new value for property <code>labeledBy</code>
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.5.2. 
 * Please use association AriaLabelledBy instead.
 * @name sap.ui.commons.TextArea#setLabeledBy
 * @function
 */


// Start of sap\ui\commons\TextArea.js
///**
// * This file defines the control behavior.
// */
//.TextArea.prototype.init = function(){
//   // do something for initialization...
//};

/**
 * Exit handler
 */
sap.ui.commons.TextArea.prototype.exit = function() {
	this._detachEventHandler();
};

/**
 * Event handler called before control is rendered
 */
sap.ui.commons.TextArea.prototype.onBeforeRendering = function() {
	this._detachEventHandler();
};

/**
 * Event handler called after control is rendered
 */
sap.ui.commons.TextArea.prototype.onAfterRendering = function () {
	this._attachEventHandler();
};

/**
 * attaches the native event handlers
 */
sap.ui.commons.TextArea.prototype._attachEventHandler = function() {
	var $this = this.$();
	this.pasteHandlerId = $this.bind('paste', jQuery.proxy(this.handlePaste, this));
	this.inputHandlerId = $this.bind('input', jQuery.proxy(this.handleInput, this)); // for FF
	this.proChHandlerId = $this.bind('propertychange', jQuery.proxy(this.handleInput, this)); // for IE
};

/**
 * detaches the native event handlers
 */
sap.ui.commons.TextArea.prototype._detachEventHandler = function() {
	// Unbind events
	var $this = this.$();
	if(this.pasteHandlerId){
		$this.unbind('paste', this.handlePaste);
		this.pasteHandlerId = null;
	}
	if(this.inputHandlerId){
		$this.unbind('input', this.handlePaste);
		this.inputHandlerId = null;
	}
	if(this.proChHandlerId){
		$this.unbind('propertychange', this.handlePaste);
		this.proChHandlerId = null;
	}
};

/**
 * Event handler called when control is getting the focus
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.onfocusin = function(oEvent){

	sap.ui.commons.TextField.prototype.onfocusin.apply(this, arguments);

	var oFocusDomRef = this.getFocusDomRef();

	// Set focus flag
	this.bFocus = true;

	oEvent.preventDefault();
};

/*
 * Event handler called when control is loosing the focus
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.onsapfocusleave = function(oEvent){

	sap.ui.commons.TextField.prototype.onsapfocusleave.apply(this, arguments);

	var oFocusDomRef = this.getFocusDomRef();
	if (oFocusDomRef && !!sap.ui.Device.browser.firefox) { // Only for FF -> deselect text
		if (oFocusDomRef.selectionStart != oFocusDomRef.selectionEnd){
			jQuery(oFocusDomRef).selectText(oFocusDomRef.selectionStart, oFocusDomRef.selectionStart);
		}
	}

	// Clear focus flag
	this.bFocus = false;

	oEvent.preventDefault();
	oEvent.stopPropagation();
};

/**
 * Returns an object representing the serialized focus information.
 * Overwrites the standard function.
 * @type Object
 * @return An object representing the serialized focus information.
 * @private
 */
sap.ui.commons.TextArea.prototype.getFocusInfo = function () {
	return {id:this.getId(), cursorPos:this.getCursorPos()};
};

/**
 * Applies the focus info.
 * Overwrites the standard function.
 * @param {object} oFocusInfo
 * @private
 */
sap.ui.commons.TextArea.prototype.applyFocusInfo = function (oFocusInfo) {
	this.focus();
	var oFocusDomRef = this.getFocusDomRef();
	jQuery(oFocusDomRef).cursorPos(this.getCursorPos());
};

/**
 * Event handler called on Key press
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.onkeypress = function(oEvent){

	sap.ui.commons.TextField.prototype.onkeypress.apply(this, arguments);

	if(!this.getEditable() || !this.getEnabled() || this.getMaxLength() <= 0){
		return;
	}

	var oKC = jQuery.sap.KeyCodes;
	var iKC = oEvent.which || oEvent.keyCode;
	var oDom = this.getDomRef();

	// Check if some text is selected since this is different in Internet Explorer and FireFox
	// If some text is selected, it is overwritten by a key press -> Value will not get too large
	if(document.selection){ //IE
		var oSel = document.selection.createRange();
		if (oSel.text.length > 0){
			return
		}
	}else{ // FF
		if(oDom.selectionStart != oDom.selectionEnd){
			return;
		}
	}

	// Only real characters and ENTER, no backspace
	if(oDom.value.length >= this.getMaxLength() && ( iKC > oKC.DELETE || iKC == oKC.ENTER || iKC == oKC.SPACE) && !oEvent.ctrlKey){
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}

};

/**
 * Event handler called on Key up
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.onkeyup = function(oEvent){

// save cursor position
	var oDomRef = this.getDomRef();
	this.setProperty('cursorPos', jQuery(oDomRef).cursorPos(), true); // no re-rendering!

	// call keyup function of TextField to get liveChange event
	sap.ui.commons.TextField.prototype.onkeyup.apply(this, arguments);

};

/**
 * Event handler called when the enter key is pressed.
 * @see sap.ui.commons.TextField#onsapenter
 * @private
 */
sap.ui.commons.TextArea.prototype.onsapenter = function (oEvent) {
// stop bubbling of event when in the textarea so other actions of parent control handlers won't be called.
// don't do a prevent default because we want the default browser behavior...e.g. new line when pressing enter in the text area.
	oEvent.stopPropagation();
}

/**
 * Event handler called on Mouse up
 *
 * @param {jQuery.Event} oEvent
 * @private
 */;
sap.ui.commons.TextArea.prototype.onmouseup = function(oEvent){

// Save cursor position
	var oDomRef = this.getDomRef();
	this.setProperty('cursorPos', jQuery(oDomRef).cursorPos(), true); // no re-rendering!

};

/**
 * Event handler called on Paste
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.handlePaste = function(oEvent){

	if(!this.getEditable() || !this.getEnabled() || this.getMaxLength() <= 0){
		return;
	}

	var oDom = this.getDomRef();

	if(oDom.value.length >= this.getMaxLength() && oDom.selectionStart == oDom.selectionEnd){
		// already maxLenght reached and nothing selected -> no paste possible
		oEvent.preventDefault();
		oEvent.stopPropagation();
	}

};

/**
 * Event handler called on Input
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.ui.commons.TextArea.prototype.handleInput = function(oEvent){

	if (oEvent.originalEvent.propertyName && oEvent.originalEvent.propertyName.toLowerCase () != "value") {
		// In Internet Explorer, check for correct property
		return;
	}

	if(!this.getEditable() || !this.getEnabled() || this.getMaxLength() <= 0){
		return;
	}

	var oDom = this.getDomRef();

	// If text is entered or pasted, cut it if is too long
	if(oDom.value.length > this.getMaxLength()){
		oDom.value = oDom.value.substring(0,this.getMaxLength());
	}
	// The result is if text is pasted via clipboard or drag and drop the result is cut to fit the
	// maxLength. It's not easy to cut only the pasted text because in FireFox there is no access to the clipboard.
	// An option would be to store the old value after each change and compare it after each change.
	// Then the pasted text must be determined and cut. But this would need a lot of effort and script on
	// every change.

};

/**
 * Property setter for MaxLength
 *
 * @param {int} iMaxLength
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setMaxLength = function(iMaxLength) {

	this.setProperty('maxLength', iMaxLength, true); // No re-rendering

	var oDom = this.getDomRef();

	if(oDom && oDom.value.length > iMaxLength && iMaxLength > 0 ){
		oDom.value = oDom.value.substring(0,iMaxLength);
	}

	var sValue = this.getValue();
	if(sValue.length > iMaxLength && iMaxLength > 0 ){
		this.setProperty('value', sValue.substring(0,iMaxLength));
	}

	return this;
};

/**
 * Property setter for the cursor position
 *
 * @param {int} iCursorPos
 * @return {sap.ui.commons.TextArea} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.TextArea.prototype.setCursorPos = function(iCursorPos) {

	this.setProperty('cursorPos', iCursorPos, true); // no re-rendering!

	if(this.bFocus){
		jQuery(this.getDomRef()).cursorPos(iCursorPos);
	}

	return this;
};
}; // end of sap/ui/commons/TextArea.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.AbsoluteLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.AbsoluteLayout.
jQuery.sap.declare("sap.ui.commons.layout.AbsoluteLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new layout/AbsoluteLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getVerticalScrolling verticalScrolling} : sap.ui.core.Scrolling (default: sap.ui.core.Scrolling.Hidden)</li>
 * <li>{@link #getHorizontalScrolling horizontalScrolling} : sap.ui.core.Scrolling (default: sap.ui.core.Scrolling.Hidden)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPositions positions} <strong>(default aggregation)</strong> : sap.ui.commons.layout.PositionContainer[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * The Absolute Layout positions its child controls absolutely
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout
 */
sap.ui.core.Control.extend("sap.ui.commons.layout.AbsoluteLayout", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setPositionOfChild", "destroyContent", "indexOfContent", "removeAllContent", "removeContent", "insertContent", "addContent", "getContent"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"verticalScrolling" : {type : "sap.ui.core.Scrolling", group : "Behavior", defaultValue : sap.ui.core.Scrolling.Hidden},
		"horizontalScrolling" : {type : "sap.ui.core.Scrolling", group : "Behavior", defaultValue : sap.ui.core.Scrolling.Hidden}
	},
	defaultAggregation : "positions",
	aggregations : {
    	"positions" : {type : "sap.ui.commons.layout.PositionContainer", multiple : true, singularName : "position"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.AbsoluteLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.AbsoluteLayout.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible controls are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The overall width of the control. When not set, 100% is automatically set.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The overall height of the control. When not set, 100% is automatically set.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#setHeight
 * @function
 */


/**
 * Getter for property <code>verticalScrolling</code>.
 * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
 *
 * Default value is <code>Hidden</code>
 *
 * @return {sap.ui.core.Scrolling} the value of property <code>verticalScrolling</code>
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#getVerticalScrolling
 * @function
 */

/**
 * Setter for property <code>verticalScrolling</code>.
 *
 * Default value is <code>Hidden</code> 
 *
 * @param {sap.ui.core.Scrolling} oVerticalScrolling  new value for property <code>verticalScrolling</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#setVerticalScrolling
 * @function
 */


/**
 * Getter for property <code>horizontalScrolling</code>.
 * 'Auto', 'Scroll', 'Hidden', and 'None' are the available values for setting the vertical scrolling mode.
 *
 * Default value is <code>Hidden</code>
 *
 * @return {sap.ui.core.Scrolling} the value of property <code>horizontalScrolling</code>
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#getHorizontalScrolling
 * @function
 */

/**
 * Setter for property <code>horizontalScrolling</code>.
 *
 * Default value is <code>Hidden</code> 
 *
 * @param {sap.ui.core.Scrolling} oHorizontalScrolling  new value for property <code>horizontalScrolling</code>
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#setHorizontalScrolling
 * @function
 */


/**
 * Getter for aggregation <code>positions</code>.<br/>
 * Positioned child controls within the layout
 * 
 * <strong>Note</strong>: this is the default aggregation for layout/AbsoluteLayout.
 * @return {sap.ui.commons.layout.PositionContainer[]}
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#getPositions
 * @function
 */


/**
 * Inserts a position into the aggregation named <code>positions</code>.
 *
 * @param {sap.ui.commons.layout.PositionContainer}
 *          oPosition the position to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the position should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the position is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the position is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#insertPosition
 * @function
 */

/**
 * Adds some position <code>oPosition</code> 
 * to the aggregation named <code>positions</code>.
 *
 * @param {sap.ui.commons.layout.PositionContainer}
 *            oPosition the position to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#addPosition
 * @function
 */

/**
 * Removes an position from the aggregation named <code>positions</code>.
 *
 * @param {int | string | sap.ui.commons.layout.PositionContainer} vPosition the position to remove or its index or id
 * @return {sap.ui.commons.layout.PositionContainer} the removed position or null
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#removePosition
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>positions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.layout.PositionContainer[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#removeAllPositions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.layout.PositionContainer</code> in the aggregation named <code>positions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.layout.PositionContainer}
 *            oPosition the position whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#indexOfPosition
 * @function
 */
	

/**
 * Destroys all the positions in the aggregation 
 * named <code>positions</code>.
 * @return {sap.ui.commons.layout.AbsoluteLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.AbsoluteLayout#destroyPositions
 * @function
 */


/**
 * Allows to set or change the position information of the given child control
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.setPositionOfChild
 * @function
 * @param {sap.ui.core.Control} 
 *         oControl
 *         The child control for which to change the position information; if empty or not aggregated, nothing is changed
 * @param {object} 
 *         oPos
 *         JSON-like object which defines the position of the child control. The object is expected to have one or more from the attribute set
 *         top, bottom, left, right; each with a value of type sap.ui.core.CSSSize.
 *         If no object is given, the default is used which is left=0px,right=0px.

 * @type boolean
 * @public
 */


/**
 * Destroys all aggregated position containers and their child controls. Returns 'this' to allow method chaining.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.destroyContent
 * @function

 * @type sap.ui.commons.layout.AbsoluteLayout
 * @public
 */


/**
 * Checks for the provided sap.ui.core.Control in the aggregated position containers, and returns the index of the container in the positions aggregation
 * if found, or '-1' otherwise.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.indexOfContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oContent
 *         The content of which the index is looked for

 * @type int
 * @public
 */


/**
 * Removes all aggregated position containers. Returns an array of the controls contained in the removed position containers (might be empty).
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.removeAllContent
 * @function

 * @type sap.ui.core.Control[]
 * @public
 */


/**
 * Removes the given control and its corresponding position container from the aggregation named 'positions'.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.removeContent
 * @function
 * @param {object} 
 *         oContent
 *         The content control to remove, its ID, or the index of the corresponding position container in the 'positions' aggregation.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Inserts the given control and a corresponding position container into the aggregation named 'positions'. Returns 'this' to allow method chaining.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.insertContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oContent
 *         The content to insert; if empty, nothing is inserted
 * @param {int} 
 *         iIndex
 *         The '0'-based index where the content shall be inserted at. For a negative value of iIndex, the content is inserted at position '0';
 *         for a value greater than the current size of the aggregation, the content is inserted at the last position.
 * @param {object} 
 *         oPos
 *         JSON-like object which defines the position of the child control within the layout. The object is expected to have one or more
 *         from the attribute set top, bottom, left, right; each with a value of type sap.ui.core.CSSSize. If no object is given, the default is left=0px,right=0px.

 * @type sap.ui.commons.layout.AbsoluteLayout
 * @public
 */


/**
 * Adds the given control and a corresponding position container into the aggregation named 'positions'. Returns 'this' to allow method chaining.
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.addContent
 * @function
 * @param {sap.ui.core.Control} 
 *         oContent
 *         The content to add; if empty, nothing is inserted.
 * @param {object} 
 *         oPos
 *         JSON-like object which defines the position of the child control in the layout. The object is expected to have one or more from the attribute set
 *         top, bottom, left, right; each with a value of type sap.ui.core.CSSSize. If no object is given, the default is left=0px,right=0px

 * @type sap.ui.commons.layout.AbsoluteLayout
 * @public
 */


/**
 * Returns an array of the controls contained in the aggregated position containers (might be empty).
 *
 * @name sap.ui.commons.layout.AbsoluteLayout.prototype.getContent
 * @function

 * @type sap.ui.core.Control[]
 * @public
 */


// Start of sap\ui\commons\layout\AbsoluteLayout.js


(function() {

//**** Overridden API Functions ****

sap.ui.commons.layout.AbsoluteLayout.prototype.setWidth = function(sWidth) {
	return setProp(this, "width", sWidth, "LYT_SIZE");
};


sap.ui.commons.layout.AbsoluteLayout.prototype.setHeight = function(sHeight) {
	return setProp(this, "height", sHeight, "LYT_SIZE");
};


sap.ui.commons.layout.AbsoluteLayout.prototype.setVerticalScrolling = function(oVerticalScrolling) {
	return setProp(this, "verticalScrolling", oVerticalScrolling, "LYT_SCROLL");
};


sap.ui.commons.layout.AbsoluteLayout.prototype.setHorizontalScrolling = function(oHorizontalScrolling) {
	return setProp(this, "horizontalScrolling", oHorizontalScrolling, "LYT_SCROLL");
};


sap.ui.commons.layout.AbsoluteLayout.prototype.insertPosition = function(oPosition, iIndex) {
	var bHasDomRef = !!this.getDomRef();
	this.insertAggregation("positions", oPosition, iIndex, bHasDomRef);
	if(bHasDomRef && oPosition && oPosition.getControl()) {
		this.contentChanged(oPosition, "CTRL_ADD");
	}
	return this;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.addPosition = function(oPosition) {
	var bHasDomRef = !!this.getDomRef();
	this.addAggregation("positions", oPosition, bHasDomRef);
	if(bHasDomRef && oPosition && oPosition.getControl()) {
		this.contentChanged(oPosition, "CTRL_ADD");
	}
	return this;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.removePosition = function(vPosition) {
	var bHasDomRef = !!this.getDomRef();
	var oRemovedPosition = this.removeAggregation("positions", vPosition, bHasDomRef);
	if(oRemovedPosition){
		cleanup([oRemovedPosition]);
		this.contentChanged(oRemovedPosition, "CTRL_REMOVE");
	}
	return oRemovedPosition;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.removeAllPositions = function() {
	cleanup(this.getPositions());
	var bHasDomRef = !!this.getDomRef();
	var aRemovedPositions = this.removeAllAggregation("positions", bHasDomRef);
	if(bHasDomRef) {
		this.contentChanged(aRemovedPositions, "CTRL_REMOVE_ALL");
	}
	return aRemovedPositions;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.destroyPositions = function() {
	cleanup(this.getPositions());
	var bHasDomRef = !!this.getDomRef();
	this.destroyAggregation("positions", bHasDomRef);
	if(bHasDomRef) {
		this.contentChanged(null, "CTRL_REMOVE_ALL");
	}
	return this;
};



//**** Additional API Functions ****

sap.ui.commons.layout.AbsoluteLayout.prototype.getContent = function() {
	var aControls = [];
	var aPositions = this.getPositions();
	for(var index=0; index<aPositions.length; index++) {
		aControls.push(aPositions[index].getControl());
	}
	return aControls;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.addContent = function(oContent, oPos) {
	var oPosition = sap.ui.commons.layout.PositionContainer.createPosition(oContent, oPos);
	this.addPosition(oPosition);
	return this;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.insertContent = function(oContent, iIndex, oPos) {
	var oPosition = sap.ui.commons.layout.PositionContainer.createPosition(oContent, oPos);
	this.insertPosition(oPosition, iIndex);
	return this;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.removeContent = function(vContent) {
	var iIndex = vContent;
	if (typeof(vContent) == "string") { // ID of the element is given
		vContent = sap.ui.getCore().byId(vContent);
	}
	if (typeof(vContent) == "object") { // the element itself is given or has just been retrieved
		iIndex = this.indexOfContent(vContent);
	}
	if(iIndex >= 0 && iIndex < this.getContent().length) {
		this.removePosition(iIndex);
		return vContent;
	}
	return null;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.removeAllContent = function() {
	var aControls = this.getContent();
	this.removeAllPositions();
	return aControls;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.indexOfContent = function(oContent) {
	var aControls = this.getContent();
	for(var index=0; index<aControls.length; index++) {
		if(oContent === aControls[index]){
			return index;
		}
	}
	return -1;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.destroyContent = function() {
	this.destroyPositions();
	return this;
};


sap.ui.commons.layout.AbsoluteLayout.prototype.setPositionOfChild = function(oControl, oPos) {
	var iIdx = this.indexOfContent(oControl);
	if(iIdx >= 0){
		var oPosition = this.getPositions()[iIdx];
		oPosition.updatePosition(oPos);
		return true;
	}
	return false;
};



//**** Other Functions ****

/**
 * @see sap.ui.commons.layout.PositionContainer#getComputedPosition
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.getPositionOfChild = function(oControl){
	var iIdx = this.indexOfContent(oControl);
	if(iIdx >= 0){
		//Adapt when width/height attribute on control is set
		var oPosition = this.getPositions()[iIdx];
		return oPosition.getComputedPosition();
	}
	return {};
};


/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.exit = function(){
	cleanup(this.getPositions());
};


/**
 * Called by the Renderer before the control is rendered.
 * Attention: Do not mix it up with onBeforeRendering!
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.doBeforeRendering = function() {
	var aPositions = this.getPositions();
	if(!aPositions || aPositions.length == 0) {
		return;
	}

	for(var index=0; index<aPositions.length; index++) {
		var oPosition = aPositions[index];
		oPosition.reinitializeEventHandlers(true);
		adaptChildControl(oPosition, true);
	}
};


/**
 * Called after the control is rendered.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.onAfterRendering = function() {
	var aPositions = this.getPositions();
	if(!aPositions || aPositions.length == 0) {
		return;
	}

	for(var index=0; index<aPositions.length; index++) {
		aPositions[index].reinitializeEventHandlers();
	}
};


/**
 * Cleanup modifications of the given control.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.cleanUpControl = function(oControl) {
	if(oControl && oControl[SAVED_DELEGATOR]){
		oControl.removeDelegate(oControl[SAVED_DELEGATOR]);
		oControl[SAVED_DELEGATOR] = undefined;
	}
};


/**
 * Handles changes on an aggregated position container when it is already in the Dom.
 *
 * @private
 */
sap.ui.commons.layout.AbsoluteLayout.prototype.contentChanged = function(oPosition, sChangeType) {
	switch(sChangeType) {
		case "CTRL_POS":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionStyles(oPosition);
			adaptChildControl(oPosition);
			oPosition.reinitializeEventHandlers();
			break;
		case "CTRL_CHANGE":
			adaptChildControl(oPosition, true);
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionedControl(oPosition);
			oPosition.reinitializeEventHandlers();
			break;
		case "CTRL_REMOVE":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.removePosition(oPosition);
			oPosition.reinitializeEventHandlers(true);
			break;
		case "CTRL_REMOVE_ALL":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.removeAllPositions(this);
			var aPositions = oPosition;
			if(aPositions) {
				for(var index=0; index<aPositions.length; index++) {
					aPositions[index].reinitializeEventHandlers(true);
				}
			}
			break;
		case "CTRL_ADD":
			adaptChildControl(oPosition, true);
			sap.ui.commons.layout.AbsoluteLayoutRenderer.insertPosition(this, oPosition);
			oPosition.reinitializeEventHandlers();
			break;
		case "LYT_SCROLL":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updateLayoutScolling(this);
			break;
		case "LYT_SIZE":
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updateLayoutSize(this);
			break;
	}
};



//**** Private Helper Functions ****

//Constant which defines the "save location" for the used delegator object
var SAVED_DELEGATOR = "__absolutelayout__delegator";

/**
 * Cleanup modifications of all child controls of the given positions.
 *
 * @private
 */
var cleanup = function(aPositions) {
	for(var index=0; index<aPositions.length; index++) {
		var oPosition = aPositions[index];
		var oChildControl = oPosition.getControl();
		if(oChildControl) {
			sap.ui.commons.layout.AbsoluteLayout.cleanUpControl(oChildControl);
		}
	}
};


/**
 * (Re-)Initialize listening to child rerendering
 *
 * @private
 */
var adaptChildControl = function(oPosition, bRegisterOnly) {
	var oChildControl = oPosition.getControl();
	if(oChildControl) {
		sap.ui.commons.layout.AbsoluteLayout.cleanUpControl(oChildControl);

		if(!bRegisterOnly) {
			adaptControlSize(oChildControl);
		}

		var oDelegate = (function(oControl) {
			return {
				onAfterRendering: function(){
					adaptControlSize(oControl);
				}
			};
		}(oChildControl));

		oChildControl[SAVED_DELEGATOR] = oDelegate;
		oChildControl.addDelegate(oDelegate, true);
	}
};


/**
 * Adapt the sizes of controls if necessary.
 *
 * @private
 */
var adaptControlSize = function(oControl){
	var bAdapted = false;
	if(oControl.getParent() && oControl.getParent().getComputedPosition) {
		var oPos = oControl.getParent().getComputedPosition();
		if(oPos.top && oPos.bottom || oPos.height){
			jQuery(oControl.getDomRef()).css("height", "100%");
			bAdapted = true;
		}
		if(oPos.left && oPos.right || oPos.width){
			jQuery(oControl.getDomRef()).css("width", "100%");
			bAdapted = true;
		}
		if(bAdapted) {
			sap.ui.commons.layout.AbsoluteLayoutRenderer.updatePositionStyles(oControl.getParent());
		}
	}
	return bAdapted;
};


/**
 * Sets the value of the given property and triggers Dom change if
 * possible.
 *
 * @private
 */
var setProp = function(oThis, sProp, oValue, sChangeType) {
	var bHasDomRef = !!oThis.getDomRef();
	oThis.setProperty(sProp, oValue, bHasDomRef);
	if(bHasDomRef) {
		oThis.contentChanged(null, sChangeType);
	}
	return oThis;
};


}());
}; // end of sap/ui/commons/layout/AbsoluteLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.layout.MatrixLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.layout.MatrixLayout.
jQuery.sap.declare("sap.ui.commons.layout.MatrixLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new layout/MatrixLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getLayoutFixed layoutFixed} : boolean (default: true)</li>
 * <li>{@link #getColumns columns} : int</li>
 * <li>{@link #getWidths widths} : sap.ui.core.CSSSize[]</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getRows rows} <strong>(default aggregation)</strong> : sap.ui.commons.layout.MatrixLayoutRow[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * <p>
 * A matrix layout arranges controls in a grid structure, using rows which
 * need not have the same number of cells.
 * </p>
 * 
 * <p>
 * It uses predefined cell classes that guarantee appropriate distances
 * between cells in the grid. The cell's <code>vGutter</code> property lets
 * you specify additional horizontal distances easily. You can set these
 * additional distances (known as gutters) with or without separators.
 * The distance for each cell is specified by assigning a specific
 * enumeration value of the class <code>LayoutCellSeparator</code> of the
 * matrix data object.
 * </p>
 * 
 * <p>
 * You should <b>avoid nesting</b> matrix layouts. You should only use a
 * matrix layout if you need to align controls horizontally across rows.
 * </p>
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @name sap.ui.commons.layout.MatrixLayout
 */
sap.ui.core.Control.extend("sap.ui.commons.layout.MatrixLayout", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"createRow"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Behavior", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"layoutFixed" : {type : "boolean", group : "Appearance", defaultValue : true},
		"columns" : {type : "int", group : "Appearance", defaultValue : null},
		"widths" : {type : "sap.ui.core.CSSSize[]", group : "Appearance", defaultValue : null}
	},
	defaultAggregation : "rows",
	aggregations : {
    	"rows" : {type : "sap.ui.commons.layout.MatrixLayoutRow", multiple : true, singularName : "row"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.layout.MatrixLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.layout.MatrixLayout.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * 
 * Determines whether the matrix layout, including all its content, is
 * visible. An invisible control will not be rendered.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * CSS width of the matrix layout.
 * If the LayoutFixed = true a adequate width should be provided.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * 
 * CSS height of the matrix layout.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#setHeight
 * @function
 */


/**
 * Getter for property <code>layoutFixed</code>.
 * Sets the table layout. If fixed the width parameter of a column has priority, if not the width of the content of the colums has priority.
 * The default is "fixed".
 * If the fixed layout is used a adequate width of the MatrixLayout should be provided. Otherwise the column width displayed could be different than the given ones because of browser dependend optimazations.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>layoutFixed</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#getLayoutFixed
 * @function
 */

/**
 * Setter for property <code>layoutFixed</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bLayoutFixed  new value for property <code>layoutFixed</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#setLayoutFixed
 * @function
 */


/**
 * Getter for property <code>columns</code>.
 * Number of columns. If not specified, the number of columns will be determined from the given cells.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>columns</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#getColumns
 * @function
 */

/**
 * Setter for property <code>columns</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iColumns  new value for property <code>columns</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#setColumns
 * @function
 */


/**
 * Getter for property <code>widths</code>.
 * Widths of the columns. Use an array to define the widths of the columns.
 * If a column shall have an automatical sizing enter "auto" for this column width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize[]} the value of property <code>widths</code>
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#getWidths
 * @function
 */

/**
 * Setter for property <code>widths</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize[]} aWidths  new value for property <code>widths</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#setWidths
 * @function
 */


/**
 * Getter for aggregation <code>rows</code>.<br/>
 * 
 * The matrix layout's individual rows.
 * 
 * 
 * <strong>Note</strong>: this is the default aggregation for layout/MatrixLayout.
 * @return {sap.ui.commons.layout.MatrixLayoutRow[]}
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#getRows
 * @function
 */


/**
 * Inserts a row into the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutRow}
 *          oRow the row to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the row should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the row is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the row is inserted at 
 *             the last position        
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#insertRow
 * @function
 */

/**
 * Adds some row <code>oRow</code> 
 * to the aggregation named <code>rows</code>.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutRow}
 *            oRow the row to add; if empty, nothing is inserted
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#addRow
 * @function
 */

/**
 * Removes an row from the aggregation named <code>rows</code>.
 *
 * @param {int | string | sap.ui.commons.layout.MatrixLayoutRow} vRow the row to remove or its index or id
 * @return {sap.ui.commons.layout.MatrixLayoutRow} the removed row or null
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#removeRow
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>rows</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.commons.layout.MatrixLayoutRow[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#removeAllRows
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.commons.layout.MatrixLayoutRow</code> in the aggregation named <code>rows</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.commons.layout.MatrixLayoutRow}
 *            oRow the row whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#indexOfRow
 * @function
 */
	

/**
 * Destroys all the rows in the aggregation 
 * named <code>rows</code>.
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.layout.MatrixLayout#destroyRows
 * @function
 */


/**
 * Creates a new matrix layout row and appends it to this matrix layout.
 *
 * @name sap.ui.commons.layout.MatrixLayout.prototype.createRow
 * @function
 * @param {sap.ui.core.Control} 
 *         oControls
 *         Each argument must be either a matrix layout cell, which is added to the row "as is", or an arbitrary content control, which is wrapped with a new (default) matrix layout cell first and then added to the row.
 *         Supports a variable number of arguments!

 * @type sap.ui.commons.layout.MatrixLayout
 * @public
 */


// Start of sap\ui\commons\layout\MatrixLayout.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained




sap.ui.core.EnabledPropagator.call(sap.ui.commons.layout.MatrixLayout.prototype, true, /* legacy mode */ true);

/**
 * Creates a new matrix layout row and appends it to this matrix layout.
 * Each argument must be either a matrix layout cell, which is added to the row
 * "as is", or an arbitrary content control, which is wrapped with a new
 * (default) matrix layout cell first and then added to the row.
 * @param {sap.ui.commons.layout.MatrixLayoutCell|sap.ui.core.Control|string} rowContent to add
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.createRow = function() {
	var oRow = new sap.ui.commons.layout.MatrixLayoutRow();
	this.addRow(oRow);
	for (var i = 0; i < arguments.length; i++) {
		var oContent = arguments[i];
		var oCell;
		if (oContent instanceof sap.ui.commons.layout.MatrixLayoutCell) {
			// matrix layout cell given, use as is
			oCell = oContent;
		} else if (oContent instanceof sap.ui.core.Control) {
			// any control given, wrap with matrix layout cell first
			   oCell = new sap.ui.commons.layout.MatrixLayoutCell({content : oContent});
		} else if (oContent instanceof Object && oContent.height) {
			oRow.setHeight(oContent.height);
		} else {
			// any string(?) given, display it
			var sText = oContent ? oContent.toString() : "";
				oCell = new sap.ui.commons.layout.MatrixLayoutCell({
					content : new sap.ui.commons.TextView({text : sText})});
		}
			oRow.addCell(oCell);
	}
	return this;
};

/*
 * Overwrites Setter for property <code>widths</code>.
 * Sets the widths of the columns. The values must be stored in an array to be used in renderer.
 * to be compatible with previous version also allow list of values.
 * @param {sap.ui.core.CSSSize[]} aWidths new value for property <code>widths</code>
 * @return {sap.ui.commons.layout.MatrixLayout} <code>this</code> to allow method chaining
 * @public
 */
sap.ui.commons.layout.MatrixLayout.prototype.setWidths = function( aWidths ) {

	var aSetWidths;

	if(!jQuery.isArray(aWidths)){
		// a list of values is used instead of an array -> use this as array
		aSetWidths = jQuery.makeArray(arguments);
	}else{
		aSetWidths = aWidths;
	}

	// set "auto" for empty values
	for ( var i = 0; i < aSetWidths.length; i++) {
		if (aSetWidths[i] == "" || !aSetWidths[i]) {
			aSetWidths[i] = "auto";
		}
	}

	this.setProperty("widths", aSetWidths);

	return this;
};
}; // end of sap/ui/commons/layout/MatrixLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.AutoComplete') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.commons.AutoComplete.
jQuery.sap.declare("sap.ui.commons.AutoComplete");




/**
 * Constructor for a new AutoComplete.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.commons.AutoComplete#event:suggest suggest} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.ComboBox#constructor sap.ui.commons.ComboBox}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * 
 * Textfield with list based text completion.
 * 
 * @extends sap.ui.commons.ComboBox
 * @implements sap.ui.commons.ToolbarItem
 *
 * @author SAP AG 
 * @version 1.22.8
 *
 * @constructor   
 * @public
 * @since 1.10.0
 * @name sap.ui.commons.AutoComplete
 */
sap.ui.commons.ComboBox.extend("sap.ui.commons.AutoComplete", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.commons.ToolbarItem"
	],
	publicMethods : [
		// methods
		"setFilterFunction"
	],

	// ---- control specific ----
	library : "sap.ui.commons",
	properties : {
		"enableScrolling" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"suggest" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.commons.AutoComplete with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.commons.AutoComplete.extend
 * @function
 */

sap.ui.commons.AutoComplete.M_EVENTS = {'suggest':'suggest'};


/**
 * Getter for property <code>enableScrolling</code>.
 * Whether scrolling should be enabled when the number of items is higher than maxPopupItems.
 * If set to false only the first n items (n=maxPopupItems) are shown.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @public
 * @name sap.ui.commons.AutoComplete#getEnableScrolling
 * @function
 */

/**
 * Setter for property <code>enableScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableScrolling  new value for property <code>enableScrolling</code>
 * @return {sap.ui.commons.AutoComplete} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AutoComplete#setEnableScrolling
 * @function
 */


/**
 * Fired when the user has changed the value and a suggestion list update should occur. 
 *
 * @name sap.ui.commons.AutoComplete#suggest
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.suggestValue The current value which was typed in.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'suggest' event of this <code>sap.ui.commons.AutoComplete</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.commons.AutoComplete</code>.<br/> itself. 
 *  
 * Fired when the user has changed the value and a suggestion list update should occur. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.commons.AutoComplete</code>.<br/> itself.
 *
 * @return {sap.ui.commons.AutoComplete} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AutoComplete#attachSuggest
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'suggest' event of this <code>sap.ui.commons.AutoComplete</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.commons.AutoComplete} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.commons.AutoComplete#detachSuggest
 * @function
 */

/**
 * Fire event suggest to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'suggestValue' of type <code>string</code> The current value which was typed in.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.commons.AutoComplete} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.commons.AutoComplete#fireSuggest
 * @function
 */


/**
 * Sets a custom filter function for items. Default is to check whether the item text begins with the typed value.
 *
 * @name sap.ui.commons.AutoComplete.prototype.setFilterFunction
 * @function

 * @type boolean
 * @public
 */


// Start of sap\ui\commons\AutoComplete.js
jQuery.sap.require('jquery.sap.strings'); // unlisted dependency retained


sap.ui.commons.AutoComplete._DEFAULTFILTER = function(sValue, oItem){
	if(this._skipFilter){ //Easy (currently internal) way to skip auto filtering
		return true;
	}
	return jQuery.sap.startsWithIgnoreCase(oItem.getText(), sValue);
};

sap.ui.commons.AutoComplete.prototype.init = function(){
	sap.ui.commons.ComboBox.prototype.init.apply(this, arguments);
	this.mobile = false;
	this._filter = sap.ui.commons.AutoComplete._DEFAULTFILTER;
};

sap.ui.commons.AutoComplete.prototype.exit = function() {
	if(this._oListBox){
		this._oListBox.removeAllItems();
	}
	sap.ui.commons.ComboBox.prototype.exit.apply(this, arguments);
};

/**
 * Sets a custom filter function for items. Default is to check whether the item text begins with the typed value.
 * 
 * Example:
 * <code>
 * function(sValue, oItem){
 *	  return jQuery.sap.startsWithIgnoreCase(oItem.getText(), sValue);
 * }
 * </code>
 *
 * @param {function} [fFilter] The filter function. If not set the default filter function will be used.
 * 
 * @name sap.ui.commons.AutoComplete.prototype.setFilterFunction
 * @function
 * @public
 */
sap.ui.commons.AutoComplete.prototype.setFilterFunction = function(fFilter) {
	if(typeof(fFilter) == "function"){
		this._filter = fFilter;
	}else{
		this._filter = sap.ui.commons.AutoComplete._DEFAULTFILTER;
	}
};


sap.ui.commons.AutoComplete.prototype.onkeypress = function(oEvent) {
	var iKC = oEvent.which || oEvent.keyCode;
	if(iKC === jQuery.sap.KeyCodes.ESCAPE){
		sap.ui.commons.TextField.prototype.onkeypress.apply(this, arguments);
		jQuery(this.getInputDomRef()).removeAttr("aria-posinset");
	}
};

sap.ui.commons.AutoComplete.prototype.onfocusin = function(oEvent) {

	if(!this.$().hasClass("sapUiTfFoc")){
		// if already focused do not execute again. (e.g. while changing suggestion list)
		sap.ui.commons.ComboBox.prototype.onfocusin.apply(this, arguments);
	}

};

(function(){

function getAriaDescribedBy(oAuto, bIncludeInfo){
	var aDescBy = oAuto.getAriaDescribedBy();
	var sDescBy = "";
	for(var i=0; i<aDescBy.length; i++){
		sDescBy += aDescBy[i];
		if(i < aDescBy.length-1){
			sDescBy += " ";
		}
	}

	if(bIncludeInfo){
		sDescBy += " " + oAuto.getId() + "-ariaLbl";
	}

	return sDescBy;
};


function updateOnClose(oAuto){
	var $input = jQuery(oAuto.getInputDomRef());
	var sDescBy = getAriaDescribedBy(oAuto, false);

	if(sDescBy.length > 0){
		$input.attr("aria-describedby", sDescBy);
	}else{
		$input.removeAttr("aria-describedby");
	}

	//No posinset and setsize set when popup closed
	$input.removeAttr("aria-posinset");
	$input.removeAttr("aria-setsize");
};


sap.ui.commons.AutoComplete.prototype._close = function(){
	updateOnClose(this);
	sap.ui.commons.ComboBox.prototype._close.apply(this, arguments);
};


sap.ui.commons.AutoComplete.prototype._handleClosed = function(){
	updateOnClose(this);
	sap.ui.commons.ComboBox.prototype._handleClosed.apply(this, arguments);
};


sap.ui.commons.AutoComplete.prototype.onAfterRendering = function(){
	sap.ui.commons.ComboBox.prototype.onAfterRendering.apply(this, arguments);
	jQuery(this.getInputDomRef()).removeAttr("aria-setsize"); // No initial setsize
};


sap.ui.commons.AutoComplete.prototype._prepareOpen = function(oListBox) {
	var $input = jQuery(this.getInputDomRef());
	var sDescBy = getAriaDescribedBy(this, true);
	
	$input.attr("aria-describedby", sDescBy);
	$input.removeAttr("aria-posinset"); //No posinset set when popup opens
};


sap.ui.commons.AutoComplete.prototype._fireLiveChange = function(oEvent) {
	var bFireSuggest = false;
	if (!this.getEnabled() || !this.getEditable()) {
		this._close();
	}else{
		this._sTypedChars = jQuery(this.getInputDomRef()).val();
		switch(oEvent.type){
			case "keyup":
				if(!sap.ui.commons.ComboBox._isHotKey(oEvent)){
					var iKC = oEvent.which || oEvent.keyCode;
					if(iKC === jQuery.sap.KeyCodes.ESCAPE){
						this._close();
						break;
					}else{
						bFireSuggest = true;
					}
				}else{
					break;
				}
			default: //paste or no hotkey or not escape
				refreshListBoxItems(this);
				bFireSuggest = true;
		}
	}
	
	if(bFireSuggest){
		this.fireSuggest({suggestValue: this._sTypedChars});
	}

	sap.ui.commons.ComboBox.prototype._fireLiveChange.apply(this, arguments);
};


sap.ui.commons.AutoComplete.prototype._doTypeAhead = function(){
	this._sTypeAhead = null;
	this._sWantedSelectedKey = undefined;
	this._sWantedSelectedItemId = undefined;
	this._sTypedChars = jQuery(this.getInputDomRef()).val();

	refreshListBoxItems(this);
};


sap.ui.commons.AutoComplete.prototype.refreshItems = function(sReason){
	var oBinding = this.getBinding("items");
	if(sReason == "filter" && oBinding){
		oBinding.getContexts(); //Avoid update of aggregation when filter not yet applied (filter request triggered by this call)
	}else{
		sap.ui.commons.AutoComplete.prototype.updateItems.apply(this, arguments);
	}
};

//see sap.ui.commons.ComboBox.prototype._handleItemsChanged
sap.ui.commons.AutoComplete.prototype._handleItemsChanged = function(oEvent, bDelayed){
	if (this.bNoItemCheck) {
		return;
	}

	if (bDelayed) {
		this._sHandleItemsChanged = null;
	}

	var aItems = [];
	if (this._getExistingListBox()) {
		aItems = this._getListBox().getItems();
	}

	var oDomRef = this.getDomRef();
	if( oDomRef){
		jQuery(this.getInputDomRef()).attr("aria-setsize", aItems.length);
	}
};


sap.ui.commons.AutoComplete.prototype.getItems = function(){
	return this.getAggregation("items", []);
};
sap.ui.commons.AutoComplete.prototype.insertItem = function(oItem, iIndex){
	this.insertAggregation("items", iIndex, oItem, true);
	refreshListBoxItems(this);
	return this;
};
sap.ui.commons.AutoComplete.prototype.addItem = function(oItem){
	this.addAggregation("items", oItem, true);
	refreshListBoxItems(this);
	return this;
};
sap.ui.commons.AutoComplete.prototype.removeItem = function(oItem) {
	var res = this.removeAggregation("items", oItem, true);
	refreshListBoxItems(this);
	return res;
};
sap.ui.commons.AutoComplete.prototype.removeAllItems = function() {
	var res = this.removeAllAggregation("items");
	refreshListBoxItems(this);
	return res;
};
sap.ui.commons.AutoComplete.prototype.indexOfItem = function(oItem){
	return this.indexOfAggregation("items", oItem);
};
sap.ui.commons.AutoComplete.prototype.destroyItems = function(){
	this.destroyAggregation("items", true);
	refreshListBoxItems(this);
	return this;
};

sap.ui.commons.AutoComplete.prototype.setEnableScrolling = function(bEnableScrolling){
	this.setProperty("enableScrolling", bEnableScrolling, true);
	if(this.oPopup && this.oPopup.isOpen()){
		refreshListBoxItems(this);
	}
	return this;
};

function refreshListBoxItems(oAuto){
	if(!oAuto.getDomRef() || !oAuto.$().hasClass("sapUiTfFoc")){ //Nothing to do if not rendered or the TF does not have the focus
		return false;
	}
	
	var oItem,
		aItems = oAuto.getItems(),
		bFilter = oAuto._sTypedChars && oAuto._sTypedChars.length > 0,
		oLB = oAuto._getListBox(),
		iMaxPopupItems = oAuto.getMaxPopupItems(),
		bScroll = oAuto.getEnableScrolling(),
		aHitItems = [];
		
	if(!bFilter){
		oAuto._close();
		return;
	}
	
	oLB.removeAllItems();
	oLB.clearSelection();
	
	for(var i=0; i<aItems.length; i++){
		oItem = aItems[i];
		if(!oItem.__CLONE){
			oItem.__CLONE = oItem.clone(oItem.getId()+"-CLONE", null, {cloneBindings: false});
			oItem.__origexit = oItem.exit;
			oItem.exit = function(){
				this.__CLONE.destroy();
				delete this.__CLONE;
				this.exit = this.__origexit;
				delete this.__origexit;
				// apply restored exit if a function
				if ( typeof this.exit === "function" ) {
					this.exit.apply(this, arguments);
				}
			};
		}

		if((!bFilter || oAuto._filter(oAuto._sTypedChars, oItem)) && (bScroll || (!bScroll && aHitItems.length < iMaxPopupItems))){
			aHitItems.push(oItem.__CLONE);
		}
	}
	
	var iItemsLength = aHitItems.length;
	
	if(iItemsLength > 0){
		
		if(oAuto._sort){
			aHitItems.sort(function(oItem1, oItem2){
				if (oItem1.getText() > oItem2.getText()) 
					return 1;
				if (oItem1.getText() < oItem2.getText())
					return -1; 
				return 0;
			});
		}
		
		for(var i=0; i<iItemsLength; i++){
			oLB.addItem(aHitItems[i]);
		}
		
		oLB.setVisibleItems(iMaxPopupItems < iItemsLength ? iMaxPopupItems : iItemsLength);
		
		if(!oAuto.oPopup || !oAuto.oPopup.isOpen()){
			oAuto._open();
		}
	}else{
		oAuto._close();
	}
};

})();


/**
 * @deprecated NOT SUPPORTED
 * @public
 * @name sap.ui.commons.AutoComplete#getListBox
 * @function
 */


/**
 * @deprecated NOT SUPPORTED
 * @public
 * @name sap.ui.commons.AutoComplete#setListBox
 * @function
 */
sap.ui.commons.AutoComplete.prototype.setListBox = function(){
	return this;
};


/**
 * @deprecated NOT SUPPORTED
 * @public
 * @name sap.ui.commons.AutoComplete#getSelectedKey
 * @function
 */


/**
 * @deprecated NOT SUPPORTED
 * @public
 * @name sap.ui.commons.AutoComplete#setSelectedKey
 * @function
 */
sap.ui.commons.AutoComplete.prototype.setSelectedKey = function(){
	return this;
};


/**
 * @deprecated NOT SUPPORTED
 * @public
 * @name sap.ui.commons.AutoComplete#getSelectedItemId
 * @function
 */


/**
 * @deprecated NOT SUPPORTED
 * @public
 * @name sap.ui.commons.AutoComplete#setSelectedItemId
 * @function
 */
sap.ui.commons.AutoComplete.prototype.setSelectedItemId = function(){
	return this;
};
}; // end of sap/ui/commons/AutoComplete.js
if ( !jQuery.sap.isDeclared('sap.ui.commons.MessageBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides class sap.ui.commons.MessageBox
jQuery.sap.declare("sap.ui.commons.MessageBox");






/**
 * @class Provides methods to create standard alerts, confirmation dialogs, or arbitrary message boxes.
 *
 * As <code>MessageBox</code> is a static class, a <code>jQuery.sap.require("sap.ui.commons.MessageBox");</code> statement
 * must be explicitly executed before the class can be used. Example:
 * <pre>
 *   jQuery.sap.require("sap.ui.commons.MessageBox");
 *   sap.ui.commons.MessageBox.show(
 *       "This message should appear in the message box.",
 *       sap.ui.commons.MessageBox.Icon.INFORMATION,
 *       "My message box title",
 *       [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
 *       function() { / * do something * / }
 *	 );
 * </pre>
 *
 * @static
 * @author Frank Weigel
 * @public
 * @since 0.8.8
 */
sap.ui.commons.MessageBox = {};

/**
 * @class Enumeration of supported actions in a MessageBox.
 *
 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
 * specifying the set of allowed actions as well as reporting back the user choice.
 * @static
 * @public
 */
sap.ui.commons.MessageBox.Action = {

  /**
   * Adds an "Ok" button to the message box.
   * @public
   */
  OK : "OK",

  /**
   * Adds a "Cancel" button to the message box.
   * @public
   */
  CANCEL : "CANCEL",

  /**
   * Adds a "Yes" button to the message box.
   * @public
   */
  YES : "YES",

  /**
   * Adds a "No" button to the message box.
   * @public
   */
  NO : "NO",

  /**
   * Adds an "Abort" button to the message box.
   * @public
   */
  ABORT : "ABORT",

  /**
   * Adds a "Retry" button to the message box.
   * @public
   */
  RETRY : "RETRY",

  /**
   * Adds an "Ignore" button to the message box.
   * @public
   */
  IGNORE : "IGNORE",

  /**
   * Adds a "Close" button to the message box.
   * @public
   */
  CLOSE : "CLOSE"
};

/**
 * @class Enumeration of the pre-defined icons that can be used in a MessageBox.
 * @static
 * @public
 */
sap.ui.commons.MessageBox.Icon = {

  /**
   * Shows no icon in the message box.
   * @public
   */
  NONE : "NONE",

  /**
   * Shows the information icon in the message box.
   * @public
   */
  INFORMATION : "INFORMATION",

  /**
   * Shows the warning icon in the message box.
   * @public
   */
  WARNING : "WARNING",

  /**
   * Shows the error icon in the message box.
   * @public
   */
  ERROR : "ERROR",

  /**
   * Shows the critical error icon in the message box.
   * @public
   * @deprecated since 1.9.1: The error icon is used instead
   */
  CRITICAL : "CRITICAL",

  /**
   * Shows the success icon in the message box.
   * @public
   */
  SUCCESS : "SUCCESS",

  /**
   * Shows the question icon in the message box.
   * @public
   */
  QUESTION : "QUESTION"
};

(function() {

	var c = sap.ui.commons,
		Action = c.MessageBox.Action,
		Icon = c.MessageBox.Icon,
		mIconClass = {
			// Note: keys must be equal to values(!) of the Icon enumeration above
			INFORMATION : "sapUiMboxInfo",
			CRITICAL : "sapUiMboxCritical",
			ERROR : "sapUiMboxError",
			WARNING : "sapUiMboxWarning",
			SUCCESS : "sapUiMboxSuccess",
			QUESTION : "sapUiMboxQuestion"
		};

	/**
	 * Creates and displays a simple message box with the given text and buttons, and optionally other parts.
	 * After the user has selected a button or closed the message box using the close icon, the <code>callback</code>
	 * function is invoked when given.
	 *
	 * The only mandatory parameter is <code>sMessage</code>.
	 *
	 * The created dialog box is executed asynchronously. When it has been created and registered for rendering,
	 * this function returns without waiting for a user reaction.
	 *
	 * When applications have to react on the users choice, they have to provide a callback function and
	 * postpone any reaction on the user choice until that callback is triggered.
	 *
	 * The signature of the callback is
	 *
	 *   function (oAction);
	 *
	 * where <code>oAction</code> is the button that the user has pressed. When the user has pressed the close button,
	 * a MessageBox.Action.Close is returned.
	 *
	 * @param {string} sMessage The message to be displayed.
	 * @param {sap.ui.commons.MessageBox.Icon} [oIcon=None] The icon to be displayed.
	 * @param {string} [sTitle=''] The title of the message box.
	 * @param {sap.ui.commons.MessageBox.Action|sap.ui.commons.MessageBox.Action[]} [vActions] Either a single action, or an array of actions.
	 *      If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter.
	 * @param {function} [fnCallback] Function to be called when the user has pressed a button or has closed the message box.
	 * @param {sap.ui.commons.MessageBox.Action} [oDefaultAction] Must be one of the actions provided in vActions.
	 * @param {string} [sDialogId] ID to be used for the dialog. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.ui.commons.MessageBox.show = function(sMessage, oIcon, sTitle, vActions, fnCallback, oDefaultAction, sDialogId) {

		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.commons"),
			oDialog, oResult, oContent, oMsg, oDefaultButton;

		// normalize the vActions array
		if ( typeof vActions !== "undefined" && !jQuery.isArray(vActions) ) {
			vActions = [vActions];
		}
		if ( !vActions || vActions.length === 0 ) {
			vActions = [Action.OK];
		}

		// create a unique ID
		sDialogId = sDialogId || sap.ui.core.ElementMetadata.uid("mbox");

		/** creates a button for the given action */
		function button(sAction) {
			var sText = rb && rb.getText("MSGBOX_" + sAction),
				oButton = new c.Button({
					id : sDialogId + "--btn-" + sAction,
					text : sText || sAction,
					press : function () {
						oResult = sAction;
						oDialog.close();
					}
				});
			if ( sAction === oDefaultAction ) {
				oDefaultButton = oButton;
			}
			return oButton;
		}

		/** wraps the given control in a top aligned MatrixLayoutCell with no padding */
		function cell(oContent) {
			return new c.layout.MatrixLayoutCell({
				padding: c.layout.Padding.None,
				vAlign: c.layout.VAlign.Top,
				content: oContent
			});
		}

		/** creates an Image for the given icon type */
		function image(oIcon) {
			var oImage = new c.Image({
					id : sDialogId + "--icon",
					tooltip : rb && rb.getText("MSGBOX_ICON_" + oIcon),
					decorative : true});
			oImage.addStyleClass("sapUiMboxIcon");
			oImage.addStyleClass(mIconClass[oIcon]);
			return oImage;
		}

		function onclose() {
			if ( typeof fnCallback === "function" ) {
				fnCallback(oResult || Action.CLOSE);
			}

			// first detach close handler (to avoid recursion and multiple reports)
			oDialog.detachClosed(onclose);

			// then destroy dialog (would call onclose again)
			oDialog.destroy();
		}

		oContent = new c.layout.MatrixLayout({id : sDialogId + "--lyt", layoutFixed:false}).addStyleClass("sapUiMboxCont");
		oMsg = new c.TextView({id : sDialogId + "--msg", text:sMessage}).addStyleClass("sapUiMboxText");
		if ( oIcon !== Icon.NONE ) {
			oContent.createRow(cell(image(oIcon)), cell(oMsg));
		} else {
			oContent.createRow(cell(oMsg));
		}
		// oContent.addStyleClass("sapUiDbgMeasure");

		oDialog = new c.Dialog({
			id : sDialogId,
			applyContentPadding : false,
			title : sTitle,
			accessibleRole : sap.ui.core.AccessibleRole.AlertDialog,
			resizable : false,
			modal: true,
			buttons : jQuery.map(vActions, button), // determines oDefaultButton as a side effect!
			content : oContent,
			defaultButton : oDefaultButton,
			closed : onclose
		});

		oDialog.open();

	};

	/**
	 * Displays an alert box with the given message and an OK button (no icons).
	 * If a callback is given, it is called after the alert box has been closed
	 * by the user via the OK button or via the Close icon. The callback is called
	 * with the following signature:
	 *
	 * <pre>
	 *   function ()
	 * </pre>
	 *
	 * The alert box opened by this method is modal and it is processed asynchronously.
	 * Applications have to use the <code>fnCallback</code> to continue work after the
	 * user closed the alert box.
	 *
	 * @param {string} sMessage Message to be displayed in the alert box
	 * @param {function} [fnCallback] callback function to be called when the user closed the dialog
	 * @param {string } [sTitle] Title to be displayed in the alert box
	 * @param {string} [sDialogId] ID to be used for the alert box. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.ui.commons.MessageBox.alert = function(sMessage, fnCallback, sTitle, sDialogId) {
		return c.MessageBox.show(sMessage, Icon.NONE, sTitle, Action.OK,
				function(oAction) {
					if ( typeof fnCallback === "function" ) {
						fnCallback();
					}
				}, Action.OK, sDialogId || sap.ui.core.ElementMetadata.uid("alert"));
	};

	/**
	 * Displays a confirmation dialog box with the given message, a question icon,
	 * an OK button, and a Cancel button. If a callback is given, it is called after the
	 * alert box has been closed by the user via one of the buttons or via the close icon.
	 * The callback is called with the following signature
	 *
	 * <pre>
	 *   function(bConfirmed)
	 * </pre>
	 *
	 * where bConfirmed is set to true when the user has activated the OK button.
	 *
	 * The confirmation dialog box opened by this method is modal and it is processed asynchronously.
	 * Applications have to use the <code>fnCallback</code> to continue work after the
	 * user closed the alert box.
	 *
	 * @param {string} sMessage Message to display
	 * @param {function} [fnCallback] Callback to be called
	 * @param {string} [sTitle] Title to display
	 * @param {string} [sDialogId] ID to be used for the confirmation dialog. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.ui.commons.MessageBox.confirm = function(sMessage, fnCallback, sTitle, sDialogId) {
		return c.MessageBox.show(sMessage, Icon.QUESTION, sTitle, [Action.OK, Action.CANCEL],
				function(oAction) {
					if ( typeof fnCallback === "function" ) {
						fnCallback(oAction === Action.OK);
					}
				},  /* no default */ undefined, sDialogId || sap.ui.core.ElementMetadata.uid("confirm"));
	};

}());

}; // end of sap/ui/commons/MessageBox.js
