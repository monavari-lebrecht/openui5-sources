// This file has been generated by the SAPUI5 'AllInOne' Builder
sap.ui.controller("sap.ui.demokit.explored.view.app", {

	onInit : function () {

		this._afterRenderingDone = false;

		// subscribe to app events
		this._component = sap.ui.component(sap.ui.core.Component.getOwnerIdFor(this.getView()));
		this._component.getEventBus().subscribe("app", "setCompact", this._setCompactMode, this);
	},

	onAfterRendering : function () {
		if (this.hasOwnProperty("_compactOn")) {
			this.getView().toggleStyleClass("sapUiSizeCompact", this._compactOn);
		}
		this._afterRenderingDone = true;
	},

	_setCompactMode : function (sChannel, sEvent, oData) {
		if (this._afterRenderingDone) {
			this.getView().toggleStyleClass("sapUiSizeCompact", oData.compactOn);
		} else {
			this._compactOn = oData.compactOn;
		}
	}
}); 
sap.ui.jsview("sap.ui.demokit.explored.view.app", {

	getControllerName : function () {
		return "sap.ui.demokit.explored.view.app";
	},
	
	createContent : function (oController) {

		// to avoid scrollbars on desktop the root view must be set to block display
		this.setDisplayBlock(true);

		// create split app
		return new sap.m.SplitApp("splitApp", {
			afterDetailNavigate: function () {
				this.hideMaster();
			}
		});
	}
});
sap.ui.controller("sap.ui.demokit.explored.view.code", {

	onInit : function () {
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);
		this._viewData = sap.ui.getCore().byId("app").getViewData();
		this._viewData.component.codeCache = {};
	},

	onRouteMatched : function (oEvt) {

		// get params
		if (oEvt.getParameter("name") !== "code") {
			return;
		}

		this._sId = oEvt.getParameter("arguments").id;

		// retrieve sample object
		var oSample = sap.ui.demokit.explored.data.samples[this._sId];
		if (!oSample) {
			this.router.myNavToWithoutHash("sap.ui.demokit.explored.view.notFound", "XML", false, { path: this._sId });
			return;
		}

		// get component
		var sCompId = 'sampleComp-' + this._sId;
		var sCompName = this._sId;
		var oComp = sap.ui.component(sCompId);
		if (!oComp) {
			oComp = sap.ui.getCore().createComponent({
				id : sCompId,
				name : sCompName
			});
		}
		
		// create data object
		var oMetadata = oComp.getMetadata();
		var oConfig = (oMetadata) ? oMetadata.getConfig() : null;
		var oData = {
			title : "Code: " + oSample.name,
			files : []
		};
		
		// retrieve files
		// (via the 'Orcish maneuver': Use XHR to retrieve and cache code)
		var that = this;
		var fnSuccess = function (result) {
			that._viewData.component.codeCache[sUrl] = result;
		};
		var fnError = function (result) {
			that._viewData.component.codeCache[sUrl] = "not found: '" + sUrl + "'";
		};
		if (oConfig && oConfig.sample && oConfig.sample.files) {
			var sRef = jQuery.sap.getModulePath(oSample.id);
			for (var i = 0 ; i < oConfig.sample.files.length ; i++) {
				var sFile = oConfig.sample.files[i];
				var sUrl = sRef + "/" + sFile;
				if (! (sUrl in this._viewData.component.codeCache)) {
					this._viewData.component.codeCache[sUrl] = "";
					jQuery.ajax(sUrl, {
						async: false,
						dataType: "text",
						success: fnSuccess,
						error: fnError
					});
				}
				oData.files.push({
					name : sFile,
					raw : that._viewData.component.codeCache[sUrl],
					code : this._convertCodeToHtml(that._viewData.component.codeCache[sUrl])
				});
			}
		}
		
		// set model
		this.getView().setModel(new sap.ui.model.json.JSONModel(oData));
		
		// scroll to top of page
		var page = this.getView().byId("page");
		page.scrollTo(0);
	},
	
	onDownload : function (evt) {
		
		jQuery.sap.require("sap.ui.thirdparty.jszip");
		var ozipFile = new JSZip();
		
		// zip files
		var data = this.getView().getModel().getData();
		for (var i = 0 ; i < data.files.length ; i++) {
			var oFile = data.files[i];
			ozipFile.file(oFile.name, oFile.raw);
		}
		var oContent = ozipFile.generate();

		location.href = "data:application/zip;base64," + oContent;
	},

	onNavBack : function () {
		this.router.myNavBack("sample", { id : this._sId }, true);
	},

	/**
	 * 
	 */
	_convertCodeToHtml : function (code) {

		jQuery.sap.require("jquery.sap.encoder");

		code = code.toString();

		// Get rid of function around code
		code = code.replace(/^function.+{/, "");

		//code = code.replace(/return \[[\s\S]*/, "");
		code = code.replace(/}[!}]*$/, "");

		// Get rid of unwanted code if CODESNIP tags are used
		code = code.replace(/^[\n\s\S]*\/\/\s*CODESNIP_START\n/, "");
		code = code.replace(/\/\/\s*CODESNIP_END[\n\s\S]*$/, "");

		// Improve indentation for display
		code = code.replace(/\t/g, "  ");

		return '<pre><code>' + jQuery.sap.encodeHTML(code) + '</code></pre>';
	}
});
sap.ui.controller("sap.ui.demokit.explored.view.notFound", {

	onInit : function () {
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);
		this.getView().addEventDelegate(this);
	},

	_msg : "<div class='titlesNotFound'>The requested object '{0}' is unknown to the explored app. We suspect it's lost in space.</div>",

	onRouteMatched : function (evt) {
		if ("notFound" !== evt.getParameter("name")) {
			return;
		}
		var params = evt.getParameter("arguments")["all*"];
		var html = this._msg.replace("{0}", params);
		this.getView().byId("msgHtml").setContent(html);
	},

	onBeforeShow : function (evt) {
		if (evt.data.path) {
			var html = this._msg.replace("{0}", evt.data.path);
			this.getView().byId("msgHtml").setContent(html);
		}
	},

	onNavBack : function () {
		this.router.myNavBack("home", {});
	}
});
sap.ui.controller("sap.ui.demokit.explored.view.sample", {

	onInit : function () {
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);
	},

	onRouteMatched : function (oEvt) {

		if (oEvt.getParameter("name") !== "sample") {
			return;
		}

		this._sId = oEvt.getParameter("arguments").id;

		// retrieve sample object
		var oSample = sap.ui.demokit.explored.data.samples[this._sId];
		if (!oSample) {
			this.router.myNavToWithoutHash("sap.ui.demokit.explored.view.notFound", "XML", false, { path: this._sId });
			return;
		}

		// set nav button visibility
		var oPage = this.getView().byId("page");
		var oHistory = sap.ui.core.routing.History.getInstance();
		var oPrevHash = oHistory.getPreviousHash();
		var bShowNavButton = sap.ui.Device.system.phone || !!oPrevHash;
		oPage.setShowNavButton(bShowNavButton);

		// set page title
		oPage.setTitle("Sample: " + oSample.name);

		// create component only once
		var sCompId = 'sampleComp-' + this._sId;
		var sCompName = this._sId;
		this._oComp = sap.ui.component(sCompId);
		if (!this._oComp) {
			this._oComp = sap.ui.getCore().createComponent({
				id : sCompId,
				name : sCompName
			});
		}

		// create component container
		var oContent;
		oContent = new sap.ui.core.ComponentContainer({
			component: this._oComp
		});

		// handle stretch content
		var oConfig = (this._oComp.getMetadata()) ? this._oComp.getMetadata().getConfig() : null;
		var bStretch = (oConfig && oConfig.sample && oConfig.sample.stretch);
		var sHeight = (bStretch) ? "100%" : null;
		oPage.setEnableScrolling(!bStretch);
		oContent.setHeight(sHeight);

		// add content
		oPage.removeAllContent();
		oPage.addContent(oContent);

		// scroll to top of page
		oPage.scrollTo(0);
	},

	onNavBack : function (oEvt) {
		this.router.myNavBack("home", {});
	},

	onNavToCode : function (evt) {
		this.router.navTo("code", {
			id : this._sId
		}, false);
	}
});
jQuery.sap.declare('sap.ui.demokit.library-all');
jQuery.sap.declare('sap.ui.demokit.explored.view.app.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.explored.view.app.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.explored.view.code.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.explored.view.notFound.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.demokit.explored.view.sample.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ui.demokit.CodeSampleContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.demokit.CodeSampleContainer
jQuery.sap.declare("sap.ui.demokit.CodeSampleContainerRenderer");

/**
 * @class CodeSampleContainer renderer. 
 * @static
 */
sap.ui.demokit.CodeSampleContainerRenderer = function() {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.demokit.CodeSampleContainerRenderer.render = function(oRenderManager, oControl){ 
    // convenience variable
	var rm = oRenderManager;
	
    rm.write("<div");
    rm.writeControlData(oControl);
    rm.write(" class='sapUiDKitCSample sapUiShd'");
	var sWidth = oControl.getWidth();
	if(sWidth) {
		rm.addStyle("width", sWidth);
	}
	rm.writeStyles();
    rm.write(">");

    rm.write("<div id='", jQuery.sap.escapeHTML(oControl.getUiAreaId()), "'");
    rm.write(" class='sapUiBody'");
    rm.write(">");
    var aContent = oControl._oUIArea.getContent();
    for(var i=0; i<aContent.length; i++) {
    	rm.renderControl(aContent[i]);
    }
    rm.write("</div>");
    
    rm.write("<div class='sapUiDKitCSampleBorder'>")
    rm.renderControl(oControl._oShowCodeLink);
    rm.write(" ");
    rm.renderControl(oControl._oApplyCodeLink);
    rm.write(" ");
    rm.renderControl(oControl._oCodeViewer);
    rm.write("</div>");
    
    rm.write("</div>");
    
};

}; // end of sap/ui/demokit/CodeSampleContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.CodeViewerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.demokit.CodeViewer
jQuery.sap.declare("sap.ui.demokit.CodeViewerRenderer");

/**
 * @class CodeViewer renderer. 
 * @static
 */
sap.ui.demokit.CodeViewerRenderer = function() {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.demokit.CodeViewerRenderer.render = function(oRM, oControl){
	
	if ( !oControl.getVisible() ) 
		return;
	
	// write the HTML into the render manager  
    oRM.write("<pre");
	oRM.writeControlData(oControl);
	if ( oControl.getEditable() ) {
		oRM.addClass("sapUiCodeViewer");
		oRM.addClass("editable");
		oRM.writeAttribute("contentEditable", "true");
	} else {
		oRM.addClass("prettyprint"); // this class acts as a 'TODO' for the pretty printer!
	}
		
	var sHeight = oControl.getHeight();
	if(sHeight) {
		oRM.addStyle("height", sHeight);
	}
	var sWidth = oControl.getWidth();
	if(sWidth) {
		oRM.addStyle("width", sWidth);
	}
	oRM.writeClasses();
	oRM.writeStyles();
	oRM.write(">");
	if ( oControl.getSource() ) {
		oRM.write(oControl.getSource().replace(/</g,'&lt;')); // this is fake escaping?
	}
    oRM.write("</pre>");
};

}; // end of sap/ui/demokit/CodeViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.EntityInfo') ) {
jQuery.sap.declare("sap.ui.demokit.EntityInfo");

sap.ui.demokit.EntityInfo = {

	getEntityDocu : function (sEntityName, fnCallback) {

		var oEntityDoc = this._oDocumentation;
		
		if ( !oEntityDoc || oEntityDoc.name !== sEntityName ) {
			oEntityDoc = undefined;
			load(sEntityName, ".control");
			if ( !oEntityDoc ) { 
				load(sEntityName, ".type");
			}
			this._oDocumentation = oEntityDoc;
			return oEntityDoc;
		}
		
		function load(sName, sType) {

			var PARSERS = {
				".control" : parseControl,
				".type"    : parseType
			};
			
			// just a hack, needs proper type resolution
			var CORE_TYPES = "boolean int float number function object string void any Element Control Component";
			
			function parseControl($control) {
				
				oEntityDoc = oEntityDoc || {
					baseType : undefined,
					doc : undefined,
					deprecation : undefined,
					properties : {},
					aggregations : {},
					associations : {},
					events : {},
					methods : {}
				};
				
				var sBaseType = $control.children("baseType").text();
				oEntityDoc.baseType = oEntityDoc.baseType || ((sBaseType) ? resolve(sBaseType) : null);
				
				oEntityDoc.doc = oEntityDoc.doc || doc($control);
				oEntityDoc.deprecation = oEntityDoc.deprecation || depr($control);
				
				each($control, "properties/property", function($prop) {
					oEntityDoc.properties[$prop.attr("name")] = {
						kind : 0,
						type : resolve($prop.attr("type") || "string"),
						defaultValue : $prop.attr("defaultValue") || "empty/undefined",
						doc : doc($prop),
						deprecation : depr($prop),
						since : $prop.attr("since") || null
					};
				});
				
				oEntityDoc.defaultAggregation = oEntityDoc.defaultAggregation || $control.children("aggregations").attr("default");
				each($control, "aggregations/aggregation", function($aggr) {
					oEntityDoc.aggregations[$aggr.attr("name")] = {
						kind : $aggr.attr("cardinality") === "0..1" ? 1 : 2,
						type : resolve($aggr.attr("type") || "sap.ui.core/Control"),
						cardinality : $aggr.attr("cardinality") || "0..n",
						visibility : $aggr.attr("visibility") || null,
						doc : doc($aggr),
						deprecation : depr($aggr),
						since : $aggr.attr("since") || null
					};
				});
				
				each($control, "associations/association", function($assoc) {
					oEntityDoc.associations[$assoc.attr("name")] = {
						kind : $assoc.attr("cardinality") === "0..n" ? 4 : 3,
						type : resolve($assoc.attr("type") || "sap.ui.core/Control"),
						cardinality : $assoc.attr("cardinality") || "0..1",
						doc : doc($assoc),
						deprecation : depr($assoc),
						since : $assoc.attr("since") || null
					};
				});
				
				each($control, "events/event", function($event) {
					var sName = $event.attr("name");
					oEntityDoc.events[sName] = {
						kind : 5,
						doc : doc($event),
						deprecation : depr($event),
						since : $event.attr("since") || null,
						parameters : []
					};
					each($event, "parameters/parameter", function($param) {
						oEntityDoc.events[sName].parameters[$param.attr("name")] = {
							kind : 6,
							type : resolve($param.attr("type") || "string"),
							doc : doc($param),
							since : $param.attr("since") || null,
							deprecation : depr($param)
						};
					});
				});
				
				each($control, "methods/method", function($method) {
					var sName = $method.attr("name");
					oEntityDoc.methods[sName] = {
						kind : 7,
						type : resolve($method.attr("type") || "sap.ui.core/void"),
						doc : doc($method),
						deprecation : depr($method),
						since : $method.attr("since") || null,
						parameters : []
					};
					each($method, "parameters/parameter", function($param) {
						oEntityDoc.methods[sName].parameters.push({
							kind: 8,
							name : $param.attr("name"),
							type : resolve($param.attr("type") || "sap.ui.core/Control"),
							doc : doc($param),
							since : $param.attr("since") || null,
							deprecation : depr($param)
						});
					});
				});
				
				if ( sBaseType ) {
					load(sBaseType, ".control");
				}
			}
				
			function parseType($type) {
		
				oEntityDoc = oEntityDoc || {
					doc : undefined,
					deprecation : false,
					values : {}
				};
				
				oEntityDoc.doc = oEntityDoc.doc || doc($type);
				oEntityDoc.deprecation = oEntityDoc.deprecation || depr($type);
				
				each($type, "enumeration/value", function($value) {
					var sName = $value.attr("name");
					oEntityDoc.values[sName] = {
					    value : $value.attr("value") || sName,
						doc : doc($value),
						deprecation : depr($value)
					};
				});
				
				oEntityDoc.pattern = $type.children("pattern").text();
				
				var sBaseType = $type.children("baseType").text();
				if ( sBaseType ) {
					load(sBaseType, ".type");
				}
			}
			
			function each($,sNames,fnCallback) {
				jQuery.each(sNames.split("/"), function(i,n) {
					$ = $.children(n);
				});
				$.each(function(i,e) {
					fnCallback(jQuery(e));
				});
			}
			
			function doc($) {
				return $.children("documentation").text();
			}
		
			function depr($) {
				return $.children("deprecation").text();
			}
			
			function resolve(sType) {
				if ( sType.indexOf("/") >= 0 ) {
					return sType.replace(/\//g, ".");
				} else if ( sType && sType.indexOf(".") < 0 && CORE_TYPES.indexOf(sType) >= 0 ) {
					return "sap.ui.core." + sType;
				} else {
					return sName.split(".").slice(0,-1).concat([sType.replace(/\//g, ".")]).join(".");
				}
			}
		
			jQuery.ajax({
				async: false,
				url : jQuery.sap.getModulePath(sName, sType),
				dataType : 'xml',
				success : function(oXMLDoc) {
					PARSERS[sType](jQuery(oXMLDoc.documentElement)); 
					oEntityDoc.name = sName;
					oEntityDoc.metatype = sType;
				},
				error : function (err) {
					jQuery.sap.log.error("tried to load entity docu for: " + sName + sType);
				}
			});
		}
	}
}
}; // end of sap/ui/demokit/EntityInfo.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.FileUploadIntrospectorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.demokit.FileUploadIntrospector
jQuery.sap.declare("sap.ui.demokit.FileUploadIntrospectorRenderer");

/**
 * @class FileUploadIntrospector renderer. 
 * @static
 */
sap.ui.demokit.FileUploadIntrospectorRenderer = function() {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.demokit.FileUploadIntrospectorRenderer.render = function(oRenderManager, oControl) { 

    // convenience variable
	var rm = oRenderManager;

    function format(iDate) {
      var oDate = new Date(iDate),
		sMonth = (oDate.getMonth()+1)<10?"0"+(oDate.getMonth()+1):""+(oDate.getMonth()+1),
		sYear = oDate.getFullYear()<10?"0"+oDate.getFullYear():""+oDate.getFullYear(),
		sDate = oDate.getDate()<10?"0"+oDate.getDate():""+oDate.getDate(),
		sHours = oDate.getHours()<10?"0"+oDate.getHours():""+oDate.getHours(),
		sMinutes = oDate.getMinutes()<10?"0"+oDate.getMinutes():""+oDate.getMinutes(),
		sSeconds = oDate.getSeconds()<10?"0"+oDate.getSeconds():""+oDate.getSeconds();
		return sYear + "-" + sMonth + "-" + sDate + " " + sHours + ":" + sMinutes + ":" + sSeconds;
    };

	// write the HTML into the render manager  
    rm.write("<div");
	rm.writeControlData(oControl);
    rm.write(" class='sapUiDkitFileList'");
    if ( oControl.getWidth() ) {
    	rm.addStyle("width", oControl.getWidth());
    }
    rm.writeStyles();
    rm.write(">");
    var aFiles = oControl._aFiles || [];
    rm.write("<div");
    if ( oControl.getHeight() ) {
    	rm.addStyle("height", oControl.getHeight());
    	rm.addStyle("overflow-y", "auto");
    }
    rm.writeStyles();
    rm.write(">");
    rm.write("<table border='0'>");
    rm.write("<tr class='sapUiDkitFileItem'>");
    rm.write("<th>Filename</th>");
    rm.write("<th>Date</th>");
    rm.write("<th>Size</th>");
    rm.write("</tr>");
    for(var i=0; i<aFiles.length; i++) {
	    rm.write("<tr class='sapUiDkitFileItem'>");
	    rm.write("<td style='padding:1px 3px;'><span style='white-space:nowrap'>" + aFiles[i].name + "</span></td>");
	    rm.write("<td style='border-left:1px solid #ccc;padding:1px 3px;width:12ex'><span style='white-space:nowrap'>" + format(aFiles[i].time) + "</span></td>");
	    rm.write("<td style='border-left:1px solid #ccc;padding:1px 3px;width:8ex;text-align:right'><span style='white-space:nowrap'>" + aFiles[i].size + "</span></td>");
	    rm.write("</tr>");
    }
    rm.write("</table>");
    rm.write("</div>");
    rm.write("<div class='sapUiDkitBottomLine'>");
    rm.write("Last Refresh: " + (format(new Date().getTime())));
    rm.write("</div>");
    
    rm.write("</div>");

};

}; // end of sap/ui/demokit/FileUploadIntrospectorRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.HexagonButtonGroupRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.demokit.HexagonButtonGroup
jQuery.sap.declare("sap.ui.demokit.HexagonButtonGroupRenderer");

/**
 * @class HexagonButtonGroup renderer. 
 * @static
 */
sap.ui.demokit.HexagonButtonGroupRenderer = function() {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.demokit.HexagonButtonGroupRenderer.render = function(oRenderManager, oControl){ 
    // convenience variable
	var rm = oRenderManager;
	
	// write the HTML into the render manager  
    rm.write("<div");
    rm.writeControlData(oControl); 
    rm.writeAttribute("class","sapUiHexGroup"); 
    rm.write(">");
    var iColspan = oControl.getColspan();
    var aButtons = oControl.getButtons();
    for(var i=0; i<aButtons.length; i++) {
    	// TODO fix layouting, needs relative positioning
    	var ix = i % iColspan;
    	var iy = Math.floor(i / iColspan);
    	if ( ix < Math.floor(iColspan / 2) ) {
    		ix = 1 + 2 * ix;
    	} else {
    		ix = 2 * (ix - Math.floor(iColspan / 2));
    	}
       	var x = 100 +  90 * ix;
       	var y = 100 + 100 * iy + 100 - 50 * (ix % 2);
    	var oButton = aButtons[i];
    	oButton.setPosition("position:absolute;left:" + x + "px;top:" + y + "px;");
    	oRenderManager.renderControl(oButton);
    }
    rm.write("</div>");
};

}; // end of sap/ui/demokit/HexagonButtonGroupRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.HexagonButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.demokit.HexagonButton
jQuery.sap.declare("sap.ui.demokit.HexagonButtonRenderer");

/**
 * @class HexagonButton renderer. 
 * @static
 */
sap.ui.demokit.HexagonButtonRenderer = function() {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.demokit.HexagonButtonRenderer.render = function(oRenderManager, oControl){ 
    // convenience variable
	var rm = oRenderManager;
	
	// write the HTML into the render manager  
	rm.write("<div ");
	rm.writeControlData(oControl);
	rm.addClass("sapUiHexBtn");
	rm.addClass("sapUiHexBtn" + jQuery.sap.escapeHTML(oControl.getEnabled() ? oControl.getColor() : "Gray"));
	if ( oControl.getEnabled() && oControl.hasListeners('press') )
		rm.addClass("sapUiHexBtnActive");
	rm.writeClasses();
	rm.write(" style='" + jQuery.sap.escapeHTML(oControl.getPosition()) + "'");
	if(oControl.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
	}	
	rm.write(">");
	if ( oControl.getIcon() ) {
		rm.write("<IMG ");
		rm.writeAttributeEscaped("src", oControl.getIcon());
		var sImagePosition = oControl.getImagePosition();
		if(sImagePosition){
			rm.write(" style='" + jQuery.sap.escapeHTML(sImagePosition) + "'");
		}else{
			rm.write(" style='position:relative;left:40px;top:45px;'");
		}
		rm.write(" border='0'");
		rm.write("/>");		
	}
	rm.write("</div>");
};

}; // end of sap/ui/demokit/HexagonButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.IndexLayoutRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.demokit.IndexLayout
jQuery.sap.declare("sap.ui.demokit.IndexLayoutRenderer");

/**
 * @class IndexLayout renderer.
 * @static
 */
sap.ui.demokit.IndexLayoutRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oLyt an object representation of the control that should be rendered
 */
sap.ui.demokit.IndexLayoutRenderer.render = function(rm, oLyt){
	var id = oLyt.getId();

	rm.write("<div");
	rm.writeControlData(oLyt);
	rm.addClass("sapDkIdxLayout");
	rm.addClass("sapDkIdxLayoutHidden");
	if(oLyt.getEnableScaling()){
		rm.addClass("sapDkIdxLayoutScale");
	}
	rm.writeClasses();
	rm.write("><div id=\"", id, "-cntnt\">");
	
	var aContent = oLyt.getContent();
	for(var i=0; i<aContent.length; i++){
		rm.write("<div class=\"sapDkIdxLayoutItem\" style=\"width:", oLyt._scale(oLyt._itemWidth), "px;height:", oLyt._scale(oLyt._itemHeight), "px;\"><div>");
		rm.renderControl(aContent[i]);
		rm.write("</div></div>");
	}
	
	rm.write("</div></div>");
};
}; // end of sap/ui/demokit/IndexLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.TagCloudRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.demokit.TagCloud
jQuery.sap.declare("sap.ui.demokit.TagCloudRenderer");

/**
 * @class TagCloud renderer.
 * @static
 */
sap.ui.demokit.TagCloudRenderer = function() {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.demokit.TagCloudRenderer.render = function(oRenderManager, oControl){
	var rm = oRenderManager;
    rm.write("<div");
    rm.writeControlData(oControl);
    rm.addClass("sapUiTagCloud");
    rm.writeClasses();
    rm.write(">"); // div element
    
    var tags = oControl.getTags();
	if ( !tags || !tags.length ) {
		return;
	}
	
	//Compute min / max weight
	var fsMin = oControl.getMinFontSize(),
		fsScale = oControl.getMaxFontSize() - fsMin,
    	wMinMax = this.computeWeightRange(tags),
    	wMin = wMinMax.min,
    	wScale = wMinMax.max - wMin;

    var fontsize = wScale === 0 ? function(w) { return fsMin; } : function(w) {
        return fsMin + (w-wMin) / wScale * fsScale;
    };
    
    // render each tag.
	for (var i=0;i<tags.length;i++) {
	  var tag = tags[i];
	  rm.write("<span");
	  rm.writeElementData(tag);
	  rm.writeAttribute("class","sapUiTagCloudTextNormal");
	  if(tag.getTooltip_AsString()){
		  rm.writeAttributeEscaped("title",tag.getTooltip_AsString());
	  }
	  //Compute font size relative to weight
	  rm.writeAttribute("style","font-size:"+fontsize(tag.getWeight())+"px;");
	  rm.write(">"); // span element
	  rm.writeEscaped(tag.getText());
	  rm.write("</span>"); // span element
	}
    
    rm.write("</div>"); // div element
};

sap.ui.demokit.TagCloudRenderer.computeWeightRange = function(tags){
	var min=tags[0].getWeight(), max=min;
	for (var i=1; i<tags.length; i++) {
		var w = tags[i].getWeight();
		if (w > max){max = w;}
		if (w < min){min = w;}
	}
	return {min:min, max:max};
};


}; // end of sap/ui/demokit/TagCloudRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.UI5EntityCueCardRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Provides default renderer for control sap.ui.demokit.UI5EntityCueCard
jQuery.sap.declare("sap.ui.demokit.UI5EntityCueCardRenderer");

/**
 * @class UI5EntityCueCard renderer. 
 * @static
 */
sap.ui.demokit.UI5EntityCueCardRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ui.demokit.UI5EntityCueCardRenderer.render = function(rm, oControl){

	var bNavigable = oControl.getNavigable();
	var bDemokit = oControl.getStyle() == sap.ui.demokit.UI5EntityCueCardStyle.Demokit;

	function isPrimitive(sType) {
		while ( sType.slice(-2) == "[]" ) {
			sType = sType.slice(0, -2);
		}
		if ( sType.indexOf("sap.ui.core.") != 0 )
			return false;
		sType = sType.slice("sap.ui.core.".length);
		return "boolean int float number function object string void any ".indexOf(sType) >= 0;
	}
	
	rm.write("<div");
    rm.writeControlData(oControl);
    rm.writeAttribute("class","sapDkCueCd");
    rm.write(">");

    var child=0;
    
	if ( !oControl.getCollapsible() || oControl.getExpanded() ) {
		
		var oDoc = oControl._getDoc();
		
		function names(o) {
			var r=[];
			for(var s in o) {
				r.push(s);
			}
			r.sort(function(a,b) {
				var a_depr = o[a].deprecation ? 1 : 0;
				var b_depr = o[b].deprecation ? 1 : 0;
				var c = a_depr - b_depr;
				if ( c === 0 && a !== b ) {
					c = a < b ? -1 : 1;
				} // if c === 0 && a === b, c remains 0
				return c;
			});
			return r;
		}
		
		function alternate(i) {
			return " class='" + ((i % 2) ? "sapDkCueCdOdd" : "sapDkCueCdEven") + "'";
		}
		
		function kind(k) {
			if ( k === 0 ) {
				return "Property of type ";
			} else if ( k === 1 || k === 2 ) {
				return "Aggregation of type ";
			} else if ( k === 3 || k === 4 ) {
				return "Association of type ";
			} else if ( k === 6 ) {
				return "Event parameter of type ";
			} else if ( k === 7 ) {
				return "Return value of type ";
			} else if ( k === 6 ) {
				return "Method parameter of type ";
			} else {
				return "";
			}
		}
		
		function crossref(p, t, card) {
			if ( t ) {
				if ( card === "0..n" ) {
					return crossref(p, t) + "[]";
				}
				var bPrimitive = isPrimitive(t) ;
				var sShort = jQuery.sap.encodeHTML(t.split(".").slice(-1)[0]);
				var tfull = jQuery.sap.encodeHTML(kind(p.kind) + t);
				if ( bNavigable && (!bDemokit || !bPrimitive ) ) {
					return "<a class='sapDkLnk' id='" + oControl.getId() + "-l-" + (child++) + "' data-sap-ui-entity='" + t + "' title='"+ tfull + "'>" + sShort + "</a>";
				} else {
					return "<span title='" + t + "'>" + sShort + "</span>";
				}
			}
			return '';
		}

		function deprClass(o) {
			return o.deprecation ? " sapDkCueCdDeprct" : "";
		}
		
		function deprDoc(o) {
			return o.deprecation ? "<br><i><b>Deprecated</b>: " + o.deprecation + "</i>" : "";
		}
		
		function defaultAggrClass(bIsDefault) {
			return bIsDefault ? " sapDkCueCdDfltAggr" : "";
		}
		
		function defaultAggrDoc(bIsDefault) {
			return bIsDefault ? "<br><b>Note</b>: This is the default aggregation.": "";
		} 
		
		if ( oDoc ) {
		    rm.write("<table>");
		    if ( !bDemokit ) {
		    	rm.write("<tr><td colspan='3' class='sapDkCueCdHd0", deprClass(o), "'>", oControl.getEntityName(), "</td></tr>");
		    	rm.write("<tr><td colspan='3' class='sapDkCueCdDoc'>", oDoc.doc || '', deprDoc(oDoc), "</td></tr>");
		    }
	    	if ( oDoc.metatype === ".control" ) {

	    		var settings = jQuery.extend({}, oDoc.properties, oDoc.aggregations, oDoc.associations); 
			    var n = names(settings);
			    if ( n.length > 0 ) {
			    	rm.write("<tr><td colspan='3' class='sapDkCueCdHd'>", "Properties, Aggregations, Associations", "</td></tr>");
				    for(var i=0; i<n.length; i++) {
				    	var oProp = settings[n[i]];
				    	rm.write("<tr", alternate(i), "><td class='sapDkCueCdName", deprClass(oProp), defaultAggrClass(n[i] === oDoc.defaultAggregation), "'>", n[i], "</td>", "<td class='sapDkCueCdType'>", crossref(oProp, oProp.type, oProp.cardinality), "</td>", "<td class='sapDkCueCdDoc'>", oProp.doc, deprDoc(oProp), defaultAggrDoc(n[i] === oDoc.defaultAggregation), "</td></tr>");
				    } 
			    }
			    
			    var n = names(oDoc.events);
			    if ( n.length > 0 ) {
				    rm.write("<tr><td colspan='3' class='sapDkCueCdHd'>", "Events", "</td></tr>");
				    for(var i=0; i<n.length; i++) {
				    	var oEvent = oDoc.events[n[i]];
				    	rm.write("<tr", alternate(i), "><td class='sapDkCueCdName", deprClass(oEvent), "'>", n[i], "</td>", "<td class='sapDkCueCdType'>", "&nbsp", "</td>", "<td class='sapDkCueCdDoc'>", oEvent.doc, deprDoc(oEvent), "</td></tr>");
				    	var pnames = names(oEvent.parameters);
				    	for(var j=0; j<pnames.length; j++) {
				    		var pn = pnames[j];
				    		var oParam = oEvent.parameters[pn];
					    	rm.write("<tr", alternate(i), "><td class='sapDkCueCdSubName", deprClass(oParam), "'>", pn, "</td>", "<td class='sapDkCueCdType'>", crossref(oParam, oParam.type), "</td>", "<td class='sapDkCueCdDoc'>", oParam.doc, deprDoc(oParam), "</td></tr>");
				    	}
				    }
			    }
			    
			    var n = names(oDoc.methods);
			    if ( n.length > 0 ) {
				    rm.write("<tr><td colspan='3' class='sapDkCueCdHd'>", "Methods", "</td></tr>");
				    for(var i=0; i<n.length; i++) {
				    	var oMethod = oDoc.methods[n[i]];
				    	var signature = n[i] + "(";
				    	for(var j=0; j<oMethod.parameters.length; j++) {
				    		if ( j > 0 ) {
				    			signature += ",";
				    		}
				    		signature += oMethod.parameters[j].name;
				    	}
				    	signature += ")";
				    	rm.write("<tr", alternate(i), "><td class='sapDkCueCdName", deprClass(oMethod), "' colspan='2'>", signature, "</td>", "<td class='sapDkCueCdDoc'>", oMethod.doc, deprDoc(oMethod), "</td></tr>");
				    	for(var j=0; j<oMethod.parameters.length; j++) {
				    		var oParam = oMethod.parameters[j];
					    	rm.write("<tr", alternate(i), "><td class='sapDkCueCdSubName", deprClass(oParam), "'>", oParam.name, "</td>", "<td class='sapDkCueCdType'>", crossref(oParam, oParam.type), "</td>", "<td class='sapDkCueCdDoc'>", oParam.doc, deprDoc(oParam), "</td></tr>");
				    	}
				    	if ( oMethod.type !== "sap.ui.core/void" ) {
					    	rm.write("<tr", alternate(i), "><td class='sapDkCueCdSubName'>", "<i>returns</i>", "</td>", "<td class='sapDkCueCdType'>", crossref(oMethod, oMethod.type), "</td>", "<td class='sapDkCueCdDoc'>", "&nbsp;", "</td></tr>");
				    	}
				    }
			    }
	    	}
	    	if ( oDoc.metatype === ".type" ) {
			    var n = names(oDoc.values);
			    if ( n.length > 0 ) {
			    	rm.write("<tr><td colspan='3' class='sapDkCueCdHd", deprClass(oDoc), "'>", "Values", "</td></tr>");
				    for(var i=0; i<n.length; i++) {
				    	var oValue = oDoc.values[n[i]];
				    	rm.write("<tr", alternate(i), "><td class='sapDkCueCdName", deprClass(oValue), "'>", n[i], "</td>", "<td class='sapDkCueCdType'>", "&nbsp;", "</td>", "<td class='sapDkCueCdDoc'>", oValue.doc, deprDoc(oValue), "</td></tr>");
				    }
	    		}
			    if ( oDoc.pattern ) {
			    	rm.write("<tr><td colspan='3' class='sapDkCueCdHd'>", "Constraints", "</td></tr>");
			    	rm.write("<tr", alternate(i), "><td class='sapDkCueCdName'>", "pattern", "</td>", "<td>", "&nbsp;", "</td>", "<td class='sapDkCueCdDoc'>", oDoc.pattern, "</td></tr>");
			    }
	    	}
		    rm.write("</table>");
	    }
	    
	}
	if ( oControl.getCollapsible() ) {
		rm.renderControl(oControl._oShowCueCardLink);
	}
    rm.write("</div>");
};


}; // end of sap/ui/demokit/UI5EntityCueCardRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.Bootstrap') ) {
jQuery.sap.declare("sap.ui.demokit.explored.Bootstrap");

sap.ui.demokit.explored.Bootstrap = {

	run : function () {
		sap.ui.demokit._loadAllLibInfo(
			"", "_getDocuIndex",
			function (aLibs, oDocIndicies) {
				sap.ui.demokit.explored.Bootstrap._processAndStoreIndices(oDocIndicies);
				sap.ui.demokit.explored.Bootstrap._loadUi();
			});
	},

	_processAndStoreIndices : function (oDocIndicies) {

		var aCategoryWhiteList = [ "Action", "Container", "Display", "Chart", "Mini Chart", "Layout", "List", "Popup", "Tile", "User Input" ];
		var afilterProps = [ "namespace", "since", "category", "appComponent"]; // form factors are set manually
		var oFilterSets = {
			namespace : {},
			since : {},
			category : {},
			appComponent : {},
			formFactors : { // form factors are set manually
				"Independent" : true,
				"Condensed" : true,
				"Compact" : true,
				"Cozy" : true
			}
		};
		var mFormFactorsMap = {
			"-" : "Independent",
			"S" : "Condensed",
			"SM" : "Condensed, Compact",
			"SL" : "Condensed, Cozy",
			"SML" : "Condensed, Compact, Cozy",
			"M" : "Compact",
			"ML" : "Compact, Cozy",
			"L" : "Cozy"
		};

		// init data structures
		sap.ui.demokit.explored.data = {};
		sap.ui.demokit.explored.data.entityCount = 0;
		sap.ui.demokit.explored.data.entities = [];
		sap.ui.demokit.explored.data.filter = {};
		sap.ui.demokit.explored.data.samples = {};

		// iterate docu indices
		jQuery.each(oDocIndicies, function (i, oDoc) {

			// check data
			if (!oDoc.explored) {
				return;
			} else if (!oDoc.explored.samplesRef) {
				jQuery.sap.log.error("explored: cannot register lib '" + oDoc.library + "'. missing 'explored.samplesRef'");
				return;
			} else if (!oDoc.explored.samplesRef.namespace) {
				jQuery.sap.log.error("explored: cannot register lib '" + oDoc.library + "'. missing 'explored.samplesRef.namespace'");
				return;
			} else if (!oDoc.explored.samplesRef.ref) {
				jQuery.sap.log.error("explored: cannot register lib '" + oDoc.library + "'. missing 'explored.samplesRef.ref'");
				return;
			} else if (!oDoc.explored.entities) {
				jQuery.sap.log.error("explored: cannot register lib '" + oDoc.library + "'. missing 'explored.entities'");
				return;
			} else {
				jQuery.sap.log.info("explored: now reading lib '" + oDoc.library + "'");
			}

			// _register sample resources
			var sResourceRoot = "";
			var sPath = sResourceRoot + oDoc.explored.samplesRef.ref;
			jQuery.sap.registerModulePath(oDoc.explored.samplesRef.namespace, sPath);

			// build sample map
			jQuery.each(oDoc.explored.samples, function (i, oSample) {
				if (!oSample.id)  {
					jQuery.sap.log.error("explored: cannot register sample '?'. missing 'id'");
				} else if (!oSample.name)  {
					jQuery.sap.log.error("explored: cannot register sample '" + oSample.id + "'. missing 'name'");
				} else {
					sap.ui.demokit.explored.data.samples[oSample.id] = oSample;
				}
			});

			// iterate entities
			jQuery.each(oDoc.explored.entities, function (j, oEnt) {

				// check id property
				if (!oEnt.id)  {
					jQuery.sap.log.error("explored: cannot register entity '?'. missing 'id'");
					return;
				}

				// apply default properties
				if (oDoc.explored.entitiesDefaults) {
					jQuery.each(oDoc.explored.entitiesDefaults, function (key, value) {
						if (!oEnt.hasOwnProperty(key)) {
							oEnt[key] = value;
						} 
					});
				}

				// apply namespace property
				var iIndex = oEnt.id.lastIndexOf(".");
				var sNamespace = (iIndex !== -1) ? oEnt.id.substring(0, iIndex) : oEnt.id;
				oEnt.namespace = sNamespace;

				// check name property
				if (!oEnt.name)  {
					jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. missing 'name'");
					return;
				}

				// check category white list
				if (aCategoryWhiteList.indexOf(oEnt.category) === -1)  {
					jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. category '" + oEnt.category + "' is not allowed");
					return;
				}

				// convert form factors
				if (!oEnt.formFactors)  {
					jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. missing 'formFactors'");
					return;
				}
				if (!mFormFactorsMap[oEnt.formFactors]) {
					jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. formFactors '" + oEnt.formFactors + "' is not allowed");
					return;
				}
				oEnt.formFactors = mFormFactorsMap[oEnt.formFactors];
				
				// check filter properties
				var bAbortEntity = false;
				jQuery.each(afilterProps, function (i, sProp) {
					if (!oEnt[sProp])  {
						jQuery.sap.log.error("explored: cannot register entity '" + oEnt.id + "'. missing '" + sProp + "'");
						bAbortEntity = true;
						return false;
					}
				});
				if (bAbortEntity) {
					return;
				}

				// add filter properties to sets
				jQuery.each(afilterProps, function (i, sProp) {
					oFilterSets[sProp][oEnt[sProp]] = true;
				});

				// add entity
				sap.ui.demokit.explored.data.entities.push(oEnt);
			});
		});

		// iterate entities one more time and add the sample data
		// (this must be done in a separate loop in order to map samples across libraries/docIndizes)
		jQuery.each(sap.ui.demokit.explored.data.entities, function (i, oEnt) {

			// check samples property
			if (oEnt.samples && !(oEnt.samples instanceof Array)) {
				oEnt.samples = [];
				jQuery.sap.log.error("explored: cannot register samples for entity '" + oEnt.id + "'. 'samples' is not an array");
			}
			if (!oEnt.samples) {
				oEnt.samples = [];
			}

			// lookup samples and build search tags
			var aSamples = [];
			oEnt.searchTags = oEnt.name + " " + oEnt.category;
			jQuery.each(oEnt.samples, function (j, sId) {
				var oSample = sap.ui.demokit.explored.data.samples[sId];
				if (!oSample) {
					jQuery.sap.log.error("explored: cannot register sample '" + sId + "' for '" + oEnt.id + "'. not found in the available docu indizes");
				} else {
					aSamples.push(oSample);
					oEnt.searchTags += " " + oSample.name;
				}
			});
			oEnt.samples = aSamples;

			// set count
			oEnt.sampleCount = oEnt.samples.length;
		});

		// set count
		sap.ui.demokit.explored.data.entityCount = sap.ui.demokit.explored.data.entities.length;

		// convert filter sets to arrays
		jQuery.each(oFilterSets, function (setKey, setValue) {
			sap.ui.demokit.explored.data.filter[setKey] = [];
			jQuery.each(setValue, function (key, value) {
				sap.ui.demokit.explored.data.filter[setKey].push({ id: key });
			});
		});
	},

	_loadUi : function () {
		var sPath = jQuery.sap.getModulePath("sap.ui.demokit.explored");
		new sap.m.Shell("Shell", {
			title : "SAPUI5 Explored",
			showLogout : false,
			app : new sap.ui.core.ComponentContainer({
				name : 'sap.ui.demokit.explored'
			}),
			homeIcon : {
				'phone' : sPath + '/img/57_iPhone_Desktop_Launch.png',
				'phone@2' : sPath + '/img/114_iPhone-Retina_Web_Clip.png',
				'tablet' : sPath + '/img/72_iPad_Desktop_Launch.png',
				'tablet@2' : sPath + '/img/144_iPad_Retina_Web_Clip.png',
				'favicon' : sPath + '/img/favicon.ico',
				'precomposed': false
			}
		}).placeAt('content');
	}
};
}; // end of sap/ui/demokit/explored/Bootstrap.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.util.MyRouter') ) {
jQuery.sap.declare("sap.ui.demokit.explored.util.MyRouter");

jQuery.sap.require('sap.ui.core.routing.Router'); // unlisted dependency retained


sap.ui.core.routing.Router.extend("sap.ui.demokit.explored.util.MyRouter", {

	/**
	 * mobile nav back handling
	 */
	myNavBack : function (sRoute, oData) {
		var oHistory = sap.ui.core.routing.History.getInstance();
		var oPrevHash = oHistory.getPreviousHash();
		if (oPrevHash !== undefined) {
			window.history.go(-1);
		} else {
			var bReplace = true; // otherwise we go backwards with a forward history
			this.navTo(sRoute, oData, bReplace);
		}
	},

	/**
	 * a nav to method that does not write hashes but load the views properly
	 */
	myNavToWithoutHash : function (viewName, viewType, master, data) {
		var app = sap.ui.getCore().byId("splitApp");
		var view = this.getView(viewName, viewType);
		app.addPage(view, master);
		app.toDetail(view.getId(), "show", data);
	}
});
}; // end of sap/ui/demokit/explored/util/MyRouter.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.util.ObjectSearch') ) {
jQuery.sap.declare("sap.ui.demokit.explored.util.ObjectSearch");

sap.ui.demokit.explored.util.ObjectSearch = {

	getEntityPath : function (oData, sId) {
		if (!oData.entities) {
			return null;
		}
		var oResult = null;
		jQuery.each(oData.entities, function (i, oEnt) {
			if (oEnt.id === sId) {
				oResult = "/entities/" + i + "/";
				return false;
			}
		});
		return oResult;
	}
};
}; // end of sap/ui/demokit/explored/util/ObjectSearch.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.view.entity.controller') ) {
  jQuery.sap.declare('sap.ui.demokit.explored.view.entity.controller');


sap.ui.controller("sap.ui.demokit.explored.view.entity", {

	// ====== event handling ====================================================================

	onInit : function () {
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);
		this._component = sap.ui.component(sap.ui.core.Component.getOwnerIdFor(this.getView()));
	},

	onTypeLinkPress : function (oEvt) {

		// navigate to entity
		var sType = oEvt.getSource().data("type");
		this.router.navTo("entity", {
			id : sType,
			part : "samples"
		}, false);

		// notify master of selection change
		this._component.getEventBus().publish("app", "selectEntity", {id: sType});
	},

	onTabSelect : function (oEvt) {
		// update URL without updating history
		var sTab = oEvt.getParameter("key");
		this.router.navTo("entity", {
			id : this._sId,
			part : sTab
		}, true);
	},
	
	onNavBack : function (oEvt) {
		this.router.myNavBack("home", {});
	},

	onNavToSample : function (oEvt) {
		var sPath = oEvt.getSource().getBindingContext("entity").getPath();
		var oSample = this.getView().getModel("entity").getProperty(sPath);
		this.router.navTo("sample", {
			id : oSample.id
		});
	},

	_TAB_KEYS : [ "sampes", "about", "properties", "aggregations", "associations", "events", "methods" ],

	onRouteMatched : function (oEvt) {

		var sRouteName = oEvt.getParameter("name"),
			sNewId = oEvt.getParameter("arguments").id,
			sNewTab = oEvt.getParameter("arguments").part;

		// check route
		if (sRouteName !== "entity") {
			return;
		}

		// find entity in index (can be empty!)
		var oEntModel = this.getView().getModel("entity");
		var sPath = sap.ui.demokit.explored.util.ObjectSearch.getEntityPath(oEntModel.getData(), sNewId);
		var oEntity = (sPath) ? oEntModel.getProperty(sPath) : null;

		// set nav button visibility
		var bEntityIsInIndex = !!sPath;
		var oHistory = sap.ui.core.routing.History.getInstance();
		var oPrevHash = oHistory.getPreviousHash();
		var bShowNavButton = sap.ui.Device.system.phone || (!bEntityIsInIndex && !!oPrevHash);
		this.getView().byId("page").setShowNavButton(bShowNavButton);

		// set data model
		var oData;
		if (this._sId !== sNewId) {

			// get view data
			oData = this._getViewData(sNewId, oEntity);
			
			// set view model
			var oModel = new sap.ui.model.json.JSONModel(oData);
			this.getView().setModel(oModel);
			
			// set also the binding context for entity data
			this.getView().bindElement("entity>" + sPath);

			// done, we can now switch the id
			this._sId = sNewId;

		} else {

			// get existing data model
			oData = this.getView().getModel().getData();
		}

		// handle unknown tab
		if (this._TAB_KEYS.indexOf(sNewTab) === -1) {
			sNewTab = "samples";
		}
		// handle invisible tab
		if (!oData.show[sNewTab]) {
			sNewTab = "samples";
		}
		var oTab = this.getView().byId("tabBar");
		if (sNewTab !== oTab.getSelectedKey() && oTab.getExpanded()) {
			oTab.setSelectedKey(sNewTab);
		} 
	},

	// ========= internal ===========================================================================

	_getViewData : function (sId, oEntity) {

		// retrieve docu
		var oDoc = sap.ui.demokit.EntityInfo.getEntityDocu(sId);

		// convert docu
		var oData = this._convertEntityInfo(sId, oDoc);

		// apply entity related stuff
		oData.show.samples = (oEntity) ? oEntity.samples.length > 0 : false;
		oData.count.samples = (oEntity) ? oEntity.samples.length : 0;

		// done
		return oData;
	},

	_convertEntityInfo : function (sId, oDoc) {

		// create skeleton data structure
		var oData = {
			name : sId,
			deprecated : (oDoc) ? this._formatDeprecated(oDoc.deprecation) : null,
			baseType : (oDoc) ? this._formatType(oDoc.baseType) : null,
			baseTypeText : (oDoc) ? this._formatTypeText(oDoc.baseType) : null,
			baseTypeNav : (oDoc) ? this._formatTypeNav(oDoc.baseType) : null,
			description : (oDoc) ? oDoc.doc : null,
			properties : [],
			events : [],
			methods : [],
			aggregations : [],
			associations : [],
			values : [], // for enums!
			show : {
				baseType : (oDoc) ? !!oDoc.baseType : false,
				about : !!oDoc,
				// computed later in this function
				properties : false,
				events : false,
				methods : false,
				aggregations : false,
				associations : false,
				values : false
			},
			count : {
				properties : 0,
				events : 0,
				methods : 0,
				aggregations : 0,
				associations : 0
			}
		};

		// no documentation !
		if (!oDoc) {
			return oData;
		}

		// fill data
		var key = null;
		for (key in oDoc.properties) {
			if (oDoc.properties.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oProp = oDoc.properties[key];
				oProp.name = key;
				oProp.doc = this._formatDoc(oProp.doc, oProp.deprecation);
				oProp.deprecated = this._formatDeprecated(oProp.deprecation);
				oProp.typeText = this._formatTypeText(oProp.type);
				oProp.typeNav = this._formatTypeNav(oProp.type);
				oProp.type = this._formatType(oProp.type);
				oProp.defaultValue = (oProp.defaultValue) ? oProp.defaultValue.replace("empty/undefined", "-") : "";
				oData.properties.push(oProp);
			}
		}
		for (key in oDoc.events) {
			if (oDoc.events.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oEvent = oDoc.events[key];
				oEvent.name = key;
				oEvent.doc = this._formatDoc(oEvent.doc, oEvent.deprecation);
				oEvent.deprecated = this._formatDeprecated(oEvent.deprecation);
				oData.events.push(oEvent);
				for (var p in oEvent.parameters) { // TODO why is parameters not an array ???
					if (oEvent.parameters.hasOwnProperty(p) && p.indexOf("_") !== 0) {
						oData.events.push({
							param : p,
							since : oEvent.parameters[p].since,
							typeText: this._formatTypeText(oEvent.parameters[p].type),
							typeNav: this._formatTypeNav(oEvent.parameters[p].type),
							type: this._formatType(oEvent.parameters[p].type),
							doc : this._formatDoc(oEvent.parameters[p].doc, oEvent.parameters[p].deprecation),
							deprecated : this._formatDeprecated(oEvent.parameters[p].deprecation)
						});
					}
				}
			}
		}
		for (key in oDoc.methods) {
			if (oDoc.methods.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oMethod = oDoc.methods[key];
				oMethod.name = key;
				oMethod.doc = this._formatDoc(oMethod.doc, oMethod.deprecation);
				oMethod.deprecated = this._formatDeprecated(oMethod.deprecation);
				oMethod.param = "returnValue";
				oMethod.typeText = this._formatTypeText(oMethod.type);
				oMethod.typeNav = this._formatTypeNav(oMethod.type);
				oMethod.type = this._formatType(oMethod.type);
				oData.methods.push(oMethod);
				for (var i = 0 ; i < oMethod.parameters.length ; i++) {
					var sParamName = oMethod.parameters[i].name;
					if (sParamName.indexOf("_") !== 0) {
						oData.methods.push({
							param : sParamName,
							since : oMethod.parameters[i].since,
							typeText: this._formatTypeText(oMethod.parameters[i].type),
							typeNav: this._formatTypeNav(oMethod.parameters[i].type),
							type: this._formatType(oMethod.parameters[i].type),
							doc : this._formatDoc(oMethod.parameters[i].doc, oMethod.parameters[i].deprecation),
							deprecated : this._formatDeprecated(oMethod.parameters[i].deprecation)
						});
					}
				}
			}
		}
		for (key in oDoc.aggregations) {
			var oAggr = oDoc.aggregations[key];
			var bNotHidden = (!oAggr.hasOwnProperty("visibility") || oAggr.visibility !== "hidden");
			if (oDoc.aggregations.hasOwnProperty(key) && key.indexOf("_") !== 0 && bNotHidden) {
				oAggr.name = key;
				oAggr.doc = this._formatDoc(oAggr.doc, oAggr.deprecation);
				oAggr.deprecated = this._formatDeprecated(oAggr.deprecation);
				oAggr.typeText = this._formatTypeText(oAggr.type);
				oAggr.typeNav = this._formatTypeNav(oAggr.type);
				oAggr.type = this._formatType(oAggr.type);
				oData.aggregations.push(oAggr);
			}
		}
		for (key in oDoc.associations) {
			if (oDoc.associations.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oAssoc = oDoc.associations[key];
				oAssoc.name = key;
				oAssoc.doc = this._formatDoc(oAssoc.doc, oAssoc.deprecation);
				oAssoc.deprecated = this._formatDeprecated(oAssoc.deprecation);
				oAssoc.typeText = this._formatTypeText(oAssoc.type);
				oAssoc.typeNav = this._formatTypeNav(oAssoc.type);
				oAssoc.type = this._formatType(oAssoc.type);
				oData.associations.push(oAssoc);
			}
		}
		for (key in oDoc.values) {
			if (oDoc.values.hasOwnProperty(key) && key.indexOf("_") !== 0) {
				var oValue = oDoc.values[key];
				oValue.name = key;
				oValue.doc = this._formatDoc(oValue.doc, oValue.deprecation);
				oValue.deprecated = this._formatDeprecated(oValue.deprecation);
				oData.values.push(oValue);
			}
		}

		// determine if the parts shall be shown
		oData.show.properties = oData.properties.length > 0;
		oData.show.events = oData.events.length > 0;
		oData.show.methods = oData.methods.length > 0;
		oData.show.aggregations = oData.aggregations.length > 0;
		oData.show.associations = oData.associations.length > 0;
		oData.show.values = oData.values.length > 0;

		// set counts
		oData.count.properties = oData.properties.length;
		oData.count.events = oData.events.length;
		oData.count.methods = oData.methods.length;
		oData.count.aggregations = oData.aggregations.length;
		oData.count.associations = oData.associations.length;

		return oData;
	},

	/**
	 * Sets the boolean-as-string flag
	 */
	_formatDeprecated : function (sDeprecation) {
		return (sDeprecation && sDeprecation.length > 0) ? "true" : "false";
	},

	/**
	 * Sets the description to the deprecation text if available
	 */
	_formatDoc : function (sDoc, sDeprecation) {
		return (sDeprecation && sDeprecation.length > 0) ? "DEPRECATED. " + sDeprecation : sDoc;
	},

	/**
	 * Converts the type to navigable type
	 */
	_formatType : function (sType) {
		if (!sType) {
			return null;
		} else {
			// remove arrays
			return sType.replace("[]", "");
		}
	},

	/**
	 * Converts the type to a friendly readable text
	 */
	_formatTypeText : function (sType) {
		if (!sType) {
			return null;
		} else {
			// remove core prefix
			sType = sType.replace("sap.ui.core.", "");
			// only take text after last dot
			var index = sType.lastIndexOf(".");
			return (index !== -1) ? sType.substr(index + 1) : sType;
		}
	},

	/**
	 * Determines if the type can be navigated to
	 */
	_baseTypes : [
		"sap.ui.core.any",
		"sap.ui.core.object",
		"sap.ui.core.function",
		"sap.ui.core.number",
		"sap.ui.core.float",
		"sap.ui.core.int",
		"sap.ui.core.boolean",
		"sap.ui.core.string",
		"sap.ui.core.URI",
		"sap.ui.core.ID",
		"sap.ui.core.void",
		"sap.ui.core.CSSSize"
	],
	_formatTypeNav : function (sType) {
		return this._baseTypes.indexOf(sType) === -1;
	}
});
}; // end of sap/ui/demokit/explored/view/entity.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.view.master.controller') ) {
  jQuery.sap.declare('sap.ui.demokit.explored.view.master.controller');
jQuery.sap.require('jquery.sap.storage'); // unlisted dependency retained


sap.ui.controller("sap.ui.demokit.explored.view.master", {

	//========= members =======================================================================

	_bIsViewUpdatedAtLeastOnce : false,

	_oVSDialog : null, // set on demand

	_oViewSettings : null, // set on init

	_oStorage : jQuery.sap.storage(jQuery.sap.storage.Type.local),

	_sStorageKey : "UI5_EXPLORED_VIEW_SETTINGS",

	_mGroupFunctions : {
		"name" : function (oContext) {
			var sKey = oContext.getProperty("name").charAt(0);
			return {
				key: sKey,
				text: sKey
			};
		},
		"namespace" : true,
		"category" : true,
		"appComponent" : true,
		"since" : true,
		"formFactors" : true
	},

	// ====== init ====================================================================

	onInit : function () {

		// subscribe to routing
		this.router = sap.ui.core.UIComponent.getRouterFor(this);
		this.router.attachRoutePatternMatched(this.onRouteMatched, this);

		// subscribe to app events
		this._component = sap.ui.component(sap.ui.core.Component.getOwnerIdFor(this.getView()));
		this._component.getEventBus().subscribe("app", "selectEntity", this.onSelectEntity, this);

		// subscribe to nav container events
		this.getView().addEventDelegate({
			onBeforeFirstShow : jQuery.proxy(this.onBeforeFirstShow, this)
		});
	},

	// ====== event handling ====================================================================

	onBeforeFirstShow : function () {
		if (!this._bIsViewUpdatedAtLeastOnce) {
			this._updateView();
		}
	},

	onRouteMatched : function (oEvt) {

		var sRouteName = oEvt.getParameter("name");
		if ("home" !== sRouteName && "notFound" !== sRouteName) {
			return;
		}

		// update view
		this._updateView();
	},

	onToggleCompactMode : function (oEvt) {

		// toggle view settings
		this._oViewSettings.compactOn = (!this._oViewSettings.compactOn);
		var s = JSON.stringify(this._oViewSettings);
		this._oStorage.put(this._sStorageKey, s);

		// notify user
		jQuery.sap.require("sap.m.MessageToast");
		if (this._oViewSettings.compactOn) {
			sap.m.MessageToast.show("Now displaying content in 'Compact' Size");
		} else {
			sap.m.MessageToast.show("Now displaying content in default size ('Condensed' or 'Cozy')");
		}

		// notify app controller to set class
		this._component.getEventBus().publish("app", "setCompact", {
			compactOn : this._oViewSettings.compactOn
		});
	},

	onSelectEntity : function (sChannel, sEvent, oData) {

		var oView = this.getView(),
			oList = oView.byId("list"),
			oModel = oView.getModel("entity");

		// find item to select
		var oSelectItem = null;
		var aItems = oList.getItems();
		jQuery.each(aItems, function (i, oItem) {
			var oContext = oItem.getBindingContext("entity");
			if (oContext) {
				var sPath = oContext.getPath();
				var oEntity = oModel.getProperty(sPath);
				if (oEntity.id === oData.id) {
					oSelectItem = oItem;
					return false;
				}
			}
		});

		// select
		if (oSelectItem) {
			oList.setSelectedItem(oSelectItem);
		} else {
			oList.removeSelections();
		}
		
		// TODO scroll to list item
	},

	onOpenViewSettings : function () {

		// create dialog on demand
		if (!this._oVSDialog) {
			this._oVSDialog = sap.ui.xmlfragment("sap.ui.demokit.explored.view.viewSettingsDialog", this);
			this.getView().addDependent(this._oVSDialog);
		}

		// delay because addDependent is async
		jQuery.sap.delayedCall(0, this, function () {

			// apply user selection
			var aFilterKeys = {};
			jQuery.each(this._oViewSettings.filter, function (sPropery, aValues) {
				jQuery.each(aValues, function (i, aValue) {
					aFilterKeys[aValue] = true;
				});
			});
			this._oVSDialog.setSelectedFilterKeys(aFilterKeys);
			this._oVSDialog.setSelectedGroupItem(this._oViewSettings.groupProperty);
			this._oVSDialog.setGroupDescending(this._oViewSettings.groupDescending);
			this._oVSDialog.toggleStyleClass("sapUiSizeCompact", this._oViewSettings.compactOn);

			// open
			this._oVSDialog.open();
		});
	},

	onConfirmViewSettings : function (oEvt) {

		// store filter settings
		var that = this;
		this._oViewSettings.filter = {};
		var aFilterItems = oEvt.getParameter("filterItems");
		jQuery.each(aFilterItems, function (i, oItem) {
			var sKey = oItem.getKey();
			var sParentKey = oItem.getParent().getKey();
			if (!that._oViewSettings.filter.hasOwnProperty(sParentKey)) {
				that._oViewSettings.filter[sParentKey] = [];
			}
			that._oViewSettings.filter[sParentKey].push(sKey);
		});

		// store group settings
		var oGroupItem = oEvt.getParameter("groupItem");
		var sNewGroup = (oGroupItem) ? oGroupItem.getKey() : null;
		this._oViewSettings.groupProperty = sNewGroup;
		this._oViewSettings.groupDescending = oEvt.getParameter("groupDescending");

		// update local storage
		var s = JSON.stringify(this._oViewSettings);
		this._oStorage.put(this._sStorageKey, s);

		// update view
		this._updateView();
	},
	
	onSearch : function () {
		this._updateView(); // yes this function does a bit too much for search but it makes my life easier and I see no delay
	},

	onNavToEntity : function (oEvt) {
		var oItemParam = oEvt.getParameter("listItem");
		var oItem = (oItemParam) ? oItemParam : oEvt.getSource();
		var sPath = oItem.getBindingContext("entity").getPath();
		var oEnt = this.getView().getModel("entity").getProperty(sPath);
		var bReplace = !sap.ui.Device.system.phone;
		this.router.navTo("entity", {
			id : oEnt.id,
			part : "samples"
		}, bReplace);
	},

	// ========= internal ===========================================================================

	/**
	 * Makes sure the view settings are initialized and updates the filter bar dispay and list binding
	 */
	_updateView : function () {

		if (!this._oViewSettings) {
	
			// init the view settings
			this._initViewSettings();

			// notify app controller to set compact mode
			this._component.getEventBus().publish("app", "setCompact", {
				compactOn : this._oViewSettings.compactOn
			});

			// set compact button
			this.getView().byId("compactModeButton").setPressed(this._oViewSettings.compactOn);
		}

		// update the filter bar
		this._updateFilterBarDisplay();

		// update the master list binding
		this._updateListBinding();
	},

	/**
	 * Updates the filter bar in the view
	 */
	_updateFilterBarDisplay : function () {

		// calculate text
		var sFilterText = "";
		jQuery.each(this._oViewSettings.filter, function (sProperty, aValues) {
			jQuery.each(aValues, function (i, aValue) {
				sFilterText += aValue + ", ";
			});
		});
		if (sFilterText.length > 0) {
			var iIndex = sFilterText.lastIndexOf(", ");
			sFilterText = sFilterText.substring(0, iIndex);
		}

		// update view
		var oView = this.getView();
		oView.byId("vsFilterBar").setVisible(sFilterText.length > 0);
		oView.byId("vsFilterLabel").setText(sFilterText);
	},
	
	/**
	 * Updates the binding of the master list and applies filters and groups
	 */
	_updateListBinding : function () {

		var aFilters = [],
			aSorters = [],
			oSearchField = this.getView().byId("searchField"),
			oList = this.getView().byId("list"),
			oBinding = oList.getBinding("items");

		// add filter for search
		var sQuery = oSearchField.getValue();
		if (sQuery) {
			aFilters.push(new sap.ui.model.Filter("searchTags", "Contains", sQuery));
		}

		// add filters for view settings
		jQuery.each(this._oViewSettings.filter, function (sProperty, aValues) {
			var aPropertyFilters = [];
			jQuery.each(aValues, function (i, aValue) {
				var sOperator = ("formFactors" === sProperty) ? "Contains" : "EQ";
				aPropertyFilters.push(new sap.ui.model.Filter(sProperty, sOperator, aValue));
			});
			var oFilter = new sap.ui.model.Filter(aPropertyFilters, false); // second parameter stands for "or"
			aFilters.push(oFilter);
		});

		// filter
		if (aFilters.length === 0) {
			oBinding.filter(aFilters, "Application");
		} else {
			var oFilter = new sap.ui.model.Filter(aFilters, true); // second parameter stands for "and"
			oBinding.filter(oFilter, "Application");
		}

		// group
		if (this._oViewSettings.groupProperty) {
			var oSorter = new sap.ui.model.Sorter(
				this._oViewSettings.groupProperty,
				this._oViewSettings.groupDescending,
				this._mGroupFunctions[this._oViewSettings.groupProperty]);
			aSorters.push(oSorter);
		}
		aSorters.push(new sap.ui.model.Sorter("name", false));
		oBinding.sort(aSorters);

		// memorize that this function was executed at least once
		this._bIsViewUpdatedAtLeastOnce = true;
	},

	/**
	 * Inits the view settings. At first local storage is checked. If this is empty defaults are applied.
	 */
	_initViewSettings : function () {

		var sJson = this._oStorage.get(this._sStorageKey);
		if (!sJson) {

			// local storage is empty, apply defaults
			this._oViewSettings = {
				filter : {},
				groupProperty : "category",
				groupDescending : false,
				compactOn : false
			};

		} else {

			// parse
			this._oViewSettings = JSON.parse(sJson);

			// clean filter and remove values that do not exist any longer in the data model
			// (the cleaned filter are not written back to local storage, this only happens on changing the view settings)
			var oFilterData = this.getView().getModel("filter").getData();
			var oCleanFilter = {};
			jQuery.each(this._oViewSettings.filter, function (sProperty, aValues) {
				var aNewValues = [];
				jQuery.each(aValues, function (i, aValue) {
					var bValueIsClean = false;
					jQuery.each(oFilterData[sProperty], function (i, oValue) {
						if (oValue.id === aValue) {
							bValueIsClean = true;
							return false;
						}
					});
					if (bValueIsClean) {
						aNewValues.push(aValue);
					}
				});
				if (aNewValues.length > 0) {
					oCleanFilter[sProperty] = aNewValues;
				}
			});
			this._oViewSettings.filter = oCleanFilter;

			// handling data stored with an older explored versions
			if (!this._oViewSettings.hasOwnProperty("compactOn")) { // compactOn was introduced later
				this._oViewSettings.compactOn = false;
			}
		}
	}
}); 
}; // end of sap/ui/demokit/explored/view/master.controller.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ui.demokit (1.22.10)
 */
jQuery.sap.declare("sap.ui.demokit.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library with non-public controls, used in the UI5 demokit (SDK)
 *
 * @namespace
 * @name sap.ui.demokit
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.ui.demokit",
  dependencies : ["sap.ui.core","sap.ui.commons"],
  types: [
    "sap.ui.demokit.UI5EntityCueCardStyle"
  ],
  interfaces: [],
  controls: [
    "sap.ui.demokit.CodeSampleContainer",
    "sap.ui.demokit.CodeViewer",
    "sap.ui.demokit.FileUploadIntrospector",
    "sap.ui.demokit.HexagonButton",
    "sap.ui.demokit.HexagonButtonGroup",
    "sap.ui.demokit.IndexLayout",
    "sap.ui.demokit.TagCloud",
    "sap.ui.demokit.UI5EntityCueCard"
  ],
  elements: [
    "sap.ui.demokit.Tag",
    "sap.ui.demokit.UIAreaSubstitute"
  ],
  version: "1.22.10"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ui.demokit.UI5EntityCueCardStyle.
jQuery.sap.declare("sap.ui.demokit.UI5EntityCueCardStyle");


/**
 * @class different styles for an entity cue card.
 *
 * @version 1.22.10
 * @static
 * @public
 */
sap.ui.demokit.UI5EntityCueCardStyle = {

	/**
	 * default style (no special styling).
	 * @public
	 */
	Standard : "Standard",

	/**
	 * Demokit style
	 * @public
	 */
	Demokit : "Demokit"

};

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

jQuery.sap.require('sap.ui.demokit.js.highlight-query-terms'); // unlisted dependency retained


sap.ui.lazyRequire("sap.ui.demokit.UI5EntityCueCard", "attachToContextMenu detachFromContextMenu");
sap.ui.lazyRequire("sap.ui.demokit.DemokitApp", "new getInstance");
sap.ui.lazyRequire("sap.ui.demokit.IndexPage");

sap.ui.getCore().attachInitEvent( function () {

	if ( jQuery("body").hasClass("sapUiDemokitBody") ) {
	
		// replace h1 headers with our title
		jQuery("h1").each(function() {
			var $=jQuery(this),
			sTitle = $.text(),
			sColor = "Gray",//$.attr('color'),
			sIcon  = $.attr('icon'),
			sIconPos = $.attr('iconPos') || 'left:40px;top:20px;',
			$title = jQuery("<div class='sapUiDemokitTitle'><span>" + sTitle + "</span></div>");
	
			// first attach new content to DOM
			$.replaceWith($title);
			// only then enrich it with a HexButton (otherwise placeAt() will not find the UIArea)
			if ( sColor || sIcon) {
				$title.prepend("<div id='sap-demokit-icon'></div>");
				new sap.ui.demokit.HexagonButton({color:sColor, imagePosition:'position: relative;' + sIconPos, icon:sIcon}).placeAt("sap-demokit-icon");
			}
	
		});
	
		var $h2 = jQuery("h2");
		var $settings = jQuery('h2[id="settings"]');
		var sControls = jQuery("html").attr('data-sap-ui-dk-controls');
		if ( $settings.size()===0 && $h2.size()>=2 && sControls) {
			jQuery($h2[1]).before(jQuery("<h2 id='settings'>Settings (Overview)</h2><div cue-card='" + sControls.split(',')[0] + "'></div>"));
			$h2 = jQuery("h2");
		}
		var $tln=jQuery("ul.sapDkTLN");
		if ( $h2.size() > 0 && $tln.size() == 0 ) {
			$h2.first().before($tln = jQuery("<ul class='sapDkTLN'></ul>"));
		}
		if ( true ) {
			$h2.each(function(idx) {
				var $ = jQuery(this);
				// Skip hidden sections. Can be used to suppress sections (e.g. settings) in a page
				if ( $.css('display') === 'none' ) {
					return;
				}
				if ( !$.attr('id') ) {
					$.attr('id', '__' + idx);
				}
				var a = jQuery("<a></a>").attr("href", "#" + $.attr('id')).text($.text()).addClass('sapDkLnk');
				var li = jQuery("<li></li>").append(a)
				$tln.append(li);
			});
		}
		
		// create CodeSampleContainers
		jQuery("[code-sample]").each(function() {
			var $=jQuery(this),
			sUiAreaId = $.attr('code-sample'),
			sScriptId = $.attr('script') || $.children('script').attr('id') || sUiAreaId + "-script";
			$.addClass("sapUiDemokitSampleCont");
			new sap.ui.demokit.CodeSampleContainer("code-sample-" + sUiAreaId, { scriptElementId : sScriptId, uiAreaId : sUiAreaId}).placeAt(this);
		});
	
		// create CueCards
		jQuery("[cue-card]").each(function() {
			var $=jQuery(this),
				sEntityName = $.attr('cue-card');
			
			new sap.ui.demokit.UI5EntityCueCard({ 
				entityName : sEntityName, 
				collapsible : false, 
				expanded : true, 
				style: 'Demokit',
				navigable: true,
				navigate: function(oEvent) {
					top.sap.ui.demokit.DemokitApp.getInstance().navigateToType(oEvent.getParameter("entityName"));
					oEvent.preventDefault();
				},
				title: 'Settings (Overview)'
			}).placeAt(this);
		});
	
	}
	
});

sap.ui.demokit._getAppInfo = function(fnCallback) {
	var sUrl = sap.ui.resource("", "sap-ui-version.json");
	
	jQuery.ajax({
		url: sUrl,
		dataType: "json",
		error: function(xhr, status, e) {
			jQuery.sap.log.error("failed to load library list from '" + sUrl + "': " + status + ", " + e); 
			fnCallback(null);
		},
		success : function(oAppInfo, sStatus, oXHR) {
			if(!oAppInfo){
				jQuery.sap.log.error("failed to load library list from '" + sUrl + "': " + sStatus + ", Data: " + aLibraries);
				fnCallback(null);
				return;
			}
			
			fnCallback(oAppInfo);
		}
	});
};

sap.ui.demokit._loadAllLibInfo = function(sAppRoot, sInfoType /*"_getDocuIndex", "_getThirdPartyInfo", "_getLibraryInfo"*/, fnCallback) {
	jQuery.sap.require("sap.ui.core.util.LibraryInfo");
	var libInfo = new sap.ui.core.util.LibraryInfo();
	
	sap.ui.demokit._getAppInfo(function(oAppInfo) {
		if (!(oAppInfo && oAppInfo.libraries)) {
			fnCallback(null, null);
		}
		
		var count = 0,
			aLibraries = oAppInfo.libraries,
			len = aLibraries.length,
			oLibInfos = {},
			oLibVersions = {},
			aLibs = [],
			libName,
			libVersion;
		for(var i=0; i<len; i++){
			libName = aLibraries[i].name;
			libVersion = aLibraries[i].version;
			aLibs.push(libName);
			oLibVersions[libName] = libVersion;
			libInfo[sInfoType](libName, function(oExtensionData){
				oLibInfos[oExtensionData.library] = oExtensionData;
				// fallback to version coming from version info file
				// (in case of ABAP we always should refer to the libVersion if available!)
				//if (!oLibInfos[oExtensionData.library].version) {
				var sVersion = oLibVersions[oExtensionData.library];
				if (sVersion) {
					oLibInfos[oExtensionData.library].version = sVersion;
				}
				count++;
				if(count == len) {
					fnCallback(aLibs, oLibInfos, oAppInfo);
				}
			});
		}
	});
};

}; // end of sap/ui/demokit/library.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.CodeSampleContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.CodeSampleContainer.
jQuery.sap.declare("sap.ui.demokit.CodeSampleContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new CodeSampleContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getScriptElementId scriptElementId} : string</li>
 * <li>{@link #getUiAreaId uiAreaId} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSourceVisible sourceVisible} : boolean (default: false)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '90%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.demokit.CodeSampleContainer#event:apply apply} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container for both the source and the runtime results of a CodeSample. By default, only the runtime results are shown. There are additional controls that allow the user to display the source, modify and run it.
 * 
 * The container provides a sub container that can be used in calls to sap.ui.setRoot() as if it would be a normal UIArea. So the sample code doesn't have to know that it runs in a CodeSample container.
 * 
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @name sap.ui.demokit.CodeSampleContainer
 */
sap.ui.core.Control.extend("sap.ui.demokit.CodeSampleContainer", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.demokit",
	properties : {
		"scriptElementId" : {type : "string", group : "Misc", defaultValue : null},
		"uiAreaId" : {type : "string", group : "Misc", defaultValue : null},
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"sourceVisible" : {type : "boolean", group : "Misc", defaultValue : false},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : '90%'}
	},
	aggregations : {
    	"_uiarea" : {type : "sap.ui.demokit.UIAreaSubstitute", multiple : false, visibility : "hidden"}
	},
	events : {
		"apply" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.CodeSampleContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.CodeSampleContainer.extend
 * @function
 */

sap.ui.demokit.CodeSampleContainer.M_EVENTS = {'apply':'apply'};


/**
 * Getter for property <code>scriptElementId</code>.
 * Id of the script element that contains the initial sample code for this code sample.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>scriptElementId</code>
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#getScriptElementId
 * @function
 */

/**
 * Setter for property <code>scriptElementId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sScriptElementId  new value for property <code>scriptElementId</code>
 * @return {sap.ui.demokit.CodeSampleContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#setScriptElementId
 * @function
 */


/**
 * Getter for property <code>uiAreaId</code>.
 * Id of the container for the running code. This Id can be used in calls to sap.ui.setRoot as if it would be a normal UIArea. Internally, a container UIElement is created with that Id.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uiAreaId</code>
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#getUiAreaId
 * @function
 */

/**
 * Setter for property <code>uiAreaId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUiAreaId  new value for property <code>uiAreaId</code>
 * @return {sap.ui.demokit.CodeSampleContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#setUiAreaId
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ui.demokit.CodeSampleContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#setTitle
 * @function
 */


/**
 * Getter for property <code>sourceVisible</code>.
 * Whether the source code is visible or not.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>sourceVisible</code>
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#getSourceVisible
 * @function
 */

/**
 * Setter for property <code>sourceVisible</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSourceVisible  new value for property <code>sourceVisible</code>
 * @return {sap.ui.demokit.CodeSampleContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#setSourceVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of the CodeSample container.
 *
 * Default value is <code>90%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>90%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.demokit.CodeSampleContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#setWidth
 * @function
 */


/**
 *  
 *
 * @name sap.ui.demokit.CodeSampleContainer#apply
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.code
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'apply' event of this <code>sap.ui.demokit.CodeSampleContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.demokit.CodeSampleContainer</code>.<br/> itself. 
 *  
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.CodeSampleContainer</code>.<br/> itself.
 *
 * @return {sap.ui.demokit.CodeSampleContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#attachApply
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'apply' event of this <code>sap.ui.demokit.CodeSampleContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.demokit.CodeSampleContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeSampleContainer#detachApply
 * @function
 */

/**
 * Fire event apply to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'code' of type <code>string</code> </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.demokit.CodeSampleContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.demokit.CodeSampleContainer#fireApply
 * @function
 */


// Start of sap\ui\demokit\CodeSampleContainer.js
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained


sap.ui.demokit.CodeSampleContainer.prototype.init = function(){

	this._oUIArea = new sap.ui.demokit.UIAreaSubstitute(this.getUiAreaId());
	this.setAggregation("_uiarea", this._oUIArea);
	this._oCodeViewer = new sap.ui.demokit.CodeViewer({
		visible : false, 
		source : "", 
		press : [this._setCodeEditable, this],
		save : [this._saveAndApplyCode, this]
	});
	this._oCodeViewer.setParent(this); //TODO provide sAggregationName?
	this._oShowCodeLink = new sap.ui.commons.Link({	text : "Show Source", press : [this._toggleCodeDisplay, this]});
	this._oShowCodeLink.setParent(this); //TODO provide sAggregationName?
	this._oApplyCodeLink = new sap.ui.commons.Link({ visible: false, text : 'Apply', press : [this._saveAndApplyCode, this]});
	this._oApplyCodeLink.setParent(this); //TODO provide sAggregationName?

};

sap.ui.demokit.CodeSampleContainer.prototype.setSourceVisible = function(bSourceVisible) {
	this.setProperty("sourceVisible", bSourceVisible);
	this._oCodeViewer && this._oCodeViewer.setVisible(this.getSourceVisible());
	this._oShowCodeLink && this._oShowCodeLink.setText(this.getSourceVisible() ? "Hide Source" : "Show Source");
	this._oApplyCodeLink && this._oApplyCodeLink.setVisible(this.getSourceVisible());
};

sap.ui.demokit.CodeSampleContainer.prototype.setUiAreaId = function(sId) {
	this.setProperty("uiAreaId", sId);
	var aContent;
	if ( this._oUIArea ) {
		aContent = this._oUIArea.removeAllContent();
		this._oUIArea.destroy();
	}
	this._oUIArea = new sap.ui.demokit.UIAreaSubstitute(this.getUiAreaId());
	this.setAggregation("_uiarea", this._oUIArea);
	if ( aContent ) {
		for(var i=0; i<aContent.length; i++) {
			this._oUIArea.addContent(aContent[i]);
		}
	}
};

sap.ui.demokit.CodeSampleContainer.prototype.setScriptElementId = function(sId) {
	this.setProperty("scriptElementId", sId);
	this._oCodeViewer.setSource(this._getSource());
	if ( sId && !this._oScriptRef ) {
		var that = this;
		sap.ui.getCore().attachInitEvent(function() { that._oCodeViewer.setSource(that._getSource()) });
	}
};

sap.ui.demokit.CodeSampleContainer.prototype._getSource = function() {
	var sSource = "!source not found! (" + this.getScriptElementId() + ")";
	if ( this.getScriptElementId() ) {
		this._oScriptRef = jQuery.sap.domById(this.getScriptElementId());
		if ( this._oScriptRef ) {
			sSource = this._oScriptRef.innerHTML;
		}
	}
	return sSource;
};

sap.ui.demokit.CodeSampleContainer.prototype._setCodeEditable = function() {
	this._oCodeViewer.setEditable(true); 
	var that = this;
	setTimeout(function() { that._oCodeViewer.focus(); }, 50);
};

sap.ui.demokit.CodeSampleContainer.prototype._toggleCodeDisplay = function() {
	this.setSourceVisible(!this.getSourceVisible());
};

sap.ui.demokit.CodeSampleContainer.prototype._saveAndApplyCode = function() {
	var sCode = this._oCodeViewer.getSource();
	if ( this._oCodeViewer.getEditable() ) {
		sCode = this._oCodeViewer.getCurrentSource();
		this._oCodeViewer.setSource(sCode);
		this._oCodeViewer.setEditable(false);
	}

	// before executing the new code, we discard the old UIArea content 
	// Otherwise, invalidation might fail (due to the bPrerendered logic in Control)
	this._oUIArea.destroyContent();
	
	// now execute the code
	if ( !this.hasListeners("apply") ) {
		eval(sCode);
	} else {
		this.fireApply({ code : sCode });
	}
	
};

}; // end of sap/ui/demokit/CodeSampleContainer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.CodeViewer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.CodeViewer.
jQuery.sap.declare("sap.ui.demokit.CodeViewer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new CodeViewer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSource source} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEditable editable} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.demokit.CodeViewer#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ui.demokit.CodeViewer#event:save save} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new CodeViewer
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @name sap.ui.demokit.CodeViewer
 */
sap.ui.core.Control.extend("sap.ui.demokit.CodeViewer", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.demokit",
	properties : {
		"source" : {type : "string", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"editable" : {type : "boolean", group : "Misc", defaultValue : false},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"press" : {}, 
		"save" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.CodeViewer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.CodeViewer.extend
 * @function
 */

sap.ui.demokit.CodeViewer.M_EVENTS = {'press':'press','save':'save'};


/**
 * Getter for property <code>source</code>.
 * The source code to display.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>source</code>
 * @public
 * @name sap.ui.demokit.CodeViewer#getSource
 * @function
 */

/**
 * Setter for property <code>source</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSource  new value for property <code>source</code>
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeViewer#setSource
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The CSS width property
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.demokit.CodeViewer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeViewer#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The CSS height property
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.demokit.CodeViewer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeViewer#setHeight
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Whether the code can be edited or not
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.ui.demokit.CodeViewer#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeViewer#setEditable
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ui.demokit.CodeViewer#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeViewer#setVisible
 * @function
 */


/**
 * Called when the mouse button is clicked over the non-editable(!) control
 *  
 *
 * @name sap.ui.demokit.CodeViewer#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.demokit.CodeViewer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.demokit.CodeViewer</code>.<br/> itself. 
 *  
 * Called when the mouse button is clicked over the non-editable(!) control
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.CodeViewer</code>.<br/> itself.
 *
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeViewer#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.demokit.CodeViewer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeViewer#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.demokit.CodeViewer#firePress
 * @function
 */


/**
 * Called when the editor is active and should be saved 
 *
 * @name sap.ui.demokit.CodeViewer#save
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'save' event of this <code>sap.ui.demokit.CodeViewer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.demokit.CodeViewer</code>.<br/> itself. 
 *  
 * Called when the editor is active and should be saved 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.CodeViewer</code>.<br/> itself.
 *
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeViewer#attachSave
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'save' event of this <code>sap.ui.demokit.CodeViewer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.CodeViewer#detachSave
 * @function
 */

/**
 * Fire event save to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.demokit.CodeViewer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.demokit.CodeViewer#fireSave
 * @function
 */


// Start of sap\ui\demokit\CodeViewer.js
sap.ui.demokit.CodeViewer.load = function() {
	if ( !window.prettyPrint ) {
		jQuery.sap.require("sap.ui.demokit.js.prettify");
	}
};

sap.ui.demokit.CodeViewer.load();

/**  
 * Adapts size settings of the rendered HTML in special situations
 */
sap.ui.demokit.CodeViewer.prototype.onAfterRendering = function () {
	var oDomRef = this.getDomRef();
	if ( !this.getEditable() && oDomRef && oDomRef.className.indexOf("prettyprint") === 0 && window.prettyPrint ) {
		// TODO a call to prettyPrint() will also pretty print other CodeViewer controls -> avoid double pretty printing
		prettyPrint();
		oDomRef.className = "sapUiCodeViewer";
	}
};

/**
 * Function is called when code viewer is clicked.
 * 
 * @param oBrowserEvent the forwarded sap.ui.core.BrowserEvent
 * @private
 */
sap.ui.demokit.CodeViewer.prototype.onclick = function(e) {
	if (!this.getEditable()){
		this.firePress({id:this.getId()});
		e.preventDefault();
		e.stopPropagation();	
	}
};

/**
 * Handles the sapescape event... triggers return to non-editable mode (revert)
 * @param {sap.ui.core.BroserEvent} oBrowserEvent the forwarded browser event
 * @private
 */
sap.ui.demokit.CodeViewer.prototype.onsapescape = function(oBrowserEvent) {
	if ( this.getEditable() ) {
		// we do not update the source from the PRE tag, so this acts as a 'revert'
		this.setEditable(false);
	}
};

sap.ui.demokit.CodeViewer.prototype.onkeydown = function(e) {
	if ( this.getEditable() && 
		 ((e.keyCode == jQuery.sap.KeyCodes.S && e.ctrlKey && !e.shiftKey && !e.altKey) ||
		  (e.keyCode == jQuery.sap.KeyCodes.F2)) ) {
		e.preventDefault();
		e.stopPropagation();	
		this.fireSave();
	}
};

sap.ui.demokit.CodeViewer.prototype.getCurrentSource = (function() {

	var SIMPLE_HTML_REGEXP = /<(\/?[^ >]+)[^>]*>|(&[^;]+;)/g,
		TAG_REPLACEMENTS = {
			"/p" : "\n",
			"br" : "\n",
			"div" : "\n"
		},
		ENTITY_REPLACEMENTS = {
			"&nbsp;" : " ",
			"&lt;" : "<",
			"&gt;" : ">",
			"&amp;" : "&"
		};
	
	return function() {
		var code = '',
			oDomRef = this.getDomRef();
		
		if ( oDomRef ) {
			// retrieve the edited source via innerHTML as this seems to be the only way to detect line breaks 
			code = oDomRef.innerHTML;
			//var code = oDomRef.textContent;
			//if (!code) {
			//	// IE version
			//	code = oDomRef.innerText;
			//}

			// convert some well known tags and entities, remove all others
			code = code.replace(SIMPLE_HTML_REGEXP, function(m,m1,m2) {
				if ( m1 ) {
					m1 = m1.toLowerCase();
					if ( TAG_REPLACEMENTS[m1] )
						return TAG_REPLACEMENTS[m1];
				} else if ( m2 ) {
					m2 = m2.toLowerCase();
					if ( ENTITY_REPLACEMENTS[m2] ) 
						return ENTITY_REPLACEMENTS[m2];
				}
				return "";
			});
		}
		return code;
	};
})();


jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Dialog'); // unlisted dependency retained


sap.ui.demokit.CodeViewer.showScript = function(sId) {
	var oDomRef = document.getElementById(sId);
	var sSource = oDomRef.innerHTML;

	if ( !oDomRef || !sSource ) 
		return;
	
	var oClose = new sap.ui.commons.Button({text:"Close", press: function() { oDialog.close();}});
	var oDialog = new sap.ui.commons.Dialog({
		applyContentPadding : false,
		title : "Source Code for '" + sId + "'", 
		resizable: true,
		minWidth:"400px", minHeight:"200px",
		buttons : [oClose], 
		content : new sap.ui.demokit.CodeViewer({
			source:sSource,
			press: function() { alert('clicked into code viewer');}}),
		defaultButton: oClose});
	oDialog.center();
	oDialog.open();
};

}; // end of sap/ui/demokit/CodeViewer.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.FileUploadIntrospector') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.FileUploadIntrospector.
jQuery.sap.declare("sap.ui.demokit.FileUploadIntrospector");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new FileUploadIntrospector.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getUploadUrl uploadUrl} : string</li>
 * <li>{@link #getAutoRefreshInterval autoRefreshInterval} : string (default: '0')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new FileUploadInspector
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @name sap.ui.demokit.FileUploadIntrospector
 */
sap.ui.core.Control.extend("sap.ui.demokit.FileUploadIntrospector", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"refresh"
	],

	// ---- control specific ----
	library : "sap.ui.demokit",
	properties : {
		"uploadUrl" : {type : "string", group : "Misc", defaultValue : null},
		"autoRefreshInterval" : {type : "string", group : "Misc", defaultValue : '0'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.FileUploadIntrospector with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.FileUploadIntrospector.extend
 * @function
 */


/**
 * Getter for property <code>uploadUrl</code>.
 * The URL to check the upload content with....
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uploadUrl</code>
 * @public
 * @name sap.ui.demokit.FileUploadIntrospector#getUploadUrl
 * @function
 */

/**
 * Setter for property <code>uploadUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUploadUrl  new value for property <code>uploadUrl</code>
 * @return {sap.ui.demokit.FileUploadIntrospector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.FileUploadIntrospector#setUploadUrl
 * @function
 */


/**
 * Getter for property <code>autoRefreshInterval</code>.
 * Interval in milliseconds after which the content is checked again. values lower or equal to 0 mean 'no automatic refresh'.
 *
 * Default value is <code>0</code>
 *
 * @return {string} the value of property <code>autoRefreshInterval</code>
 * @public
 * @name sap.ui.demokit.FileUploadIntrospector#getAutoRefreshInterval
 * @function
 */

/**
 * Setter for property <code>autoRefreshInterval</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {string} sAutoRefreshInterval  new value for property <code>autoRefreshInterval</code>
 * @return {sap.ui.demokit.FileUploadIntrospector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.FileUploadIntrospector#setAutoRefreshInterval
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * (CSS) Height of the control
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ui.demokit.FileUploadIntrospector#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ui.demokit.FileUploadIntrospector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.FileUploadIntrospector#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of the file list
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ui.demokit.FileUploadIntrospector#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ui.demokit.FileUploadIntrospector} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.FileUploadIntrospector#setWidth
 * @function
 */


/**
 * 
 *
 * @name sap.ui.demokit.FileUploadIntrospector.prototype.refresh
 * @function

 * @type void
 * @public
 */


// Start of sap\ui\demokit\FileUploadIntrospector.js
sap.ui.demokit.FileUploadIntrospector.prototype.init = function() {
	this._aFiles = [];
	this._iHash = 0;
};

sap.ui.demokit.FileUploadIntrospector.prototype.setAutoRefreshInterval = function(iInterval) {
	this.setProperty("autoRefreshInterval", iInterval);
	if ( this.oTimer ) {
		jQuery.sap.clearDelayedCall(this.oTimer);
		this.oTimer = undefined;
	}
	if ( iInterval > 0 ) {
		this.oTimer = jQuery.sap.delayedCall(iInterval, this, "_autoRefresh");
	}
};

sap.ui.demokit.FileUploadIntrospector.prototype.refresh = function() {
	var that = this;
	jQuery.getJSON(this.getUploadUrl(), function(data) { that._receiveFileList(data); });
};

sap.ui.demokit.FileUploadIntrospector.prototype._autoRefresh = function() {
	if ( this.oTimer ) {
		jQuery.sap.clearDelayedCall(this.oTimer);
		this.oTimer = undefined;
	}
	this.refresh(); 
	// TODO reinitialize timer only after response has been received (requires separate receive methods)  
	var iInterval = this.getAutoRefreshInterval();
	if ( iInterval > 0 ) {
		this.oTimer = jQuery.sap.delayedCall(iInterval, this, "_autoRefresh");
	}
};

sap.ui.demokit.FileUploadIntrospector.prototype._receiveFileList = function(oResult) {
	if ( !this._aFiles || this._iHash !== oResult.hash ) {
		this._aFiles = oResult.files;
		this._iHash = oResult.hash;
		this.invalidate();
	}
}; 
}; // end of sap/ui/demokit/FileUploadIntrospector.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.HexagonButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.HexagonButton.
jQuery.sap.declare("sap.ui.demokit.HexagonButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new HexagonButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getColor color} : string (default: 'blue')</li>
 * <li>{@link #getPosition position} : string</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getImagePosition imagePosition} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.demokit.HexagonButton#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new HexagonButton
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @name sap.ui.demokit.HexagonButton
 */
sap.ui.core.Control.extend("sap.ui.demokit.HexagonButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.demokit",
	properties : {
		"icon" : {type : "string", group : "Misc", defaultValue : null},
		"color" : {type : "string", group : "Misc", defaultValue : 'blue'},
		"position" : {type : "string", group : "Misc", defaultValue : null},
		"enabled" : {type : "boolean", group : "Misc", defaultValue : true},
		"imagePosition" : {type : "string", group : "Misc", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.HexagonButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.HexagonButton.extend
 * @function
 */

sap.ui.demokit.HexagonButton.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>icon</code>.
 * Icon to display
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ui.demokit.HexagonButton#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ui.demokit.HexagonButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButton#setIcon
 * @function
 */


/**
 * Getter for property <code>color</code>.
 * The color of the hexagon
 *
 * Default value is <code>blue</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.ui.demokit.HexagonButton#getColor
 * @function
 */

/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>blue</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.ui.demokit.HexagonButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButton#setColor
 * @function
 */


/**
 * Getter for property <code>position</code>.
 * The position. If set, the button is rendered with an absolute position.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>position</code>
 * @public
 * @name sap.ui.demokit.HexagonButton#getPosition
 * @function
 */

/**
 * Setter for property <code>position</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPosition  new value for property <code>position</code>
 * @return {sap.ui.demokit.HexagonButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButton#setPosition
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Whether the button is enabled or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.ui.demokit.HexagonButton#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.ui.demokit.HexagonButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButton#setEnabled
 * @function
 */


/**
 * Getter for property <code>imagePosition</code>.
 * The position of the contained image. If not set the image is rendered with a fixed relative position.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imagePosition</code>
 * @public
 * @name sap.ui.demokit.HexagonButton#getImagePosition
 * @function
 */

/**
 * Setter for property <code>imagePosition</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImagePosition  new value for property <code>imagePosition</code>
 * @return {sap.ui.demokit.HexagonButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButton#setImagePosition
 * @function
 */


/**
 * Fired when the user clicks the hex button 
 *
 * @name sap.ui.demokit.HexagonButton#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.demokit.HexagonButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.demokit.HexagonButton</code>.<br/> itself. 
 *  
 * Fired when the user clicks the hex button 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.HexagonButton</code>.<br/> itself.
 *
 * @return {sap.ui.demokit.HexagonButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButton#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.demokit.HexagonButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.demokit.HexagonButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButton#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.demokit.HexagonButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.demokit.HexagonButton#firePress
 * @function
 */


// Start of sap\ui\demokit\HexagonButton.js
/**
 * Function is called when hexagon is clicked.
 * 
 * @param oBrowserEvent the forwarded sap.ui.core.BrowserEvent
 * @private
 */
sap.ui.demokit.HexagonButton.prototype.onclick = function(oBrowserEvent) {
	// TODO check for the hexagon
	if ( this.getEnabled() ) {
		this.firePress({id:this.getId()});
	}
	oBrowserEvent.preventDefault();
	oBrowserEvent.stopPropagation();
};

// intercept attach/detachPress to be able to rerender (renderer behaves differently for purely "decorative" buttons)
sap.ui.demokit.HexagonButton.prototype._attachPress = sap.ui.demokit.HexagonButton.prototype.attachPress; 
sap.ui.demokit.HexagonButton.prototype.attachPress = function() {
	this._attachPress.apply(this, arguments);
	this.invalidate();
};

sap.ui.demokit.HexagonButton.prototype._detachPress = sap.ui.demokit.HexagonButton.prototype.detachPress; 
sap.ui.demokit.HexagonButton.prototype.detachPress = function() {
	this._detachPress.apply(this, arguments);
	this.invalidate();
};
}; // end of sap/ui/demokit/HexagonButton.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.HexagonButtonGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.HexagonButtonGroup.
jQuery.sap.declare("sap.ui.demokit.HexagonButtonGroup");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new HexagonButtonGroup.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColspan colspan} : int (default: 3)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.ui.demokit.HexagonButton[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new HexagonButtonGroup
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup
 */
sap.ui.core.Control.extend("sap.ui.demokit.HexagonButtonGroup", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.demokit",
	properties : {
		"colspan" : {type : "int", group : "Misc", defaultValue : 3}
	},
	aggregations : {
    	"buttons" : {type : "sap.ui.demokit.HexagonButton", multiple : true, singularName : "button"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.HexagonButtonGroup with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.HexagonButtonGroup.extend
 * @function
 */


/**
 * Getter for property <code>colspan</code>.
 * 
 *
 * Default value is <code>3</code>
 *
 * @return {int} the value of property <code>colspan</code>
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup#getColspan
 * @function
 */

/**
 * Setter for property <code>colspan</code>.
 *
 * Default value is <code>3</code> 
 *
 * @param {int} iColspan  new value for property <code>colspan</code>
 * @return {sap.ui.demokit.HexagonButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup#setColspan
 * @function
 */


/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * 
 * 
 * @return {sap.ui.demokit.HexagonButton[]}
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup#getButtons
 * @function
 */


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.demokit.HexagonButton}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.ui.demokit.HexagonButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup#insertButton
 * @function
 */

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.ui.demokit.HexagonButton}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.ui.demokit.HexagonButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup#addButton
 * @function
 */

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.ui.demokit.HexagonButton} vButton the button to remove or its index or id
 * @return {sap.ui.demokit.HexagonButton} the removed button or null
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup#removeButton
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.demokit.HexagonButton[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup#removeAllButtons
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.demokit.HexagonButton</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.demokit.HexagonButton}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup#indexOfButton
 * @function
 */
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.ui.demokit.HexagonButtonGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.HexagonButtonGroup#destroyButtons
 * @function
 */


// Start of sap\ui\demokit\HexagonButtonGroup.js
///**
// * This file defines behavior for the control, 
// */
//sap.ui.demokit.HexagonButtonGroup.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/ui/demokit/HexagonButtonGroup.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.IndexLayout') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.IndexLayout.
jQuery.sap.declare("sap.ui.demokit.IndexLayout");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new IndexLayout.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getItemWidth itemWidth} : sap.ui.core.CSSSize (default: '200px')</li>
 * <li>{@link #getItemHeight itemHeight} : sap.ui.core.CSSSize (default: '200px')</li>
 * <li>{@link #getEnableScaling enableScaling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} <strong>(default aggregation)</strong> : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Layout which renders content items with equal width and height. The items are arranged in rows.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @since 1.17.0
 * @experimental Since version 1.17.0. 
 * API is not yet finished and might change completely
 * @name sap.ui.demokit.IndexLayout
 */
sap.ui.core.Control.extend("sap.ui.demokit.IndexLayout", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.demokit",
	properties : {
		"itemWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '200px'},
		"itemHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '200px'},
		"enableScaling" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.IndexLayout with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.IndexLayout.extend
 * @function
 */


/**
 * Getter for property <code>itemWidth</code>.
 * The width of a content item. Only px values are allowed.
 *
 * Default value is <code>200px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>itemWidth</code>
 * @public
 * @name sap.ui.demokit.IndexLayout#getItemWidth
 * @function
 */

/**
 * Setter for property <code>itemWidth</code>.
 *
 * Default value is <code>200px</code> 
 *
 * @param {sap.ui.core.CSSSize} sItemWidth  new value for property <code>itemWidth</code>
 * @return {sap.ui.demokit.IndexLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.IndexLayout#setItemWidth
 * @function
 */


/**
 * Getter for property <code>itemHeight</code>.
 * The height of a content item. Only px values are allowed.
 *
 * Default value is <code>200px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>itemHeight</code>
 * @public
 * @name sap.ui.demokit.IndexLayout#getItemHeight
 * @function
 */

/**
 * Setter for property <code>itemHeight</code>.
 *
 * Default value is <code>200px</code> 
 *
 * @param {sap.ui.core.CSSSize} sItemHeight  new value for property <code>itemHeight</code>
 * @return {sap.ui.demokit.IndexLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.IndexLayout#setItemHeight
 * @function
 */


/**
 * Getter for property <code>enableScaling</code>.
 * Whether the given item width/height should be scaled according to the screen size.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableScaling</code>
 * @public
 * @name sap.ui.demokit.IndexLayout#getEnableScaling
 * @function
 */

/**
 * Setter for property <code>enableScaling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableScaling  new value for property <code>enableScaling</code>
 * @return {sap.ui.demokit.IndexLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.IndexLayout#setEnableScaling
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content items
 * 
 * <strong>Note</strong>: this is the default aggregation for IndexLayout.
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.demokit.IndexLayout#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.demokit.IndexLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.IndexLayout#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.demokit.IndexLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.IndexLayout#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.demokit.IndexLayout#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.demokit.IndexLayout#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.demokit.IndexLayout#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.demokit.IndexLayout} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.IndexLayout#destroyContent
 * @function
 */


// Start of sap\ui\demokit\IndexLayout.js
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IntervalTrigger'); // unlisted dependency retained


sap.ui.demokit.IndexLayout._MINMARGIN = 18;
sap.ui.demokit.IndexLayout._DEFAULT_ITEM_HEIGHT = 200;
sap.ui.demokit.IndexLayout._DEFAULT_ITEM_WIDTH = 200;
sap.ui.demokit.IndexLayout._pos = null;

(function(){
	
sap.ui.demokit.IndexLayout._IntervalTrigger = new sap.ui.core.IntervalTrigger(300);

sap.ui.demokit.IndexLayout.prototype.init = function(){
	this._itemWidth = sap.ui.demokit.IndexLayout._DEFAULT_ITEM_WIDTH;
	this._itemHeight = sap.ui.demokit.IndexLayout._DEFAULT_ITEM_HEIGHT;
	this._tilesPerRow;
	this._width;
	this._registered = false;
	this._itemScaleFactor = 1;
	sap.ui.Device.media.attachHandler(setScaleFactor, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD);
};


sap.ui.demokit.IndexLayout.prototype.exit = function(){
	this.onBeforeRendering();
	sap.ui.Device.media.detachHandler(setScaleFactor, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD);
};


sap.ui.demokit.IndexLayout.prototype.setItemWidth = function(sItemWidth){
	this.setProperty("itemWidth", sItemWidth, true);
	if(!sItemWidth || sItemWidth.indexOf("px") < 0){
		this._itemWidth = sap.ui.demokit.IndexLayout._DEFAULT_ITEM_WIDTH;
		this.setProperty("itemWidth", this._itemWidth, true);
	}else{
		this._itemWidth = parseInt(sItemWidth, 10);
	}
	_refresh(this);
	return this;
};


sap.ui.demokit.IndexLayout.prototype.setItemHeight = function(sItemHeight){
	this.setProperty("itemHeight", sItemHeight, true);
	if(!sItemHeight || sItemHeight.indexOf("px") < 0){
		this._itemHeight = sap.ui.demokit.IndexLayout._DEFAULT_ITEM_HEIGHT;
		this.setProperty("itemHeight", this._itemHeight, true);
	}else{
		this._itemHeight = parseInt(sItemHeight, 10);
	}
	_refresh(this);
	return this;
};


sap.ui.demokit.IndexLayout.prototype.setEnableScaling = function(bEnableScaling){
	this.setProperty("enableScaling", bEnableScaling, true);
	_refresh(this);
	return this;
};


sap.ui.demokit.IndexLayout.prototype.onBeforeRendering = function(){
	if(this._registered){
		sap.ui.demokit.IndexLayout._IntervalTrigger.removeListener(refresh, this);
		this._registered = false;
	}
	
	var mMediaParams = sap.ui.Device.media.getCurrentRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD);
	setScaleFactor.apply(this, [mMediaParams, true]);
};

sap.ui.demokit.IndexLayout.prototype.onThemeChanged = function(){
	if(this.getDomRef()){
		this.invalidate();
	}
};

sap.ui.demokit.IndexLayout.prototype.onAfterRendering = function(){
	if(!sap.ui.demokit.IndexLayout._pos){
		var transform = null;
		var oStyle = this.getDomRef().style;
		if("webkitTransform" in oStyle){
			  transform = "-webkit-transform";
		}else if ("transform" in oStyle){
			  transform = "transform";
		}else if ("msTransform" in oStyle){
			  transform = "-ms-transform";
		}else if ("MozTransform" in oStyle){
			  transform = "-moz-transform";
		}
		if(transform){
			sap.ui.demokit.IndexLayout._pos = function($ref, x, y){
				$ref.css(transform, "translate("+x+"px,"+y+"px)");
			};
		}else{
			sap.ui.demokit.IndexLayout._pos = function($ref, x, y){
				$ref.css({top: y+"px", left: x+"px"});
			};
		}
	}
	
	if(!this._registered){
		sap.ui.demokit.IndexLayout._IntervalTrigger.addListener(refresh, this);
		this._registered = true;
	}
	this.$().toggleClass("sapDkIdxLayoutHidden", false);
};


sap.ui.demokit.IndexLayout.prototype._scale = function(iVal){
	if(!this.getEnableScaling()){
		return iVal;
	}
	return Math.floor(iVal*this._itemScaleFactor);
};


function _refresh(oLyt, bNoForce){
	refresh.apply(oLyt, [!bNoForce]);
}


function refresh(bInitial){
	if(!this.getDomRef()){
		this.onBeforeRendering();
		return;
	}
	
	bInitial = bInitial || !this._registered;
	
	var $Layout = this.$(),
		w = $Layout.outerWidth(),
		h = $Layout.outerHeight(),
		heightChanged = this._height != h;
	
	if(this._width === w && !heightChanged && !bInitial){
		return;
	}
	
	this._width = w;
	this._height = h;

	var itemCount = this.getContent().length,
		itemWidth = this._scale(this._itemWidth),
		itemHeight = this._scale(this._itemHeight),
		t = getOptimalTilesPerRow(this._width, itemCount, itemWidth),
		//leftpad = Math.max(sap.ui.demokit.IndexLayout._MINMARGIN, Math.floor((this._width - t*itemWidth)/2)),
		tilesPerRowChanged = this._tilesPerRow != t;
	
	this._tilesPerRow = t;
	
	if(!bInitial){
		$Layout.toggleClass("sapDkIdxLayoutAnim", true);
	}
	
	//$Layout.css("padding-left", leftpad+"px");
	
	if(!tilesPerRowChanged && !bInitial && !heightChanged){
		return;
	}
	
	var top = 0,
		left = 0;
		  
	jQuery.sap.byId(this.getId()+"-cntnt").css({
		"padding-left": sap.ui.demokit.IndexLayout._MINMARGIN + "px",
		"width": (t*itemWidth + sap.ui.demokit.IndexLayout._MINMARGIN*2) + "px",
		"height": Math.ceil(itemCount/t)*itemHeight
	}).children().each(function(index){
		if(index > 0 && index % t === 0){
			top = top+itemHeight;
			left = 0;
		}
		sap.ui.demokit.IndexLayout._pos(jQuery(this), left, top);
		left = left+itemWidth;
	});
	
	if(bInitial){
		$Layout.css({
			"padding-top": sap.ui.demokit.IndexLayout._MINMARGIN + "px",
			"padding-bottom": sap.ui.demokit.IndexLayout._MINMARGIN + "px"
		});
	}
};


function getOptimalTilesPerRow(width, itemCount, itemWidth){
	var t = Math.min(Math.floor((width-2*sap.ui.demokit.IndexLayout._MINMARGIN)/itemWidth), itemCount);
	var mod = itemCount % t;
	if(mod == 0 || itemCount <= t){
		return t;
	}
  
	function weight(x){
		var m = itemCount%x;
		return (t-x)*Math.floor(itemCount/x) + (m != 0 ? (t - m) : 0);
	}
  
	var best = weight(t);
	var canditates = [t];
  
	for(var i=t-1; i>=1; i--){
		var w = weight(i);
		if(w < best){
			canditates = [i];
			best = w;
		}else if(w == best) {
			canditates.push(i);
		}
	}

	for(var i=0; i<canditates.length; i++){
		var m = itemCount % canditates[i];
		if(m == 0){
			return canditates[i];
		}else if(i==0 || m > best){
			best = m;
			t = canditates[i];
		}
	}
  
	return t;
};

function setScaleFactor(mMediaParams, bSkipUpdate){
	switch(mMediaParams.name){
		case "Tablet":
			this._itemScaleFactor = 0.75;
			break;
		case "Phone":
			this._itemScaleFactor = 0.5;
			break;
		default:
			this._itemScaleFactor = 1;
	}
	
	if(!this.getDomRef() || bSkipUpdate){
		return;
	}
	
	var width = this._scale(this._itemWidth);
	var height = this._scale(this._itemHeight);
	
	jQuery.sap.byId(this.getId()+"-cntnt").children().each(function(){
		jQuery(this).css({width: width, height: height});
	});
	
	_refresh(this);
};


//**********************************************

sap.ui.core.Control.extend("sap.ui.demokit.IndexLayout._Tile", {
	
	metadata : {
        properties : {
            "title" : "string",
            "description" : "string",
            "target" : "string",
            "icon": "sap.ui.core.URI",
            "href": "sap.ui.core.URI"
        },
        events : {
        	"press": {}
        }
    },
	
	onclick : function() {
		if(!this.getHref()){
			this.firePress();
		}
	},
	
	renderer: function(oRm, oControl) {
		oRm.write("<a");
		oRm.addClass("sapDkIdxLayout_Tile");
		oRm.writeClasses();
		oRm.writeControlData(oControl);
		if (oControl.getHref()) {
			oRm.writeAttributeEscaped("href", oControl.getHref());
			if (oControl.getTarget()) {
				oRm.writeAttributeEscaped("target", oControl.getTarget());
			}
		}	else {
			oRm.writeAttribute("href", "javascript:void(0);");
		}
		oRm.writeAttributeEscaped("title", oControl.getDescription());
		oRm.write(">");
		
		oRm.write("<span class='sapDkIdxLayout_TileIcon'>");
		oRm.writeIcon(oControl.getIcon());
		oRm.write("</span>");

		oRm.write("<span class='sapDkIdxLayout_TileLabel'");
		oRm.writeAttributeEscaped("title", oControl.getTitle());
		oRm.write(">");
		oRm.writeEscaped(oControl.getTitle());
		oRm.write("</span>");
		
		oRm.write("<span class='sapDkIdxLayout_TileDesc'");
		oRm.writeAttributeEscaped("title", oControl.getDescription());
		oRm.write(">");
		oRm.writeEscaped(oControl.getDescription());
		oRm.write("</span>");
		
		oRm.write("</a>");
	}
});

})();

}; // end of sap/ui/demokit/IndexLayout.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.IndexLayoutPage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
// Creates Index Page within the Demokit
jQuery.sap.declare("sap.ui.demokit.IndexLayoutPage");
jQuery.sap.require('jquery.sap.encoder'); // unlisted dependency retained


jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained



sap.ui.demokit.IndexLayoutPage = function IndexPage(oData, sTarget, sBaseUrl, bCustomFont) {
	
	var oModel = new sap.ui.model.json.JSONModel(oData);
	sap.ui.getCore().setModel(oModel);
	
	var oCatIndex = new sap.ui.demokit.IndexLayoutPage.Repeat({
		categories: {
	        path: "/categories", 
	        template: new sap.ui.demokit.IndexLayoutPage.Cat({
	        	title: "{text}",
	        	layout: new sap.ui.demokit.IndexLayout({
	        		enableScaling: true,
	        		content: {
	        	        path: "links", 
	        	        template: new sap.ui.demokit.IndexLayout._Tile({
	        	    		title: "{text}",
	        	    		description: "{desc}",
	        	    		target: sTarget,
	        	    		icon: {
	        	    			path: "icon",
	        	    			formatter: function(ico){
	        	    				if(!ico){
	        	    					ico = "learning-assistant";
	        	    				}
	        	    				return "sap-icon://" + ico;
	        	    			}
	        	    		},
	        	    		href: "{ref}"
	        	    	})
	        	    }
	        	})
	        })
	    }
	});
	
	if(bCustomFont){
		sap.ui.core.IconPool.addIcon("explored", "custom", "brandico", "e001", true);
		sap.ui.core.IconPool.addIcon("cart", "custom", "brandico", "e002", true); //Obsolete?
		sap.ui.core.IconPool.addIcon("makit", "custom", "brandico", "e005", true); //Obsolete?
		sap.ui.core.IconPool.addIcon("helloworld", "custom", "brandico", "e003", true); //Obsolete?
		sap.ui.core.IconPool.addIcon("poa", "custom", "brandico", "e007", true); //Obsolete?
		sap.ui.core.IconPool.addIcon("flexbox", "custom", "brandico", "e00A", true); //Obsolete?
		sap.ui.core.IconPool.addIcon("crud", "custom", "brandico", "e009", true); //Obsolete?
		sap.ui.core.IconPool.addIcon("icon-explorer", "custom", "brandico", "e006", true); //Obsolete?
		sap.ui.core.IconPool.addIcon("splitapp", "custom", "brandico", "e00C", true);
		sap.ui.core.IconPool.addIcon("mvc", "custom", "brandico", "e00B", true); //Obsolete?
	}
	
	sap.ui.getCore().attachInit(function(){
		if(bCustomFont){
			var sFontBaseUrl = jQuery.sap.getModulePath("", "/../test-resources/sap/m/demokit/demokit-home/");
			sap.ui.demokit.IndexLayoutPage._introduceCustomFont("brandico", sFontBaseUrl, "demoAppsIconFont");
		}
		
		jQuery("body").append("<div id='root'></div>");
		oCatIndex.placeAt("root");
	});
};


sap.ui.core.Element.extend("sap.ui.demokit.IndexLayoutPage.Cat", {
	metadata : {
        properties : {
            "title" : "string"
        },
        aggregations : {
        	"layout": {type : "sap.ui.demokit.IndexLayout", multiple : false}
        }
    }
});


sap.ui.core.Control.extend("sap.ui.demokit.IndexLayoutPage.Repeat", {
	metadata : {
        aggregations : {
            "categories" : {type : "sap.ui.demokit.IndexLayoutPage.Cat", multiple : true}
        }
    },
	
	renderer: function(oRm, oControl) {
		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.write(">");
		
		var aCats = oControl.getCategories();
		for(var i=0; i<aCats.length; i++){
			oRm.write("<div");
			oRm.writeElementData(aCats[i]);
			oRm.write(">");
			if(aCats[i].getTitle()){
				oRm.write("<h2>");
				oRm.writeEscaped(aCats[i].getTitle());
				oRm.write("</h2>");
			}
			oRm.renderControl(aCats[i].getLayout());
			oRm.write("</div>");
		}
		
		oRm.write("</div>");
	}
});


sap.ui.demokit.IndexLayoutPage._introduceCustomFont = function(sFamilyName, sFontPath, sFontFile){
	var sFontFace = "@font-face {" +
		"font-family: '"+sFamilyName+"';" +
		"src: url('"+ sFontPath + sFontFile +".eot');" +
		"src: url('"+ sFontPath + sFontFile +".eot?#iefix') format('embedded-opentype'), url('"+ sFontPath + sFontFile +".ttf') format('truetype');" +
		"font-weight: normal;" +
		"font-style: normal;" +
		"}";
	jQuery('head').append('<style type="text/css">' + sFontFace +'</style>');
};
}; // end of sap/ui/demokit/IndexLayoutPage.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.Tag') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.Tag.
jQuery.sap.declare("sap.ui.demokit.Tag");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new Tag.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getWeight weight} : int (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A Tag in a TagCloud
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @name sap.ui.demokit.Tag
 */
sap.ui.core.Element.extend("sap.ui.demokit.Tag", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.demokit",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"weight" : {type : "int", group : "Misc", defaultValue : 1}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.Tag with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.Tag.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The text to be disaplyed for this tag.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ui.demokit.Tag#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ui.demokit.Tag} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.Tag#setText
 * @function
 */


/**
 * Getter for property <code>weight</code>.
 * The weight for this tag. Can be any integer value.
 *
 * Default value is <code>1</code>
 *
 * @return {int} the value of property <code>weight</code>
 * @public
 * @name sap.ui.demokit.Tag#getWeight
 * @function
 */

/**
 * Setter for property <code>weight</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {int} iWeight  new value for property <code>weight</code>
 * @return {sap.ui.demokit.Tag} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.Tag#setWeight
 * @function
 */


// Start of sap\ui\demokit\Tag.js
sap.ui.demokit.Tag.prototype.onclick = function(oEvent){
	//Inform the parent about the onclick event
	this.oParent.firePressEvent(this);
};

}; // end of sap/ui/demokit/Tag.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.TagCloud') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.TagCloud.
jQuery.sap.declare("sap.ui.demokit.TagCloud");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new TagCloud.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMaxFontSize maxFontSize} : int (default: 30)</li>
 * <li>{@link #getMinFontSize minFontSize} : int (default: 10)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTags tags} <strong>(default aggregation)</strong> : sap.ui.demokit.Tag[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.demokit.TagCloud#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A simple TagCloud representing a set of weighted tags
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @name sap.ui.demokit.TagCloud
 */
sap.ui.core.Control.extend("sap.ui.demokit.TagCloud", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.demokit",
	properties : {
		"maxFontSize" : {type : "int", group : "Misc", defaultValue : 30},
		"minFontSize" : {type : "int", group : "Misc", defaultValue : 10}
	},
	defaultAggregation : "tags",
	aggregations : {
    	"tags" : {type : "sap.ui.demokit.Tag", multiple : true, singularName : "tag"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.TagCloud with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.TagCloud.extend
 * @function
 */

sap.ui.demokit.TagCloud.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>maxFontSize</code>.
 * 
 *
 * Default value is <code>30</code>
 *
 * @return {int} the value of property <code>maxFontSize</code>
 * @public
 * @name sap.ui.demokit.TagCloud#getMaxFontSize
 * @function
 */

/**
 * Setter for property <code>maxFontSize</code>.
 *
 * Default value is <code>30</code> 
 *
 * @param {int} iMaxFontSize  new value for property <code>maxFontSize</code>
 * @return {sap.ui.demokit.TagCloud} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.TagCloud#setMaxFontSize
 * @function
 */


/**
 * Getter for property <code>minFontSize</code>.
 * 
 *
 * Default value is <code>10</code>
 *
 * @return {int} the value of property <code>minFontSize</code>
 * @public
 * @name sap.ui.demokit.TagCloud#getMinFontSize
 * @function
 */

/**
 * Setter for property <code>minFontSize</code>.
 *
 * Default value is <code>10</code> 
 *
 * @param {int} iMinFontSize  new value for property <code>minFontSize</code>
 * @return {sap.ui.demokit.TagCloud} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.TagCloud#setMinFontSize
 * @function
 */


/**
 * Getter for aggregation <code>tags</code>.<br/>
 * 
 * 
 * <strong>Note</strong>: this is the default aggregation for TagCloud.
 * @return {sap.ui.demokit.Tag[]}
 * @public
 * @name sap.ui.demokit.TagCloud#getTags
 * @function
 */


/**
 * Inserts a tag into the aggregation named <code>tags</code>.
 *
 * @param {sap.ui.demokit.Tag}
 *          oTag the tag to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tag should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tag is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tag is inserted at 
 *             the last position        
 * @return {sap.ui.demokit.TagCloud} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.TagCloud#insertTag
 * @function
 */

/**
 * Adds some tag <code>oTag</code> 
 * to the aggregation named <code>tags</code>.
 *
 * @param {sap.ui.demokit.Tag}
 *            oTag the tag to add; if empty, nothing is inserted
 * @return {sap.ui.demokit.TagCloud} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.TagCloud#addTag
 * @function
 */

/**
 * Removes an tag from the aggregation named <code>tags</code>.
 *
 * @param {int | string | sap.ui.demokit.Tag} vTag the tag to remove or its index or id
 * @return {sap.ui.demokit.Tag} the removed tag or null
 * @public
 * @name sap.ui.demokit.TagCloud#removeTag
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tags</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.demokit.Tag[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.demokit.TagCloud#removeAllTags
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.demokit.Tag</code> in the aggregation named <code>tags</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.demokit.Tag}
 *            oTag the tag whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.demokit.TagCloud#indexOfTag
 * @function
 */
	

/**
 * Destroys all the tags in the aggregation 
 * named <code>tags</code>.
 * @return {sap.ui.demokit.TagCloud} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.TagCloud#destroyTags
 * @function
 */


/**
 * Fired when a Tag is clicked. 
 *
 * @name sap.ui.demokit.TagCloud#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.tagId Id of the selected Tag.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ui.demokit.TagCloud</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.demokit.TagCloud</code>.<br/> itself. 
 *  
 * Fired when a Tag is clicked. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.TagCloud</code>.<br/> itself.
 *
 * @return {sap.ui.demokit.TagCloud} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.TagCloud#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ui.demokit.TagCloud</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.demokit.TagCloud} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.TagCloud#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'tagId' of type <code>string</code> Id of the selected Tag.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ui.demokit.TagCloud} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ui.demokit.TagCloud#firePress
 * @function
 */


// Start of sap\ui\demokit\TagCloud.js
//Called by a tag when a onclick event is triggered there.
//The event is forwarded to the application coding.
sap.ui.demokit.TagCloud.prototype.firePressEvent = function(tag){
  this.firePress({tagId:tag.getId()});
};

}; // end of sap/ui/demokit/TagCloud.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.UI5EntityCueCard') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.UI5EntityCueCard.
jQuery.sap.declare("sap.ui.demokit.UI5EntityCueCard");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new UI5EntityCueCard.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCollapsible collapsible} : boolean (default: true)</li>
 * <li>{@link #getExpanded expanded} : boolean (default: false)</li>
 * <li>{@link #getNavigable navigable} : boolean (default: false)</li>
 * <li>{@link #getEntityName entityName} : string</li>
 * <li>{@link #getStyle style} : sap.ui.demokit.UI5EntityCueCardStyle</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ui.demokit.UI5EntityCueCard#event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Displays documentation for a UI5 entity (control or type).
 * 
 * The documentation will be read from a UI5 metamodel file that by default is loaded from the same resource location
 * where the control or type would be loaded from (using the UI5 resource loading). This control displays all properties,
 * aggregations, associations, events and methods that are described in the metamodel. For each part, it lists the name,
 * type (where applicable) and documentation. If the navigable property is set to true, all types are shown as links
 * and when pressed, the navigate event is fired. This allows consumers to react on a user click on such a type
 * (and to e.g. navigate to the underlying type of a property or aggregation)
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard
 */
sap.ui.core.Control.extend("sap.ui.demokit.UI5EntityCueCard", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.demokit",
	properties : {
		"collapsible" : {type : "boolean", group : "Misc", defaultValue : true},
		"expanded" : {type : "boolean", group : "Misc", defaultValue : false},
		"navigable" : {type : "boolean", group : "Misc", defaultValue : false},
		"entityName" : {type : "string", group : "Misc", defaultValue : null},
		"style" : {type : "sap.ui.demokit.UI5EntityCueCardStyle", group : "Misc", defaultValue : null}
	},
	events : {
		"navigate" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.UI5EntityCueCard with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.UI5EntityCueCard.extend
 * @function
 */

sap.ui.demokit.UI5EntityCueCard.M_EVENTS = {'navigate':'navigate'};


/**
 * Getter for property <code>collapsible</code>.
 * Whether the cue card can be collapsed at all. When set to true, the value of property expanded determines the current collapsed/expanded state. When false, the control is always expanded.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>collapsible</code>
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#getCollapsible
 * @function
 */

/**
 * Setter for property <code>collapsible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCollapsible  new value for property <code>collapsible</code>
 * @return {sap.ui.demokit.UI5EntityCueCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#setCollapsible
 * @function
 */


/**
 * Getter for property <code>expanded</code>.
 * Whether the cue card is currently expanded.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>expanded</code>
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#getExpanded
 * @function
 */

/**
 * Setter for property <code>expanded</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bExpanded  new value for property <code>expanded</code>
 * @return {sap.ui.demokit.UI5EntityCueCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#setExpanded
 * @function
 */


/**
 * Getter for property <code>navigable</code>.
 * Whether type information is navigable. Also see event 'navigate'.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>navigable</code>
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#getNavigable
 * @function
 */

/**
 * Setter for property <code>navigable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bNavigable  new value for property <code>navigable</code>
 * @return {sap.ui.demokit.UI5EntityCueCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#setNavigable
 * @function
 */


/**
 * Getter for property <code>entityName</code>.
 * Qualified name of the control or type to show the documentation for. The name can be specified in the metamodel notation ('sap.ui.core/Control' or in the UI5 resource notation (sap.ui.core.Control).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>entityName</code>
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#getEntityName
 * @function
 */

/**
 * Setter for property <code>entityName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sEntityName  new value for property <code>entityName</code>
 * @return {sap.ui.demokit.UI5EntityCueCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#setEntityName
 * @function
 */


/**
 * Getter for property <code>style</code>.
 * Style of the cue card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.demokit.UI5EntityCueCardStyle} the value of property <code>style</code>
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#getStyle
 * @function
 */

/**
 * Setter for property <code>style</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.demokit.UI5EntityCueCardStyle} oStyle  new value for property <code>style</code>
 * @return {sap.ui.demokit.UI5EntityCueCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#setStyle
 * @function
 */


/**
 * Fired when a link for a type is activated (clicked) by the user.
 * 
 * When property "navigable" is set to true, type links are created for the types of properties, aggregations and associations, for the types of event or method parameters and for the return types of methods (if not void).
 * 
 * The default behavior for this event is to set the entityName property to the clicked entityName. Applications can prevent the default by calling the corresponding method on the event object. 
 *
 * @name sap.ui.demokit.UI5EntityCueCard#navigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.entityName Name of the entity (control or type) that has been clicked.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.ui.demokit.UI5EntityCueCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ui.demokit.UI5EntityCueCard</code>.<br/> itself. 
 *  
 * Fired when a link for a type is activated (clicked) by the user.
 * 
 * When property "navigable" is set to true, type links are created for the types of properties, aggregations and associations, for the types of event or method parameters and for the return types of methods (if not void).
 * 
 * The default behavior for this event is to set the entityName property to the clicked entityName. Applications can prevent the default by calling the corresponding method on the event object. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ui.demokit.UI5EntityCueCard</code>.<br/> itself.
 *
 * @return {sap.ui.demokit.UI5EntityCueCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#attachNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.ui.demokit.UI5EntityCueCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ui.demokit.UI5EntityCueCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UI5EntityCueCard#detachNavigate
 * @function
 */

/**
 * Fire event navigate to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'entityName' of type <code>string</code> Name of the entity (control or type) that has been clicked. </li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.ui.demokit.UI5EntityCueCard#fireNavigate
 * @function
 */


// Start of sap\ui\demokit\UI5EntityCueCard.js
jQuery.sap.require('sap.ui.commons.Link'); // unlisted dependency retained



sap.ui.demokit.UI5EntityCueCard.prototype.init = function() { 
	this._oShowCueCardLink = new sap.ui.commons.Link({	text : "Show All Settings", press : [this._toggleExpanded, this]});
	this._oShowCueCardLink.setParent(this); //TODO provide sAggregationName?
	this._aHistory = [];
	/**
	 * Active position in the history. Moved by back/forward and setEntityName 
	 */
	this._iHistory = -1;
};

sap.ui.demokit.UI5EntityCueCard.prototype.setEntityName = function(sEntityName) {
	if ( sEntityName !== this.getEntityName() ) {
		this.setProperty("entityName", sEntityName);
		this._aHistory[++this._iHistory] = sEntityName;
		this._aHistory.length = this._iHistory + 1; // cut off any dangling entries
	}
};

sap.ui.demokit.UI5EntityCueCard.prototype.back = function() {
	if ( this._iHistory > 0 ) {
		this.setProperty("entityName", this._aHistory[--this._iHistory]);
	}
};

sap.ui.demokit.UI5EntityCueCard.prototype.forward = function() {
	if ( this._iHistory+1 < this._aHistory.length ) {
		this.setProperty("entityName", this._aHistory[++this._iHistory]);
	}
};

sap.ui.demokit.UI5EntityCueCard.prototype.setExpanded = function(bExpanded) {
	this.setProperty("expanded", bExpanded);
	this._oShowCueCardLink && this._oShowCueCardLink.setText(this.getExpanded() ? "Hide Settings" : "Show All Settings");
};

sap.ui.demokit.UI5EntityCueCard.prototype.onclick = function(oEvent) {
	/*if ( oEvent.target && oEvent.target.nodeName == "A" ) {
		oEvent.preventDefault();
	}*/
	if ( this.getNavigable() ) {
		var sEntity = jQuery(oEvent.target).attr("data-sap-ui-entity");
		if ( sEntity && this.fireNavigate({entityName : sEntity}) ) {
			this.setEntityName(sEntity);
		} 
	}
};

sap.ui.demokit.UI5EntityCueCard.prototype._toggleExpanded = function() {
	this.setExpanded(!this.getExpanded());
};

sap.ui.demokit.UI5EntityCueCard.prototype._getDoc = function() {
	var sName = this.getEntityName();
	return sap.ui.demokit.EntityInfo.getEntityDocu(sName);
};

sap.ui.demokit.UI5EntityCueCard.createDialog = function() {
	jQuery.sap.require("sap.ui.commons.Button");
	jQuery.sap.require("sap.ui.commons.Dialog");
	jQuery.sap.require("sap.ui.commons.Toolbar");

	var oCueCard = new sap.ui.demokit.UI5EntityCueCard({
		collapsible : false,
		expanded : true,
		navigable: true
	});
    var oDialog = new sap.ui.commons.Dialog({
		title : "Cue Card",
		minWidth : "200px",
		minHeight : "200px",
		maxWidth : "75%",
		maxHeight : "75%",
		content : [
	        new sap.ui.commons.Toolbar({
	            standalone : false,
	        	items : [
	                new sap.ui.commons.Button({
	                    text : "Back",
	                    press : function() {
	                        oCueCard.back();
	                    }
	                }),
	                new sap.ui.commons.Button({
	                    text : "Fwd", 
	                    press : function() {
	                        oCueCard.forward();
	                    }
	                })
	            ]
	        }),
	        oCueCard
	    ]
    });
    oDialog.openForClass = function(sClassName) {
        oCueCard.setEntityName(sClassName);
        this.rerender();
        this.open();	
    };
    return oDialog;
};

sap.ui.demokit.UI5EntityCueCard.attachToContextMenu = function(oNode) {
	var oDialog;
    jQuery(oNode || window.document).bind("contextmenu.sapDkCueCd", function(e) {
        if ( e.shiftKey && e.ctrlKey )  {
            var oCtrl = jQuery(e.target).control(0);
            // if there is a control and if the control is not part of the cue card dialog
            if ( oCtrl && (!oDialog || !oDialog.getDomRef() || (oDialog.getDomRef() !== e.target && !jQuery.contains(oDialog.getDomRef(), e.target)) ) ) {
            	oDialog = oDialog || sap.ui.demokit.UI5EntityCueCard.createDialog();
                oDialog.openForClass(oCtrl.getMetadata().getName());
   	            e.preventDefault();
   	            e.stopPropagation();
            }
        }
    });
};

sap.ui.demokit.UI5EntityCueCard.detachFromContextMenu = function(oNode) {
    jQuery(oNode || window.document).unbind("contextmenu.sapDkCueCd");
};


/* 
 * TODOs
 *
 * - defaultValues
 * - method & event parameters
 * - styling
 * - integrate into snippix itself
 * - initial size
 */
}; // end of sap/ui/demokit/UI5EntityCueCard.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.UIAreaSubstitute') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ui.demokit.UIAreaSubstitute.
jQuery.sap.declare("sap.ui.demokit.UIAreaSubstitute");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained



/**
 * Constructor for a new UIAreaSubstitute.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the new UIAreaSubstitute
 * @extends sap.ui.core.Element
 *
 * @author  
 * @version 1.22.10
 *
 * @constructor   
 * @public
 * @name sap.ui.demokit.UIAreaSubstitute
 */
sap.ui.core.Element.extend("sap.ui.demokit.UIAreaSubstitute", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.ui.demokit",
	aggregatingType : "sap.ui.demokit/CodeSampleContainer",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.ui.demokit.UIAreaSubstitute with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ui.demokit.UIAreaSubstitute.extend
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content Area used for the running sample code
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ui.demokit.UIAreaSubstitute#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ui.demokit.UIAreaSubstitute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UIAreaSubstitute#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ui.demokit.UIAreaSubstitute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UIAreaSubstitute#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ui.demokit.UIAreaSubstitute#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ui.demokit.UIAreaSubstitute#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ui.demokit.UIAreaSubstitute#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ui.demokit.UIAreaSubstitute} <code>this</code> to allow method chaining
 * @public
 * @name sap.ui.demokit.UIAreaSubstitute#destroyContent
 * @function
 */


// Start of sap\ui\demokit\UIAreaSubstitute.js
///**
// * This file defines behavior for the control, 
// */
//sap.ui.demokit.UIAreaSubstitute.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/ui/demokit/UIAreaSubstitute.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.explored.Component') ) {
jQuery.sap.declare("sap.ui.demokit.explored.Component");


sap.ui.core.UIComponent.extend("sap.ui.demokit.explored.Component", {

	metadata : {
		includes : [
			"/css/style.css",
			"/css/titles.css"
		],
		routing : {
			config : {
				routerClass : sap.ui.demokit.explored.util.MyRouter,
				viewType : "XML",
				viewPath : "sap.ui.demokit.explored.view",
				targetControl : "splitApp",
				clearTarget : false
			},
			routes : [
				{
					pattern : "entity/{id}/{part}",
					name : "entity",
					view : "entity",
					viewLevel : 3,
					targetAggregation : "detailPages"
				},
				{
					pattern : "sample/{id}/preview",
					name : "sample",
					view : "sample",
					viewLevel : 4,
					targetAggregation : "detailPages"
				},
				{
					pattern : "sample/{id}/code",
					name : "code",
					view : "code",
					viewLevel : 5,
					targetAggregation : "detailPages",
					transition: "flip"
				},
				{
					pattern : "",
					name : "home",
					view : "master",
					viewLevel : 1,
					targetAggregation : "masterPages",
					subroutes : [
						{
							pattern : "{all*}",
							name : "notFound",
							view : "notFound",
							viewLevel : 2,
							targetAggregation : "detailPages"
						}
					]
				}
			]
		}
	},

	/**
	 * !!! The steps in here are sequence dependent !!!
	 */
	init : function () {

		// 1. some very generic requires
		jQuery.sap.require("sap.ui.demokit.explored.util.ObjectSearch");
		jQuery.sap.require("sap.ui.demokit.explored.util.MyRouter");
		jQuery.sap.require("sap.ui.core.routing.History");
		jQuery.sap.require("sap.m.InstanceManager");
		jQuery.sap.require("sap.m.routing.RouteMatchedHandler");

		// 2. call overridden init (calls createContent)
		sap.ui.core.UIComponent.prototype.init.apply(this, arguments);

		// 3. nav to initial pages
		var router = this.getRouter();
		if (!sap.ui.Device.system.phone) {
			router.myNavToWithoutHash("sap.ui.demokit.explored.view.master", "XML", true);
			router.myNavToWithoutHash("sap.ui.demokit.explored.view.welcome", "XML", false);
		}

		// 4. initialize the router
		this.routeHandler = new sap.m.routing.RouteMatchedHandler(router);
		router.initialize();
	},

	destroy : function () {
		
		if (this.routeHandler) {
			this.routeHandler.destroy();
		}
		
		// call overridden destroy
		sap.ui.core.UIComponent.prototype.destroy.apply(this, arguments);
	},

	/**
	 * 
	 */
	createContent : function () {

		// create root view
		var oView = sap.ui.view({
			id : "app",
			viewName : "sap.ui.demokit.explored.view.app",
			type : "JS",
			viewData : { component : this }
		});

		// set i18n model (must be done before data)
		var sPath = jQuery.sap.getModulePath("sap.ui.demokit.explored");
		var i18nModel = new sap.ui.model.resource.ResourceModel({
			bundleUrl : sPath + "/i18n/messageBundle.properties"
		});
		oView.setModel(i18nModel, "i18n");

		// set entity model
		var oEntData = {
			entityCount : sap.ui.demokit.explored.data.entityCount,
			entities : sap.ui.demokit.explored.data.entities
		};
		var oEntModel = new sap.ui.model.json.JSONModel(oEntData);
		oEntModel.setSizeLimit(100000);
		oView.setModel(oEntModel, "entity");

		// set filter model
		var oFilterData = sap.ui.demokit.explored.data.filter;
		var oFilterModel = new sap.ui.model.json.JSONModel(oFilterData);
		oFilterModel.setSizeLimit(100000);
		oView.setModel(oFilterModel, "filter");

		// set device model
		var deviceModel = new sap.ui.model.json.JSONModel({
			isTouch : sap.ui.Device.support.touch,
			isNoTouch : !sap.ui.Device.support.touch,
			isPhone : sap.ui.Device.system.phone,
			isNoPhone : !sap.ui.Device.system.phone,
			listMode : (sap.ui.Device.system.phone) ? "None" : "SingleSelectMaster",
			listItemType : (sap.ui.Device.system.phone) ? "Active" : "Inactive"
		});
		deviceModel.setDefaultBindingMode("OneWay");
		oView.setModel(deviceModel, "device");

		// done
		return oView;
	}
});
}; // end of sap/ui/demokit/explored/Component.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.DemokitApp') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */

// Main class for Demokit-like applications
jQuery.sap.declare("sap.ui.demokit.DemokitApp");



jQuery.sap.require('sap.ui.ux3.Shell'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.NavigationItem'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.DropdownBox'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.layout.AbsoluteLayout'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ListItem'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Splitter'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.search.OpenSearchProvider'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained


sap.ui.demokit.DemokitApp = function(sTitle, sVersion, aThemes) {
	
	var that=this;
	
	function basename(sPath) { 
		return sPath.split('/').slice(0,-1).join('/') + '/'; 
	}

	// Calculate Application Base HRef and Pathname
	var sBaseUrl = window.location.href;
	if (sBaseUrl.indexOf('#') >= 0) {
		// remove the hash from the URL (otherwise the URL + hash is used as base URL)
		sBaseUrl = sBaseUrl.slice(0, sBaseUrl.indexOf('#'));
	} 
	this.sBaseUrl = basename(sBaseUrl);
	this.sBasePathname = basename(window.location.pathname);
	this._iPendingCalls = 0;
	this._mBestMatchingPage = {};
	this._aTopLevelNavItems = [];
	this._aThemes = aThemes || ["sap_bluecrystal", "sap_goldreflection", "sap_hcb"];
	this._sTheme = this._aThemes[0]; // 'aThemes' must contain at least one theme
	this._sCurrentContent = null;
	this._mAliases = {};
	this._bIgnoreIFrameOnLoad = false;
	
	// view state
	this._sTitleStr = sTitle;
	this._sVersionStr = sVersion; 
	this._sSelectedWorkSetItem = null;

	// make this instance available statically 
	sap.ui.demokit.DemokitApp.getInstance = jQuery.sap.getter(this);
	
	jQuery(window).bind('hashchange', function() { 
		var sHash = window.location.hash; 
		jQuery.sap.log.debug("hashchange occured, current='" + oDemokit._sCurrentContent + "', new='" + sHash + "'");
		if ( sHash  &&  sHash != "#" + that._sCurrentContent ) {
			jQuery.sap.log.info("navigate to " + sHash);
			that.navigateTo(sHash, true);
		}
	});

};

sap.ui.demokit.DemokitApp.getInstance = function() {
	var oTopDemokit = jQuery.sap.getObject("top.sap.ui.demokit.DemokitApp");
	if ( oTopDemokit && oTopDemokit != sap.ui.demokit.DemokitApp ) {
		return oTopDemokit.getInstance();
	}
};

/**
 * Checks whether the given URL references a page within the demokit app.
 * If so, only the internal part of the path is returned, otherwise null.  
 */
sap.ui.demokit.DemokitApp.prototype.calcRelativeUrl = function (sUrl) {
	return sUrl.indexOf(this.sBaseUrl) == 0 ? sUrl.substring(this.sBaseUrl.length) : null; 
};

sap.ui.demokit.DemokitApp.prototype.registerPageForType = function(sUrl, aControls) {
	this._mBestMatchingPage[aControls[0]] = sUrl;
};

sap.ui.demokit.DemokitApp.prototype.findPageForType = function(sType) {
	return this._mBestMatchingPage[sType] || "docs/api/symbols/" + sType + ".html"
};

sap.ui.demokit.DemokitApp.prototype._addPendingCall = function() {
	this._iPendingCalls++;
};

sap.ui.demokit.DemokitApp.prototype._removePendingCall = function() {
	this._iPendingCalls--;
};

sap.ui.demokit.DemokitApp.prototype.addIndex = function(sId, oSettings) {
	oSettings = oSettings || {};
	
	var that = this;
	
	var oTLNItem = {
		id : "mi-" + sId,
		text : oSettings.caption || sId,
		newWindow : oSettings.newWindow,
		visible : (typeof oSettings.visible === "boolean") ? oSettings.visible : true,
		themable : oSettings.themable || false 
	};
	this._aTopLevelNavItems.push(oTLNItem);
	this._createWorksetItem(oTLNItem);
	if ( oSettings.index ) {
		if ( oSettings.extend ) {
			oSettings.extend(oSettings.index, function(oData){
				that._setIndexData(sId, oData);
			});
		}else{
			that._setIndexData(sId, oSettings.index);
		}
	} else if ( oSettings.url ) {
		this._loadIndexFromUrl(sId, oSettings.url, oSettings.transformer, oSettings.extend);
	}
};

sap.ui.demokit.DemokitApp.prototype._loadIndexFromUrl = function(sId, sUrl, fnTransformer, fnExtend) {
	var that = this;

	jQuery.ajax({
		url : sUrl, 
		dataType : sUrl.slice(-4) == ".xml" ? "xml" : "json",
		error : function(xhr, status, e) {
			that._removePendingCall();
			jQuery.sap.log.error("failed to load index '" + sId + "' from '" + sUrl + "': " + status + ", " + e); 
			var oTopLevelNavItem = that._findIndexById(sId);
			if ( oTopLevelNavItem ) {
				// TODO find better way to handle errors... NavigationItem unfortunately has no 'enabled' 
				oTopLevelNavItem.navItem.setVisible(false);
			}
		},
		success : function(oData, sStatus, oXHR) { 
			var oIndex = fnTransformer ? fnTransformer.call(this, oData) : oData;
			if ( fnExtend ) {
				fnExtend(oIndex, function(oData){
					that._removePendingCall();
					that._setIndexData(sId, oData);
				});
			}else{
				that._removePendingCall();
				that._setIndexData(sId, oIndex);
			}
		}
	});
	this._addPendingCall();
};

sap.ui.demokit.DemokitApp.prototype._setIndexData = function(sId, oIndex) {
	var that=this;
	
	var oTopLevelNavItem = this._findIndexById(sId);
	if ( oTopLevelNavItem ) {
		oTopLevelNavItem.ref = oIndex.ref;
		oTopLevelNavItem.links = oIndex;
		
		var iNodes=0;
			
		function processNode(oNode) {
			iNodes++;
			if ( oNode.ref && oNode.controls ) {
				var aControls = jQuery.isArray(oNode.controls) ? oNode.controls : oNode.controls.split(/,/); 
				that.registerPageForType(oNode.ref, aControls);
			}
			if ( oNode.alias && oNode.ref ) {
				var aAliases = oNode.alias.split(",");
				for(var i=0; i<aAliases.length; i++) {
					that._mAliases[aAliases[i]] = oNode.ref;
				}
			}
			if ( oNode.links ) {
				for(var i=0; i<oNode.links.length; i++){
					processNode(oNode.links[i]);
				}
			}
		}
		
		processNode(oIndex);
		oTopLevelNavItem._iTreeSize = iNodes;
		this._createNavigationTree(oTopLevelNavItem);
		oTopLevelNavItem.navItem.setEnabled(!!oTopLevelNavItem._oTree);
		oTopLevelNavItem.navItem.setHref(oIndex.ref);
	}
};

sap.ui.demokit.DemokitApp.prototype._findIndexById = function(sId) {
	for(var i=0; i<this._aTopLevelNavItems.length; i++) {
		var oTopLevelNavItem = this._aTopLevelNavItems[i];
		if ( oTopLevelNavItem.id === "mi-" + sId ) {
			return oTopLevelNavItem;
		}
	}
};

sap.ui.demokit.DemokitApp.prototype.getInitialPage = function(sDefaultPage, bSupportModuleSets) {

	var sInitialPage = sDefaultPage,
		sHash = window.location.hash,
		sModuleSet = jQuery.sap.getUriParameters().get("optimized-module-set");

	/**
	 * Checks whether the given URL is a valid relative URL within the current app
	 */
	function isRelativeUrl(sUrl) {
		return /^([a-zA-Z0-9-_]+\/)*[a-zA-Z0-9-_.]+\.html(#.*)?$/.test(sUrl);
	}
	
	if ( sHash ) {
		sHash = sHash.indexOf("#") === 0 ? sHash.substring(1) : sHash;
		if (isRelativeUrl(sHash)) {
			sInitialPage = sHash;
		}
	}

	if ( bSupportModuleSets && sModuleSet ) {
		sInitialPage = "customize.html?data=" + sModuleSet;
	}

	return sInitialPage;
}

sap.ui.demokit.DemokitApp.prototype.getPagesForCategory = function(sCategory) {
	var oTopLevelNavItem = this._findIndexById("controls"); // TODO get rid of hard coded index id
	if ( !oTopLevelNavItem || !oTopLevelNavItem.links ) {
		return sap.ui.demokit.DemokitApp.RETRY_LATER;
	}
	var aPaths = sCategory.split('/');
	var o = oTopLevelNavItem.links;
	for(var i=0; i<aPaths.length; i++) {
		var sPath = aPaths[i];
		for(var j=0; j<o.links.length; j++) {
			if ( sPath == o.links[j].text ) {
				break;
			}
		}
		if ( j==o.links.length ) {
			return [];
		}
		o=o.links[j];					
	}
	return o.links || [];
};

sap.ui.demokit.DemokitApp.RETRY_LATER = -2;

sap.ui.demokit.DemokitApp.prototype.findIndexForPage = function(sUrl) {
	
	function findURL(oNode, sUrl) {
		if ( sUrl && oNode.ref && sUrl.indexOf(oNode.ref) === 0 ) {
			return true;
		}
		if ( oNode.links ) {
			for(var i=0; i<oNode.links.length; i++) {
				if ( findURL(oNode.links[i], sUrl) ) {
					return true;
				}
			}
		}
		return false;
	}
	
	for(var i=0; i<this._aTopLevelNavItems.length; i++){
		if ( this._aTopLevelNavItems[i].links && findURL(this._aTopLevelNavItems[i].links, sUrl) ) {
			return i;
		}
	}

	if ( this._aTopLevelNavItems.length === 0 || this._iPendingCalls > 0 ) {
		// either no indexes have been added yet or some of them are still pending
		return sap.ui.demokit.DemokitApp.RETRY_LATER;
	} else {
		jQuery.sap.log.error("could not find " + sUrl + " in nav tree");
		return -1;
	}
};

sap.ui.demokit.DemokitApp.DEFAULT_TLN_ITEM = 0;

// ---- View ------------------------------------------------------

sap.ui.demokit.DemokitApp.prototype._createNavigationTree = function(oTopLevelNavItem) {
	
	var that=this;
	var iNodes=0;
	
	function selected(oEvent) {
		that.navigateTo(oEvent.getSource()._ref_);
	}
	
	function initLinks(oTarget, aLinks, iLevel) {
		for(var i=0; i<aLinks.length; i++){
			var oNode = new sap.ui.commons.TreeNode({
				text: aLinks[i].text, 
				tooltip: aLinks[i].tooltip, 
				expanded: iLevel<4, 
				selectable: !!aLinks[i].ref, 
				icon: aLinks[i].ico || null,
				selected: selected
			});
			oNode._ref_ = aLinks[i].ref;
			oTarget.addNode(oNode);
			iNodes++;
			if (aLinks[i].links && aLinks[i].links.length > 0) { 
				initLinks(oNode, aLinks[i].links, iLevel+1);
			}
		}
	};

	if (oTopLevelNavItem._oTree) return;
	
	var oTree = new sap.ui.commons.Tree(oTopLevelNavItem.id + "-index", {
		showHeader: true, 
		width: "100%", 
		height: "100%", 
		showHorizontalScrollbar: true
	});
	oTree.addStyleClass("sapUiTreeWithHeader");
	initLinks(oTree, oTopLevelNavItem.links.links, 0);
	oTopLevelNavItem._oTree = oTree;	
	oTopLevelNavItem._iTreeSize = iNodes;
};

sap.ui.demokit.DemokitApp.prototype._createWorksetItem = function(oTLNItem) {
	var oNavItem = oTLNItem.navItem = new sap.ui.ux3.NavigationItem({
		key: oTLNItem.id, 
		text: oTLNItem.text, 
		href: "#" + oTLNItem.ref,
		visible : oTLNItem.visible,
		enabled: false
	});
	oNavItem._itemData_ = oTLNItem;
	if ( this._oShell ) {
		this._oShell.addWorksetItem(oNavItem);
	}
};

sap.ui.demokit.DemokitApp.prototype.createUI = function(bSearchSupported, sInitialPage) {
	var bShowScrollBars;
	var that=this;
	var sIconPrefix = "theme/img/themeswitch_";
	var THEMES = sap.ui.demokit.DemokitApp.THEMES;
	
	this._oThemeSwitch = new sap.ui.commons.DropdownBox({
		change: [this._handleThemeChanged, this],
		items: jQuery.map(this._aThemes, function(sThemeId) { 
			return new sap.ui.core.ListItem({text: THEMES[sThemeId], key: sThemeId});
		}),
		value: THEMES[this._sTheme]
	});

	this._oThemeSwitchPopup = new sap.ui.ux3.ToolPopup({
		title:"Select a theme",
		icon:sIconPrefix+"regular.png", //TODO find a proper icon
		iconHover:sIconPrefix+"hover.png", //TODO find a proper icon
		iconSelected:sIconPrefix+"selected.png", //TODO find a proper icon
		content:[ this._oThemeSwitch ],
		initialFocus: this._oThemeSwitch
	});
	
	var oContent = new sap.ui.core.HTML("content", {
		content: "<iframe id=\"content\" name=\"content\" src=\"about:blank\" frameborder=\"0\" onload=\"sap.ui.demokit.DemokitApp.getInstance().onContentLoaded();\"></iframe>"
	});

	var oSidePanelLayout = this._oSidePanelLayout = new sap.ui.commons.layout.AbsoluteLayout();

	// TODO oSidePanelLayout.addContent(oDemokit._aTopLevelNavItems[0]._oTree, {top:"0", bottom:"0", left:"0", right:"0"});
	sap.ui.Device.os.name == sap.ui.Device.os.OS.IOS ? bShowScrollBars = true : bShowScrollBars = false;

	var oVersionInfo = new sap.ui.commons.Link({
		text: this._sVersionStr,
		tooltip: "Open Version Info",
		press: function() {
			that.navigateTo("versioninfo.html");
		}
	});
	
	var oShell = this._oShell = new sap.ui.ux3.Shell({
		appTitle: this._sTitleStr,
		showLogoutButton: false,
		showFeederTool: false,
		applyContentPadding: false,
		showSearchTool: bSearchSupported, 
		fullHeightContent: true,
		toolPopups: [ this._oThemeSwitchPopup ],
		search: function(oEvent){
			that.navigateTo("search.html?q=" + encodeURIComponent(oEvent.getParameter("text")));
			that._oShell._getSearchTool().close();
		},
		worksetItemSelected: function(oEvent){
			var oNavItem = oEvent.getParameter("item");
			if ( oNavItem.getEnabled() ) {
				var oItem = oNavItem._itemData_;
				// skip update of shell for new windows
				if (oItem.newWindow) {
					oEvent.preventDefault();
				}
				// navigate to the default reference
				that.navigateTo(oItem.ref, null, null, oItem.newWindow);
			} else {
				oEvent.preventDefault();
			}
		},
		content:[
			new sap.ui.commons.Splitter("demokitSplitter", {
				width:"100%",
				height:"100%",
				splitterPosition:"0%",
				splitterBarVisible:false,
				firstPaneContent:[oSidePanelLayout],
				secondPaneContent:[oContent],
				showScrollBars:bShowScrollBars
			})
		],
		headerItems:[oVersionInfo]
	});	

	this._oShell.addStyleClass("sapDkShell");
	
	if ( bSearchSupported ) {
		
		var oSearchField = oShell.getSearchField();
		oSearchField.setEnableListSuggest(true);
		oSearchField.setShowListExpander(false);
		oSearchField.setVisibleItemCount(5);
		oSearchField.setSearchProvider(new sap.ui.core.search.OpenSearchProvider({
			suggestType: "json",
			suggestUrl: "suggest?q={searchTerms}"
		}));
	
		// request top keywords
		jQuery.ajax({
			url : "keywords?kind=tags&max=50",
			dataType : "json",
			success : function(data, status, xhr) { 
				if ( data && data[0] && data[0].success && data[0].keywords && data[0].keywords.length ) {
					addTagCloud(data[0].keywords);
					oSearchField.setWidth("80%");
				}
			} 
		})
			
		function addTagCloud(aKeywords) {
			
			var oTagCloud = new sap.ui.demokit.TagCloud({
				minFontSize:15, 
				maxFontSize:30,
				press : function (oEvent) {
					var term = sap.ui.getCore().byId(oEvent.getParameter("tagId")).getText();
					oShell.fireSearch({text : term});
				}
			}).addStyleClass("grTagCloud");
			for(var i=0; i<aKeywords.length; i++) {
				oTagCloud.addTag(new sap.ui.demokit.Tag({ text : aKeywords[i].tag, weight : aKeywords[i].score }));
			}
			
			// enhance the original search tool
			oShell._getSearchTool && oShell._getSearchTool().addContent(oTagCloud);
		}
		
	}

	jQuery.each(this._aTopLevelNavItems, function(i, oTLNItem) {
		oShell.addWorksetItem(oTLNItem.navItem);
	});

	this.navigateTo(sInitialPage);
	
	jQuery(function(){
		jQuery("body").append("<div id=\"logo\"><img id=\"logoico\"><img id=\"logotxt\"></div>");
		jQuery("#logoico").attr("src", "resources/sap/ui/core/mimes/logo/icotxt_white_220x72_blue.png").addClass("sapUiImg");
		//jQuery("#logotxt").attr("src", "resources/sap/ui/core/mimes/logo/txtonly_32x32.png").addClass("sapUiImg");
	});
};

sap.ui.demokit.DemokitApp.prototype.placeAt = function(sId) {
	this._oShell.placeAt(sId);
};

// ---- controller ----------------------------------------------------

// Listen to IFrame load
sap.ui.demokit.DemokitApp.prototype.onContentLoaded = function (e) {
	
	var oContentWindow = jQuery("#content")[0].contentWindow;
	var sIFrameContent = this.calcRelativeUrl(oContentWindow.location.href);
	if(sIFrameContent && !this._bIgnoreIFrameOnLoad){
		this.navigateTo(sIFrameContent, true, true);
		window.location.replace("#"+sIFrameContent);
	}
	this._applyTheme();
	this._bIgnoreIFrameOnLoad = false;

	jQuery(oContentWindow).bind("hashchange", function() {
		var sIFrameContent = this.calcRelativeUrl(oContentWindow.location.href);
		if(sIFrameContent && !this._bIgnoreIFrameOnLoad){
			this.navigateTo(sIFrameContent, true, true);
			window.location.hash = sIFrameContent;
		}
		this._bIgnoreIFrameOnLoad = false;
	});
	
};


sap.ui.demokit.DemokitApp.prototype.navigateTo = function(sName, bSkipSetHash, bSkipSwitchLocation, bNewWindow) {
	
	var that = this;
	
	// normalize page name (from hash)
	var sPageName = sName.indexOf("#") === 0 ? sName.substring(1) : sName;
	// resolve aliases
	var sResolvedPageName = this._mAliases[sPageName];
	if(sResolvedPageName && sPageName != sResolvedPageName){
		bSkipSwitchLocation = false;
		sPageName = sResolvedPageName;
	}
	
	if (this._sCurrentContent == sPageName) {
		return;
	}

	var oContent = jQuery("#content")[0];
	var oContentWindow = oContent && oContent.contentWindow;
	var topNavIdx = this.findIndexForPage(sPageName);

	// open in new window and do nothing else
	if (bNewWindow) {
		window.open(sPageName, "_blank");
		return;
	}

	// postpone navigation if either rendering did not happen yet or indexes are not yet loaded 
	if ( !oContentWindow || topNavIdx === sap.ui.demokit.DemokitApp.RETRY_LATER ) {
		setTimeout(function() {
			that.navigateTo(sPageName, bSkipSetHash, bSkipSwitchLocation);
		}, 200);
		return;
	}
		
	var oNewTLNItem = topNavIdx >= 0 ? this._aTopLevelNavItems[topNavIdx] : null;
	var oShell = this._oShell;
	var oSplitter = sap.ui.getCore().byId("demokitSplitter");
	if ( oNewTLNItem && oNewTLNItem._iTreeSize <= 1 ) {
		if (oSplitter.getSplitterBarVisible()) {
			var sOldPos = oSplitter.getSplitterPosition();
			if (sOldPos !== "0%") {
				oSplitter._oldPos = sOldPos;
				oSplitter.setSplitterPosition("0%");
			}
			oSplitter.setSplitterBarVisible(false);
		}
	} else {
		if (!oSplitter.getSplitterBarVisible()) {
			var sOldPos = oSplitter._oldPos || "20%";
			oSplitter.setSplitterPosition(sOldPos);
			oSplitter.setSplitterBarVisible(true);
		}
	}
	
	this._sCurrentContent = sPageName;

	function findAndSelectTreeNode(sPageName, oParent, bClearSelection) {
		if ( oParent ) {
			if(bClearSelection && oParent.getSelectedNode && oParent.getSelectedNode()) {
				oParent.getSelectedNode().setIsSelected(false);
			}
			var aNodes = oParent.getNodes();
			for(var i=0; i<aNodes.length; i++){
				if(aNodes[i]._ref_ && aNodes[i]._ref_.indexOf(sPageName) >= 0){
					aNodes[i].setIsSelected(true);
					var par = oParent;
					while(par instanceof sap.ui.commons.TreeNode){
						par.expand();
						par = par.getParent();
					}
					return aNodes[i];
				}else{
					var node = findAndSelectTreeNode(sPageName, aNodes[i], false);
					if(node) return node;
				}
			}
		}
		return null;
	}

	//Update Top Level Navigation and Navigation Tree
	var oSelectedNavEntry = null;
	var oNewNavItem = oNewTLNItem && oNewTLNItem.navItem;
	if ( oNewNavItem && this._sSelectedWorkSetItem != oNewNavItem.getId() ) {
		oNewNavItem.setVisible(true);
		oShell.setSelectedWorksetItem(oNewNavItem);
		this._oSidePanelLayout.removeAllContent();
		if ( oNewTLNItem._oTree ) {
			this._oSidePanelLayout.addContent(oNewTLNItem._oTree);
		}
		oSelectedNavEntry = findAndSelectTreeNode(sPageName, oNewTLNItem._oTree, true);

		//Hide/Show Theme Switch
		if ( oNewTLNItem.themable ) {
			if(oShell.getToolPopups().length == 0){
				oShell.addToolPopup(this._oThemeSwitchPopup );
			}
		} else {
			oShell.removeAllToolPopups();
		}
	} else {
		oSelectedNavEntry = findAndSelectTreeNode(sPageName, this._oSidePanelLayout.getContent()[0], true);
		//If no entry is found, try again without hash
		if (!oSelectedNavEntry && sPageName.indexOf("#") > 0) {
			var sShortName = sPageName.substr(0, sPageName.indexOf("#") - 1);
			oSelectedNavEntry = findAndSelectTreeNode(sShortName, this._oSidePanelLayout.getContent()[0]);
		}

	}

	sap.ui.getCore().applyChanges();
	this._sSelectedWorkSetItem = oShell.getSelectedWorksetItem();

	// Update IFrame content and URL hash
	if(!bSkipSetHash) {
		window.location.hash = sPageName;
	}
	
	if(!bSkipSwitchLocation){
		
		bIgnoreIFrameOnLoad = true;
		
		// set fakeOS for mobile test pages (BUT not for mobile demo apps)
		var isMobilePage = sPageName && sPageName.match(/\/sap\/me?\//);
		var isMobileDemoApp = sPageName && sPageName.indexOf("sap/m/demokit") !== -1;
		var sFakeOS = (isMobilePage && !isMobileDemoApp) ? "?sap-ui-xx-fakeOS=ios" : "";
		
		oContentWindow.location.replace((sPageName.indexOf("/") == 0 ? "" : this.sBasePathname) + sPageName + sFakeOS);
	}

}

sap.ui.demokit.DemokitApp.THEMES = {
	"sap_bluecrystal" : "Blue Crystal",
	"sap_goldreflection" : "Gold Reflection",
	"sap_hcb" : "High Contrast Black"
};

sap.ui.demokit.DemokitApp.prototype._handleThemeChanged = function(oEvent) {
	var newTheme = oEvent.getParameter("newValue");
	for(var x in sap.ui.demokit.DemokitApp.THEMES){
		if(sap.ui.demokit.DemokitApp.THEMES[x] == newTheme){
			this._sTheme = x;
			this._applyTheme();
			oEvent.getSource().getParent().close();
			break;
		}
	}
}

sap.ui.demokit.DemokitApp.prototype._applyTheme = function() {
	var oContentWindow = jQuery("#content")[0].contentWindow;
	var sIFrameContent = this.calcRelativeUrl(oContentWindow.location.href);
	var topNavIdx = sIFrameContent ? this.findIndexForPage(sIFrameContent) : -1;

	if (sIFrameContent 
			&& topNavIdx >= 0 && this._aTopLevelNavItems[topNavIdx].themable 
			&& oContentWindow 
			&& oContentWindow.sap 
			&& oContentWindow.sap.ui
			&& oContentWindow.sap.ui.getCore ) {
		
		//Find supported themes
		var isMobilePage = sIFrameContent.match(/\/sap\/me?\//);
		var aSupportedThemes = oContentWindow.sap.ui.demokit && oContentWindow.sap.ui.demokit._supportedThemes ? oContentWindow.sap.ui.demokit._supportedThemes : isMobilePage ? ["sap_bluecrystal"] : this._aThemes;
		
		//Update theme switch 
		var aItems = this._oThemeSwitch.getItems();
		for(var i=0; i<aItems.length; i++) {
			aItems[i].setEnabled(jQuery.inArray(aItems[i].getKey(), aSupportedThemes) >= 0);
		}
		
		//Current theme is not supported -> Use a different one 
		if(jQuery.inArray(this._sTheme, aSupportedThemes) < 0) {
			this._sTheme = aSupportedThemes[0];
			this._oThemeSwitch.setValue(sap.ui.demokit.DemokitApp.THEMES[this._sTheme]); 
		}

		oContentWindow.sap.ui.getCore().applyTheme(this._sTheme);
	} 
};


(function() {
	
	function resolve(oLink, sLibUrl){
		if(oLink.ref && oLink.resolve === "lib"){
			oLink.ref = sLibUrl + oLink.ref;
		}
		if(oLink.links){
			for(var i=0; i<oLink.links.length; i++){
				resolve(oLink.links[i], sLibUrl);
			}
		}
	}
	
	function merge(oNode1, oNode2){
		if(oNode1.key != oNode2.key || !oNode2.links || oNode2.links.length == 0){
			return;
		}
		if(!oNode1.links){
			oNode1.links = oNode2.links;
			return;
		}
		
		function findNodeWithKey(oNode, key){
			for(var i=0; i<oNode.links.length; i++){
				if(oNode.links[i].key === key){
					return oNode.links[i];
				}
			}
			return null;
		}
		
		var oSubNode;
		
		for(var i=0; i<oNode2.links.length; i++){
			oSubNode = oNode2.links[i];
			if(!oSubNode.key){
				oNode1.links.push(oSubNode);
			}else{
				var oNode = findNodeWithKey(oNode1, oSubNode.key);
				if(oNode){
					merge(oNode, oSubNode);
				}else{
					oNode1.links.push(oSubNode);
				}
			}
		}
	}
	
	function finalize(oIndexData, fnCallback, aLibs, oDocIndices){
		for(var j=0; j<aLibs.length; j++){
			var oData = oDocIndices[aLibs[j]];
			if(oData && oData.docu){
				resolve(oData.docu, oData.libraryUrl);
				merge(oIndexData, oData.docu);
			}
		}
		
		fnCallback(oIndexData);
	}
	
	sap.ui.demokit.DemokitApp.addReleaseNotesToDevGuide = function(oIndexData, sUrl, sTitle, iLevel) {
		if(!sUrl){
			sUrl = "docs/guide/relnotes/ReleaseNotes.html";
		}
		if(!sTitle){
			sTitle = "Release Notes";
		}
		if(!iLevel){
			iLevel = 1;
		}
		
		function firstChild(node){
			if(node && node.links && node.links.length > 0){
				return node.links[0];
			}
			return null;
		}
		
		var oIndex = oIndexData;
		for(var i=0; i<iLevel; i++){
			oIndex = firstChild(oIndex);
		}
		
		if(oIndex && oIndex.links){
			oIndex.links.push({ref: sUrl, text: sTitle, alias: "docs/guide/ReleaseNotes.html"});
		}
		
		return oIndexData;
	}
	
	sap.ui.demokit.DemokitApp.extendDevGuide = function(oIndexData, fnCallback) {
		jQuery.sap.require("sap.ui.core.util.LibraryInfo");
		var libInfo = new sap.ui.core.util.LibraryInfo();
		var sUrl = "discovery/all_libs";
		
		jQuery.ajax({
			url : sUrl,
			dataType : "json",
			error : function(xhr, status, e) {
				jQuery.sap.log.error("failed to load library list from '" + sUrl + "': " + status + ", " + e); 
				fnCallback(oIndexData);
			},
			success : function(oData, sStatus, oXHR) { 
				var libs = oData["all_libs"];
				if(!libs){
					jQuery.sap.log.error("failed to load library list from '" + sUrl + "': " + sStatus + ", Data: " + libs); 
					fnCallback(oIndexData);
					return;
				}
				
				var count = 0,
					len = libs.length,
					oDocIndices = {},
					aLibs = [],
					libName;
				for(var i=0; i<len; i++){
					libName = libs[i].entry.replace(/\//g, ".");
					aLibs.push(libName);
					libInfo._getDocuIndex(libName, function(oExtensionData){
						oDocIndices[oExtensionData.library] = oExtensionData;
						count++;
						if(count == len) {
							finalize(oIndexData, fnCallback, aLibs, oDocIndices);
						}
					});
				}
			}
		});
	}

})();

}; // end of sap/ui/demokit/DemokitApp.js
if ( !jQuery.sap.isDeclared('sap.ui.demokit.IndexPage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP AG or an SAP affiliate company. 
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
// Provides a pseudo control for index pages within the Demokit
jQuery.sap.declare("sap.ui.demokit.IndexPage");


sap.ui.demokit.IndexPage = function(sCategory) {
	var oDemokit = sap.ui.demokit.DemokitApp.getInstance(),
		iHierarchyLevel = 3, 
		iCols;
	
	function suffix(s,n) {
		return s.split('/').slice(-n-1).join('/');
	}
	
	this.oDemokit = oDemokit;
	this.sPathToRoot = suffix("../../../../../../../", iHierarchyLevel);
	this.sRootUrl = window.location.pathname.split('/').slice(-iHierarchyLevel-1,-1).join('/') + '/';	
	this.sColor = "Blue";
	this.oHexGroup = new sap.ui.demokit.HexagonButtonGroup({colspan: (iCols || 5)});
	if ( sCategory && oDemokit ) {
		var aPages = oDemokit.getPagesForCategory(sCategory);
		for(var i=0;i<aPages.length; i++) {
			this.add(true, aPages[i].text, '', this.sPathToRoot + aPages[i].ico, undefined, aPages[i].ref);
		}
	}
};

sap.ui.demokit.IndexPage.prototype.add = function add(bEnabled, sControl, sTooltip, sIcon, sLibrary, sRef) {

	var that = this,
		oButton;
	
	if ( typeof bEnabled !== "boolean" ) {
		sRef = sLibrary;
		sLibrary = sIcon;
		sIcon = sTooltip;
		sTooltip = sControl;
		sControl = bEnabled;
		bEnabled = true;
	}
	
	sRef = sRef || this.sRootUrl + sControl + '.html';
	if ( !sLibrary ) {
		sLibrary = "sap.ui.commons";
	}

	if ( !sTooltip ) {
		if ( bEnabled ) {
			sTooltip = "A short tutorial that explains how to use the " + sControl + ". Click to start it.";
		} else {
			sTooltip = "Here you should find a tutorial for the " + sControl + ". Unfortunately we didn't write it in time. Please hover back soon ;-)";
		}
	}

	oButton = new sap.ui.demokit.HexagonButton({
		enabled: bEnabled,
		color: "Gray",//this.sColor,
		tooltip : new sap.ui.commons.RichTooltip({
			title : sControl, // TODO + " - " + sLibrary,
			imageSrc : sIcon ? sIcon : (bEnabled ? "" : this.sPathToRoot + "theme/img/Under-construction.png"),
			text : sTooltip
		}),
		press: function() {
			that.oDemokit.navigateTo(sRef);
		}
	});
	if ( sIcon ){
		oButton.setIcon(sIcon);
	}
	this.oHexGroup.addButton(oButton);

	return this;
};

sap.ui.demokit.IndexPage.prototype.placeAt = function(sId) {
	this.oHexGroup.placeAt(sId);
	jQuery(function() {
		if ( jQuery("#vistaico-license").size() == 0 ) {
			jQuery("body").append('<div id="vistaico-license" class="license">Some icon(s) created by <a class="sapUiDemokitLink" href="http://VistaICO.com" target="_blank">VistaICO.com</a> and <a class="sapUiDemokitLink" href="http://www.iconarchive.com/artist/fatcow.html" target="_blank">Fatcow Web Hosting</a>,	used under Creative Commons 3.0 Attribution Unported license</div>');
		}
	});
};

}; // end of sap/ui/demokit/IndexPage.js
